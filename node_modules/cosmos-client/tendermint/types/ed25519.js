"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var nacl = __importStar(require("tweetnacl"));
/**
 * ed25519
 */
var PrivKeyEd25519 = /** @class */ (function () {
    /**
     *
     * @param privKey
     */
    function PrivKeyEd25519(privKey) {
        var keypair = nacl.sign.keyPair.fromSeed(new Uint8Array(privKey));
        this.pubKey = new PubKeyEd25519(Buffer.from(keypair.publicKey));
        this.privKey = privKey;
    }
    /**
     *
     */
    PrivKeyEd25519.prototype.getPubKey = function () {
        return this.pubKey;
    };
    /**
     *
     * @param message
     */
    PrivKeyEd25519.prototype.sign = function (message) {
        var keypair = nacl.sign.keyPair.fromSeed(new Uint8Array(this.privKey));
        return Buffer.from(nacl.sign(new Uint8Array(message), new Uint8Array(keypair.secretKey)));
    };
    /**
     *
     */
    PrivKeyEd25519.prototype.toBuffer = function () {
        return Buffer.from(this.privKey);
    };
    /**
     *
     */
    PrivKeyEd25519.prototype.toBase64 = function () {
        return this.privKey.toString("base64");
    };
    PrivKeyEd25519.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     * @param value
     */
    PrivKeyEd25519.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PrivKeyEd25519(buffer);
    };
    PrivKeyEd25519.fromJSON = function (value) {
        return PrivKeyEd25519.fromBase64(value);
    };
    return PrivKeyEd25519;
}());
exports.PrivKeyEd25519 = PrivKeyEd25519;
/**
 * ed25519
 */
var PubKeyEd25519 = /** @class */ (function () {
    /**
     *
     * @param pubKey
     */
    function PubKeyEd25519(pubKey) {
        this.pubKey = pubKey;
    }
    PubKeyEd25519.prototype.getAddress = function () {
        var hash = crypto.createHash("sha256").update(this.pubKey).digest();
        return hash.subarray(0, 20);
    };
    /**
     * message is not needed
     * @param signature
     */
    PubKeyEd25519.prototype.verify = function (signature) {
        return (nacl.sign.open(new Uint8Array(signature), new Uint8Array(this.pubKey)) !==
            null);
    };
    /**
     *
     */
    PubKeyEd25519.prototype.toBuffer = function () {
        return Buffer.from(this.pubKey);
    };
    /**
     *
     */
    PubKeyEd25519.prototype.toBase64 = function () {
        return this.pubKey.toString("base64");
    };
    PubKeyEd25519.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     */
    PubKeyEd25519.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PubKeyEd25519(buffer);
    };
    PubKeyEd25519.fromJSON = function (value) {
        return PubKeyEd25519.fromBase64(value);
    };
    return PubKeyEd25519;
}());
exports.PubKeyEd25519 = PubKeyEd25519;
