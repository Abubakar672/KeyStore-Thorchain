"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var sr25519 = __importStar(require("sr25519"));
/**
 * sr25519
 */
var PrivKeySr25519 = /** @class */ (function () {
    /**
     *
     * @param privKey
     */
    function PrivKeySr25519(privKey) {
        var keypair = sr25519.keypair_from_seed(new Uint8Array(privKey));
        this.pubKey = new PubKeySr25519(Buffer.from(keypair.slice(64, 96)));
        this.privKey = privKey;
    }
    /**
     *
     */
    PrivKeySr25519.prototype.getPubKey = function () {
        return this.pubKey;
    };
    /**
     *
     * @param message
     */
    PrivKeySr25519.prototype.sign = function (message) {
        var keypair = sr25519.keypair_from_seed(new Uint8Array(this.privKey));
        var privKey = keypair.slice(0, 64);
        return Buffer.from(sr25519.sign(Uint8Array.from([]), this.pubKey.toBuffer(), privKey, message));
    };
    /**
     *
     */
    PrivKeySr25519.prototype.toBuffer = function () {
        return Buffer.from(this.privKey);
    };
    /**
     *
     */
    PrivKeySr25519.prototype.toBase64 = function () {
        return this.privKey.toString("base64");
    };
    PrivKeySr25519.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     * @param value
     */
    PrivKeySr25519.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PrivKeySr25519(buffer);
    };
    PrivKeySr25519.fromJSON = function (value) {
        return PrivKeySr25519.fromBase64(value);
    };
    return PrivKeySr25519;
}());
exports.PrivKeySr25519 = PrivKeySr25519;
/**
 * sr25519
 */
var PubKeySr25519 = /** @class */ (function () {
    /**
     *
     * @param pubKey
     */
    function PubKeySr25519(pubKey) {
        this.pubKey = pubKey;
    }
    PubKeySr25519.prototype.getAddress = function () {
        var hash = crypto.createHash("sha256").update(this.pubKey).digest();
        return hash.subarray(0, 20);
    };
    /**
     *
     * @param message
     * @param signature
     */
    PubKeySr25519.prototype.verify = function (signature, message) {
        return sr25519.verify(Uint8Array.from([]), new Uint8Array(signature), new Uint8Array(message), new Uint8Array(this.pubKey));
    };
    /**
     *
     */
    PubKeySr25519.prototype.toBuffer = function () {
        return Buffer.from(this.pubKey);
    };
    /**
     *
     */
    PubKeySr25519.prototype.toBase64 = function () {
        return this.pubKey.toString("base64");
    };
    PubKeySr25519.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     */
    PubKeySr25519.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PubKeySr25519(buffer);
    };
    PubKeySr25519.fromJSON = function (value) {
        return PubKeySr25519.fromBase64(value);
    };
    return PubKeySr25519;
}());
exports.PubKeySr25519 = PubKeySr25519;
