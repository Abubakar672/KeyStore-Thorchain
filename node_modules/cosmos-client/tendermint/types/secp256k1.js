"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = __importStar(require("crypto"));
var secp256k1 = __importStar(require("tiny-secp256k1"));
/**
 * secp256k1
 */
var PrivKeySecp256k1 = /** @class */ (function () {
    /**
     *
     * @param privKey
     */
    function PrivKeySecp256k1(privKey) {
        this.pubKey = new PubKeySecp256k1(secp256k1.pointFromScalar(privKey));
        this.privKey = privKey;
    }
    /**
     *
     */
    PrivKeySecp256k1.prototype.getPubKey = function () {
        return this.pubKey;
    };
    /**
     *
     * @param message
     */
    PrivKeySecp256k1.prototype.sign = function (message) {
        var hash = crypto.createHash("sha256").update(message).digest();
        var signature = secp256k1.sign(hash, this.privKey);
        return signature;
    };
    /**
     *
     */
    PrivKeySecp256k1.prototype.toBuffer = function () {
        return Buffer.from(this.privKey);
    };
    /**
     *
     */
    PrivKeySecp256k1.prototype.toBase64 = function () {
        return this.privKey.toString("base64");
    };
    PrivKeySecp256k1.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     * @param value
     */
    PrivKeySecp256k1.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PrivKeySecp256k1(buffer);
    };
    PrivKeySecp256k1.fromJSON = function (value) {
        return PrivKeySecp256k1.fromBase64(value);
    };
    return PrivKeySecp256k1;
}());
exports.PrivKeySecp256k1 = PrivKeySecp256k1;
/**
 * secp256k1公開鍵。
 */
var PubKeySecp256k1 = /** @class */ (function () {
    /**
     *
     * @param pubKey
     */
    function PubKeySecp256k1(pubKey) {
        this.pubKey = pubKey;
    }
    PubKeySecp256k1.prototype.hash160 = function (buffer) {
        var sha256Hash = crypto
            .createHash("sha256")
            .update(buffer)
            .digest();
        try {
            return crypto.createHash("rmd160").update(sha256Hash).digest();
        }
        catch (err) {
            return crypto.createHash("ripemd160").update(sha256Hash).digest();
        }
    };
    PubKeySecp256k1.prototype.getAddress = function () {
        return this.hash160(this.pubKey);
    };
    /**
     *
     * @param message
     * @param signature
     */
    PubKeySecp256k1.prototype.verify = function (signature, message) {
        var hash = crypto.createHash("sha256").update(message).digest();
        return secp256k1.verify(hash, signature, this.pubKey);
    };
    /**
     *
     */
    PubKeySecp256k1.prototype.toBuffer = function () {
        return Buffer.from(this.pubKey);
    };
    /**
     *
     */
    PubKeySecp256k1.prototype.toBase64 = function () {
        return this.pubKey.toString("base64");
    };
    PubKeySecp256k1.prototype.toJSONInCodec = function () {
        return this.toBase64();
    };
    /**
     *
     */
    PubKeySecp256k1.fromBase64 = function (value) {
        var buffer = Buffer.from(value, "base64");
        return new PubKeySecp256k1(buffer);
    };
    PubKeySecp256k1.fromJSON = function (value) {
        return PubKeySecp256k1.fromBase64(value);
    };
    return PubKeySecp256k1;
}());
exports.PubKeySecp256k1 = PubKeySecp256k1;
