/**
 * Gaia-Lite for Cosmos
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration";
import { AxiosPromise, AxiosInstance } from "axios";
import { RequestArgs, BaseAPI } from "./base";
/**
 *
 * @export
 * @interface BaseReq
 */
export interface BaseReq {
    /**
     * Sender address or Keybase name to generate a transaction
     * @type {string}
     * @memberof BaseReq
     */
    from?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    memo?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    chain_id?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    account_number?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    sequence?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    gas?: string;
    /**
     *
     * @type {string}
     * @memberof BaseReq
     */
    gas_adjustment?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof BaseReq
     */
    fees?: Array<Coin>;
    /**
     * Estimate gas for a transaction (cannot be used in conjunction with generate_only)
     * @type {boolean}
     * @memberof BaseReq
     */
    simulate?: boolean;
}
/**
 *
 * @export
 * @interface Block
 */
export interface Block {
    /**
     *
     * @type {BlockHeader}
     * @memberof Block
     */
    header?: BlockHeader;
    /**
     *
     * @type {Array<string>}
     * @memberof Block
     */
    txs?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Block
     */
    evidence?: Array<string>;
    /**
     *
     * @type {BlockLastCommit}
     * @memberof Block
     */
    last_commit?: BlockLastCommit;
}
/**
 *
 * @export
 * @interface BlockHeader
 */
export interface BlockHeader {
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    chain_id?: string;
    /**
     *
     * @type {number}
     * @memberof BlockHeader
     */
    height?: number;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    time?: string;
    /**
     *
     * @type {number}
     * @memberof BlockHeader
     */
    num_txs?: number;
    /**
     *
     * @type {BlockID}
     * @memberof BlockHeader
     */
    last_block_id?: BlockID;
    /**
     *
     * @type {number}
     * @memberof BlockHeader
     */
    total_txs?: number;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    last_commit_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    data_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    validators_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    next_validators_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    consensus_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    app_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    last_results_hash?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeader
     */
    evidence_hash?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof BlockHeader
     */
    proposer_address?: string;
    /**
     *
     * @type {BlockHeaderVersion}
     * @memberof BlockHeader
     */
    version?: BlockHeaderVersion;
}
/**
 *
 * @export
 * @interface BlockHeaderVersion
 */
export interface BlockHeaderVersion {
    /**
     *
     * @type {string}
     * @memberof BlockHeaderVersion
     */
    block?: string;
    /**
     *
     * @type {string}
     * @memberof BlockHeaderVersion
     */
    app?: string;
}
/**
 *
 * @export
 * @interface BlockID
 */
export interface BlockID {
    /**
     *
     * @type {string}
     * @memberof BlockID
     */
    hash?: string;
    /**
     *
     * @type {BlockIDParts}
     * @memberof BlockID
     */
    parts?: BlockIDParts;
}
/**
 *
 * @export
 * @interface BlockIDParts
 */
export interface BlockIDParts {
    /**
     *
     * @type {number}
     * @memberof BlockIDParts
     */
    total?: number;
    /**
     *
     * @type {string}
     * @memberof BlockIDParts
     */
    hash?: string;
}
/**
 *
 * @export
 * @interface BlockLastCommit
 */
export interface BlockLastCommit {
    /**
     *
     * @type {BlockID}
     * @memberof BlockLastCommit
     */
    block_id?: BlockID;
    /**
     *
     * @type {Array<BlockLastCommitPrecommits>}
     * @memberof BlockLastCommit
     */
    precommits?: Array<BlockLastCommitPrecommits>;
}
/**
 *
 * @export
 * @interface BlockLastCommitPrecommits
 */
export interface BlockLastCommitPrecommits {
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    validator_address?: string;
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    validator_index?: string;
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    height?: string;
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    round?: string;
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    timestamp?: string;
    /**
     *
     * @type {number}
     * @memberof BlockLastCommitPrecommits
     */
    type?: number;
    /**
     *
     * @type {BlockID}
     * @memberof BlockLastCommitPrecommits
     */
    block_id?: BlockID;
    /**
     *
     * @type {string}
     * @memberof BlockLastCommitPrecommits
     */
    signature?: string;
}
/**
 *
 * @export
 * @interface BlockQuery
 */
export interface BlockQuery {
    /**
     *
     * @type {BlockQueryBlockMeta}
     * @memberof BlockQuery
     */
    block_meta?: BlockQueryBlockMeta;
    /**
     *
     * @type {Block}
     * @memberof BlockQuery
     */
    block?: Block;
}
/**
 *
 * @export
 * @interface BlockQueryBlockMeta
 */
export interface BlockQueryBlockMeta {
    /**
     *
     * @type {BlockHeader}
     * @memberof BlockQueryBlockMeta
     */
    header?: BlockHeader;
    /**
     *
     * @type {BlockID}
     * @memberof BlockQueryBlockMeta
     */
    block_id?: BlockID;
}
/**
 *
 * @export
 * @interface BroadcastTxCommitResult
 */
export interface BroadcastTxCommitResult {
    /**
     *
     * @type {CheckTxResult}
     * @memberof BroadcastTxCommitResult
     */
    check_tx?: CheckTxResult;
    /**
     *
     * @type {DeliverTxResult}
     * @memberof BroadcastTxCommitResult
     */
    deliver_tx?: DeliverTxResult;
    /**
     *
     * @type {string}
     * @memberof BroadcastTxCommitResult
     */
    txhash?: string;
    /**
     *
     * @type {number}
     * @memberof BroadcastTxCommitResult
     */
    height?: number;
}
/**
 *
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    ordering?: string;
    /**
     *
     * @type {ChannelCounterparty}
     * @memberof Channel
     */
    counterparty?: ChannelCounterparty;
    /**
     *
     * @type {Array<string>}
     * @memberof Channel
     */
    connection_hops?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    version?: string;
}
/**
 *
 * @export
 * @interface ChannelCounterparty
 */
export interface ChannelCounterparty {
    /**
     *
     * @type {string}
     * @memberof ChannelCounterparty
     */
    port_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelCounterparty
     */
    channel_id?: string;
}
/**
 *
 * @export
 * @interface ChannelResponse
 */
export interface ChannelResponse {
    /**
     *
     * @type {Channel}
     * @memberof ChannelResponse
     */
    channel?: Channel;
    /**
     *
     * @type {Proof}
     * @memberof ChannelResponse
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof ChannelResponse
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof ChannelResponse
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface CheckTxResult
 */
export interface CheckTxResult {
    /**
     *
     * @type {number}
     * @memberof CheckTxResult
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof CheckTxResult
     */
    data?: string;
    /**
     *
     * @type {number}
     * @memberof CheckTxResult
     */
    gas_used?: number;
    /**
     *
     * @type {number}
     * @memberof CheckTxResult
     */
    gas_wanted?: number;
    /**
     *
     * @type {string}
     * @memberof CheckTxResult
     */
    info?: string;
    /**
     *
     * @type {string}
     * @memberof CheckTxResult
     */
    log?: string;
    /**
     *
     * @type {Array<KVPair>}
     * @memberof CheckTxResult
     */
    tags?: Array<KVPair>;
}
/**
 *
 * @export
 * @interface ClientConnectionsResponse
 */
export interface ClientConnectionsResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof ClientConnectionsResponse
     */
    connection_paths?: Array<string>;
    /**
     *
     * @type {Proof}
     * @memberof ClientConnectionsResponse
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof ClientConnectionsResponse
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof ClientConnectionsResponse
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ClientState
 */
export interface ClientState {
    /**
     *
     * @type {string}
     * @memberof ClientState
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof ClientState
     */
    frozen?: boolean;
}
/**
 *
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     *
     * @type {string}
     * @memberof Coin
     */
    denom?: string;
    /**
     *
     * @type {string}
     * @memberof Coin
     */
    amount?: string;
}
/**
 *
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     *
     * @type {BlockID}
     * @memberof Commit
     */
    block_id?: BlockID;
    /**
     *
     * @type {Array<BlockLastCommitPrecommits>}
     * @memberof Commit
     */
    precommits?: Array<BlockLastCommitPrecommits>;
}
/**
 *
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    client_id?: string;
    /**
     *
     * @type {ConnectionCounterparty}
     * @memberof Connection
     */
    counterparty?: ConnectionCounterparty;
    /**
     *
     * @type {Array<string>}
     * @memberof Connection
     */
    versions?: Array<string>;
}
/**
 *
 * @export
 * @interface ConnectionCounterparty
 */
export interface ConnectionCounterparty {
    /**
     *
     * @type {string}
     * @memberof ConnectionCounterparty
     */
    client_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionCounterparty
     */
    connection_id?: string;
    /**
     *
     * @type {PrefixValue}
     * @memberof ConnectionCounterparty
     */
    prefix?: PrefixValue;
}
/**
 *
 * @export
 * @interface ConnectionResponse
 */
export interface ConnectionResponse {
    /**
     *
     * @type {Connection}
     * @memberof ConnectionResponse
     */
    connection?: Connection;
    /**
     *
     * @type {Proof}
     * @memberof ConnectionResponse
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof ConnectionResponse
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof ConnectionResponse
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ConsensusState
 */
export interface ConsensusState {
    /**
     *
     * @type {string}
     * @memberof ConsensusState
     */
    chain_id?: string;
    /**
     *
     * @type {number}
     * @memberof ConsensusState
     */
    height?: number;
    /**
     *
     * @type {Root}
     * @memberof ConsensusState
     */
    root?: Root;
    /**
     *
     * @type {ValidatorSet}
     * @memberof ConsensusState
     */
    next_validator_set?: ValidatorSet;
}
/**
 *
 * @export
 * @interface Delegation
 */
export interface Delegation {
    /**
     *
     * @type {string}
     * @memberof Delegation
     */
    delegator_address?: string;
    /**
     *
     * @type {string}
     * @memberof Delegation
     */
    validator_address?: string;
    /**
     *
     * @type {string}
     * @memberof Delegation
     */
    shares?: string;
    /**
     *
     * @type {Coin}
     * @memberof Delegation
     */
    balance?: Coin;
}
/**
 *
 * @export
 * @interface DelegationDelegatorReward
 */
export interface DelegationDelegatorReward {
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof DelegationDelegatorReward
     */
    validator_address?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof DelegationDelegatorReward
     */
    reward?: Array<Coin>;
}
/**
 *
 * @export
 * @interface DelegatorTotalRewards
 */
export interface DelegatorTotalRewards {
    /**
     *
     * @type {Array<DelegationDelegatorReward>}
     * @memberof DelegatorTotalRewards
     */
    rewards?: Array<DelegationDelegatorReward>;
    /**
     *
     * @type {Array<Coin>}
     * @memberof DelegatorTotalRewards
     */
    total?: Array<Coin>;
}
/**
 *
 * @export
 * @interface DeliverTxResult
 */
export interface DeliverTxResult {
    /**
     *
     * @type {number}
     * @memberof DeliverTxResult
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof DeliverTxResult
     */
    data?: string;
    /**
     *
     * @type {number}
     * @memberof DeliverTxResult
     */
    gas_used?: number;
    /**
     *
     * @type {number}
     * @memberof DeliverTxResult
     */
    gas_wanted?: number;
    /**
     *
     * @type {string}
     * @memberof DeliverTxResult
     */
    info?: string;
    /**
     *
     * @type {string}
     * @memberof DeliverTxResult
     */
    log?: string;
    /**
     *
     * @type {Array<KVPair>}
     * @memberof DeliverTxResult
     */
    tags?: Array<KVPair>;
}
/**
 *
 * @export
 * @interface Deposit
 */
export interface Deposit {
    /**
     *
     * @type {Array<Coin>}
     * @memberof Deposit
     */
    amount?: Array<Coin>;
    /**
     *
     * @type {string}
     * @memberof Deposit
     */
    proposal_id?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof Deposit
     */
    depositor?: string;
}
/**
 *
 * @export
 * @interface Evidence
 */
export interface Evidence {
    /**
     *
     * @type {string}
     * @memberof Evidence
     */
    type?: string;
    /**
     *
     * @type {EvidenceValue}
     * @memberof Evidence
     */
    value?: EvidenceValue;
}
/**
 *
 * @export
 * @interface EvidenceValue
 */
export interface EvidenceValue {
    /**
     *
     * @type {string}
     * @memberof EvidenceValue
     */
    DuplicateVoteEvidence?: string;
    /**
     *
     * @type {string}
     * @memberof EvidenceValue
     */
    chain_id?: string;
    /**
     *
     * @type {number}
     * @memberof EvidenceValue
     */
    val_power?: number;
    /**
     *
     * @type {number}
     * @memberof EvidenceValue
     */
    total_power?: number;
}
/**
 *
 * @export
 * @interface Header
 */
export interface Header {
    /**
     *
     * @type {string}
     * @memberof Header
     */
    type?: string;
    /**
     *
     * @type {HeaderValue}
     * @memberof Header
     */
    value?: HeaderValue;
}
/**
 *
 * @export
 * @interface HeaderValue
 */
export interface HeaderValue {
    /**
     *
     * @type {SignedHeader}
     * @memberof HeaderValue
     */
    SignedHeader?: SignedHeader;
    /**
     *
     * @type {ValidatorSet}
     * @memberof HeaderValue
     */
    validator_set?: ValidatorSet;
    /**
     *
     * @type {ValidatorSet}
     * @memberof HeaderValue
     */
    next_validator_set?: ValidatorSet;
}
/**
 *
 * @export
 * @interface IBCValidator
 */
export interface IBCValidator {
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof IBCValidator
     */
    address?: string;
    /**
     *
     * @type {IBCValidatorPubKey}
     * @memberof IBCValidator
     */
    pub_key?: IBCValidatorPubKey;
    /**
     *
     * @type {string}
     * @memberof IBCValidator
     */
    voting_power?: string;
    /**
     *
     * @type {string}
     * @memberof IBCValidator
     */
    proposer_priority?: string;
}
/**
 *
 * @export
 * @interface IBCValidatorPubKey
 */
export interface IBCValidatorPubKey {
    /**
     *
     * @type {string}
     * @memberof IBCValidatorPubKey
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof IBCValidatorPubKey
     */
    value?: string;
}
/**
 *
 * @export
 * @interface IbcClientsConsensusState
 */
export interface IbcClientsConsensusState {
    /**
     *
     * @type {string}
     * @memberof IbcClientsConsensusState
     */
    type?: string;
    /**
     *
     * @type {ConsensusState}
     * @memberof IbcClientsConsensusState
     */
    value?: ConsensusState;
}
/**
 *
 * @export
 * @interface IbcConnectionsOpenTryProofInit
 */
export interface IbcConnectionsOpenTryProofInit {
    /**
     *
     * @type {string}
     * @memberof IbcConnectionsOpenTryProofInit
     */
    type?: string;
    /**
     *
     * @type {Proof}
     * @memberof IbcConnectionsOpenTryProofInit
     */
    value?: Proof;
}
/**
 *
 * @export
 * @interface BroadcastReq
 */
export interface BroadcastReq {
    /**
     *
     * @type {StdTx}
     * @memberof BroadcastReq
     */
    tx?: StdTx;
    /**
     *
     * @type {string}
     * @memberof BroadcastReq
     */
    mode?: "sync" | "async" | "block";
}
/**
 *
 * @export
 * @interface EncodeReq
 */
export interface EncodeReq {
    /**
     *
     * @type {StdTx}
     * @memberof EncodeReq
     */
    tx?: StdTx;
}
/**
 *
 * @export
 * @interface DepositReq
 */
export interface DepositReq {
    /**
     *
     * @type {BaseReq}
     * @memberof DepositReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof DepositReq
     */
    depositor?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof DepositReq
     */
    amount?: Array<Coin>;
}
/**
 *
 * @export
 * @interface VoteReq
 */
export interface VoteReq {
    /**
     *
     * @type {BaseReq}
     * @memberof VoteReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof VoteReq
     */
    voter?: string;
    /**
     *
     * @type {string}
     * @memberof VoteReq
     */
    option?: string;
}
/**
 *
 * @export
 * @interface WithdrawRewardsReq
 */
export interface WithdrawRewardsReq {
    /**
     *
     * @type {BaseReq}
     * @memberof WithdrawRewardsReq
     */
    base_req?: BaseReq;
}
/**
 *
 * @export
 * @interface WithdrawRewardsReq
 */
export interface WithdrawRewardsReq {
    /**
     *
     * @type {BaseReq}
     * @memberof WithdrawRewardsReq
     */
    base_req?: BaseReq;
}
/**
 *
 * @export
 * @interface SetWithdrawAddressReq
 */
export interface SetWithdrawAddressReq {
    /**
     *
     * @type {BaseReq}
     * @memberof SetWithdrawAddressReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof SetWithdrawAddressReq
     */
    withdraw_address?: string;
}
/**
 *
 * @export
 * @interface WithdrawRewardsReq
 */
export interface WithdrawRewardsReq {
    /**
     *
     * @type {BaseReq}
     * @memberof WithdrawRewardsReq
     */
    base_req?: BaseReq;
}
/**
 *
 * @export
 * @interface CreateClientReq
 */
export interface CreateClientReq {
    /**
     *
     * @type {BaseReq}
     * @memberof CreateClientReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof CreateClientReq
     */
    client_id?: string;
    /**
     *
     * @type {IbcClientsConsensusState}
     * @memberof CreateClientReq
     */
    consensus_state?: IbcClientsConsensusState;
}
/**
 *
 * @export
 * @interface UpdateClientReq
 */
export interface UpdateClientReq {
    /**
     *
     * @type {BaseReq}
     * @memberof UpdateClientReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {Header}
     * @memberof UpdateClientReq
     */
    header?: Header;
}
/**
 *
 * @export
 * @interface SubmitMisbehaviourReq
 */
export interface SubmitMisbehaviourReq {
    /**
     *
     * @type {BaseReq}
     * @memberof SubmitMisbehaviourReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {Evidence}
     * @memberof SubmitMisbehaviourReq
     */
    evidence?: Evidence;
}
/**
 *
 * @export
 * @interface ConnectionOpenInitReq
 */
export interface ConnectionOpenInitReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ConnectionOpenInitReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenInitReq
     */
    connection_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenInitReq
     */
    client_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenInitReq
     */
    counterparty_client_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenInitReq
     */
    counterparty_connection_id?: string;
    /**
     *
     * @type {Prefix}
     * @memberof ConnectionOpenInitReq
     */
    counterparty_prefix?: Prefix;
}
/**
 *
 * @export
 * @interface DecodeReq
 */
export interface DecodeReq {
    /**
     *
     * @type {string}
     * @memberof DecodeReq
     */
    tx?: string;
}
/**
 *
 * @export
 * @interface ConnectionOpenTryReq
 */
export interface ConnectionOpenTryReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ConnectionOpenTryReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenTryReq
     */
    connection_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenTryReq
     */
    client_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenTryReq
     */
    counterparty_client_id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenTryReq
     */
    counterparty_connection_id?: string;
    /**
     *
     * @type {Prefix}
     * @memberof ConnectionOpenTryReq
     */
    counterparty_prefix?: Prefix;
    /**
     *
     * @type {Array<string>}
     * @memberof ConnectionOpenTryReq
     */
    counterparty_versions?: Array<string>;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ConnectionOpenTryReq
     */
    proof_init?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ConnectionOpenTryReq
     */
    proof_consensus?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ConnectionOpenTryReq
     */
    proof_height?: number;
    /**
     *
     * @type {number}
     * @memberof ConnectionOpenTryReq
     */
    consensus_height?: number;
}
/**
 *
 * @export
 * @interface ConnectionOpenAckReq
 */
export interface ConnectionOpenAckReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ConnectionOpenAckReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ConnectionOpenAckReq
     */
    proof_try?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ConnectionOpenAckReq
     */
    proof_consensus?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ConnectionOpenAckReq
     */
    proof_height?: number;
    /**
     *
     * @type {number}
     * @memberof ConnectionOpenAckReq
     */
    consensus_height?: number;
    /**
     *
     * @type {string}
     * @memberof ConnectionOpenAckReq
     */
    version?: string;
}
/**
 *
 * @export
 * @interface ConnectionOpenConfirmReq
 */
export interface ConnectionOpenConfirmReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ConnectionOpenConfirmReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ConnectionOpenConfirmReq
     */
    proof_ack?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ConnectionOpenConfirmReq
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ChannelOpenInitReq
 */
export interface ChannelOpenInitReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelOpenInitReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    port_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    channel_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    channel_order?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ChannelOpenInitReq
     */
    connection_hops?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    counterparty_port_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenInitReq
     */
    counterparty_channel_id?: string;
}
/**
 *
 * @export
 * @interface ChannelOpenTryReq
 */
export interface ChannelOpenTryReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelOpenTryReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    port_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    channel_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    channel_order?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ChannelOpenTryReq
     */
    connection_hops?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    counterparty_port_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    counterparty_channel_id?: string;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenTryReq
     */
    counterparty_version?: string;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ChannelOpenTryReq
     */
    proof_init?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ChannelOpenTryReq
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ChannelOpenAckReq
 */
export interface ChannelOpenAckReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelOpenAckReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ChannelOpenAckReq
     */
    counterparty_version?: string;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ChannelOpenAckReq
     */
    proof_try?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ChannelOpenAckReq
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ChannelOpenConfirmReq
 */
export interface ChannelOpenConfirmReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelOpenConfirmReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ChannelOpenConfirmReq
     */
    proof_ack?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ChannelOpenConfirmReq
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface ChannelCloseInitReq
 */
export interface ChannelCloseInitReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelCloseInitReq
     */
    base_req?: BaseReq;
}
/**
 *
 * @export
 * @interface ChannelCloseConfirmReq
 */
export interface ChannelCloseConfirmReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ChannelCloseConfirmReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {IbcConnectionsOpenTryProofInit}
     * @memberof ChannelCloseConfirmReq
     */
    proof_init?: IbcConnectionsOpenTryProofInit;
    /**
     *
     * @type {number}
     * @memberof ChannelCloseConfirmReq
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface TransferTokenReq
 */
export interface TransferTokenReq {
    /**
     *
     * @type {BaseReq}
     * @memberof TransferTokenReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {Array<Coin>}
     * @memberof TransferTokenReq
     */
    amount?: Array<Coin>;
    /**
     *
     * @type {string}
     * @memberof TransferTokenReq
     */
    receiver?: string;
    /**
     *
     * @type {boolean}
     * @memberof TransferTokenReq
     */
    source?: boolean;
}
/**
 *
 * @export
 * @interface SendReq
 */
export interface SendReq {
    /**
     *
     * @type {BaseReq}
     * @memberof SendReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {Array<Coin>}
     * @memberof SendReq
     */
    amount?: Array<Coin>;
}
/**
 *
 * @export
 * @interface ReceivedPacketReq
 */
export interface ReceivedPacketReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ReceivedPacketReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {Packet}
     * @memberof ReceivedPacketReq
     */
    packet?: Packet;
    /**
     *
     * @type {Array<Proof>}
     * @memberof ReceivedPacketReq
     */
    proofs?: Array<Proof>;
    /**
     *
     * @type {number}
     * @memberof ReceivedPacketReq
     */
    height?: number;
}
/**
 *
 * @export
 * @interface DelegateReq
 */
export interface DelegateReq {
    /**
     *
     * @type {BaseReq}
     * @memberof DelegateReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof DelegateReq
     */
    delegator_address?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof DelegateReq
     */
    validator_address?: string;
    /**
     *
     * @type {Coin}
     * @memberof DelegateReq
     */
    delegation?: Coin;
}
/**
 *
 * @export
 * @interface UndelegateReq
 */
export interface UndelegateReq {
    /**
     *
     * @type {BaseReq}
     * @memberof UndelegateReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof UndelegateReq
     */
    delegator_address?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof UndelegateReq
     */
    validator_address?: string;
    /**
     *
     * @type {string}
     * @memberof UndelegateReq
     */
    shares?: string;
}
/**
 *
 * @export
 * @interface RedelegateReq
 */
export interface RedelegateReq {
    /**
     *
     * @type {BaseReq}
     * @memberof RedelegateReq
     */
    base_req?: BaseReq;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof RedelegateReq
     */
    delegator_address?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof RedelegateReq
     */
    validator_src_addressess?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof Redelegateeq
     */
    validator_dst_address?: string;
    /**
     *
     * @type {string}
     * @memberof RedelegateReq
     */
    shares?: string;
}
/**
 *
 * @export
 * @interface UnjailReq
 */
export interface UnjailReq {
    /**
     *
     * @type {BaseReq}
     * @memberof UnjailReq
     */
    base_req?: BaseReq;
}
/**
 *
 * @export
 * @interface PostProposalReq
 */
export interface PostProposalReq {
    /**
     *
     * @type {BaseReq}
     * @memberof PostProposalReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof PostProposalReq
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof PostProposalReq
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof PostProposalReq
     */
    proposal_type?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof PostProposalReq
     */
    proposer?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof PostProposalReq
     */
    initial_deposit?: Array<Coin>;
}
/**
 *
 * @export
 * @interface ParamChangeProposalReq
 */
export interface ParamChangeProposalReq {
    /**
     *
     * @type {BaseReq}
     * @memberof ParamChangeProposalReq
     */
    base_req?: BaseReq;
    /**
     *
     * @type {string}
     * @memberof ParamChangeProposalReq
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof ParamChangeProposalReq
     */
    description?: string;
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof ParamChangeProposalReq
     */
    proposer?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof ParamChangeProposalReq
     */
    deposit?: Array<Coin>;
    /**
     *
     * @type {Array<ParamChange>}
     * @memberof ParamChangeProposalReq
     */
    changes?: Array<ParamChange>;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {InlineResponse200ApplicationVersion}
     * @memberof InlineResponse200
     */
    application_version?: InlineResponse200ApplicationVersion;
    /**
     *
     * @type {InlineResponse200NodeInfo}
     * @memberof InlineResponse200
     */
    node_info?: InlineResponse200NodeInfo;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    syncing?: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     *
     * @type {ClientState}
     * @memberof InlineResponse20010
     */
    client_state?: ClientState;
    /**
     *
     * @type {Proof}
     * @memberof InlineResponse20010
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof InlineResponse20010
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof InlineResponse20010
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     *
     * @type {Root}
     * @memberof InlineResponse20011
     */
    root?: Root;
    /**
     *
     * @type {Proof}
     * @memberof InlineResponse20011
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof InlineResponse20011
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof InlineResponse20011
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    block_height?: string;
    /**
     *
     * @type {Array<TendermintValidator>}
     * @memberof InlineResponse2002
     */
    validators?: Array<TendermintValidator>;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    tx?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004
     */
    type?: string;
    /**
     *
     * @type {BaseAccount}
     * @memberof InlineResponse2004
     */
    value?: BaseAccount;
}
/**
 *
 * @export
 * @interface BaseAccount
 */
export interface BaseAccount {
    /**
     *
     * @type {string}
     * @memberof BaseAccount
     */
    account_number?: string;
    /**
     *
     * @type {string}
     * @memberof BaseAccount
     */
    address?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof BaseAccount
     */
    coins?: Array<Coin>;
    /**
     *
     * @type {PublicKey}
     * @memberof BaseAccount
     */
    public_key?: PublicKey;
    /**
     *
     * @type {string}
     * @memberof BaseAccount
     */
    sequence?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    loose_tokens?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    bonded_tokens?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    inflation_last_time?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    inflation?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    date_last_commission_reset?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    prev_bonded_shares?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    inflation_rate_change?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    inflation_max?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    inflation_min?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    goal_bonded?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    unbonding_time?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2006
     */
    max_validators?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2006
     */
    bond_denom?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    max_evidence_age?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    signed_blocks_window?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    min_signed_per_window?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    double_sign_unbond_duration?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    downtime_unbond_duration?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    slash_fraction_double_sign?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2007
     */
    slash_fraction_downtime?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     *
     * @type {Array<Coin>}
     * @memberof InlineResponse2008
     */
    min_deposit?: Array<Coin>;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2008
     */
    max_deposit_period?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     *
     * @type {ConsensusState}
     * @memberof InlineResponse2009
     */
    consensus_state?: ConsensusState;
    /**
     *
     * @type {Proof}
     * @memberof InlineResponse2009
     */
    proof?: Proof;
    /**
     *
     * @type {ProofPath}
     * @memberof InlineResponse2009
     */
    proof_path?: ProofPath;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2009
     */
    proof_height?: number;
}
/**
 *
 * @export
 * @interface InlineResponse200ApplicationVersion
 */
export interface InlineResponse200ApplicationVersion {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    build_tags?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    client_name?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    commit?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    go?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    server_name?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200ApplicationVersion
     */
    version?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200NodeInfo
 */
export interface InlineResponse200NodeInfo {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    moniker?: string;
    /**
     *
     * @type {InlineResponse200NodeInfoProtocolVersion}
     * @memberof InlineResponse200NodeInfo
     */
    protocol_version?: InlineResponse200NodeInfoProtocolVersion;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    network?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    channels?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    listen_addr?: string;
    /**
     * Tendermint version
     * @type {string}
     * @memberof InlineResponse200NodeInfo
     */
    version?: string;
    /**
     *
     * @type {InlineResponse200NodeInfoOther}
     * @memberof InlineResponse200NodeInfo
     */
    other?: InlineResponse200NodeInfoOther;
}
/**
 * more information on versions
 * @export
 * @interface InlineResponse200NodeInfoOther
 */
export interface InlineResponse200NodeInfoOther {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfoOther
     */
    tx_index?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfoOther
     */
    rpc_address?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200NodeInfoProtocolVersion
 */
export interface InlineResponse200NodeInfoProtocolVersion {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfoProtocolVersion
     */
    p2p?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfoProtocolVersion
     */
    block?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200NodeInfoProtocolVersion
     */
    app?: string;
}
/**
 *
 * @export
 * @interface KVPair
 */
export interface KVPair {
    /**
     *
     * @type {string}
     * @memberof KVPair
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof KVPair
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Packet
 */
export interface Packet {
    /**
     *
     * @type {string}
     * @memberof Packet
     */
    type?: string;
    /**
     *
     * @type {PacketValue}
     * @memberof Packet
     */
    value?: PacketValue;
}
/**
 *
 * @export
 * @interface PacketValue
 */
export interface PacketValue {
    /**
     *
     * @type {number}
     * @memberof PacketValue
     */
    sequence?: number;
    /**
     *
     * @type {number}
     * @memberof PacketValue
     */
    timeout?: number;
    /**
     *
     * @type {string}
     * @memberof PacketValue
     */
    source_port?: string;
    /**
     *
     * @type {string}
     * @memberof PacketValue
     */
    source_channel?: string;
    /**
     *
     * @type {string}
     * @memberof PacketValue
     */
    destination_port?: string;
    /**
     *
     * @type {string}
     * @memberof PacketValue
     */
    destination_channel?: string;
    /**
     *
     * @type {string}
     * @memberof PacketValue
     */
    data?: string;
}
/**
 *
 * @export
 * @interface PaginatedQueryTxs
 */
export interface PaginatedQueryTxs {
    /**
     *
     * @type {number}
     * @memberof PaginatedQueryTxs
     */
    total_count?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedQueryTxs
     */
    count?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedQueryTxs
     */
    page_number?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedQueryTxs
     */
    page_total?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedQueryTxs
     */
    limit?: number;
    /**
     *
     * @type {Array<TxQuery>}
     * @memberof PaginatedQueryTxs
     */
    txs?: Array<TxQuery>;
}
/**
 *
 * @export
 * @interface ParamChange
 */
export interface ParamChange {
    /**
     *
     * @type {string}
     * @memberof ParamChange
     */
    subspace?: string;
    /**
     *
     * @type {string}
     * @memberof ParamChange
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof ParamChange
     */
    subkey?: string;
    /**
     *
     * @type {object}
     * @memberof ParamChange
     */
    value?: object;
}
/**
 *
 * @export
 * @interface Prefix
 */
export interface Prefix {
    /**
     *
     * @type {string}
     * @memberof Prefix
     */
    type?: string;
    /**
     *
     * @type {PrefixValue}
     * @memberof Prefix
     */
    value?: PrefixValue;
}
/**
 *
 * @export
 * @interface PrefixValue
 */
export interface PrefixValue {
    /**
     *
     * @type {string}
     * @memberof PrefixValue
     */
    key_prefix?: string;
}
/**
 *
 * @export
 * @interface Proof
 */
export interface Proof {
    /**
     *
     * @type {ProofProof}
     * @memberof Proof
     */
    proof?: ProofProof;
}
/**
 *
 * @export
 * @interface ProofPath
 */
export interface ProofPath {
    /**
     *
     * @type {Array<ProofPathKeyPath>}
     * @memberof ProofPath
     */
    key_path?: Array<ProofPathKeyPath>;
}
/**
 *
 * @export
 * @interface ProofPathKeyPath
 */
export interface ProofPathKeyPath {
    /**
     *
     * @type {string}
     * @memberof ProofPathKeyPath
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof ProofPathKeyPath
     */
    enc?: number;
}
/**
 *
 * @export
 * @interface ProofProof
 */
export interface ProofProof {
    /**
     *
     * @type {Array<ProofProofOps>}
     * @memberof ProofProof
     */
    ops?: Array<ProofProofOps>;
}
/**
 *
 * @export
 * @interface ProofProofOps
 */
export interface ProofProofOps {
    /**
     *
     * @type {string}
     * @memberof ProofProofOps
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ProofProofOps
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof ProofProofOps
     */
    data?: string;
}
/**
 *
 * @export
 * @interface Proposer
 */
export interface Proposer {
    /**
     *
     * @type {string}
     * @memberof Proposer
     */
    proposal_id?: string;
    /**
     *
     * @type {string}
     * @memberof Proposer
     */
    proposer?: string;
}
/**
 *
 * @export
 * @interface PublicKey
 */
export interface PublicKey {
    /**
     *
     * @type {string}
     * @memberof PublicKey
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof PublicKey
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Redelegation
 */
export interface Redelegation {
    /**
     *
     * @type {string}
     * @memberof Redelegation
     */
    delegator_address?: string;
    /**
     *
     * @type {string}
     * @memberof Redelegation
     */
    validator_src_address?: string;
    /**
     *
     * @type {string}
     * @memberof Redelegation
     */
    validator_dst_address?: string;
    /**
     *
     * @type {Array<Redelegation>}
     * @memberof Redelegation
     */
    entries?: Array<Redelegation>;
}
/**
 *
 * @export
 * @interface RedelegationEntry
 */
export interface RedelegationEntry {
    /**
     *
     * @type {number}
     * @memberof RedelegationEntry
     */
    creation_height?: number;
    /**
     *
     * @type {number}
     * @memberof RedelegationEntry
     */
    completion_time?: number;
    /**
     *
     * @type {string}
     * @memberof RedelegationEntry
     */
    initial_balance?: string;
    /**
     *
     * @type {string}
     * @memberof RedelegationEntry
     */
    balance?: string;
    /**
     *
     * @type {string}
     * @memberof RedelegationEntry
     */
    shares_dst?: string;
}
/**
 *
 * @export
 * @interface Root
 */
export interface Root {
    /**
     *
     * @type {string}
     * @memberof Root
     */
    type?: string;
    /**
     *
     * @type {RootValue}
     * @memberof Root
     */
    value?: RootValue;
}
/**
 *
 * @export
 * @interface RootValue
 */
export interface RootValue {
    /**
     *
     * @type {string}
     * @memberof RootValue
     */
    hash?: string;
}
/**
 *
 * @export
 * @interface SignedHeader
 */
export interface SignedHeader {
    /**
     *
     * @type {BlockHeader}
     * @memberof SignedHeader
     */
    header?: BlockHeader;
    /**
     *
     * @type {Commit}
     * @memberof SignedHeader
     */
    commit?: Commit;
}
/**
 *
 * @export
 * @interface SigningInfo
 */
export interface SigningInfo {
    /**
     *
     * @type {string}
     * @memberof SigningInfo
     */
    start_height?: string;
    /**
     *
     * @type {string}
     * @memberof SigningInfo
     */
    index_offset?: string;
    /**
     *
     * @type {string}
     * @memberof SigningInfo
     */
    jailed_until?: string;
    /**
     *
     * @type {string}
     * @memberof SigningInfo
     */
    missed_blocks_counter?: string;
}
/**
 *
 * @export
 * @interface StdTx
 */
export interface StdTx {
    /**
     *
     * @type {Array<string>}
     * @memberof StdTx
     */
    msg?: Array<string>;
    /**
     *
     * @type {StdTxFee}
     * @memberof StdTx
     */
    fee?: StdTxFee;
    /**
     *
     * @type {string}
     * @memberof StdTx
     */
    memo?: string;
    /**
     *
     * @type {StdTxSignature}
     * @memberof StdTx
     */
    signature?: StdTxSignature;
}
/**
 *
 * @export
 * @interface StdTxFee
 */
export interface StdTxFee {
    /**
     *
     * @type {string}
     * @memberof StdTxFee
     */
    gas?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof StdTxFee
     */
    amount?: Array<Coin>;
}
/**
 *
 * @export
 * @interface StdTxSignature
 */
export interface StdTxSignature {
    /**
     *
     * @type {string}
     * @memberof StdTxSignature
     */
    signature?: string;
    /**
     *
     * @type {StdTxSignaturePubKey}
     * @memberof StdTxSignature
     */
    pub_key?: StdTxSignaturePubKey;
    /**
     *
     * @type {string}
     * @memberof StdTxSignature
     */
    account_number?: string;
    /**
     *
     * @type {string}
     * @memberof StdTxSignature
     */
    sequence?: string;
}
/**
 *
 * @export
 * @interface StdTxSignaturePubKey
 */
export interface StdTxSignaturePubKey {
    /**
     *
     * @type {string}
     * @memberof StdTxSignaturePubKey
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof StdTxSignaturePubKey
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Supply
 */
export interface Supply {
    /**
     *
     * @type {Array<Coin>}
     * @memberof Supply
     */
    total?: Array<Coin>;
}
/**
 *
 * @export
 * @interface TallyResult
 */
export interface TallyResult {
    /**
     *
     * @type {string}
     * @memberof TallyResult
     */
    _true?: string;
    /**
     *
     * @type {string}
     * @memberof TallyResult
     */
    abstain?: string;
    /**
     *
     * @type {string}
     * @memberof TallyResult
     */
    _false?: string;
    /**
     *
     * @type {string}
     * @memberof TallyResult
     */
    no_with_veto?: string;
}
/**
 *
 * @export
 * @interface TendermintValidator
 */
export interface TendermintValidator {
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof TendermintValidator
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof TendermintValidator
     */
    pub_key?: string;
    /**
     *
     * @type {string}
     * @memberof TendermintValidator
     */
    voting_power?: string;
    /**
     *
     * @type {string}
     * @memberof TendermintValidator
     */
    proposer_priority?: string;
}
/**
 *
 * @export
 * @interface TextProposal
 */
export interface TextProposal {
    /**
     *
     * @type {number}
     * @memberof TextProposal
     */
    proposal_id?: number;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    proposal_type?: string;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    proposal_status?: string;
    /**
     *
     * @type {TallyResult}
     * @memberof TextProposal
     */
    final_tally_result?: TallyResult;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    submit_time?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof TextProposal
     */
    total_deposit?: Array<Coin>;
    /**
     *
     * @type {string}
     * @memberof TextProposal
     */
    voting_start_time?: string;
}
/**
 *
 * @export
 * @interface TxQuery
 */
export interface TxQuery {
    /**
     *
     * @type {string}
     * @memberof TxQuery
     */
    hash?: string;
    /**
     *
     * @type {number}
     * @memberof TxQuery
     */
    height?: number;
    /**
     *
     * @type {StdTx}
     * @memberof TxQuery
     */
    tx?: StdTx;
    /**
     *
     * @type {TxQueryResult}
     * @memberof TxQuery
     */
    result?: TxQueryResult;
}
/**
 *
 * @export
 * @interface TxQueryResult
 */
export interface TxQueryResult {
    /**
     *
     * @type {string}
     * @memberof TxQueryResult
     */
    log?: string;
    /**
     *
     * @type {string}
     * @memberof TxQueryResult
     */
    gas_wanted?: string;
    /**
     *
     * @type {string}
     * @memberof TxQueryResult
     */
    gas_used?: string;
    /**
     *
     * @type {Array<KVPair>}
     * @memberof TxQueryResult
     */
    tags?: Array<KVPair>;
}
/**
 *
 * @export
 * @interface UnbondingDelegation
 */
export interface UnbondingDelegation {
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegation
     */
    delegator_address?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegation
     */
    validator_address?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegation
     */
    initial_balance?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegation
     */
    balance?: string;
    /**
     *
     * @type {number}
     * @memberof UnbondingDelegation
     */
    creation_height?: number;
    /**
     *
     * @type {number}
     * @memberof UnbondingDelegation
     */
    min_time?: number;
}
/**
 *
 * @export
 * @interface UnbondingDelegationPair
 */
export interface UnbondingDelegationPair {
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegationPair
     */
    delegator_address?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingDelegationPair
     */
    validator_address?: string;
    /**
     *
     * @type {Array<UnbondingEntries>}
     * @memberof UnbondingDelegationPair
     */
    entries?: Array<UnbondingEntries>;
}
/**
 *
 * @export
 * @interface UnbondingEntries
 */
export interface UnbondingEntries {
    /**
     *
     * @type {string}
     * @memberof UnbondingEntries
     */
    initial_balance?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingEntries
     */
    balance?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingEntries
     */
    creation_height?: string;
    /**
     *
     * @type {string}
     * @memberof UnbondingEntries
     */
    min_time?: string;
}
/**
 *
 * @export
 * @interface Validator
 */
export interface Validator {
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof Validator
     */
    operator_address?: string;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    consensus_pubkey?: string;
    /**
     *
     * @type {boolean}
     * @memberof Validator
     */
    jailed?: boolean;
    /**
     *
     * @type {number}
     * @memberof Validator
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    tokens?: string;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    delegator_shares?: string;
    /**
     *
     * @type {ValidatorDescription}
     * @memberof Validator
     */
    description?: ValidatorDescription;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    bond_height?: string;
    /**
     *
     * @type {number}
     * @memberof Validator
     */
    bond_intra_tx_counter?: number;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    unbonding_height?: string;
    /**
     *
     * @type {string}
     * @memberof Validator
     */
    unbonding_time?: string;
    /**
     *
     * @type {ValidatorCommission}
     * @memberof Validator
     */
    commission?: ValidatorCommission;
}
/**
 *
 * @export
 * @interface ValidatorCommission
 */
export interface ValidatorCommission {
    /**
     *
     * @type {string}
     * @memberof ValidatorCommission
     */
    rate?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorCommission
     */
    max_rate?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorCommission
     */
    max_change_rate?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorCommission
     */
    update_time?: string;
}
/**
 *
 * @export
 * @interface ValidatorDescription
 */
export interface ValidatorDescription {
    /**
     *
     * @type {string}
     * @memberof ValidatorDescription
     */
    moniker?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorDescription
     */
    identity?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorDescription
     */
    website?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorDescription
     */
    security_contact?: string;
    /**
     *
     * @type {string}
     * @memberof ValidatorDescription
     */
    details?: string;
}
/**
 *
 * @export
 * @interface ValidatorDistInfo
 */
export interface ValidatorDistInfo {
    /**
     * bech32 encoded address
     * @type {string}
     * @memberof ValidatorDistInfo
     */
    operator_address?: string;
    /**
     *
     * @type {Array<Coin>}
     * @memberof ValidatorDistInfo
     */
    self_bond_rewards?: Array<Coin>;
    /**
     *
     * @type {Array<Coin>}
     * @memberof ValidatorDistInfo
     */
    val_commission?: Array<Coin>;
}
/**
 *
 * @export
 * @interface ValidatorSet
 */
export interface ValidatorSet {
    /**
     *
     * @type {Array<IBCValidator>}
     * @memberof ValidatorSet
     */
    validators?: Array<IBCValidator>;
    /**
     *
     * @type {IBCValidator}
     * @memberof ValidatorSet
     */
    proposer?: IBCValidator;
}
/**
 *
 * @export
 * @interface Vote
 */
export interface Vote {
    /**
     *
     * @type {string}
     * @memberof Vote
     */
    voter?: string;
    /**
     *
     * @type {string}
     * @memberof Vote
     */
    proposal_id?: string;
    /**
     *
     * @type {string}
     * @memberof Vote
     */
    option?: string;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountsAddressGet(address: string, options?: any): RequestArgs;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountsAddressGet(address: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2004>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authAccountsAddressGet(address: string, options?: any): AxiosPromise<InlineResponse2004>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authAccountsAddressGet(address: string, options?: any): AxiosPromise<InlineResponse2004>;
}
/**
 * BankApi - axios parameter creator
 * @export
 */
export declare const BankApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsAddressTransfersPost(address: string, account: SendReq, options?: any): RequestArgs;
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankBalancesAddressGet(address: string, options?: any): RequestArgs;
};
/**
 * BankApi - functional programming interface
 * @export
 */
export declare const BankApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsAddressTransfersPost(address: string, account: SendReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankBalancesAddressGet(address: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Coin[]>;
};
/**
 * BankApi - factory interface
 * @export
 */
export declare const BankApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankAccountsAddressTransfersPost(address: string, account: SendReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bankBalancesAddressGet(address: string, options?: any): AxiosPromise<Coin[]>;
};
/**
 * BankApi - object-oriented interface
 * @export
 * @class BankApi
 * @extends {BaseAPI}
 */
export declare class BankApi extends BaseAPI {
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    bankAccountsAddressTransfersPost(address: string, account: SendReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    bankBalancesAddressGet(address: string, options?: any): AxiosPromise<Coin[]>;
}
/**
 * DistributionApi - axios parameter creator
 * @export
 */
export declare const DistributionApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionCommunityPoolGet(options?: any): RequestArgs;
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr: string, options?: any): RequestArgs;
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): RequestArgs;
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): RequestArgs;
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr: string, validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): RequestArgs;
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr: string, options?: any): RequestArgs;
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr: string, withdrawRequestBody?: SetWithdrawAddressReq | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionParametersGet(options?: any): RequestArgs;
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrGet(validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr: string, options?: any): RequestArgs;
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsGet(validatorAddr: string, options?: any): RequestArgs;
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsPost(validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): RequestArgs;
};
/**
 * DistributionApi - functional programming interface
 * @export
 */
export declare const DistributionApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionCommunityPoolGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Coin[]>;
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<DelegatorTotalRewards>;
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Coin[]>;
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr: string, validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr: string, withdrawRequestBody?: SetWithdrawAddressReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionParametersGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>;
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ValidatorDistInfo>;
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Coin[]>;
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Coin[]>;
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsPost(validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
};
/**
 * DistributionApi - factory interface
 * @export
 */
export declare const DistributionApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionCommunityPoolGet(options?: any): AxiosPromise<Coin[]>;
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr: string, options?: any): AxiosPromise<DelegatorTotalRewards>;
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr: string, validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr: string, options?: any): AxiosPromise<string>;
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr: string, withdrawRequestBody?: SetWithdrawAddressReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionParametersGet(options?: any): AxiosPromise<object>;
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrGet(validatorAddr: string, options?: any): AxiosPromise<ValidatorDistInfo>;
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsGet(validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    distributionValidatorsValidatorAddrRewardsPost(validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq | undefined, options?: any): AxiosPromise<StdTx>;
};
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
export declare class DistributionApi extends BaseAPI {
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionCommunityPoolGet(options?: any): AxiosPromise<Coin[]>;
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr: string, options?: any): AxiosPromise<DelegatorTotalRewards>;
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr: string, validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr: string, options?: any): AxiosPromise<string>;
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr: string, withdrawRequestBody?: SetWithdrawAddressReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionParametersGet(options?: any): AxiosPromise<object>;
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrGet(validatorAddr: string, options?: any): AxiosPromise<ValidatorDistInfo>;
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrRewardsGet(validatorAddr: string, options?: any): AxiosPromise<Coin[]>;
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    distributionValidatorsValidatorAddrRewardsPost(validatorAddr: string, withdrawRequestBody?: WithdrawRewardsReq, options?: any): AxiosPromise<StdTx>;
}
/**
 * GaiaRESTApi - axios parameter creator
 * @export
 */
export declare const GaiaRESTApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeInfoGet(options?: any): RequestArgs;
};
/**
 * GaiaRESTApi - functional programming interface
 * @export
 */
export declare const GaiaRESTApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeInfoGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse200>;
};
/**
 * GaiaRESTApi - factory interface
 * @export
 */
export declare const GaiaRESTApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    nodeInfoGet(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * GaiaRESTApi - object-oriented interface
 * @export
 * @class GaiaRESTApi
 * @extends {BaseAPI}
 */
export declare class GaiaRESTApi extends BaseAPI {
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaiaRESTApi
     */
    nodeInfoGet(options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * GovernanceApi - axios parameter creator
 * @export
 */
export declare const GovernanceApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersDepositGet(options?: any): RequestArgs;
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersTallyingGet(options?: any): RequestArgs;
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersVotingGet(options?: any): RequestArgs;
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsGet(voter?: string | undefined, depositor?: string | undefined, status?: string | undefined, options?: any): RequestArgs;
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {ParamChangeProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsParamChangePost(postProposalBody: ParamChangeProposalReq, options?: any): RequestArgs;
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsPost(postProposalBody: PostProposalReq, options?: any): RequestArgs;
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsDepositorGet(proposalId: string, depositor: string, options?: any): RequestArgs;
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsGet(proposalId: string, options?: any): RequestArgs;
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsPost(proposalId: string, postDepositBody: DepositReq, options?: any): RequestArgs;
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdGet(proposalId: string, options?: any): RequestArgs;
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdProposerGet(proposalId: string, options?: any): RequestArgs;
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdTallyGet(proposalId: string, options?: any): RequestArgs;
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesGet(proposalId: string, options?: any): RequestArgs;
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesPost(proposalId: string, postVoteBody: VoteReq, options?: any): RequestArgs;
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesVoterGet(proposalId: string, voter: string, options?: any): RequestArgs;
};
/**
 * GovernanceApi - functional programming interface
 * @export
 */
export declare const GovernanceApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersDepositGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2008>;
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersTallyingGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>;
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersVotingGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>;
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsGet(voter?: string | undefined, depositor?: string | undefined, status?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TextProposal[]>;
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsParamChangePost(postProposalBody: PostProposalReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsPost(postProposalBody: PostProposalReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsDepositorGet(proposalId: string, depositor: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Deposit>;
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsGet(proposalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Deposit[]>;
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsPost(proposalId: string, postDepositBody: DepositReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdGet(proposalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TextProposal>;
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdProposerGet(proposalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Proposer>;
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdTallyGet(proposalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TallyResult>;
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesGet(proposalId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Vote[]>;
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesPost(proposalId: string, postVoteBody: VoteReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesVoterGet(proposalId: string, voter: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Vote>;
};
/**
 * GovernanceApi - factory interface
 * @export
 */
export declare const GovernanceApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersDepositGet(options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersTallyingGet(options?: any): AxiosPromise<object>;
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govParametersVotingGet(options?: any): AxiosPromise<object>;
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsGet(voter?: string | undefined, depositor?: string | undefined, status?: string | undefined, options?: any): AxiosPromise<TextProposal[]>;
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsParamChangePost(postProposalBody: PostProposalReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsPost(postProposalBody: PostProposalReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsDepositorGet(proposalId: string, depositor: string, options?: any): AxiosPromise<Deposit>;
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsGet(proposalId: string, options?: any): AxiosPromise<Deposit[]>;
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdDepositsPost(proposalId: string, postDepositBody: DepositReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdGet(proposalId: string, options?: any): AxiosPromise<TextProposal>;
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdProposerGet(proposalId: string, options?: any): AxiosPromise<Proposer>;
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdTallyGet(proposalId: string, options?: any): AxiosPromise<TallyResult>;
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesGet(proposalId: string, options?: any): AxiosPromise<Vote[]>;
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesPost(proposalId: string, postVoteBody: VoteReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    govProposalsProposalIdVotesVoterGet(proposalId: string, voter: string, options?: any): AxiosPromise<Vote>;
};
/**
 * GovernanceApi - object-oriented interface
 * @export
 * @class GovernanceApi
 * @extends {BaseAPI}
 */
export declare class GovernanceApi extends BaseAPI {
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersDepositGet(options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersTallyingGet(options?: any): AxiosPromise<object>;
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govParametersVotingGet(options?: any): AxiosPromise<object>;
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsGet(voter?: string, depositor?: string, status?: string, options?: any): AxiosPromise<TextProposal[]>;
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {ParamChangeProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsParamChangePost(postProposalBody: ParamChangeProposalReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsPost(postProposalBody: PostProposalReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsDepositorGet(proposalId: string, depositor: string, options?: any): AxiosPromise<Deposit>;
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsGet(proposalId: string, options?: any): AxiosPromise<Deposit[]>;
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdDepositsPost(proposalId: string, postDepositBody: DepositReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdGet(proposalId: string, options?: any): AxiosPromise<TextProposal>;
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdProposerGet(proposalId: string, options?: any): AxiosPromise<Proposer>;
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdTallyGet(proposalId: string, options?: any): AxiosPromise<TallyResult>;
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesGet(proposalId: string, options?: any): AxiosPromise<Vote[]>;
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesPost(proposalId: string, postVoteBody: VoteReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    govProposalsProposalIdVotesVoterGet(proposalId: string, voter: string, options?: any): AxiosPromise<Vote>;
}
/**
 * IBCApi - axios parameter creator
 * @export
 */
export declare const IBCApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenInitPost(channelOpenInitRequestBody: ChannelOpenInitReq, options?: any): RequestArgs;
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenTryPost(channelOpenTryRequestBody: ChannelOpenTryReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdClientStateGet(clientId: string, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConnectionsGet(clientId: string, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConsensusStateGet(clientId: string, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdMisbehaviourPost(clientId: string, submitMisbehaviourRequestBody: SubmitMisbehaviourReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdRootsHeightGet(clientId: string, height: number, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdUpdatePost(clientId: string, updateClientRequestBody: UpdateClientReq, options?: any): RequestArgs;
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsPost(createClientRequestBody: CreateClientReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdGet(connectionId: string, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenAckPost(connectionId: string, connectionOpenAckRequestBody: ConnectionOpenAckReq, options?: any): RequestArgs;
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenConfirmPost(connectionId: string, connectionOpenConfirmRequestBody: ConnectionOpenConfirmReq, options?: any): RequestArgs;
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenInitPost(connectionOpenInitRequestBody: ConnectionOpenInitReq, options?: any): RequestArgs;
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenTryPost(connectionOpenTryRequestBody: ConnectionOpenTryReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcHeaderGet(options?: any): RequestArgs;
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcNodeStateGet(options?: any): RequestArgs;
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPacketsReceivePost(receivePacketRequestBody: ReceivedPacketReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPathGet(options?: any): RequestArgs;
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId: string, channelId: string, channelCloseConfirmRequestBody: ChannelCloseConfirmReq, options?: any): RequestArgs;
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseInitPost(portId: string, channelId: string, channelCloseInitRequestBody: ChannelCloseInitReq, options?: any): RequestArgs;
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdGet(portId: string, channelId: string, prove?: boolean | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId: string, channelId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenAckPost(portId: string, channelId: string, channelOpenAckRequestBody: ChannelOpenAckReq, options?: any): RequestArgs;
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId: string, channelId: string, channelOpenConfirmRequestBody: ChannelOpenConfirmReq, options?: any): RequestArgs;
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdTransferPost(portId: string, channelId: string, transferTokenRequestBody: TransferTokenReq, options?: any): RequestArgs;
};
/**
 * IBCApi - functional programming interface
 * @export
 */
export declare const IBCApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenInitPost(channelOpenInitRequestBody: ChannelOpenInitReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenTryPost(channelOpenTryRequestBody: ChannelOpenTryReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdClientStateGet(clientId: string, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20010>;
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConnectionsGet(clientId: string, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ClientConnectionsResponse>;
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConsensusStateGet(clientId: string, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2009>;
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdMisbehaviourPost(clientId: string, submitMisbehaviourRequestBody: SubmitMisbehaviourReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdRootsHeightGet(clientId: string, height: number, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse20011>;
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdUpdatePost(clientId: string, updateClientRequestBody: UpdateClientReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsPost(createClientRequestBody: CreateClientReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdGet(connectionId: string, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConnectionResponse>;
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenAckPost(connectionId: string, connectionOpenAckRequestBody: ConnectionOpenAckReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenConfirmPost(connectionId: string, connectionOpenConfirmRequestBody: ConnectionOpenConfirmReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenInitPost(connectionOpenInitRequestBody: ConnectionOpenInitReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenTryPost(connectionOpenTryRequestBody: ConnectionOpenTryReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcHeaderGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Header>;
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcNodeStateGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ConsensusState>;
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPacketsReceivePost(receivePacketRequestBody: ReceivedPacketReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPathGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId: string, channelId: string, channelCloseConfirmRequestBody: ChannelCloseConfirmReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseInitPost(portId: string, channelId: string, channelCloseInitRequestBody: ChannelCloseInitReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdGet(portId: string, channelId: string, prove?: boolean | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ChannelResponse>;
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId: string, channelId: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<number>;
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenAckPost(portId: string, channelId: string, channelOpenAckRequestBody: ChannelOpenAckReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId: string, channelId: string, channelOpenConfirmRequestBody: ChannelOpenConfirmReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdTransferPost(portId: string, channelId: string, transferTokenRequestBody: TransferTokenReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
};
/**
 * IBCApi - factory interface
 * @export
 */
export declare const IBCApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenInitPost(channelOpenInitRequestBody: ChannelOpenInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcChannelsOpenTryPost(channelOpenTryRequestBody: ChannelOpenTryReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdClientStateGet(clientId: string, prove?: boolean | undefined, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConnectionsGet(clientId: string, prove?: boolean | undefined, options?: any): AxiosPromise<ClientConnectionsResponse>;
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdConsensusStateGet(clientId: string, prove?: boolean | undefined, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdMisbehaviourPost(clientId: string, submitMisbehaviourRequestBody: SubmitMisbehaviourReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdRootsHeightGet(clientId: string, height: number, prove?: boolean | undefined, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsClientIdUpdatePost(clientId: string, updateClientRequestBody: UpdateClientReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcClientsPost(createClientRequestBody: CreateClientReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdGet(connectionId: string, prove?: boolean | undefined, options?: any): AxiosPromise<ConnectionResponse>;
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenAckPost(connectionId: string, connectionOpenAckRequestBody: ConnectionOpenAckReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsConnectionIdOpenConfirmPost(connectionId: string, connectionOpenConfirmRequestBody: ConnectionOpenConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenInitPost(connectionOpenInitRequestBody: ConnectionOpenInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcConnectionsOpenTryPost(connectionOpenTryRequestBody: ConnectionOpenTryReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcHeaderGet(options?: any): AxiosPromise<Header>;
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcNodeStateGet(options?: any): AxiosPromise<ConsensusState>;
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPacketsReceivePost(receivePacketRequestBody: ReceivedPacketReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPathGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId: string, channelId: string, channelCloseConfirmRequestBody: ChannelCloseConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdCloseInitPost(portId: string, channelId: string, channelCloseInitRequestBody: ChannelCloseInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdGet(portId: string, channelId: string, prove?: boolean | undefined, options?: any): AxiosPromise<ChannelResponse>;
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId: string, channelId: string, options?: any): AxiosPromise<number>;
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenAckPost(portId: string, channelId: string, channelOpenAckRequestBody: ChannelOpenAckReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId: string, channelId: string, channelOpenConfirmRequestBody: ChannelOpenConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ibcPortsPortIdChannelsChannelIdTransferPost(portId: string, channelId: string, transferTokenRequestBody: TransferTokenReq, options?: any): AxiosPromise<StdTx>;
};
/**
 * IBCApi - object-oriented interface
 * @export
 * @class IBCApi
 * @extends {BaseAPI}
 */
export declare class IBCApi extends BaseAPI {
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcChannelsOpenInitPost(channelOpenInitRequestBody: ChannelOpenInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcChannelsOpenTryPost(channelOpenTryRequestBody: ChannelOpenTryReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdClientStateGet(clientId: string, prove?: boolean, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdConnectionsGet(clientId: string, prove?: boolean, options?: any): AxiosPromise<ClientConnectionsResponse>;
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdConsensusStateGet(clientId: string, prove?: boolean, options?: any): AxiosPromise<InlineResponse2009>;
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdMisbehaviourPost(clientId: string, submitMisbehaviourRequestBody: SubmitMisbehaviourReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdRootsHeightGet(clientId: string, height: number, prove?: boolean, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsClientIdUpdatePost(clientId: string, updateClientRequestBody: UpdateClientReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcClientsPost(createClientRequestBody: CreateClientReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdGet(connectionId: string, prove?: boolean, options?: any): AxiosPromise<ConnectionResponse>;
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdOpenAckPost(connectionId: string, connectionOpenAckRequestBody: ConnectionOpenAckReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsConnectionIdOpenConfirmPost(connectionId: string, connectionOpenConfirmRequestBody: ConnectionOpenConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsOpenInitPost(connectionOpenInitRequestBody: ConnectionOpenInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcConnectionsOpenTryPost(connectionOpenTryRequestBody: ConnectionOpenTryReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcHeaderGet(options?: any): AxiosPromise<Header>;
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcNodeStateGet(options?: any): AxiosPromise<ConsensusState>;
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPacketsReceivePost(receivePacketRequestBody: ReceivedPacketReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPathGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId: string, channelId: string, channelCloseConfirmRequestBody: ChannelCloseConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdCloseInitPost(portId: string, channelId: string, channelCloseInitRequestBody: ChannelCloseInitReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdGet(portId: string, channelId: string, prove?: boolean, options?: any): AxiosPromise<ChannelResponse>;
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId: string, channelId: string, options?: any): AxiosPromise<number>;
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdOpenAckPost(portId: string, channelId: string, channelOpenAckRequestBody: ChannelOpenAckReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId: string, channelId: string, channelOpenConfirmRequestBody: ChannelOpenConfirmReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    ibcPortsPortIdChannelsChannelIdTransferPost(portId: string, channelId: string, transferTokenRequestBody: TransferTokenReq, options?: any): AxiosPromise<StdTx>;
}
/**
 * MintApi - axios parameter creator
 * @export
 */
export declare const MintApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingAnnualProvisionsGet(options?: any): RequestArgs;
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingInflationGet(options?: any): RequestArgs;
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingParametersGet(options?: any): RequestArgs;
};
/**
 * MintApi - functional programming interface
 * @export
 */
export declare const MintApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingAnnualProvisionsGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingInflationGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingParametersGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<object>;
};
/**
 * MintApi - factory interface
 * @export
 */
export declare const MintApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingAnnualProvisionsGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingInflationGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintingParametersGet(options?: any): AxiosPromise<object>;
};
/**
 * MintApi - object-oriented interface
 * @export
 * @class MintApi
 * @extends {BaseAPI}
 */
export declare class MintApi extends BaseAPI {
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingAnnualProvisionsGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingInflationGet(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    mintingParametersGet(options?: any): AxiosPromise<object>;
}
/**
 * SlashingApi - axios parameter creator
 * @export
 */
export declare const SlashingApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingParametersGet(options?: any): RequestArgs;
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingSigningInfosGet(page: number, limit: number, options?: any): RequestArgs;
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingValidatorsValidatorAddrUnjailPost(validatorAddr: string, unjailBody: UnjailReq, options?: any): RequestArgs;
};
/**
 * SlashingApi - functional programming interface
 * @export
 */
export declare const SlashingApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingParametersGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2007>;
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingSigningInfosGet(page: number, limit: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<SigningInfo[]>;
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingValidatorsValidatorAddrUnjailPost(validatorAddr: string, unjailBody: UnjailReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
};
/**
 * SlashingApi - factory interface
 * @export
 */
export declare const SlashingApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingParametersGet(options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingSigningInfosGet(page: number, limit: number, options?: any): AxiosPromise<SigningInfo[]>;
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    slashingValidatorsValidatorAddrUnjailPost(validatorAddr: string, unjailBody: UnjailReq, options?: any): AxiosPromise<StdTx>;
};
/**
 * SlashingApi - object-oriented interface
 * @export
 * @class SlashingApi
 * @extends {BaseAPI}
 */
export declare class SlashingApi extends BaseAPI {
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingParametersGet(options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingSigningInfosGet(page: number, limit: number, options?: any): AxiosPromise<SigningInfo[]>;
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    slashingValidatorsValidatorAddrUnjailPost(validatorAddr: string, unjailBody: UnjailReq, options?: any): AxiosPromise<StdTx>;
}
/**
 * StakingApi - axios parameter creator
 * @export
 */
export declare const StakingApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr: string, delegation?: DelegateReq | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr: string, delegation?: RedelegateReq | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr: string, delegation?: UndelegateReq | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingParametersGet(options?: any): RequestArgs;
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingPoolGet(options?: any): RequestArgs;
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingRedelegationsGet(delegator?: string | undefined, validatorFrom?: string | undefined, validatorTo?: string | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsGet(status?: string | undefined, page?: number | undefined, limit?: number | undefined, options?: any): RequestArgs;
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrDelegationsGet(validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrGet(validatorAddr: string, options?: any): RequestArgs;
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr: string, options?: any): RequestArgs;
};
/**
 * StakingApi - functional programming interface
 * @export
 */
export declare const StakingApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr: string, delegation?: DelegateReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Delegation>;
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr: string, delegation?: RedelegateReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UnbondingDelegation[]>;
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr: string, delegation?: UndelegateReq | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UnbondingDelegationPair>;
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Validator[]>;
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Validator>;
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingParametersGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingPoolGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingRedelegationsGet(delegator?: string | undefined, validatorFrom?: string | undefined, validatorTo?: string | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Redelegation[]>;
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsGet(status?: string | undefined, page?: number | undefined, limit?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Validator[]>;
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrDelegationsGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Validator>;
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<UnbondingDelegation[]>;
};
/**
 * StakingApi - factory interface
 * @export
 */
export declare const StakingApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr: string, options?: any): AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr: string, delegation?: DelegateReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Delegation>;
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr: string, delegation?: RedelegateReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr: string, options?: any): AxiosPromise<UnbondingDelegation[]>;
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr: string, delegation?: UndelegateReq | undefined, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<UnbondingDelegationPair>;
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr: string, options?: any): AxiosPromise<Validator[]>;
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Validator>;
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingParametersGet(options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingPoolGet(options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingRedelegationsGet(delegator?: string | undefined, validatorFrom?: string | undefined, validatorTo?: string | undefined, options?: any): AxiosPromise<Redelegation[]>;
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsGet(status?: string | undefined, page?: number | undefined, limit?: number | undefined, options?: any): AxiosPromise<Validator[]>;
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrDelegationsGet(validatorAddr: string, options?: any): AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrGet(validatorAddr: string, options?: any): AxiosPromise<Validator>;
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr: string, options?: any): AxiosPromise<UnbondingDelegation[]>;
};
/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
export declare class StakingApi extends BaseAPI {
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr: string, options?: any): AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr: string, delegation?: DelegateReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Delegation>;
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegationReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr: string, delegation?: RedelegateReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr: string, options?: any): AxiosPromise<UnbondingDelegation[]>;
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr: string, delegation?: UndelegateReq, options?: any): AxiosPromise<StdTx>;
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<UnbondingDelegationPair>;
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr: string, options?: any): AxiosPromise<Validator[]>;
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<Validator>;
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingParametersGet(options?: any): AxiosPromise<InlineResponse2006>;
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingPoolGet(options?: any): AxiosPromise<InlineResponse2005>;
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingRedelegationsGet(delegator?: string, validatorFrom?: string, validatorTo?: string, options?: any): AxiosPromise<Redelegation[]>;
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsGet(status?: string, page?: number, limit?: number, options?: any): AxiosPromise<Validator[]>;
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrDelegationsGet(validatorAddr: string, options?: any): AxiosPromise<Delegation[]>;
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrGet(validatorAddr: string, options?: any): AxiosPromise<Validator>;
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr: string, options?: any): AxiosPromise<UnbondingDelegation[]>;
}
/**
 * SupplyApi - axios parameter creator
 * @export
 */
export declare const SupplyApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalDenominationGet(denomination: string, options?: any): RequestArgs;
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalGet(options?: any): RequestArgs;
};
/**
 * SupplyApi - functional programming interface
 * @export
 */
export declare const SupplyApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalDenominationGet(denomination: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<string>;
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<Supply>;
};
/**
 * SupplyApi - factory interface
 * @export
 */
export declare const SupplyApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalDenominationGet(denomination: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyTotalGet(options?: any): AxiosPromise<Supply>;
};
/**
 * SupplyApi - object-oriented interface
 * @export
 * @class SupplyApi
 * @extends {BaseAPI}
 */
export declare class SupplyApi extends BaseAPI {
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    supplyTotalDenominationGet(denomination: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    supplyTotalGet(options?: any): AxiosPromise<Supply>;
}
/**
 * TendermintRPCApi - axios parameter creator
 * @export
 */
export declare const TendermintRPCApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksHeightGet(height: number, options?: any): RequestArgs;
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksLatestGet(options?: any): RequestArgs;
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncingGet(options?: any): RequestArgs;
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsHeightGet(height: number, options?: any): RequestArgs;
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsLatestGet(options?: any): RequestArgs;
};
/**
 * TendermintRPCApi - functional programming interface
 * @export
 */
export declare const TendermintRPCApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksHeightGet(height: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BlockQuery>;
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksLatestGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BlockQuery>;
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncingGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsHeightGet(height: number, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsLatestGet(options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2002>;
};
/**
 * TendermintRPCApi - factory interface
 * @export
 */
export declare const TendermintRPCApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksHeightGet(height: number, options?: any): AxiosPromise<BlockQuery>;
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blocksLatestGet(options?: any): AxiosPromise<BlockQuery>;
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncingGet(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsHeightGet(height: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validatorsetsLatestGet(options?: any): AxiosPromise<InlineResponse2002>;
};
/**
 * TendermintRPCApi - object-oriented interface
 * @export
 * @class TendermintRPCApi
 * @extends {BaseAPI}
 */
export declare class TendermintRPCApi extends BaseAPI {
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    blocksHeightGet(height: number, options?: any): AxiosPromise<BlockQuery>;
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    blocksLatestGet(options?: any): AxiosPromise<BlockQuery>;
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    syncingGet(options?: any): AxiosPromise<InlineResponse2001>;
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    validatorsetsHeightGet(height: number, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    validatorsetsLatestGet(options?: any): AxiosPromise<InlineResponse2002>;
}
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsDecodePost(tx: DecodeReq, options?: any): RequestArgs;
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsEncodePost(tx: EncodeReq, options?: any): RequestArgs;
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsGet(messageAction?: string | undefined, messageSender?: string | undefined, page?: number | undefined, limit?: number | undefined, txMinheight?: number | undefined, txMaxheight?: number | undefined, options?: any): RequestArgs;
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsHashGet(hash: string, options?: any): RequestArgs;
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsPost(txBroadcast: BroadcastReq, options?: any): RequestArgs;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
export declare const TransactionsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsDecodePost(tx: DecodeReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<StdTx>;
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsEncodePost(tx: EncodeReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<InlineResponse2003>;
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsGet(messageAction?: string | undefined, messageSender?: string | undefined, page?: number | undefined, limit?: number | undefined, txMinheight?: number | undefined, txMaxheight?: number | undefined, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<PaginatedQueryTxs>;
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsHashGet(hash: string, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<TxQuery>;
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsPost(txBroadcast: BroadcastReq, options?: any): (axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<BroadcastTxCommitResult>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
export declare const TransactionsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsDecodePost(tx: DecodeReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsEncodePost(tx: EncodeReq, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsGet(messageAction?: string | undefined, messageSender?: string | undefined, page?: number | undefined, limit?: number | undefined, txMinheight?: number | undefined, txMaxheight?: number | undefined, options?: any): AxiosPromise<PaginatedQueryTxs>;
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsHashGet(hash: string, options?: any): AxiosPromise<TxQuery>;
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    txsPost(txBroadcast: BroadcastReq, options?: any): AxiosPromise<BroadcastTxCommitResult>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export declare class TransactionsApi extends BaseAPI {
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsDecodePost(tx: DecodeReq, options?: any): AxiosPromise<StdTx>;
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsEncodePost(tx: EncodeReq, options?: any): AxiosPromise<InlineResponse2003>;
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsGet(messageAction?: string, messageSender?: string, page?: number, limit?: number, txMinheight?: number, txMaxheight?: number, options?: any): AxiosPromise<PaginatedQueryTxs>;
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsHashGet(hash: string, options?: any): AxiosPromise<TxQuery>;
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    txsPost(txBroadcast: BroadcastReq, options?: any): AxiosPromise<BroadcastTxCommitResult>;
}
