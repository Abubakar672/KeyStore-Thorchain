"use strict";
// tslint:disable
/**
 * Gaia-Lite for Cosmos
 * A REST interface for state queries, transaction generation and broadcasting.
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globalImportUrl = __importStar(require("url"));
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("./base");
/**
 * AuthApi - axios parameter creator
 * @export
 */
exports.AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError("address", "Required parameter address was null or undefined when calling authAccountsAddressGet.");
            }
            var localVarPath = "/auth/accounts/{address}".replace("{" + "address" + "}", encodeURIComponent(String(address)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
exports.AuthApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            var localVarAxiosArgs = exports.AuthApiAxiosParamCreator(configuration).authAccountsAddressGet(address, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
exports.AuthApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            return exports.AuthApiFp(configuration).authAccountsAddressGet(address, options)(axios, basePath);
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authAccountsAddressGet = function (address, options) {
        return exports.AuthApiFp(this.configuration).authAccountsAddressGet(address, options)(this.axios, this.basePath);
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BankApi - axios parameter creator
 * @export
 */
exports.BankApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError("address", "Required parameter address was null or undefined when calling bankAccountsAddressTransfersPost.");
            }
            // verify required parameter 'account' is not null or undefined
            if (account === null || account === undefined) {
                throw new base_1.RequiredError("account", "Required parameter account was null or undefined when calling bankAccountsAddressTransfersPost.");
            }
            var localVarPath = "/bank/accounts/{address}/transfers".replace("{" + "address" + "}", encodeURIComponent(String(address)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof account !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(account !== undefined ? account : {})
                : account || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'address' is not null or undefined
            if (address === null || address === undefined) {
                throw new base_1.RequiredError("address", "Required parameter address was null or undefined when calling bankBalancesAddressGet.");
            }
            var localVarPath = "/bank/balances/{address}".replace("{" + "address" + "}", encodeURIComponent(String(address)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BankApi - functional programming interface
 * @export
 */
exports.BankApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankAccountsAddressTransfersPost(address, account, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankBalancesAddressGet(address, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BankApi - factory interface
 * @export
 */
exports.BankApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {SendReq} account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            return exports.BankApiFp(configuration).bankAccountsAddressTransfersPost(address, account, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            return exports.BankApiFp(configuration).bankBalancesAddressGet(address, options)(axios, basePath);
        },
    };
};
/**
 * BankApi - object-oriented interface
 * @export
 * @class BankApi
 * @extends {BaseAPI}
 */
var BankApi = /** @class */ (function (_super) {
    __extends(BankApi, _super);
    function BankApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {SendReq} account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankAccountsAddressTransfersPost = function (address, account, options) {
        return exports.BankApiFp(this.configuration).bankAccountsAddressTransfersPost(address, account, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankBalancesAddressGet = function (address, options) {
        return exports.BankApiFp(this.configuration).bankBalancesAddressGet(address, options)(this.axios, this.basePath);
    };
    return BankApi;
}(base_1.BaseAPI));
exports.BankApi = BankApi;
/**
 * DistributionApi - axios parameter creator
 * @export
 */
exports.DistributionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/distribution/community_pool";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsGet.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/rewards".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsPost.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/rewards".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
                .replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)))
                .replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
                .replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)))
                .replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressGet.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressPost.");
            }
            var localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/distribution/parameters";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrGet.");
            }
            var localVarPath = "/distribution/validators/{validatorAddr}".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrOutstandingRewardsGet.");
            }
            var localVarPath = "/distribution/validators/{validatorAddr}/outstanding_rewards".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsGet.");
            }
            var localVarPath = "/distribution/validators/{validatorAddr}/rewards".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsPost.");
            }
            var localVarPath = "/distribution/validators/{validatorAddr}/rewards".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof withdrawRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})
                : withdrawRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DistributionApi - functional programming interface
 * @export
 */
exports.DistributionApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionCommunityPoolGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionParametersGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * DistributionApi - factory interface
 * @export
 */
exports.DistributionApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            return exports.DistributionApiFp(configuration).distributionCommunityPoolGet(options)(axios, basePath);
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {SetWithdrawAddressReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            return exports.DistributionApiFp(configuration).distributionParametersGet(options)(axios, basePath);
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {WithdrawRewardsReq} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
var DistributionApi = /** @class */ (function (_super) {
    __extends(DistributionApi, _super);
    function DistributionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionCommunityPoolGet = function (options) {
        return exports.DistributionApiFp(this.configuration).distributionCommunityPoolGet(options)(this.axios, this.basePath);
    };
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsGet = function (delegatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(this.axios, this.basePath);
    };
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsPost = function (delegatorAddr, withdrawRequestBody, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    };
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost = function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    };
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressGet = function (delegatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(this.axios, this.basePath);
    };
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {SetWithdrawAddressReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressPost = function (delegatorAddr, withdrawRequestBody, options) {
        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionParametersGet = function (options) {
        return exports.DistributionApiFp(this.configuration).distributionParametersGet(options)(this.axios, this.basePath);
    };
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrGet = function (validatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrOutstandingRewardsGet = function (validatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsGet = function (validatorAddr, options) {
        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {WithdrawRewardsReq} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsPost = function (validatorAddr, withdrawRequestBody, options) {
        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);
    };
    return DistributionApi;
}(base_1.BaseAPI));
exports.DistributionApi = DistributionApi;
/**
 * GaiaRESTApi - axios parameter creator
 * @export
 */
exports.GaiaRESTApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/node_info";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GaiaRESTApi - functional programming interface
 * @export
 */
exports.GaiaRESTApiFp = function (configuration) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            var localVarAxiosArgs = exports.GaiaRESTApiAxiosParamCreator(configuration).nodeInfoGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * GaiaRESTApi - factory interface
 * @export
 */
exports.GaiaRESTApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            return exports.GaiaRESTApiFp(configuration).nodeInfoGet(options)(axios, basePath);
        },
    };
};
/**
 * GaiaRESTApi - object-oriented interface
 * @export
 * @class GaiaRESTApi
 * @extends {BaseAPI}
 */
var GaiaRESTApi = /** @class */ (function (_super) {
    __extends(GaiaRESTApi, _super);
    function GaiaRESTApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaiaRESTApi
     */
    GaiaRESTApi.prototype.nodeInfoGet = function (options) {
        return exports.GaiaRESTApiFp(this.configuration).nodeInfoGet(options)(this.axios, this.basePath);
    };
    return GaiaRESTApi;
}(base_1.BaseAPI));
exports.GaiaRESTApi = GaiaRESTApi;
/**
 * GovernanceApi - axios parameter creator
 * @export
 */
exports.GovernanceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/gov/parameters/deposit";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/gov/parameters/tallying";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/gov/parameters/voting";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/gov/proposals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (voter !== undefined) {
                localVarQueryParameter["voter"] = voter;
            }
            if (depositor !== undefined) {
                localVarQueryParameter["depositor"] = depositor;
            }
            if (status !== undefined) {
                localVarQueryParameter["status"] = status;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {ParamChangeProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postProposalBody' is not null or undefined
            if (postProposalBody === null || postProposalBody === undefined) {
                throw new base_1.RequiredError("postProposalBody", "Required parameter postProposalBody was null or undefined when calling govProposalsParamChangePost.");
            }
            var localVarPath = "/gov/proposals/param_change";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof postProposalBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})
                : postProposalBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'postProposalBody' is not null or undefined
            if (postProposalBody === null || postProposalBody === undefined) {
                throw new base_1.RequiredError("postProposalBody", "Required parameter postProposalBody was null or undefined when calling govProposalsPost.");
            }
            var localVarPath = "/gov/proposals";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof postProposalBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})
                : postProposalBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.");
            }
            // verify required parameter 'depositor' is not null or undefined
            if (depositor === null || depositor === undefined) {
                throw new base_1.RequiredError("depositor", "Required parameter depositor was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/deposits/{depositor}"
                .replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)))
                .replace("{" + "depositor" + "}", encodeURIComponent(String(depositor)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/deposits".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsPost.");
            }
            // verify required parameter 'postDepositBody' is not null or undefined
            if (postDepositBody === null || postDepositBody === undefined) {
                throw new base_1.RequiredError("postDepositBody", "Required parameter postDepositBody was null or undefined when calling govProposalsProposalIdDepositsPost.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/deposits".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof postDepositBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postDepositBody !== undefined ? postDepositBody : {})
                : postDepositBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdProposerGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/proposer".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdTallyGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/tally".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/votes".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesPost.");
            }
            // verify required parameter 'postVoteBody' is not null or undefined
            if (postVoteBody === null || postVoteBody === undefined) {
                throw new base_1.RequiredError("postVoteBody", "Required parameter postVoteBody was null or undefined when calling govProposalsProposalIdVotesPost.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/votes".replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof postVoteBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(postVoteBody !== undefined ? postVoteBody : {})
                : postVoteBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'proposalId' is not null or undefined
            if (proposalId === null || proposalId === undefined) {
                throw new base_1.RequiredError("proposalId", "Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesVoterGet.");
            }
            // verify required parameter 'voter' is not null or undefined
            if (voter === null || voter === undefined) {
                throw new base_1.RequiredError("voter", "Required parameter voter was null or undefined when calling govProposalsProposalIdVotesVoterGet.");
            }
            var localVarPath = "/gov/proposals/{proposalId}/votes/{voter}"
                .replace("{" + "proposalId" + "}", encodeURIComponent(String(proposalId)))
                .replace("{" + "voter" + "}", encodeURIComponent(String(voter)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * GovernanceApi - functional programming interface
 * @export
 */
exports.GovernanceApiFp = function (configuration) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersDepositGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersTallyingGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersVotingGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsGet(voter, depositor, status, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsParamChangePost(postProposalBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsPost(postProposalBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsGet(proposalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdGet(proposalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdProposerGet(proposalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdTallyGet(proposalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesGet(proposalId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * GovernanceApi - factory interface
 * @export
 */
exports.GovernanceApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            return exports.GovernanceApiFp(configuration).govParametersDepositGet(options)(axios, basePath);
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            return exports.GovernanceApiFp(configuration).govParametersTallyingGet(options)(axios, basePath);
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            return exports.GovernanceApiFp(configuration).govParametersVotingGet(options)(axios, basePath);
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            return exports.GovernanceApiFp(configuration).govProposalsGet(voter, depositor, status, options)(axios, basePath);
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            return exports.GovernanceApiFp(configuration).govProposalsParamChangePost(postProposalBody, options)(axios, basePath);
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {PostProposalReq} postProposalBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            return exports.GovernanceApiFp(configuration).govProposalsPost(postProposalBody, options)(axios, basePath);
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(axios, basePath);
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsGet(proposalId, options)(axios, basePath);
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {DepositReq} postDepositBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(axios, basePath);
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdGet(proposalId, options)(axios, basePath);
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdProposerGet(proposalId, options)(axios, basePath);
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdTallyGet(proposalId, options)(axios, basePath);
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesGet(proposalId, options)(axios, basePath);
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {VoteReq} postVoteBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(axios, basePath);
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(axios, basePath);
        },
    };
};
/**
 * GovernanceApi - object-oriented interface
 * @export
 * @class GovernanceApi
 * @extends {BaseAPI}
 */
var GovernanceApi = /** @class */ (function (_super) {
    __extends(GovernanceApi, _super);
    function GovernanceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersDepositGet = function (options) {
        return exports.GovernanceApiFp(this.configuration).govParametersDepositGet(options)(this.axios, this.basePath);
    };
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersTallyingGet = function (options) {
        return exports.GovernanceApiFp(this.configuration).govParametersTallyingGet(options)(this.axios, this.basePath);
    };
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersVotingGet = function (options) {
        return exports.GovernanceApiFp(this.configuration).govParametersVotingGet(options)(this.axios, this.basePath);
    };
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsGet = function (voter, depositor, status, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsGet(voter, depositor, status, options)(this.axios, this.basePath);
    };
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {ParamChangeProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsParamChangePost = function (postProposalBody, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsParamChangePost(postProposalBody, options)(this.axios, this.basePath);
    };
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {PostProposalReq} postProposalBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsPost = function (postProposalBody, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsPost(postProposalBody, options)(this.axios, this.basePath);
    };
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsDepositorGet = function (proposalId, depositor, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(this.axios, this.basePath);
    };
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsGet = function (proposalId, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsGet(proposalId, options)(this.axios, this.basePath);
    };
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {DepositReq} postDepositBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsPost = function (proposalId, postDepositBody, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(this.axios, this.basePath);
    };
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdGet = function (proposalId, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdGet(proposalId, options)(this.axios, this.basePath);
    };
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdProposerGet = function (proposalId, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdProposerGet(proposalId, options)(this.axios, this.basePath);
    };
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdTallyGet = function (proposalId, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdTallyGet(proposalId, options)(this.axios, this.basePath);
    };
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesGet = function (proposalId, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesGet(proposalId, options)(this.axios, this.basePath);
    };
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {VoteReq} postVoteBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesPost = function (proposalId, postVoteBody, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(this.axios, this.basePath);
    };
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesVoterGet = function (proposalId, voter, options) {
        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(this.axios, this.basePath);
    };
    return GovernanceApi;
}(base_1.BaseAPI));
exports.GovernanceApi = GovernanceApi;
/**
 * IBCApi - axios parameter creator
 * @export
 */
exports.IBCApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channelOpenInitRequestBody' is not null or undefined
            if (channelOpenInitRequestBody === null ||
                channelOpenInitRequestBody === undefined) {
                throw new base_1.RequiredError("channelOpenInitRequestBody", "Required parameter channelOpenInitRequestBody was null or undefined when calling ibcChannelsOpenInitPost.");
            }
            var localVarPath = "/ibc/channels/open-init";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelOpenInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenInitRequestBody !== undefined
                    ? channelOpenInitRequestBody
                    : {})
                : channelOpenInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'channelOpenTryRequestBody' is not null or undefined
            if (channelOpenTryRequestBody === null ||
                channelOpenTryRequestBody === undefined) {
                throw new base_1.RequiredError("channelOpenTryRequestBody", "Required parameter channelOpenTryRequestBody was null or undefined when calling ibcChannelsOpenTryPost.");
            }
            var localVarPath = "/ibc/channels/open-try";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelOpenTryRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenTryRequestBody !== undefined
                    ? channelOpenTryRequestBody
                    : {})
                : channelOpenTryRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdClientStateGet.");
            }
            var localVarPath = "/ibc/clients/{client-id}/client-state".replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdConnectionsGet.");
            }
            var localVarPath = "/ibc/clients/{client-id}/connections".replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdConsensusStateGet.");
            }
            var localVarPath = "/ibc/clients/{client-id}/consensus-state".replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdMisbehaviourPost.");
            }
            // verify required parameter 'submitMisbehaviourRequestBody' is not null or undefined
            if (submitMisbehaviourRequestBody === null ||
                submitMisbehaviourRequestBody === undefined) {
                throw new base_1.RequiredError("submitMisbehaviourRequestBody", "Required parameter submitMisbehaviourRequestBody was null or undefined when calling ibcClientsClientIdMisbehaviourPost.");
            }
            var localVarPath = "/ibc/clients/{client-id}/misbehaviour".replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof submitMisbehaviourRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(submitMisbehaviourRequestBody !== undefined
                    ? submitMisbehaviourRequestBody
                    : {})
                : submitMisbehaviourRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdRootsHeightGet.");
            }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new base_1.RequiredError("height", "Required parameter height was null or undefined when calling ibcClientsClientIdRootsHeightGet.");
            }
            var localVarPath = "/ibc/clients/{client-id}/roots/{height}"
                .replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)))
                .replace("{" + "height" + "}", encodeURIComponent(String(height)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new base_1.RequiredError("clientId", "Required parameter clientId was null or undefined when calling ibcClientsClientIdUpdatePost.");
            }
            // verify required parameter 'updateClientRequestBody' is not null or undefined
            if (updateClientRequestBody === null ||
                updateClientRequestBody === undefined) {
                throw new base_1.RequiredError("updateClientRequestBody", "Required parameter updateClientRequestBody was null or undefined when calling ibcClientsClientIdUpdatePost.");
            }
            var localVarPath = "/ibc/clients/{client-id}/update".replace("{" + "client-id" + "}", encodeURIComponent(String(clientId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof updateClientRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(updateClientRequestBody !== undefined
                    ? updateClientRequestBody
                    : {})
                : updateClientRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost: function (createClientRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'createClientRequestBody' is not null or undefined
            if (createClientRequestBody === null ||
                createClientRequestBody === undefined) {
                throw new base_1.RequiredError("createClientRequestBody", "Required parameter createClientRequestBody was null or undefined when calling ibcClientsPost.");
            }
            var localVarPath = "/ibc/clients";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof createClientRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createClientRequestBody !== undefined
                    ? createClientRequestBody
                    : {})
                : createClientRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new base_1.RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdGet.");
            }
            var localVarPath = "/ibc/connections/{connection-id}".replace("{" + "connection-id" + "}", encodeURIComponent(String(connectionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new base_1.RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.");
            }
            // verify required parameter 'connectionOpenAckRequestBody' is not null or undefined
            if (connectionOpenAckRequestBody === null ||
                connectionOpenAckRequestBody === undefined) {
                throw new base_1.RequiredError("connectionOpenAckRequestBody", "Required parameter connectionOpenAckRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.");
            }
            var localVarPath = "/ibc/connections/{connection-id}/open-ack".replace("{" + "connection-id" + "}", encodeURIComponent(String(connectionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof connectionOpenAckRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenAckRequestBody !== undefined
                    ? connectionOpenAckRequestBody
                    : {})
                : connectionOpenAckRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'connectionId' is not null or undefined
            if (connectionId === null || connectionId === undefined) {
                throw new base_1.RequiredError("connectionId", "Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.");
            }
            // verify required parameter 'connectionOpenConfirmRequestBody' is not null or undefined
            if (connectionOpenConfirmRequestBody === null ||
                connectionOpenConfirmRequestBody === undefined) {
                throw new base_1.RequiredError("connectionOpenConfirmRequestBody", "Required parameter connectionOpenConfirmRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.");
            }
            var localVarPath = "/ibc/connections/{connection-id}/open-confirm".replace("{" + "connection-id" + "}", encodeURIComponent(String(connectionId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof connectionOpenConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenConfirmRequestBody !== undefined
                    ? connectionOpenConfirmRequestBody
                    : {})
                : connectionOpenConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'connectionOpenInitRequestBody' is not null or undefined
            if (connectionOpenInitRequestBody === null ||
                connectionOpenInitRequestBody === undefined) {
                throw new base_1.RequiredError("connectionOpenInitRequestBody", "Required parameter connectionOpenInitRequestBody was null or undefined when calling ibcConnectionsOpenInitPost.");
            }
            var localVarPath = "/ibc/connections/open-init";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof connectionOpenInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenInitRequestBody !== undefined
                    ? connectionOpenInitRequestBody
                    : {})
                : connectionOpenInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'connectionOpenTryRequestBody' is not null or undefined
            if (connectionOpenTryRequestBody === null ||
                connectionOpenTryRequestBody === undefined) {
                throw new base_1.RequiredError("connectionOpenTryRequestBody", "Required parameter connectionOpenTryRequestBody was null or undefined when calling ibcConnectionsOpenTryPost.");
            }
            var localVarPath = "/ibc/connections/open-try";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof connectionOpenTryRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(connectionOpenTryRequestBody !== undefined
                    ? connectionOpenTryRequestBody
                    : {})
                : connectionOpenTryRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/ibc/header";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/ibc/node-state";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'receivePacketRequestBody' is not null or undefined
            if (receivePacketRequestBody === null ||
                receivePacketRequestBody === undefined) {
                throw new base_1.RequiredError("receivePacketRequestBody", "Required parameter receivePacketRequestBody was null or undefined when calling ibcPacketsReceivePost.");
            }
            var localVarPath = "/ibc/packets/receive";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof receivePacketRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(receivePacketRequestBody !== undefined
                    ? receivePacketRequestBody
                    : {})
                : receivePacketRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/ibc/path";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            // verify required parameter 'channelCloseConfirmRequestBody' is not null or undefined
            if (channelCloseConfirmRequestBody === null ||
                channelCloseConfirmRequestBody === undefined) {
                throw new base_1.RequiredError("channelCloseConfirmRequestBody", "Required parameter channelCloseConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/close-confirm"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelCloseConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelCloseConfirmRequestBody !== undefined
                    ? channelCloseConfirmRequestBody
                    : {})
                : channelCloseConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            // verify required parameter 'channelCloseInitRequestBody' is not null or undefined
            if (channelCloseInitRequestBody === null ||
                channelCloseInitRequestBody === undefined) {
                throw new base_1.RequiredError("channelCloseInitRequestBody", "Required parameter channelCloseInitRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/close-init"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelCloseInitRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelCloseInitRequestBody !== undefined
                    ? channelCloseInitRequestBody
                    : {})
                : channelCloseInitRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (prove !== undefined) {
                localVarQueryParameter["prove"] = prove;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/next-sequence-recv"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            // verify required parameter 'channelOpenAckRequestBody' is not null or undefined
            if (channelOpenAckRequestBody === null ||
                channelOpenAckRequestBody === undefined) {
                throw new base_1.RequiredError("channelOpenAckRequestBody", "Required parameter channelOpenAckRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/open-ack"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelOpenAckRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenAckRequestBody !== undefined
                    ? channelOpenAckRequestBody
                    : {})
                : channelOpenAckRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            // verify required parameter 'channelOpenConfirmRequestBody' is not null or undefined
            if (channelOpenConfirmRequestBody === null ||
                channelOpenConfirmRequestBody === undefined) {
                throw new base_1.RequiredError("channelOpenConfirmRequestBody", "Required parameter channelOpenConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/open-confirm"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof channelOpenConfirmRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(channelOpenConfirmRequestBody !== undefined
                    ? channelOpenConfirmRequestBody
                    : {})
                : channelOpenConfirmRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'portId' is not null or undefined
            if (portId === null || portId === undefined) {
                throw new base_1.RequiredError("portId", "Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError("channelId", "Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            // verify required parameter 'transferTokenRequestBody' is not null or undefined
            if (transferTokenRequestBody === null ||
                transferTokenRequestBody === undefined) {
                throw new base_1.RequiredError("transferTokenRequestBody", "Required parameter transferTokenRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.");
            }
            var localVarPath = "/ibc/ports/{port-id}/channels/{channel-id}/transfer"
                .replace("{" + "port-id" + "}", encodeURIComponent(String(portId)))
                .replace("{" + "channel-id" + "}", encodeURIComponent(String(channelId)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof transferTokenRequestBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(transferTokenRequestBody !== undefined
                    ? transferTokenRequestBody
                    : {})
                : transferTokenRequestBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * IBCApi - functional programming interface
 * @export
 */
exports.IBCApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost: function (createClientRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsPost(createClientRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet: function (options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcHeaderGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet: function (options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcNodeStateGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet: function (options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPathGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {
            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * IBCApi - factory interface
 * @export
 */
exports.IBCApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Channel open-init
         * @param {ChannelOpenInitReq} channelOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-try
         * @param {ChannelOpenTryReq} channelOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query client state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query connections of a client
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query cliet consensus-state
         * @param {string} clientId Client ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit misbehaviour
         * @param {string} clientId Client ID
         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query client root
         * @param {string} clientId Client ID
         * @param {number} height Root height
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Update client
         * @param {string} clientId Client ID
         * @param {UpdateClientReq} updateClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Create client
         * @param {CreateClientReq} createClientRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcClientsPost: function (createClientRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcClientsPost(createClientRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query connection
         * @param {string} connectionId Connection ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {
            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-ack
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-confirm
         * @param {string} connectionId Connection ID
         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-init
         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Connection open-try
         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query header
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcHeaderGet: function (options) {
            return exports.IBCApiFp(configuration).ibcHeaderGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Query node consensus-state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcNodeStateGet: function (options) {
            return exports.IBCApiFp(configuration).ibcNodeStateGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Receive packet
         * @param {ReceivedPacketReq} receivePacketRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query IBC path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPathGet: function (options) {
            return exports.IBCApiFp(configuration).ibcPathGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Channel close-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel close-init
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelCloseInitReq} channelCloseInitRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Query channel
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {boolean} [prove] Proof of result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(axios, basePath);
        },
        /**
         *
         * @summary Query next sequence receive
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-ack
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenAckReq} channelOpenAckRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Channel open-confirm
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Transfer token
         * @param {string} portId Port ID
         * @param {string} channelId Channel ID
         * @param {TransferTokenReq} transferTokenRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {
            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * IBCApi - object-oriented interface
 * @export
 * @class IBCApi
 * @extends {BaseAPI}
 */
var IBCApi = /** @class */ (function (_super) {
    __extends(IBCApi, _super);
    function IBCApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Channel open-init
     * @param {ChannelOpenInitReq} channelOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcChannelsOpenInitPost = function (channelOpenInitRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Channel open-try
     * @param {ChannelOpenTryReq} channelOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcChannelsOpenTryPost = function (channelOpenTryRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query client state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdClientStateGet = function (clientId, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query connections of a client
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdConnectionsGet = function (clientId, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query cliet consensus-state
     * @param {string} clientId Client ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdConsensusStateGet = function (clientId, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Submit misbehaviour
     * @param {string} clientId Client ID
     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdMisbehaviourPost = function (clientId, submitMisbehaviourRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query client root
     * @param {string} clientId Client ID
     * @param {number} height Root height
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdRootsHeightGet = function (clientId, height, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update client
     * @param {string} clientId Client ID
     * @param {UpdateClientReq} updateClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsClientIdUpdatePost = function (clientId, updateClientRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Create client
     * @param {CreateClientReq} createClientRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcClientsPost = function (createClientRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcClientsPost(createClientRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query connection
     * @param {string} connectionId Connection ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcConnectionsConnectionIdGet = function (connectionId, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Connection open-ack
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcConnectionsConnectionIdOpenAckPost = function (connectionId, connectionOpenAckRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Connection open-confirm
     * @param {string} connectionId Connection ID
     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcConnectionsConnectionIdOpenConfirmPost = function (connectionId, connectionOpenConfirmRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Connection open-init
     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcConnectionsOpenInitPost = function (connectionOpenInitRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Connection open-try
     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcConnectionsOpenTryPost = function (connectionOpenTryRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query header
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcHeaderGet = function (options) {
        return exports.IBCApiFp(this.configuration).ibcHeaderGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query node consensus-state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcNodeStateGet = function (options) {
        return exports.IBCApiFp(this.configuration).ibcNodeStateGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Receive packet
     * @param {ReceivedPacketReq} receivePacketRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPacketsReceivePost = function (receivePacketRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query IBC path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPathGet = function (options) {
        return exports.IBCApiFp(this.configuration).ibcPathGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Channel close-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseConfirmPost = function (portId, channelId, channelCloseConfirmRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Channel close-init
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelCloseInitReq} channelCloseInitRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseInitPost = function (portId, channelId, channelCloseInitRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query channel
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {boolean} [prove] Proof of result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdGet = function (portId, channelId, prove, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query next sequence receive
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet = function (portId, channelId, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Channel open-ack
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenAckReq} channelOpenAckRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenAckPost = function (portId, channelId, channelOpenAckRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Channel open-confirm
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenConfirmPost = function (portId, channelId, channelOpenConfirmRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Transfer token
     * @param {string} portId Port ID
     * @param {string} channelId Channel ID
     * @param {TransferTokenReq} transferTokenRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IBCApi
     */
    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdTransferPost = function (portId, channelId, transferTokenRequestBody, options) {
        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(this.axios, this.basePath);
    };
    return IBCApi;
}(base_1.BaseAPI));
exports.IBCApi = IBCApi;
/**
 * MintApi - axios parameter creator
 * @export
 */
exports.MintApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/minting/annual-provisions";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/minting/inflation";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/minting/parameters";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MintApi - functional programming interface
 * @export
 */
exports.MintApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingAnnualProvisionsGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingInflationGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingParametersGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MintApi - factory interface
 * @export
 */
exports.MintApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            return exports.MintApiFp(configuration).mintingAnnualProvisionsGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            return exports.MintApiFp(configuration).mintingInflationGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            return exports.MintApiFp(configuration).mintingParametersGet(options)(axios, basePath);
        },
    };
};
/**
 * MintApi - object-oriented interface
 * @export
 * @class MintApi
 * @extends {BaseAPI}
 */
var MintApi = /** @class */ (function (_super) {
    __extends(MintApi, _super);
    function MintApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingAnnualProvisionsGet = function (options) {
        return exports.MintApiFp(this.configuration).mintingAnnualProvisionsGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingInflationGet = function (options) {
        return exports.MintApiFp(this.configuration).mintingInflationGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingParametersGet = function (options) {
        return exports.MintApiFp(this.configuration).mintingParametersGet(options)(this.axios, this.basePath);
    };
    return MintApi;
}(base_1.BaseAPI));
exports.MintApi = MintApi;
/**
 * SlashingApi - axios parameter creator
 * @export
 */
exports.SlashingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/slashing/parameters";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new base_1.RequiredError("page", "Required parameter page was null or undefined when calling slashingSigningInfosGet.");
            }
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new base_1.RequiredError("limit", "Required parameter limit was null or undefined when calling slashingSigningInfosGet.");
            }
            var localVarPath = "/slashing/signing_infos";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.");
            }
            // verify required parameter 'unjailBody' is not null or undefined
            if (unjailBody === null || unjailBody === undefined) {
                throw new base_1.RequiredError("unjailBody", "Required parameter unjailBody was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.");
            }
            var localVarPath = "/slashing/validators/{validatorAddr}/unjail".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof unjailBody !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(unjailBody !== undefined ? unjailBody : {})
                : unjailBody || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SlashingApi - functional programming interface
 * @export
 */
exports.SlashingApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingParametersGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingSigningInfosGet(page, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SlashingApi - factory interface
 * @export
 */
exports.SlashingApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            return exports.SlashingApiFp(configuration).slashingParametersGet(options)(axios, basePath);
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            return exports.SlashingApiFp(configuration).slashingSigningInfosGet(page, limit, options)(axios, basePath);
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {UnjailReq} unjailBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            return exports.SlashingApiFp(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(axios, basePath);
        },
    };
};
/**
 * SlashingApi - object-oriented interface
 * @export
 * @class SlashingApi
 * @extends {BaseAPI}
 */
var SlashingApi = /** @class */ (function (_super) {
    __extends(SlashingApi, _super);
    function SlashingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingParametersGet = function (options) {
        return exports.SlashingApiFp(this.configuration).slashingParametersGet(options)(this.axios, this.basePath);
    };
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingSigningInfosGet = function (page, limit, options) {
        return exports.SlashingApiFp(this.configuration).slashingSigningInfosGet(page, limit, options)(this.axios, this.basePath);
    };
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {UnjailReq} unjailBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingValidatorsValidatorAddrUnjailPost = function (validatorAddr, unjailBody, options) {
        return exports.SlashingApiFp(this.configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(this.axios, this.basePath);
    };
    return SlashingApi;
}(base_1.BaseAPI));
exports.SlashingApi = SlashingApi;
/**
 * StakingApi - axios parameter creator
 * @export
 */
exports.StakingApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/delegations".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsPost.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/delegations".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}"
                .replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)))
                .replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrRedelegationsPost.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/redelegations".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsPost.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof delegation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(delegation !== undefined ? delegation : {})
                : delegation || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}"
                .replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)))
                .replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/validators".replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'delegatorAddr' is not null or undefined
            if (delegatorAddr === null || delegatorAddr === undefined) {
                throw new base_1.RequiredError("delegatorAddr", "Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.");
            }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.");
            }
            var localVarPath = "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}"
                .replace("{" + "delegatorAddr" + "}", encodeURIComponent(String(delegatorAddr)))
                .replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/staking/parameters";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/staking/pool";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/staking/redelegations";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (delegator !== undefined) {
                localVarQueryParameter["delegator"] = delegator;
            }
            if (validatorFrom !== undefined) {
                localVarQueryParameter["validator_from"] = validatorFrom;
            }
            if (validatorTo !== undefined) {
                localVarQueryParameter["validator_to"] = validatorTo;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/staking/validators";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (status !== undefined) {
                localVarQueryParameter["status"] = status;
            }
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrDelegationsGet.");
            }
            var localVarPath = "/staking/validators/{validatorAddr}/delegations".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrGet.");
            }
            var localVarPath = "/staking/validators/{validatorAddr}".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'validatorAddr' is not null or undefined
            if (validatorAddr === null || validatorAddr === undefined) {
                throw new base_1.RequiredError("validatorAddr", "Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrUnbondingDelegationsGet.");
            }
            var localVarPath = "/staking/validators/{validatorAddr}/unbonding_delegations".replace("{" + "validatorAddr" + "}", encodeURIComponent(String(validatorAddr)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StakingApi - functional programming interface
 * @export
 */
exports.StakingApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingParametersGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingPoolGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsGet(status, page, limit, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StakingApi - factory interface
 * @export
 */
exports.StakingApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {DelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {RedelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {UndelegateReq} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            return exports.StakingApiFp(configuration).stakingParametersGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            return exports.StakingApiFp(configuration).stakingPoolGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            return exports.StakingApiFp(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            return exports.StakingApiFp(configuration).stakingValidatorsGet(status, page, limit, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(axios, basePath);
        },
    };
};
/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
var StakingApi = /** @class */ (function (_super) {
    __extends(StakingApi, _super);
    function StakingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsGet = function (delegatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {DelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsPost = function (delegatorAddr, delegation, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {RedelegationReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrRedelegationsPost = function (delegatorAddr, delegation, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet = function (delegatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {UndelegateReq} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost = function (delegatorAddr, delegation, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsGet = function (delegatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingParametersGet = function (options) {
        return exports.StakingApiFp(this.configuration).stakingParametersGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingPoolGet = function (options) {
        return exports.StakingApiFp(this.configuration).stakingPoolGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingRedelegationsGet = function (delegator, validatorFrom, validatorTo, options) {
        return exports.StakingApiFp(this.configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsGet = function (status, page, limit, options) {
        return exports.StakingApiFp(this.configuration).stakingValidatorsGet(status, page, limit, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrDelegationsGet = function (validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrGet = function (validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrUnbondingDelegationsGet = function (validatorAddr, options) {
        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(this.axios, this.basePath);
    };
    return StakingApi;
}(base_1.BaseAPI));
exports.StakingApi = StakingApi;
/**
 * SupplyApi - axios parameter creator
 * @export
 */
exports.SupplyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet: function (denomination, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'denomination' is not null or undefined
            if (denomination === null || denomination === undefined) {
                throw new base_1.RequiredError("denomination", "Required parameter denomination was null or undefined when calling supplyTotalDenominationGet.");
            }
            var localVarPath = "/supply/total/{denomination}".replace("{" + "denomination" + "}", encodeURIComponent(String(denomination)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/supply/total";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SupplyApi - functional programming interface
 * @export
 */
exports.SupplyApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet: function (denomination, options) {
            var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalDenominationGet(denomination, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet: function (options) {
            var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SupplyApi - factory interface
 * @export
 */
exports.SupplyApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalDenominationGet: function (denomination, options) {
            return exports.SupplyApiFp(configuration).supplyTotalDenominationGet(denomination, options)(axios, basePath);
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyTotalGet: function (options) {
            return exports.SupplyApiFp(configuration).supplyTotalGet(options)(axios, basePath);
        },
    };
};
/**
 * SupplyApi - object-oriented interface
 * @export
 * @class SupplyApi
 * @extends {BaseAPI}
 */
var SupplyApi = /** @class */ (function (_super) {
    __extends(SupplyApi, _super);
    function SupplyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    SupplyApi.prototype.supplyTotalDenominationGet = function (denomination, options) {
        return exports.SupplyApiFp(this.configuration).supplyTotalDenominationGet(denomination, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupplyApi
     */
    SupplyApi.prototype.supplyTotalGet = function (options) {
        return exports.SupplyApiFp(this.configuration).supplyTotalGet(options)(this.axios, this.basePath);
    };
    return SupplyApi;
}(base_1.BaseAPI));
exports.SupplyApi = SupplyApi;
/**
 * TendermintRPCApi - axios parameter creator
 * @export
 */
exports.TendermintRPCApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new base_1.RequiredError("height", "Required parameter height was null or undefined when calling blocksHeightGet.");
            }
            var localVarPath = "/blocks/{height}".replace("{" + "height" + "}", encodeURIComponent(String(height)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/blocks/latest";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/syncing";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'height' is not null or undefined
            if (height === null || height === undefined) {
                throw new base_1.RequiredError("height", "Required parameter height was null or undefined when calling validatorsetsHeightGet.");
            }
            var localVarPath = "/validatorsets/{height}".replace("{" + "height" + "}", encodeURIComponent(String(height)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/validatorsets/latest";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TendermintRPCApi - functional programming interface
 * @export
 */
exports.TendermintRPCApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksHeightGet(height, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksLatestGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).syncingGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsHeightGet(height, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsLatestGet(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TendermintRPCApi - factory interface
 * @export
 */
exports.TendermintRPCApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            return exports.TendermintRPCApiFp(configuration).blocksHeightGet(height, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            return exports.TendermintRPCApiFp(configuration).blocksLatestGet(options)(axios, basePath);
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            return exports.TendermintRPCApiFp(configuration).syncingGet(options)(axios, basePath);
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            return exports.TendermintRPCApiFp(configuration).validatorsetsHeightGet(height, options)(axios, basePath);
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            return exports.TendermintRPCApiFp(configuration).validatorsetsLatestGet(options)(axios, basePath);
        },
    };
};
/**
 * TendermintRPCApi - object-oriented interface
 * @export
 * @class TendermintRPCApi
 * @extends {BaseAPI}
 */
var TendermintRPCApi = /** @class */ (function (_super) {
    __extends(TendermintRPCApi, _super);
    function TendermintRPCApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.blocksHeightGet = function (height, options) {
        return exports.TendermintRPCApiFp(this.configuration).blocksHeightGet(height, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.blocksLatestGet = function (options) {
        return exports.TendermintRPCApiFp(this.configuration).blocksLatestGet(options)(this.axios, this.basePath);
    };
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.syncingGet = function (options) {
        return exports.TendermintRPCApiFp(this.configuration).syncingGet(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.validatorsetsHeightGet = function (height, options) {
        return exports.TendermintRPCApiFp(this.configuration).validatorsetsHeightGet(height, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.validatorsetsLatestGet = function (options) {
        return exports.TendermintRPCApiFp(this.configuration).validatorsetsLatestGet(options)(this.axios, this.basePath);
    };
    return TendermintRPCApi;
}(base_1.BaseAPI));
exports.TendermintRPCApi = TendermintRPCApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
exports.TransactionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tx' is not null or undefined
            if (tx === null || tx === undefined) {
                throw new base_1.RequiredError("tx", "Required parameter tx was null or undefined when calling txsDecodePost.");
            }
            var localVarPath = "/txs/decode";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof tx !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tx !== undefined ? tx : {})
                : tx || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'tx' is not null or undefined
            if (tx === null || tx === undefined) {
                throw new base_1.RequiredError("tx", "Required parameter tx was null or undefined when calling txsEncodePost.");
            }
            var localVarPath = "/txs/encode";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof tx !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tx !== undefined ? tx : {})
                : tx || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/txs";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (messageAction !== undefined) {
                localVarQueryParameter["message.action"] = messageAction;
            }
            if (messageSender !== undefined) {
                localVarQueryParameter["message.sender"] = messageSender;
            }
            if (page !== undefined) {
                localVarQueryParameter["page"] = page;
            }
            if (limit !== undefined) {
                localVarQueryParameter["limit"] = limit;
            }
            if (txMinheight !== undefined) {
                localVarQueryParameter["tx.minheight"] = txMinheight;
            }
            if (txMaxheight !== undefined) {
                localVarQueryParameter["tx.maxheight"] = txMaxheight;
            }
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'hash' is not null or undefined
            if (hash === null || hash === undefined) {
                throw new base_1.RequiredError("hash", "Required parameter hash was null or undefined when calling txsHashGet.");
            }
            var localVarPath = "/txs/{hash}".replace("{" + "hash" + "}", encodeURIComponent(String(hash)));
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "GET" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'txBroadcast' is not null or undefined
            if (txBroadcast === null || txBroadcast === undefined) {
                throw new base_1.RequiredError("txBroadcast", "Required parameter txBroadcast was null or undefined when calling txsPost.");
            }
            var localVarPath = "/txs";
            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign(__assign({ method: "POST" }, baseOptions), options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            var needsSerialization = typeof txBroadcast !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(txBroadcast !== undefined ? txBroadcast : {})
                : txBroadcast || "";
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
exports.TransactionsApiFp = function (configuration) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsDecodePost(tx, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsEncodePost(tx, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsHashGet(hash, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsPost(txBroadcast, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TransactionsApi - factory interface
 * @export
 */
exports.TransactionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {DecodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            return exports.TransactionsApiFp(configuration).txsDecodePost(tx, options)(axios, basePath);
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {EncodeReq} tx
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            return exports.TransactionsApiFp(configuration).txsEncodePost(tx, options)(axios, basePath);
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            return exports.TransactionsApiFp(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(axios, basePath);
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            return exports.TransactionsApiFp(configuration).txsHashGet(hash, options)(axios, basePath);
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {BroadcastReq} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            return exports.TransactionsApiFp(configuration).txsPost(txBroadcast, options)(axios, basePath);
        },
    };
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {DecodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsDecodePost = function (tx, options) {
        return exports.TransactionsApiFp(this.configuration).txsDecodePost(tx, options)(this.axios, this.basePath);
    };
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {EncodeReq} tx
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsEncodePost = function (tx, options) {
        return exports.TransactionsApiFp(this.configuration).txsEncodePost(tx, options)(this.axios, this.basePath);
    };
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsGet = function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
        return exports.TransactionsApiFp(this.configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(this.axios, this.basePath);
    };
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsHashGet = function (hash, options) {
        return exports.TransactionsApiFp(this.configuration).txsHashGet(hash, options)(this.axios, this.basePath);
    };
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {BroadcastReq} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsPost = function (txBroadcast, options) {
        return exports.TransactionsApiFp(this.configuration).txsPost(txBroadcast, options)(this.axios, this.basePath);
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
