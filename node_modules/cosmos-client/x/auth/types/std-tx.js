"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var tx_1 = require("../../../types/tx");
var codec_1 = require("../../../codec");
var canonicalize_json_1 = require("./canonicalize-json");
if (typeof process !== "undefined" &&
    process.versions &&
    process.versions.node) {
    global.TextEncoder = require("util").TextEncoder;
}
/**
 *
 */
var StdTx = /** @class */ (function (_super) {
    __extends(StdTx, _super);
    /**
     *
     * @param msg
     * @param fee
     * @param signatures
     * @param memo
     */
    function StdTx(msg, fee, signatures, memo) {
        var _this = _super.call(this) || this;
        _this.msg = msg;
        _this.fee = fee;
        _this.signatures = signatures;
        _this.memo = memo;
        return _this;
    }
    StdTx.prototype.getSignBytes = function (chainID, accountNumber, sequence) {
        var stdSignMsg = {
            account_number: accountNumber,
            chain_id: chainID,
            fee: this.fee,
            memo: this.memo,
            msgs: this.msg,
            sequence: sequence,
        };
        var obj = JSON.parse(codec_1.codec.toJSONString(stdSignMsg));
        var canonicalized = canonicalize_json_1.canonicalizeJSON(obj);
        var encoder = new TextEncoder();
        var encoded = encoder.encode(JSON.stringify(canonicalized));
        return Buffer.from(encoded);
    };
    StdTx.fromJSON = function (value) {
        return new StdTx(value.msg, value.fee, value.signatures, value.memo);
    };
    return StdTx;
}(tx_1.Tx));
exports.StdTx = StdTx;
