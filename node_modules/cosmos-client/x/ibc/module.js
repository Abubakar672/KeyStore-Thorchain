"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("../../api");
var codec_1 = require("../../codec");
function channelsOpenInitPost(sdk, channelOpenInitRequestBody) {
    return new api_1.IBCApi(undefined, sdk.url).ibcChannelsOpenInitPost(channelOpenInitRequestBody);
}
exports.channelsOpenInitPost = channelsOpenInitPost;
function channelsOpenTryPost(sdk, req) {
    return new api_1.IBCApi(undefined, sdk.url).ibcChannelsOpenTryPost(req);
}
exports.channelsOpenTryPost = channelsOpenTryPost;
function clientsClientIdClientStateGet(sdk, clientID, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcClientsClientIdClientStateGet(clientID, prove);
}
exports.clientsClientIdClientStateGet = clientsClientIdClientStateGet;
function clientsClientIdConnectionsGet(sdk, clientID, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcClientsClientIdConnectionsGet(clientID, prove);
}
exports.clientsClientIdConnectionsGet = clientsClientIdConnectionsGet;
function clientsClientIdConsensusStateGet(sdk, clientID, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcClientsClientIdConsensusStateGet(clientID, prove);
}
exports.clientsClientIdConsensusStateGet = clientsClientIdConsensusStateGet;
function clientsClientIdMisbehaviourPost(sdk, clientID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcClientsClientIdMisbehaviourPost(clientID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.clientsClientIdMisbehaviourPost = clientsClientIdMisbehaviourPost;
function clientsClientIdRootsHeightGet(sdk, clientID, height, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcClientsClientIdRootsHeightGet(clientID, height, prove);
}
exports.clientsClientIdRootsHeightGet = clientsClientIdRootsHeightGet;
function clientsClientIdUpdatePost(sdk, clientID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcClientsClientIdUpdatePost(clientID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.clientsClientIdUpdatePost = clientsClientIdUpdatePost;
function clientsPost(sdk, req) {
    return new api_1.IBCApi(undefined, sdk.url).ibcClientsPost(req).then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.clientsPost = clientsPost;
function connectionsConnectionIdGet(sdk, connectionID, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcConnectionsConnectionIdGet(connectionID, prove);
}
exports.connectionsConnectionIdGet = connectionsConnectionIdGet;
function connectionsConnectionIdOpenAckPost(sdk, connectionID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcConnectionsConnectionIdOpenAckPost(connectionID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.connectionsConnectionIdOpenAckPost = connectionsConnectionIdOpenAckPost;
function connectionsConnectionIdOpenConfirmPost(sdk, connectionID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcConnectionsConnectionIdOpenConfirmPost(connectionID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.connectionsConnectionIdOpenConfirmPost = connectionsConnectionIdOpenConfirmPost;
function connectionsOpenInitPost(sdk, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcConnectionsOpenInitPost(req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.connectionsOpenInitPost = connectionsOpenInitPost;
function connectionsOpenTryPost(sdk, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcConnectionsOpenTryPost(req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.connectionsOpenTryPost = connectionsOpenTryPost;
function headerGet(sdk) {
    return new api_1.IBCApi(undefined, sdk.url).ibcHeaderGet();
}
exports.headerGet = headerGet;
function nodeStateGet(sdk) {
    return new api_1.IBCApi(undefined, sdk.url).ibcNodeStateGet();
}
exports.nodeStateGet = nodeStateGet;
function packetsReceivePost(sdk, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPacketsReceivePost(req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.packetsReceivePost = packetsReceivePost;
function pathGet(sdk) {
    return new api_1.IBCApi(undefined, sdk.url).ibcPathGet();
}
exports.pathGet = pathGet;
function portsPortIdChannelsChannelIdCloseConfirmPost(sdk, portID, channelID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portID, channelID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.portsPortIdChannelsChannelIdCloseConfirmPost = portsPortIdChannelsChannelIdCloseConfirmPost;
function portsPortIdChannelsChannelIdCloseInitPost(sdk, portID, channelID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPortsPortIdChannelsChannelIdCloseInitPost(portID, channelID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.portsPortIdChannelsChannelIdCloseInitPost = portsPortIdChannelsChannelIdCloseInitPost;
function portsPortIdChannelsChannelIdGet(sdk, portID, channelID, prove) {
    return new api_1.IBCApi(undefined, sdk.url).ibcPortsPortIdChannelsChannelIdGet(portID, channelID, prove);
}
exports.portsPortIdChannelsChannelIdGet = portsPortIdChannelsChannelIdGet;
function portsPortIdChannelsChannelIdNextSequenceRecvGet(sdk, portID, channelID) {
    return new api_1.IBCApi(undefined, sdk.url).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portID, channelID);
}
exports.portsPortIdChannelsChannelIdNextSequenceRecvGet = portsPortIdChannelsChannelIdNextSequenceRecvGet;
function portsPortIdChannelsChannelIdOpenAckPost(sdk, portID, channelID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPortsPortIdChannelsChannelIdOpenAckPost(portID, channelID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.portsPortIdChannelsChannelIdOpenAckPost = portsPortIdChannelsChannelIdOpenAckPost;
function portsPortIdChannelsChannelIdOpenConfirmPost(sdk, portID, channelID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portID, channelID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.portsPortIdChannelsChannelIdOpenConfirmPost = portsPortIdChannelsChannelIdOpenConfirmPost;
function portsPortIdChannelsChannelIdTransferPost(sdk, portID, channelID, req) {
    return new api_1.IBCApi(undefined, sdk.url)
        .ibcPortsPortIdChannelsChannelIdTransferPost(portID, channelID, req)
        .then(function (res) {
        res.data = codec_1.codec.fromJSONString(JSON.stringify(res.data));
        return res;
    });
}
exports.portsPortIdChannelsChannelIdTransferPost = portsPortIdChannelsChannelIdTransferPost;
