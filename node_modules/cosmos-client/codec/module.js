"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.maps = {
    type: new Map(),
    fromJSON: {},
};
function toJSONString(value) {
    return JSON.stringify(value, function (key, value) {
        var type = exports.maps.type.get(value === null || value === void 0 ? void 0 : value.constructor);
        if (type) {
            return {
                type: type,
                value: value.toJSONInCodec ? value.toJSONInCodec() : __assign({}, value),
            };
        }
        return value;
    });
}
exports.toJSONString = toJSONString;
function fromJSONString(json) {
    return JSON.parse(json, function (key, value) {
        var _type = value === null || value === void 0 ? void 0 : value.type;
        var _value = value === null || value === void 0 ? void 0 : value.value;
        if (_type && exports.maps.fromJSON[_type]) {
            return exports.maps.fromJSON[_type](_value);
        }
        if (_type && _value && Object.keys(value).length == 2) {
            return new AminoWrapping(_type, _value);
        }
        return value;
    });
}
exports.fromJSONString = fromJSONString;
function registerCodec(type, constructor, fromJSON) {
    exports.maps.type.set(constructor, type);
    exports.maps.fromJSON[type] = fromJSON;
}
exports.registerCodec = registerCodec;
var AminoWrapping = /** @class */ (function () {
    function AminoWrapping(type, value) {
        this.type = type;
        this.value = value;
    }
    return AminoWrapping;
}());
exports.AminoWrapping = AminoWrapping;
