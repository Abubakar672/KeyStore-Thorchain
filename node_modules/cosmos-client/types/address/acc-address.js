"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var bech32 = __importStar(require("bech32"));
var address_1 = require("./address");
/**
 * AccAddress
 */
var AccAddress = /** @class */ (function (_super) {
    __extends(AccAddress, _super);
    function AccAddress() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     */
    AccAddress.prototype.toBech32 = function () {
        var words = bech32.toWords(Buffer.from(this._value));
        return bech32.encode(address_1.bech32Prefix.accAddr, words);
    };
    /**
     *
     * @param accAddress
     */
    AccAddress.fromBech32 = function (accAddress) {
        var _a = bech32.decode(accAddress), prefix = _a.prefix, words = _a.words;
        return new AccAddress(bech32.fromWords(words));
    };
    AccAddress.fromPublicKey = function (pubKey) {
        return new AccAddress(pubKey.getAddress());
    };
    /**
     * For `JSON.stringify`
     */
    AccAddress.prototype.toJSON = function () {
        return this.toBech32();
    };
    return AccAddress;
}(address_1.Address));
exports.AccAddress = AccAddress;
