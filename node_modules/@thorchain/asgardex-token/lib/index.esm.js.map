{"version":3,"file":"index.esm.js","sources":["../node_modules/@thorchain/asgardex-util/lib/index.esm.js"],"sourcesContent":["import BigNumber from 'bignumber.js';\n\n/**\r\n * Helper to delay anything within an `async` function\r\n *\r\n * @param ms delay in milliseconds\r\n *\r\n * @example\r\n *\r\n * const anyAsyncFunc = async () => {\r\n *  // do something\r\n *  console.log('before delay')\r\n *  // wait for 200ms\r\n *  await delay(200)\r\n *  // and do other things\r\n *  console.log('after delay')\r\n * }\r\n */\r\nvar delay = function (ms) { return new Promise(function (resolve) { return setTimeout(resolve, ms); }); };\n\n/**\r\n * Shortcut to create a BigNumber\r\n */\r\nvar bn = function (value) { return new BigNumber(value); };\r\n/**\r\n * Helper to check whether a BigNumber is valid or not\r\n * */\r\nvar isValidBN = function (value) { return !value.isNaN(); };\r\n/**\r\n * Helper to create a big number from string or number\r\n * If it fails to create a big number, a big number with value 0 will be returned instead\r\n * */\r\nvar bnOrZero = function (value) {\r\n    var b = value ? bn(value) : bn(0);\r\n    return isValidBN(b) ? b : bn(0);\r\n};\r\n/**\r\n * Helper to validate a possible BigNumber\r\n * If the given valie is invalid or undefined, 0 is returned as a BigNumber\r\n */\r\nvar validBNOrZero = function (value) { return (value && isValidBN(value) ? value : bn(0)); };\r\n/**\r\n * Format a BaseNumber to a string depending on given decimal places\r\n * */\r\nvar formatBN = function (value, decimalPlaces) {\r\n    if (decimalPlaces === void 0) { decimalPlaces = 2; }\r\n    return value.toFormat(decimalPlaces);\r\n};\r\nvar SymbolPosition;\r\n(function (SymbolPosition) {\r\n    SymbolPosition[\"BEFORE\"] = \"before\";\r\n    SymbolPosition[\"AFTER\"] = \"after\";\r\n})(SymbolPosition || (SymbolPosition = {}));\r\n/**\r\n * Formats a big number value by prefixing it with `$`\r\n */\r\nvar formatBNCurrency = function (n, decimalPlaces, symbol, position) {\r\n    if (decimalPlaces === void 0) { decimalPlaces = 2; }\r\n    if (symbol === void 0) { symbol = '$'; }\r\n    if (position === void 0) { position = SymbolPosition.BEFORE; }\r\n    var value = formatBN(n, decimalPlaces);\r\n    if (position === SymbolPosition.BEFORE) {\r\n        return \"\" + symbol + value;\r\n    }\r\n    return \"\" + value + symbol;\r\n};\r\n/**\r\n * Helper to get a fixed `BigNumber`\r\n * Returns zero `BigNumber` if `value` is invalid\r\n * */\r\nvar fixedBN = function (value, decimalPlaces) {\r\n    if (decimalPlaces === void 0) { decimalPlaces = 2; }\r\n    var n = bn(value || 0);\r\n    var fixedBN = isValidBN(n) ? n.toFixed(decimalPlaces) : bn(0).toFixed(decimalPlaces);\r\n    return bn(fixedBN);\r\n};\n\nexport { bn, bnOrZero, delay, fixedBN, formatBN, formatBNCurrency, isValidBN, validBNOrZero };\n//# sourceMappingURL=index.esm.js.map\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA,IAAI,EAAE,GAAG,UAAU,KAAK,EAAE,EAAE,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;AAC3D;AACA;AACA;AACA,IAAI,SAAS,GAAG,UAAU,KAAK,EAAE,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;AAc5D;AACA;AACA;AACA,IAAI,QAAQ,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE;AAC/C,IAAI,IAAI,aAAa,KAAK,KAAK,CAAC,EAAE,EAAE,aAAa,GAAG,CAAC,CAAC,EAAE;AACxD,IAAI,OAAO,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;AACzC,CAAC,CAAC;AACF,IAAI,cAAc,CAAC;AACnB,CAAC,UAAU,cAAc,EAAE;AAC3B,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;AACxC,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;AACtC,CAAC,EAAE,cAAc,KAAK,cAAc,GAAG,EAAE,CAAC,CAAC,CAAC;AAc5C;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE;AAC9C,IAAI,IAAI,aAAa,KAAK,KAAK,CAAC,EAAE,EAAE,aAAa,GAAG,CAAC,CAAC,EAAE;AACxD,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;AAC3B,IAAI,IAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AACzF,IAAI,OAAO,EAAE,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}