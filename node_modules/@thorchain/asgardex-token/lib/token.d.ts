import BigNumber from 'bignumber.js';
import { Denomination, TokenAmount, BaseAmount, Amounts } from './types';
/**
 * Number of token decimals - e.g. any of Binance chain tokens
 * For example:
 * RUNE has a maximum of 8 digits of decimal
 * 0.00000001 RUNE == 1 รฐ (tor)
 * */
export declare const TOKEN_DECIMAL = 8;
/**
 * Base number of tokens - e.g. any of Binance chain tokens
 * For example:
 * The amount of RUNE is boosted by 1e8 for decimal part
 * 1 RUNE == 100,000,000 รฐ (tor)
 */
export declare const BASE_NUMBER: number;
/**
 * Factory to create any values of tokens (e.g. RUNE)
 * If the value is undefined, 0 is returned
 * */
export declare const tokenAmount: (value?: string | number | BigNumber | undefined, decimal?: number) => {
    type: Denomination.TOKEN;
    amount: () => BigNumber;
};
/**
 * Factory to create base amounts (e.g. tor)
 * If the value is undefined, 0 is returned
 * */
export declare const baseAmount: (value?: string | number | BigNumber | undefined) => {
    type: Denomination.BASE;
    amount: () => BigNumber;
};
/**
 * Helper to convert values for a token from base values (e.g. RUNE from tor)
 * */
export declare const baseToToken: (base: BaseAmount, decimal?: number) => TokenAmount;
/**
 * Helper to convert token to base values (e.g. tor -> RUNE)
 * */
export declare const tokenToBase: (token: TokenAmount) => BaseAmount;
/**
 * Guard to check whether value is an amount of token or not
 * */
export declare const isTokenAmount: (v: Amounts) => v is {
    type: Denomination.TOKEN;
    amount: () => BigNumber;
};
/**
 * Guard to check whether value is an amount of a base value or not
 * */
export declare const isBaseAmount: (v: Amounts) => v is {
    type: Denomination.BASE;
    amount: () => BigNumber;
};
/**
 * Formats a token value in a user friendly way,
 * depending on given decimal places
 */
export declare const formatTokenAmount: (token: TokenAmount, decimal?: number) => string;
/**
 * Formats a token value by prefixing it with `$`
 */
export declare const formatTokenAmountCurrency: (token: TokenAmount, ticker?: string | undefined) => string;
/**
 * Format a base value as a token in a user friendly way,
 * depending on given decimal places
 */
export declare const formatBaseAsTokenAmount: (base: BaseAmount, decimal?: number) => string;
