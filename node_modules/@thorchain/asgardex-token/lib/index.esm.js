import BigNumber from 'bignumber.js';

var Denomination;
(function (Denomination) {
    /**
     * values for token amounts in base units (no decimal)
     */
    Denomination["BASE"] = "BASE";
    /**
     * values of token amounts (w/ decimal)
     */
    Denomination["TOKEN"] = "TOKEN";
})(Denomination || (Denomination = {}));

/**
 * Shortcut to create a BigNumber
 */
var bn = function (value) { return new BigNumber(value); };
/**
 * Helper to check whether a BigNumber is valid or not
 * */
var isValidBN = function (value) { return !value.isNaN(); };
/**
 * Format a BaseNumber to a string depending on given decimal places
 * */
var formatBN = function (value, decimalPlaces) {
    if (decimalPlaces === void 0) { decimalPlaces = 2; }
    return value.toFormat(decimalPlaces);
};
var SymbolPosition;
(function (SymbolPosition) {
    SymbolPosition["BEFORE"] = "before";
    SymbolPosition["AFTER"] = "after";
})(SymbolPosition || (SymbolPosition = {}));
/**
 * Helper to get a fixed `BigNumber`
 * Returns zero `BigNumber` if `value` is invalid
 * */
var fixedBN = function (value, decimalPlaces) {
    if (decimalPlaces === void 0) { decimalPlaces = 2; }
    var n = bn(value || 0);
    var fixedBN = isValidBN(n) ? n.toFixed(decimalPlaces) : bn(0).toFixed(decimalPlaces);
    return bn(fixedBN);
};

/**
 * Number of token decimals - e.g. any of Binance chain tokens
 * For example:
 * RUNE has a maximum of 8 digits of decimal
 * 0.00000001 RUNE == 1 รฐ (tor)
 * */
var TOKEN_DECIMAL = 8;
/**
 * Base number of tokens - e.g. any of Binance chain tokens
 * For example:
 * The amount of RUNE is boosted by 1e8 for decimal part
 * 1 RUNE == 100,000,000 รฐ (tor)
 */
var BASE_NUMBER = Math.pow(10, TOKEN_DECIMAL); // 1e8
/**
 * Factory to create any values of tokens (e.g. RUNE)
 * If the value is undefined, 0 is returned
 * */
var tokenAmount = function (value, decimal) {
    if (decimal === void 0) { decimal = TOKEN_DECIMAL; }
    return ({
        type: Denomination.TOKEN,
        amount: function () { return fixedBN(value, decimal); },
    });
};
/**
 * Factory to create base amounts (e.g. tor)
 * If the value is undefined, 0 is returned
 * */
var baseAmount = function (value) {
    return ({
        type: Denomination.BASE,
        amount: function () { return fixedBN(value, 0); },
    });
};
/**
 * Helper to convert values for a token from base values (e.g. RUNE from tor)
 * */
var baseToToken = function (base, decimal) {
    if (decimal === void 0) { decimal = TOKEN_DECIMAL; }
    var value = base.amount().div(BASE_NUMBER).decimalPlaces(decimal);
    return tokenAmount(value);
};
/**
 * Helper to convert token to base values (e.g. tor -> RUNE)
 * */
var tokenToBase = function (token) {
    var value = token.amount().multipliedBy(BASE_NUMBER).integerValue();
    return baseAmount(value);
};
/**
 * Guard to check whether value is an amount of token or not
 * */
var isTokenAmount = function (v) { var _a; return (_a = v.type === Denomination.TOKEN) !== null && _a !== void 0 ? _a : false; };
/**
 * Guard to check whether value is an amount of a base value or not
 * */
var isBaseAmount = function (v) { var _a; return (_a = v.type === Denomination.BASE) !== null && _a !== void 0 ? _a : false; };
/**
 * Formats a token value in a user friendly way,
 * depending on given decimal places
 */
var formatTokenAmount = function (token, decimal) {
    if (decimal === void 0) { decimal = 2; }
    return formatBN(token.amount(), decimal);
};
/**
 * Formats a token value by prefixing it with `$`
 */
var formatTokenAmountCurrency = function (token, ticker) {
    var tokenFormatted = formatTokenAmount(token);
    if (ticker === null || ticker === void 0 ? void 0 : ticker.includes('USD')) {
        return "$" + tokenFormatted;
    }
    var symbol = (ticker === null || ticker === void 0 ? void 0 : ticker.includes('.')) ? ticker.split('.')[1] : '';
    if (symbol) {
        return tokenFormatted + " (" + symbol + ")";
    }
    return "$" + tokenFormatted;
};
/**
 * Format a base value as a token in a user friendly way,
 * depending on given decimal places
 */
var formatBaseAsTokenAmount = function (base, decimal) {
    if (decimal === void 0) { decimal = 2; }
    return formatTokenAmount(baseToToken(base), decimal);
};

export { BASE_NUMBER, Denomination, TOKEN_DECIMAL, baseAmount, baseToToken, formatBaseAsTokenAmount, formatTokenAmount, formatTokenAmountCurrency, isBaseAmount, isTokenAmount, tokenAmount, tokenToBase };
//# sourceMappingURL=index.esm.js.map
