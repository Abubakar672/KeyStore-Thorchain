'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var xchainClient = require('@xchainjs/xchain-client');
var xchainCosmos = require('@xchainjs/xchain-cosmos');
var xchainCrypto = require('@xchainjs/xchain-crypto');
var xchainUtil = require('@xchainjs/xchain-util');
var axios = require('axios');
var cosmosClient = require('cosmos-client');
var auth = require('cosmos-client/x/auth');
var bank = require('cosmos-client/x/bank');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var axios__default = /*#__PURE__*/_interopDefaultLegacy(axios);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

var MsgNativeTx = /** @class */ (function (_super) {
    __extends(MsgNativeTx, _super);
    function MsgNativeTx(coins, memo, signer) {
        var _this = _super.call(this) || this;
        _this.coins = coins;
        _this.memo = memo;
        _this.signer = signer;
        return _this;
    }
    return MsgNativeTx;
}(cosmosClient.Msg));
/**
 * This creates MsgNativeTx from json.
 *
 * @param value
 * @returns {MsgNativeTx}
 */
var msgNativeTxFromJson = function (value) {
    return new MsgNativeTx(value.coins, value.memo, cosmosClient.AccAddress.fromBech32(value.signer));
};

var DECIMAL = 8;
var DEFAULT_GAS_VALUE = '2000000';
var DEPOSIT_GAS_VALUE = '500000000';
var MAX_TX_COUNT = 100;
/**
 * Get denomination from Asset
 *
 * @param {Asset} asset
 * @returns {string} The denomination of the given asset.
 */
var getDenom = function (asset) {
    if (xchainUtil.assetToString(asset) === xchainUtil.assetToString(xchainUtil.AssetRuneNative))
        return 'rune';
    return asset.symbol;
};
/**
 * Get denomination with chainname from Asset
 *
 * @param {Asset} asset
 * @returns {string} The denomination with chainname of the given asset.
 */
var getDenomWithChain = function (asset) {
    return xchainUtil.Chain.THORChain + "." + asset.symbol.toUpperCase();
};
/**
 * Get Asset from denomination
 *
 * @param {string} denom
 * @returns {Asset|null} The asset of the given denomination.
 */
var getAsset = function (denom) {
    if (denom === getDenom(xchainUtil.AssetRuneNative))
        return xchainUtil.AssetRuneNative;
    return xchainUtil.assetFromString(xchainUtil.Chain.THORChain + "." + denom.toUpperCase());
};
/**
 * Type guard for MsgSend
 *
 * @param {Msg} msg
 * @returns {boolean} `true` or `false`.
 */
var isMsgSend = function (msg) {
    var _a, _b, _c;
    return ((_a = msg) === null || _a === void 0 ? void 0 : _a.amount) !== undefined &&
        ((_b = msg) === null || _b === void 0 ? void 0 : _b.from_address) !== undefined &&
        ((_c = msg) === null || _c === void 0 ? void 0 : _c.to_address) !== undefined;
};
/**
 * Type guard for MsgMultiSend
 *
 * @param {Msg} msg
 * @returns {boolean} `true` or `false`.
 */
var isMsgMultiSend = function (msg) { var _a, _b; return ((_a = msg) === null || _a === void 0 ? void 0 : _a.inputs) !== undefined && ((_b = msg) === null || _b === void 0 ? void 0 : _b.outputs) !== undefined; };
/**
 * Response guard for transaction broadcast
 *
 * @param {any} response The response from the node.
 * @returns {boolean} `true` or `false`.
 */
var isBroadcastSuccess = function (response) {
    return typeof response === 'object' &&
        response !== null &&
        'logs' in response &&
        response.logs !== undefined;
};
/**
 * Get address prefix based on the network.
 *
 * @param {Network} network
 * @returns {string} The address prefix based on the network.
 *
 **/
var getPrefix = function (network) {
    switch (network) {
        case xchainClient.Network.Mainnet:
            return 'thor';
        case xchainClient.Network.Testnet:
            return 'tthor';
    }
};
/**
 * Get the chain id.
 *
 * @returns {string} The chain id based on the network.
 */
var getChainId = function () { return 'thorchain'; };
/**
 * Register Codecs based on the prefix.
 *
 * @param {string} prefix
 */
var registerCodecs = function (prefix) {
    cosmosClient.codec.registerCodec('thorchain/MsgSend', bank.MsgSend, bank.MsgSend.fromJSON);
    cosmosClient.codec.registerCodec('thorchain/MsgMultiSend', bank.MsgMultiSend, bank.MsgMultiSend.fromJSON);
    cosmosClient.AccAddress.setBech32Prefix(prefix, prefix + 'pub', prefix + 'valoper', prefix + 'valoperpub', prefix + 'valcons', prefix + 'valconspub');
};
/**
 * Parse transaction data from event logs
 *
 * @param {TxLog[]} logs List of tx logs
 * @param {Address} address - Address to get transaction data for
 * @returns {TxData} Parsed transaction data
 */
var getDepositTxDataFromLogs = function (logs, address) {
    var _a;
    var events = (_a = logs[0]) === null || _a === void 0 ? void 0 : _a.events;
    if (!events) {
        throw Error('No events in logs available');
    }
    var transferDataList = events.reduce(function (acc, _a) {
        var type = _a.type, attributes = _a.attributes;
        if (type === 'transfer') {
            return attributes.reduce(function (acc2, _a, index) {
                var key = _a.key, value = _a.value;
                if (index % 3 === 0)
                    acc2.push({ sender: '', recipient: '', amount: xchainUtil.baseAmount(0, DECIMAL) });
                var newData = acc2[acc2.length - 1];
                if (key === 'sender')
                    newData.sender = value;
                if (key === 'recipient')
                    newData.recipient = value;
                if (key === 'amount')
                    newData.amount = xchainUtil.baseAmount(value.replace(/rune/, ''), DECIMAL);
                return acc2;
            }, acc);
        }
        return acc;
    }, []);
    var txData = transferDataList
        // filter out txs which are not based on given address
        .filter(function (_a) {
        var sender = _a.sender, recipient = _a.recipient;
        return sender === address || recipient === address;
    })
        // transform `TransferData` -> `TxData`
        .reduce(function (acc, _a) {
        var sender = _a.sender, recipient = _a.recipient, amount = _a.amount;
        return (__assign(__assign({}, acc), { from: __spreadArray(__spreadArray([], acc.from), [{ amount: amount, from: sender }]), to: __spreadArray(__spreadArray([], acc.to), [{ amount: amount, to: recipient }]) }));
    }, { from: [], to: [], type: xchainClient.TxType.Transfer });
    return txData;
};
/**
 * Get the default fee.
 *
 * @returns {Fees} The default fee.
 */
var getDefaultFees = function () {
    var fee = xchainUtil.baseAmount(DEFAULT_GAS_VALUE, DECIMAL);
    return xchainClient.singleFee(xchainClient.FeeType.FlatFee, fee);
};
/**
 * Get transaction type.
 *
 * @param {string} txData the transaction input data
 * @param {string} encoding `base64` or `hex`
 * @returns {string} the transaction type.
 */
var getTxType = function (txData, encoding) {
    return Buffer.from(txData, encoding).toString().slice(4);
};
/**
 * Structure StdTx from MsgNativeTx.
 *
 * @param {string} txId The transaction id.
 * @returns {Tx} The transaction details of the given transaction id.
 *
 * @throws {"Invalid client url"} Thrown if the client url is an invalid one.
 */
var buildDepositTx = function (msgNativeTx, nodeUrl) { return __awaiter(void 0, void 0, void 0, function () {
    var response, fee, unsignedStdTx;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, axios__default['default'].post(nodeUrl + "/thorchain/deposit", {
                    coins: msgNativeTx.coins,
                    memo: msgNativeTx.memo,
                    base_req: {
                        chain_id: getChainId(),
                        from: msgNativeTx.signer,
                    },
                })];
            case 1:
                response = (_c.sent()).data;
                if (!response || !response.value)
                    throw new Error('Invalid client url');
                fee = (_b = (_a = response.value) === null || _a === void 0 ? void 0 : _a.fee) !== null && _b !== void 0 ? _b : { amount: [] };
                unsignedStdTx = auth.StdTx.fromJSON({
                    msg: response.value.msg,
                    // override fee
                    fee: __assign(__assign({}, fee), { gas: DEPOSIT_GAS_VALUE }),
                    signatures: [],
                    memo: '',
                });
                return [2 /*return*/, unsignedStdTx];
        }
    });
}); };
/**
 * Get the balance of a given address.
 *
 * @param {Address} address By default, it will return the balance of the current wallet. (optional)
 * @param {Asset} asset If not set, it will return all assets available. (optional)
 * @param {cosmosClient} CosmosSDKClient
 *
 * @returns {Balance[]} The balance of the address.
 */
var getBalance = function (_a) {
    var address = _a.address, assets = _a.assets, cosmosClient = _a.cosmosClient;
    return __awaiter(void 0, void 0, void 0, function () {
        var balances;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, cosmosClient.getBalance(address)];
                case 1:
                    balances = _b.sent();
                    return [2 /*return*/, balances
                            .map(function (balance) { return ({
                            asset: (balance.denom && getAsset(balance.denom)) || xchainUtil.AssetRuneNative,
                            amount: xchainUtil.baseAmount(balance.amount, DECIMAL),
                        }); })
                            .filter(function (balance) { return !assets || assets.filter(function (asset) { return xchainUtil.assetToString(balance.asset) === xchainUtil.assetToString(asset); }).length; })];
            }
        });
    });
};
/**
 * Get the client url.
 *
 * @returns {ClientUrl} The client url (both mainnet and testnet) for thorchain.
 */
var getDefaultClientUrl = function () {
    var _a;
    return _a = {},
        _a[xchainClient.Network.Testnet] = {
            node: 'https://testnet.thornode.thorchain.info',
            rpc: 'https://testnet.rpc.thorchain.info',
        },
        _a[xchainClient.Network.Mainnet] = {
            node: 'https://thornode.thorchain.info',
            rpc: 'https://rpc.thorchain.info',
        },
        _a;
};
var DEFAULT_EXPLORER_URL = 'https://viewblock.io/thorchain';
/**
 * Get default explorer urls.
 *
 * @returns {ExplorerUrls} Default explorer urls (both mainnet and testnet) for thorchain.
 */
var getDefaultExplorerUrls = function () {
    var _a, _b, _c;
    var root = (_a = {},
        _a[xchainClient.Network.Testnet] = DEFAULT_EXPLORER_URL + "?network=testnet",
        _a[xchainClient.Network.Mainnet] = DEFAULT_EXPLORER_URL,
        _a);
    var txUrl = DEFAULT_EXPLORER_URL + "/tx";
    var tx = (_b = {},
        _b[xchainClient.Network.Testnet] = txUrl,
        _b[xchainClient.Network.Mainnet] = txUrl,
        _b);
    var addressUrl = DEFAULT_EXPLORER_URL + "/address";
    var address = (_c = {},
        _c[xchainClient.Network.Testnet] = addressUrl,
        _c[xchainClient.Network.Mainnet] = addressUrl,
        _c);
    return {
        root: root,
        tx: tx,
        address: address,
    };
};
/**
 * Get the explorer url.
 *
 * @param {Network} network
 * @param {ExplorerUrls} Explorer urls
 * @returns {string} The explorer url for thorchain based on the given network.
 */
var getExplorerUrl = function (_a, network) {
    var root = _a.root;
    return root[network];
};
/**
 * Get explorer address url.
 *
 * @param {ExplorerUrls} Explorer urls
 * @param {Network} network
 * @param {Address} address
 * @returns {string} The explorer url for the given address.
 */
var getExplorerAddressUrl = function (_a) {
    var urls = _a.urls, network = _a.network, address = _a.address;
    var url = urls.address[network] + "/" + address;
    switch (network) {
        case xchainClient.Network.Mainnet:
            return url;
        case xchainClient.Network.Testnet:
            return url + "?network=testnet";
    }
};
/**
 * Get transaction url.
 *
 * @param {ExplorerUrls} Explorer urls
 * @param {Network} network
 * @param {TxHash} txID
 * @returns {string} The explorer url for the given transaction id.
 */
var getExplorerTxUrl = function (_a) {
    var urls = _a.urls, network = _a.network, txID = _a.txID;
    var url = urls.tx[network] + "/" + txID;
    switch (network) {
        case xchainClient.Network.Mainnet:
            return url;
        case xchainClient.Network.Testnet:
            return url + "?network=testnet";
    }
};

/**
 * Custom Thorchain Client
 */
var Client = /** @class */ (function () {
    /**
     * Constructor
     *
     * Client has to be initialised with network type and phrase.
     * It will throw an error if an invalid phrase has been passed.
     *
     * @param {XChainClientParams} params
     *
     * @throws {"Invalid phrase"} Thrown if the given phase is invalid.
     */
    function Client(_a) {
        var _b;
        var _this = this;
        var _c = _a.network, network = _c === void 0 ? xchainClient.Network.Testnet : _c, phrase = _a.phrase, clientUrl = _a.clientUrl, explorerUrls = _a.explorerUrls, _d = _a.rootDerivationPaths, rootDerivationPaths = _d === void 0 ? (_b = {},
            _b[xchainClient.Network.Mainnet] = "44'/931'/0'/0/",
            _b[xchainClient.Network.Testnet] = "44'/931'/0'/0/",
            _b) : _d;
        this.phrase = '';
        /**
         * Get transaction history of a given address with pagination options.
         * By default it will return the transaction history of the current wallet.
         *
         * @param {TxHistoryParams} params The options to get transaction history. (optional)
         * @returns {TxsPage} The transaction history.
         */
        this.getTransactions = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var messageAction, offset, limit, address, txMinHeight, txMaxHeight, txIncomingHistory, txOutgoingHistory, history, total, txs;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messageAction = undefined;
                        offset = (params === null || params === void 0 ? void 0 : params.offset) || 0;
                        limit = (params === null || params === void 0 ? void 0 : params.limit) || 10;
                        address = (params === null || params === void 0 ? void 0 : params.address) || this.getAddress();
                        txMinHeight = undefined;
                        txMaxHeight = undefined;
                        registerCodecs(getPrefix(this.network));
                        return [4 /*yield*/, this.cosmosClient.searchTxFromRPC({
                                rpcEndpoint: this.getClientUrl().rpc,
                                messageAction: messageAction,
                                transferRecipient: address,
                                limit: MAX_TX_COUNT,
                                txMinHeight: txMinHeight,
                                txMaxHeight: txMaxHeight,
                            })];
                    case 1:
                        txIncomingHistory = (_a.sent()).txs;
                        return [4 /*yield*/, this.cosmosClient.searchTxFromRPC({
                                rpcEndpoint: this.getClientUrl().rpc,
                                messageAction: messageAction,
                                transferSender: address,
                                limit: MAX_TX_COUNT,
                                txMinHeight: txMinHeight,
                                txMaxHeight: txMaxHeight,
                            })];
                    case 2:
                        txOutgoingHistory = (_a.sent()).txs;
                        history = __spreadArray(__spreadArray([], txIncomingHistory), txOutgoingHistory).sort(function (a, b) {
                            if (a.height !== b.height)
                                return parseInt(b.height) > parseInt(a.height) ? 1 : -1;
                            if (a.hash !== b.hash)
                                return a.hash > b.hash ? 1 : -1;
                            return 0;
                        })
                            .reduce(function (acc, tx) { return __spreadArray(__spreadArray([], acc), (acc.length === 0 || acc[acc.length - 1].hash !== tx.hash ? [tx] : [])); }, [])
                            .filter((params === null || params === void 0 ? void 0 : params.filterFn) ? params.filterFn : function (tx) { return tx; })
                            .filter(function (_, index) { return index < MAX_TX_COUNT; });
                        total = history.length;
                        history = history.filter(function (_, index) { return index >= offset && index < offset + limit; });
                        return [4 /*yield*/, Promise.all(history.map(function (_a) {
                                var hash = _a.hash;
                                return _this.getTransactionData(hash, address);
                            }))];
                    case 3:
                        txs = _a.sent();
                        return [2 /*return*/, {
                                total: total,
                                txs: txs,
                            }];
                }
            });
        }); };
        this.network = network;
        this.clientUrl = clientUrl || getDefaultClientUrl();
        this.explorerUrls = explorerUrls || getDefaultExplorerUrls();
        this.rootDerivationPaths = rootDerivationPaths;
        this.cosmosClient = new xchainCosmos.CosmosSDKClient({
            server: this.getClientUrl().node,
            chainId: getChainId(),
            prefix: getPrefix(this.network),
        });
        if (phrase)
            this.setPhrase(phrase);
    }
    /**
     * Purge client.
     *
     * @returns {void}
     */
    Client.prototype.purgeClient = function () {
        this.phrase = '';
    };
    /**
     * Set/update the current network.
     *
     * @param {Network} network
     * @returns {void}
     *
     * @throws {"Network must be provided"}
     * Thrown if network has not been set before.
     */
    Client.prototype.setNetwork = function (network) {
        if (!network) {
            throw new Error('Network must be provided');
        }
        this.network = network;
        this.cosmosClient.updatePrefix(getPrefix(this.network));
    };
    /**
     * Get the current network.
     *
     * @returns {Network}
     */
    Client.prototype.getNetwork = function () {
        return this.network;
    };
    /**
     * Set/update the client URL.
     *
     * @param {ClientUrl} clientUrl The client url to be set.
     * @returns {void}
     */
    Client.prototype.setClientUrl = function (clientUrl) {
        this.clientUrl = clientUrl;
    };
    /**
     * Get the client url.
     *
     * @returns {NodeUrl} The client url for thorchain based on the current network.
     */
    Client.prototype.getClientUrl = function () {
        return this.clientUrl[this.network];
    };
    /**
     * Set/update the explorer URLs.
     *
     * @param {ExplorerUrls} urls The explorer urls to be set.
     * @returns {void}
     */
    Client.prototype.setExplorerUrls = function (urls) {
        this.explorerUrls = urls;
    };
    /**
     * Get the explorer url.
     *
     * @returns {string} The explorer url for thorchain based on the current network.
     */
    Client.prototype.getExplorerUrl = function () {
        return this.explorerUrls.root[this.network];
    };
    /**
     * Get cosmos client
     * @returns {CosmosSDKClient} current cosmos client
     */
    Client.prototype.getCosmosClient = function () {
        return this.cosmosClient;
    };
    /**
     * Get the explorer url for the given address.
     *
     * @param {Address} address
     * @returns {string} The explorer url for the given address.
     */
    Client.prototype.getExplorerAddressUrl = function (address) {
        return getExplorerAddressUrl({ urls: this.explorerUrls, network: this.network, address: address });
    };
    /**
     * Get the explorer url for the given transaction id.
     *
     * @param {string} txID
     * @returns {string} The explorer url for the given transaction id.
     */
    Client.prototype.getExplorerTxUrl = function (txID) {
        return getExplorerTxUrl({ urls: this.explorerUrls, network: this.network, txID: txID });
    };
    /**
     * Set/update a new phrase
     *
     * @param {string} phrase A new phrase.
     * @returns {Address} The address from the given phrase
     *
     * @throws {"Invalid phrase"}
     * Thrown if the given phase is invalid.
     */
    Client.prototype.setPhrase = function (phrase, walletIndex) {
        if (walletIndex === void 0) { walletIndex = 0; }
        if (this.phrase !== phrase) {
            if (!xchainCrypto.validatePhrase(phrase)) {
                throw new Error('Invalid phrase');
            }
            this.phrase = phrase;
        }
        return this.getAddress(walletIndex);
    };
    /**
     * Get getFullDerivationPath
     *
     * @param {number} index the HD wallet index
     * @returns {string} The bitcoin derivation path based on the network.
     */
    Client.prototype.getFullDerivationPath = function (index) {
        return this.rootDerivationPaths[this.network] + ("" + index);
    };
    /**
     * Get private key
     *
     * @param {number} index the HD wallet index (optional)
     * @returns {PrivKey} The private key generated from the given phrase
     *
     * @throws {"Phrase not set"}
     * Throws an error if phrase has not been set before
     * */
    Client.prototype.getPrivKey = function (index) {
        if (index === void 0) { index = 0; }
        return this.cosmosClient.getPrivKeyFromMnemonic(this.phrase, this.getFullDerivationPath(index));
    };
    /**
     * Get public key
     *
     * @param {number} index the HD wallet index (optional)
     *
     * @returns {PubKey} The public key generated from the given phrase
     *
     * @throws {"Phrase not set"}
     * Throws an error if phrase has not been set before
     **/
    Client.prototype.getPubKey = function (index) {
        if (index === void 0) { index = 0; }
        return this.getPrivKey(index).getPubKey();
    };
    /**
     * Get the current address.
     *
     * @returns {Address} The current address.
     *
     * @throws {Error} Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.
     */
    Client.prototype.getAddress = function (index) {
        if (index === void 0) { index = 0; }
        var address = this.cosmosClient.getAddressFromMnemonic(this.phrase, this.getFullDerivationPath(index));
        if (!address) {
            throw new Error('address not defined');
        }
        return address;
    };
    /**
     * Validate the given address.
     *
     * @param {Address} address
     * @returns {boolean} `true` or `false`
     */
    Client.prototype.validateAddress = function (address) {
        return this.cosmosClient.checkAddress(address);
    };
    /**
     * Get the balance of a given address.
     *
     * @param {Address} address By default, it will return the balance of the current wallet. (optional)
     * @param {Asset} asset If not set, it will return all assets available. (optional)
     * @returns {Balance[]} The balance of the address.
     */
    Client.prototype.getBalance = function (address, assets) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getBalance({ address: address, assets: assets, cosmosClient: this.getCosmosClient() })];
            });
        });
    };
    /**
     * Get the transaction details of a given transaction id.
     *
     * @param {string} txId The transaction id.
     * @returns {Tx} The transaction details of the given transaction id.
     */
    Client.prototype.getTransactionData = function (txId, address) {
        return __awaiter(this, void 0, void 0, function () {
            var txResult, txData, from, to, type;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cosmosClient.txsHashGet(txId)];
                    case 1:
                        txResult = _a.sent();
                        txData = txResult.logs ? getDepositTxDataFromLogs(txResult.logs, address) : null;
                        if (!txData)
                            throw new Error("Failed to get transaction data (tx-hash: " + txId + ")");
                        from = txData.from, to = txData.to, type = txData.type;
                        return [2 /*return*/, {
                                hash: txId,
                                asset: xchainUtil.AssetRuneNative,
                                from: from,
                                to: to,
                                date: new Date(txResult.timestamp),
                                type: type,
                            }];
                }
            });
        });
    };
    /**
     * Get the transaction details of a given transaction id. (from /thorchain/txs/hash)
     *
     * Node: /thorchain/txs/hash response doesn't have timestamp field.
     *
     * @param {string} txId The transaction id.
     * @returns {Tx} The transaction details of the given transaction id.
     */
    Client.prototype.getDepositTransaction = function (txId) {
        return __awaiter(this, void 0, void 0, function () {
            var result, from, to, asset;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios__default['default'].get(this.getClientUrl().node + "/thorchain/tx/" + txId)];
                    case 1:
                        result = (_a.sent()).data;
                        if (!result || !result.observed_tx)
                            throw new Error('transaction not found');
                        from = [];
                        to = [];
                        result.observed_tx.tx.coins.forEach(function (coin) {
                            from.push({
                                from: result.observed_tx.tx.from_address,
                                amount: xchainUtil.baseAmount(coin.amount, DECIMAL),
                            });
                            to.push({
                                to: result.observed_tx.tx.to_address,
                                amount: xchainUtil.baseAmount(coin.amount, DECIMAL),
                            });
                            asset = xchainUtil.assetFromString(coin.asset);
                        });
                        return [2 /*return*/, {
                                asset: asset || xchainUtil.AssetRuneNative,
                                from: from,
                                to: to,
                                type: xchainClient.TxType.Transfer,
                                hash: txId,
                            }];
                }
            });
        });
    };
    /**
     * Transaction with MsgNativeTx.
     *
     * @param {DepositParam} params The transaction options.
     * @returns {TxHash} The transaction hash.
     *
     * @throws {"insufficient funds"} Thrown if the wallet has insufficient funds.
     * @throws {"failed to broadcast transaction"} Thrown if failed to broadcast transaction.
     */
    Client.prototype.deposit = function (_a) {
        var _b, _c;
        var _d = _a.walletIndex, walletIndex = _d === void 0 ? 0 : _d, _e = _a.asset, asset = _e === void 0 ? xchainUtil.AssetRuneNative : _e, amount = _a.amount, memo = _a.memo;
        return __awaiter(this, void 0, void 0, function () {
            var assetBalance, signer, msgNativeTx, unsignedStdTx, privateKey, accAddress;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4 /*yield*/, this.getBalance(this.getAddress(walletIndex), [asset])];
                    case 1:
                        assetBalance = _f.sent();
                        if (assetBalance.length === 0 || assetBalance[0].amount.amount().lt(amount.amount().plus(DEFAULT_GAS_VALUE))) {
                            throw new Error('insufficient funds');
                        }
                        signer = this.getAddress(walletIndex);
                        msgNativeTx = msgNativeTxFromJson({
                            coins: [
                                {
                                    asset: getDenomWithChain(asset),
                                    amount: amount.amount().toString(),
                                },
                            ],
                            memo: memo,
                            signer: signer,
                        });
                        return [4 /*yield*/, buildDepositTx(msgNativeTx, this.getClientUrl().node)];
                    case 2:
                        unsignedStdTx = _f.sent();
                        privateKey = this.getPrivKey(walletIndex);
                        accAddress = cosmosClient.AccAddress.fromBech32(signer);
                        return [4 /*yield*/, this.cosmosClient.signAndBroadcast(unsignedStdTx, privateKey, accAddress)];
                    case 3: return [2 /*return*/, (_c = (_b = (_f.sent())) === null || _b === void 0 ? void 0 : _b.txhash) !== null && _c !== void 0 ? _c : ''];
                }
            });
        });
    };
    /**
     * Transfer balances with MsgSend
     *
     * @param {TxParams} params The transfer options.
     * @returns {TxHash} The transaction hash.
     */
    Client.prototype.transfer = function (_a) {
        var _b = _a.walletIndex, walletIndex = _b === void 0 ? 0 : _b, _c = _a.asset, asset = _c === void 0 ? xchainUtil.AssetRuneNative : _c, amount = _a.amount, recipient = _a.recipient, memo = _a.memo;
        return __awaiter(this, void 0, void 0, function () {
            var assetBalance, fee, transferResult;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        registerCodecs(getPrefix(this.network));
                        return [4 /*yield*/, this.getBalance(this.getAddress(walletIndex), [asset])];
                    case 1:
                        assetBalance = _d.sent();
                        return [4 /*yield*/, this.getFees()];
                    case 2:
                        fee = _d.sent();
                        if (assetBalance.length === 0 ||
                            assetBalance[0].amount.amount().lt(amount.amount().plus(fee[xchainClient.FeeOption.Average].amount()))) {
                            throw new Error('insufficient funds');
                        }
                        return [4 /*yield*/, this.cosmosClient.transfer({
                                privkey: this.getPrivKey(walletIndex),
                                from: this.getAddress(walletIndex),
                                to: recipient,
                                amount: amount.amount().toString(),
                                asset: getDenom(asset),
                                memo: memo,
                                fee: {
                                    amount: [],
                                    gas: DEFAULT_GAS_VALUE,
                                },
                            })];
                    case 3:
                        transferResult = _d.sent();
                        if (!isBroadcastSuccess(transferResult)) {
                            throw new Error("failed to broadcast transaction: " + transferResult.txhash);
                        }
                        return [2 /*return*/, (transferResult === null || transferResult === void 0 ? void 0 : transferResult.txhash) || ''];
                }
            });
        });
    };
    /**
     * Get the fees.
     *
     * @returns {Fees}
     */
    Client.prototype.getFees = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, getDefaultFees()];
            });
        });
    };
    return Client;
}());

exports.Client = Client;
exports.DECIMAL = DECIMAL;
exports.DEFAULT_GAS_VALUE = DEFAULT_GAS_VALUE;
exports.DEPOSIT_GAS_VALUE = DEPOSIT_GAS_VALUE;
exports.MAX_TX_COUNT = MAX_TX_COUNT;
exports.MsgNativeTx = MsgNativeTx;
exports.buildDepositTx = buildDepositTx;
exports.getAsset = getAsset;
exports.getBalance = getBalance;
exports.getChainId = getChainId;
exports.getDefaultClientUrl = getDefaultClientUrl;
exports.getDefaultExplorerUrls = getDefaultExplorerUrls;
exports.getDefaultFees = getDefaultFees;
exports.getDenom = getDenom;
exports.getDenomWithChain = getDenomWithChain;
exports.getDepositTxDataFromLogs = getDepositTxDataFromLogs;
exports.getExplorerAddressUrl = getExplorerAddressUrl;
exports.getExplorerTxUrl = getExplorerTxUrl;
exports.getExplorerUrl = getExplorerUrl;
exports.getPrefix = getPrefix;
exports.getTxType = getTxType;
exports.isBroadcastSuccess = isBroadcastSuccess;
exports.isMsgMultiSend = isMsgMultiSend;
exports.isMsgSend = isMsgSend;
exports.msgNativeTxFromJson = msgNativeTxFromJson;
exports.registerCodecs = registerCodecs;
