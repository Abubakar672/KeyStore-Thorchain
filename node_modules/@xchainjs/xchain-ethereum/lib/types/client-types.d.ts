import { FeeOption, Fees, Network } from '@xchainjs/xchain-client';
import { BaseAmount } from '@xchainjs/xchain-util';
import { BigNumber, ethers } from 'ethers';
export declare type Address = string;
export declare enum EthNetwork {
    Test = "ropsten",
    Main = "homestead"
}
export declare type ClientUrl = Record<Network, string>;
export declare type ExplorerUrl = Record<Network, string>;
export declare type TxOverrides = {
    nonce?: ethers.BigNumberish;
    gasLimit: ethers.BigNumberish;
    gasPrice?: ethers.BigNumberish;
    data?: ethers.BytesLike;
    value?: ethers.BigNumberish;
};
export declare type InfuraCreds = {
    projectId: string;
    projectSecret?: string;
};
export declare type GasPrices = Record<FeeOption, BaseAmount>;
export declare type FeesWithGasPricesAndLimits = {
    fees: Fees;
    gasPrices: GasPrices;
    gasLimit: BigNumber;
};
export declare type ApproveParams = {
    walletIndex?: number;
    contractAddress: Address;
    spenderAddress: Address;
    feeOptionKey?: FeeOption;
    amount?: BaseAmount;
    gasLimitFallback?: ethers.BigNumberish;
};
export declare type EstimateApproveParams = Omit<ApproveParams, 'feeOptionKey' | 'gasLimitFallback'>;
export declare type IsApprovedParams = {
    walletIndex?: number;
    contractAddress: Address;
    spenderAddress: Address;
    amount?: BaseAmount;
};
export declare type CallParams = {
    walletIndex?: number;
    contractAddress: Address;
    abi: ethers.ContractInterface;
    funcName: string;
    funcParams?: unknown[];
};
export declare type EstimateCallParams = Pick<CallParams, 'contractAddress' | 'abi' | 'funcName' | 'funcParams' | 'walletIndex'>;
