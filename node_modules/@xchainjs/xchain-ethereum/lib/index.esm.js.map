{"version":3,"file":"index.esm.js","sources":["../src/types/client-types.ts","../../../node_modules/tslib/tslib.es6.js","../src/utils.ts","../src/etherscan-api.ts","../src/ethplorer-api.ts","../src/client.ts"],"sourcesContent":["import { FeeOption, Fees, Network } from '@xchainjs/xchain-client'\nimport { BaseAmount } from '@xchainjs/xchain-util'\nimport { BigNumber, ethers } from 'ethers'\n\nexport type Address = string\n\nexport enum EthNetwork {\n  Test = 'ropsten',\n  Main = 'homestead',\n}\n\nexport type ClientUrl = Record<Network, string>\nexport type ExplorerUrl = Record<Network, string>\n\nexport type TxOverrides = {\n  nonce?: ethers.BigNumberish\n\n  // mandatory: https://github.com/ethers-io/ethers.js/issues/469#issuecomment-475926538\n  gasLimit: ethers.BigNumberish\n  gasPrice?: ethers.BigNumberish\n  data?: ethers.BytesLike\n  value?: ethers.BigNumberish\n}\n\nexport type InfuraCreds = {\n  projectId: string\n  projectSecret?: string\n}\n\nexport type GasPrices = Record<FeeOption, BaseAmount>\n\nexport type FeesWithGasPricesAndLimits = { fees: Fees; gasPrices: GasPrices; gasLimit: BigNumber }\n\nexport type ApproveParams = {\n  walletIndex?: number\n  contractAddress: Address\n  spenderAddress: Address\n  feeOptionKey?: FeeOption\n  amount?: BaseAmount\n  // Optional fallback in case estimation for gas limit fails\n  gasLimitFallback?: ethers.BigNumberish\n}\n\nexport type EstimateApproveParams = Omit<ApproveParams, 'feeOptionKey' | 'gasLimitFallback'>\n\nexport type IsApprovedParams = {\n  walletIndex?: number\n  contractAddress: Address\n  spenderAddress: Address\n  amount?: BaseAmount\n}\n\nexport type CallParams = {\n  walletIndex?: number\n  contractAddress: Address\n  abi: ethers.ContractInterface\n  funcName: string\n  funcParams?: unknown[]\n}\n\nexport type EstimateCallParams = Pick<CallParams, 'contractAddress' | 'abi' | 'funcName' | 'funcParams' | 'walletIndex'>\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Balance, FeeType, Fees, Network, Tx, TxType } from '@xchainjs/xchain-client'\nimport {\n  Asset,\n  AssetETH,\n  BaseAmount,\n  Chain,\n  assetAmount,\n  assetFromString,\n  assetToBase,\n  assetToString,\n  baseAmount,\n} from '@xchainjs/xchain-util'\nimport { BigNumber, ethers, providers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\n\nimport erc20ABI from './data/erc20.json'\nimport {\n  Address,\n  ETHTransactionInfo,\n  EthNetwork,\n  FeesWithGasPricesAndLimits,\n  GasPrices,\n  TokenBalance,\n  TokenTransactionInfo,\n  TransactionInfo,\n  TransactionOperation,\n} from './types'\n\nexport const ETH_DECIMAL = 18\nexport const ETHPLORER_FREEKEY = 'freekey'\n\n// from https://github.com/MetaMask/metamask-extension/blob/ee205b893fe61dc4736efc576e0663189a9d23da/ui/app/pages/send/send.constants.js#L39\n// and based on recommendations of https://ethgasstation.info/blog/gas-limit/\nexport const SIMPLE_GAS_COST: ethers.BigNumber = BigNumber.from(21000)\nexport const BASE_TOKEN_GAS_COST: ethers.BigNumber = BigNumber.from(100000)\n\n// default gas price in gwei\nexport const DEFAULT_GAS_PRICE = 50\n\nexport const ETHAddress = '0x0000000000000000000000000000000000000000'\nexport const MAX_APPROVAL = BigNumber.from(2).pow(256).sub(1)\n\n/**\n * Network -> EthNetwork\n *\n * @param {Network} network\n * @returns {EthNetwork}\n */\nexport const xchainNetworkToEths = (network: Network): EthNetwork => {\n  switch (network) {\n    case Network.Mainnet:\n      return EthNetwork.Main\n    case Network.Testnet:\n      return EthNetwork.Test\n  }\n}\n\n/**\n * EthNetwork -> Network\n *\n * @param {EthNetwork} network\n * @returns {Network}\n */\nexport const ethNetworkToXchains = (network: EthNetwork): Network => {\n  switch (network) {\n    case EthNetwork.Main:\n      return Network.Mainnet\n    case EthNetwork.Test:\n      return Network.Testnet\n  }\n}\n\n/**\n * Validate the given address.\n *\n * @param {Address} address\n * @returns {boolean} `true` or `false`\n */\nexport const validateAddress = (address: Address): boolean => {\n  try {\n    ethers.utils.getAddress(address)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n/**\n * Get token address from asset.\n *\n * @param {Asset} asset\n * @returns {string|null} The token address.\n */\nexport const getTokenAddress = (asset: Asset): string | null => {\n  try {\n    // strip 0X only - 0x is still valid\n    return ethers.utils.getAddress(asset.symbol.slice(asset.ticker.length + 1).replace(/^0X/, ''))\n  } catch (err) {\n    return null\n  }\n}\n\n/**\n * Check if the symbol is valid.\n *\n * @param {string|null|undefined} symbol\n * @returns {boolean} `true` or `false`.\n */\nexport const validateSymbol = (symbol?: string | null): boolean => (symbol ? symbol.length >= 3 : false)\n\n/**\n * Get transactions from token tx\n *\n * @param {TokenTransactionInfo} tx\n * @returns {Tx|null} The parsed transaction.\n */\nexport const getTxFromTokenTransaction = (tx: TokenTransactionInfo): Tx | null => {\n  const decimals = parseInt(tx.tokenDecimal) || ETH_DECIMAL\n  const symbol = tx.tokenSymbol\n  const address = tx.contractAddress\n  if (validateSymbol(symbol) && validateAddress(address)) {\n    const tokenAsset = assetFromString(`${Chain.Ethereum}.${symbol}-${address}`)\n    if (tokenAsset) {\n      return {\n        asset: tokenAsset,\n        from: [\n          {\n            from: tx.from,\n            amount: baseAmount(tx.value, decimals),\n          },\n        ],\n        to: [\n          {\n            to: tx.to,\n            amount: baseAmount(tx.value, decimals),\n          },\n        ],\n        date: new Date(parseInt(tx.timeStamp) * 1000),\n        type: TxType.Transfer,\n        hash: tx.hash,\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get transactions from ETH transaction\n *\n * @param {ETHTransactionInfo} tx\n * @returns {Tx} The parsed transaction.\n */\nexport const getTxFromEthTransaction = (tx: ETHTransactionInfo): Tx => {\n  return {\n    asset: AssetETH,\n    from: [\n      {\n        from: tx.from,\n        amount: baseAmount(tx.value, ETH_DECIMAL),\n      },\n    ],\n    to: [\n      {\n        to: tx.to,\n        amount: baseAmount(tx.value, ETH_DECIMAL),\n      },\n    ],\n    date: new Date(parseInt(tx.timeStamp) * 1000),\n    type: TxType.Transfer,\n    hash: tx.hash,\n  }\n}\n\n/**\n * Get transactions from operation\n *\n * @param {TransactionOperation} operation\n * @returns {Tx|null} The parsed transaction.\n */\nexport const getTxFromEthplorerTokenOperation = (operation: TransactionOperation): Tx | null => {\n  const decimals = parseInt(operation.tokenInfo.decimals) || ETH_DECIMAL\n  const { symbol, address } = operation.tokenInfo\n  if (validateSymbol(symbol) && validateAddress(address)) {\n    const tokenAsset = assetFromString(`${Chain.Ethereum}.${symbol}-${address}`)\n    if (tokenAsset) {\n      return {\n        asset: tokenAsset,\n        from: [\n          {\n            from: operation.from,\n            amount: baseAmount(operation.value, decimals),\n          },\n        ],\n        to: [\n          {\n            to: operation.to,\n            amount: baseAmount(operation.value, decimals),\n          },\n        ],\n        date: new Date(operation.timestamp * 1000),\n        type: operation.type === 'transfer' ? TxType.Transfer : TxType.Unknown,\n        hash: operation.transactionHash,\n      }\n    }\n  }\n\n  return null\n}\n\n/**\n * Get transactions from ETH transaction\n *\n * @param {TransactionInfo} txInfo\n * @returns {Tx} The parsed transaction.\n */\nexport const getTxFromEthplorerEthTransaction = (txInfo: TransactionInfo): Tx => {\n  return {\n    asset: AssetETH,\n    from: [\n      {\n        from: txInfo.from,\n        amount: assetToBase(assetAmount(txInfo.value, ETH_DECIMAL)),\n      },\n    ],\n    to: [\n      {\n        to: txInfo.to,\n        amount: assetToBase(assetAmount(txInfo.value, ETH_DECIMAL)),\n      },\n    ],\n    date: new Date(txInfo.timestamp * 1000),\n    type: TxType.Transfer,\n    hash: txInfo.hash,\n  }\n}\n\n/**\n * Calculate fees by multiplying .\n *\n * @returns {Fees} The default gas price.\n */\nexport const getFee = ({ gasPrice, gasLimit }: { gasPrice: BaseAmount; gasLimit: BigNumber }) =>\n  baseAmount(gasPrice.amount().multipliedBy(gasLimit.toString()), ETH_DECIMAL)\n\nexport const estimateDefaultFeesWithGasPricesAndLimits = (asset?: Asset): FeesWithGasPricesAndLimits => {\n  const gasPrices = {\n    average: baseAmount(parseUnits(DEFAULT_GAS_PRICE.toString(), 'gwei').toString(), ETH_DECIMAL),\n    fast: baseAmount(parseUnits((DEFAULT_GAS_PRICE * 2).toString(), 'gwei').toString(), ETH_DECIMAL),\n    fastest: baseAmount(parseUnits((DEFAULT_GAS_PRICE * 3).toString(), 'gwei').toString(), ETH_DECIMAL),\n  }\n  const { fast: fastGP, fastest: fastestGP, average: averageGP } = gasPrices\n\n  let assetAddress\n  if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n    assetAddress = getTokenAddress(asset)\n  }\n\n  let gasLimit\n  if (assetAddress && assetAddress !== ETHAddress) {\n    gasLimit = BigNumber.from(BASE_TOKEN_GAS_COST)\n  } else {\n    gasLimit = BigNumber.from(SIMPLE_GAS_COST)\n  }\n\n  return {\n    gasPrices,\n    gasLimit,\n    fees: {\n      type: FeeType.PerByte,\n      average: getFee({ gasPrice: averageGP, gasLimit }),\n      fast: getFee({ gasPrice: fastGP, gasLimit }),\n      fastest: getFee({ gasPrice: fastestGP, gasLimit }),\n    },\n  }\n}\n\n/**\n * Get the default fees.\n *\n * @returns {Fees} The default gas price.\n */\nexport const getDefaultFees = (asset?: Asset): Fees => {\n  const { fees } = estimateDefaultFeesWithGasPricesAndLimits(asset)\n  return fees\n}\n\n/**\n * Get the default gas price.\n *\n * @returns {Fees} The default gas prices.\n */\nexport const getDefaultGasPrices = (asset?: Asset): GasPrices => {\n  const { gasPrices } = estimateDefaultFeesWithGasPricesAndLimits(asset)\n  return gasPrices\n}\n\n/**\n * Get address prefix based on the network.\n *\n * @returns {string} The address prefix based on the network.\n *\n **/\nexport const getPrefix = () => '0x'\n\n/**\n * Filter self txs\n *\n * @returns {T[]}\n *\n **/\nexport const filterSelfTxs = <T extends { from: string; to: string; hash: string }>(txs: T[]): T[] => {\n  const filterTxs = txs.filter((tx) => tx.from !== tx.to)\n  let selfTxs = txs.filter((tx) => tx.from === tx.to)\n  while (selfTxs.length) {\n    const selfTx = selfTxs[0]\n    filterTxs.push(selfTx)\n    selfTxs = selfTxs.filter((tx) => tx.hash !== selfTx.hash)\n  }\n\n  return filterTxs\n}\n\n/**\n * Get Decimals\n *\n * @param {Asset} asset\n * @returns {Number} the decimal of a given asset\n *\n * @throws {\"Invalid asset\"} Thrown if the given asset is invalid\n */\nexport const getDecimal = async (asset: Asset, provider: providers.Provider): Promise<number> => {\n  if (assetToString(asset) === assetToString(AssetETH)) return ETH_DECIMAL\n\n  const assetAddress = getTokenAddress(asset)\n  if (!assetAddress) throw new Error(`Invalid asset ${assetToString(asset)}`)\n\n  const contract: ethers.Contract = new ethers.Contract(assetAddress, erc20ABI, provider)\n  const decimal: ethers.BigNumberish = await contract.decimals()\n\n  return ethers.BigNumber.from(decimal).toNumber()\n}\n\n/**\n * Get Token Balances\n *\n * @param {TokenBalance[]} tokenBalances\n * @returns {Balance[]} the parsed balances\n *\n */\nexport const getTokenBalances = (tokenBalances: TokenBalance[]): Balance[] => {\n  return tokenBalances.reduce((acc, cur) => {\n    const { symbol, address: tokenAddress } = cur.tokenInfo\n    if (validateSymbol(symbol) && validateAddress(tokenAddress) && cur?.tokenInfo?.decimals !== undefined) {\n      const decimals = parseInt(cur.tokenInfo.decimals, 10)\n      const tokenAsset = assetFromString(`${Chain.Ethereum}.${symbol}-${ethers.utils.getAddress(tokenAddress)}`)\n      if (tokenAsset) {\n        return [\n          ...acc,\n          {\n            asset: tokenAsset,\n            amount: baseAmount(cur.balance, decimals),\n          },\n        ]\n      }\n    }\n\n    return acc\n  }, [] as Balance[])\n}\n","import { Tx } from '@xchainjs/xchain-client'\nimport { bnOrZero } from '@xchainjs/xchain-util'\nimport axios from 'axios'\nimport { BigNumberish } from 'ethers'\n\nimport {\n  ETHTransactionInfo,\n  GasOracleResponse,\n  TokenBalanceParam,\n  TokenTransactionInfo,\n  TransactionHistoryParam,\n} from './types'\nimport { filterSelfTxs, getTxFromEthTransaction, getTxFromTokenTransaction } from './utils'\n\nconst getApiKeyQueryParameter = (apiKey?: string): string => (!!apiKey ? `&apiKey=${apiKey}` : '')\n\n/**\n * SafeGasPrice, ProposeGasPrice And FastGasPrice returned in string-Gwei\n *\n * @see https://etherscan.io/apis#gastracker\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {GasOracleResponse} LastBlock, SafeGasPrice, ProposeGasPrice, FastGasPrice\n */\nexport const getGasOracle = async (baseUrl: string, apiKey?: string): Promise<GasOracleResponse> => {\n  const url = baseUrl + '/api?module=gastracker&action=gasoracle'\n\n  return (await axios.get(url + getApiKeyQueryParameter(apiKey))).data.result\n}\n\n/**\n * Get token balance\n *\n * @see https://etherscan.io/apis#tokens\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {string} assetAddress The token contract address.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {BigNumberish} The token balance\n */\nexport const getTokenBalance = async ({\n  baseUrl,\n  address,\n  assetAddress,\n  apiKey,\n}: TokenBalanceParam & { baseUrl: string; apiKey?: string }): Promise<BigNumberish> => {\n  const url = baseUrl + `/api?module=account&action=tokenbalance&contractaddress=${assetAddress}&address=${address}`\n\n  return (await axios.get(url + getApiKeyQueryParameter(apiKey))).data.result\n}\n\n/**\n * Get ETH transaction history\n *\n * @see https://etherscan.io/apis#accounts\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {TransactionHistoryParam} params The search options.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {ETHTransactionInfo[]} The ETH transaction history\n */\nexport const getETHTransactionHistory = async ({\n  baseUrl,\n  address,\n  page,\n  offset,\n  startblock,\n  endblock,\n  apiKey,\n}: TransactionHistoryParam & { baseUrl: string; apiKey?: string }): Promise<Tx[]> => {\n  let url = baseUrl + `/api?module=account&action=txlist&sort=desc` + getApiKeyQueryParameter(apiKey)\n  if (address) url += `&address=${address}`\n  if (offset) url += `&offset=${offset}`\n  if (page) url += `&page=${page}`\n  if (startblock) url += `&startblock=${startblock}`\n  if (endblock) url += `&endblock=${endblock}`\n\n  const result = (await axios.get(url)).data.result\n  if (JSON.stringify(result).includes('Invalid API Key')) throw new Error('Invalid API Key')\n  if (typeof result !== 'object') throw new Error(result)\n\n  return filterSelfTxs<ETHTransactionInfo>(result)\n    .filter((tx) => !bnOrZero(tx.value).isZero())\n    .map(getTxFromEthTransaction)\n}\n\n/**\n * Get token transaction history\n *\n * @see https://etherscan.io/apis#accounts\n *\n * @param {string} baseUrl The etherscan node url.\n * @param {string} address The address.\n * @param {TransactionHistoryParam} params The search options.\n * @param {string} apiKey The etherscan API key. (optional)\n * @returns {Tx[]} The token transaction history\n */\nexport const getTokenTransactionHistory = async ({\n  baseUrl,\n  address,\n  assetAddress,\n  page,\n  offset,\n  startblock,\n  endblock,\n  apiKey,\n}: TransactionHistoryParam & { baseUrl: string; apiKey?: string }): Promise<Tx[]> => {\n  let url = baseUrl + `/api?module=account&action=tokentx&sort=desc` + getApiKeyQueryParameter(apiKey)\n  if (address) url += `&address=${address}`\n  if (assetAddress) url += `&contractaddress=${assetAddress}`\n  if (offset) url += `&offset=${offset}`\n  if (page) url += `&page=${page}`\n  if (startblock) url += `&startblock=${startblock}`\n  if (endblock) url += `&endblock=${endblock}`\n\n  const result = (await axios.get(url)).data.result\n  if (JSON.stringify(result).includes('Invalid API Key')) throw new Error('Invalid API Key')\n\n  return filterSelfTxs<TokenTransactionInfo>(result)\n    .filter((tx) => !bnOrZero(tx.value).isZero())\n    .reduce((acc, cur) => {\n      const tx = getTxFromTokenTransaction(cur)\n      return tx ? [...acc, tx] : acc\n    }, [] as Tx[])\n}\n","import { TxType } from '@xchainjs/xchain-client'\nimport axios from 'axios'\n\nimport { AddressInfo, TransactionInfo, TransactionOperation } from './types'\n\n/**\n * Get address information.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-address-info\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {AddressInfo} The address information.\n */\nexport const getAddress = async (baseUrl: string, address: string, apiKey?: string): Promise<AddressInfo> => {\n  const response = await axios.get(`${baseUrl}/getAddressInfo/${address}`, {\n    params: {\n      apiKey: apiKey || 'freekey',\n    },\n  })\n  return response.data\n}\n\n/**\n * Get transaction by hash.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-transaction-info\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} hash The transaction hash.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getTxInfo = async (baseUrl: string, hash: string, apiKey?: string): Promise<TransactionInfo> => {\n  const response = await axios.get(`${baseUrl}/getTxInfo/${hash}`, {\n    params: {\n      apiKey: apiKey || 'freekey',\n    },\n  })\n  return response.data\n}\n\n/**\n * Get ETH transactions.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-address-transactions\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address The transaction hash.\n * @param {number} limit The maximum number of transactions.\n * @param {number} timestamp The start timestamp.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getAddressTransactions = async (\n  baseUrl: string,\n  address: string,\n  limit?: number,\n  timestamp?: number,\n  apiKey?: string,\n): Promise<TransactionInfo[]> => {\n  const response = await axios.get(`${baseUrl}/getAddressTransactions/${address}`, {\n    params: {\n      apiKey: apiKey || 'freekey',\n      limit,\n      timestamp,\n    },\n  })\n  return response.data\n}\n\n/**\n * Get token transactions.\n *\n * @see https://github.com/EverexIO/Ethplorer/wiki/Ethplorer-API#get-last-address-operations\n *\n * @param {string} baseUrl The ethplorer api url.\n * @param {string} address The transaction hash.\n * @param {string} token The token address.\n * @param {number} limit The maximum number of transactions.\n * @param {number} timestamp The start timestamp.\n * @param {string} apiKey The ethplorer API key. (optional)\n * @returns {Transactions} The transaction result.\n */\nexport const getAddressHistory = async (\n  baseUrl: string,\n  address: string,\n  token: string,\n  limit?: number,\n  timestamp?: number,\n  apiKey?: string,\n): Promise<TransactionOperation[]> => {\n  const response = await axios.get(`${baseUrl}/getAddressHistory/${address}`, {\n    params: {\n      apiKey: apiKey || 'freekey',\n      token,\n      limit,\n      timestamp,\n      showZeroValues: true,\n      type: TxType.Transfer,\n    },\n  })\n  return response.data.operations\n}\n","import { Provider, TransactionResponse } from '@ethersproject/abstract-provider'\nimport { EtherscanProvider, getDefaultProvider } from '@ethersproject/providers'\nimport {\n  Address,\n  Balance,\n  BaseXChainClient,\n  FeeOption,\n  FeeType,\n  Fees,\n  Network,\n  Tx,\n  TxHash,\n  TxHistoryParams,\n  TxParams,\n  TxsPage,\n  XChainClient,\n  XChainClientParams,\n  standardFeeRates,\n} from '@xchainjs/xchain-client'\nimport { Asset, AssetETH, BaseAmount, Chain, assetToString, baseAmount, delay } from '@xchainjs/xchain-util'\nimport { BigNumber, BigNumberish, Wallet, ethers } from 'ethers'\nimport { HDNode, parseUnits, toUtf8Bytes } from 'ethers/lib/utils'\n\nimport erc20ABI from './data/erc20.json'\nimport * as etherscanAPI from './etherscan-api'\nimport * as ethplorerAPI from './ethplorer-api'\nimport {\n  ApproveParams,\n  CallParams,\n  EstimateApproveParams,\n  EstimateCallParams,\n  EthNetwork,\n  ExplorerUrl,\n  FeesWithGasPricesAndLimits,\n  GasOracleResponse,\n  GasPrices,\n  InfuraCreds,\n  IsApprovedParams,\n  TxOverrides,\n} from './types'\nimport {\n  BASE_TOKEN_GAS_COST,\n  ETHAddress,\n  ETH_DECIMAL,\n  MAX_APPROVAL,\n  SIMPLE_GAS_COST,\n  getDefaultGasPrices,\n  getFee,\n  getTokenAddress,\n  getTokenBalances,\n  getTxFromEthplorerEthTransaction,\n  getTxFromEthplorerTokenOperation,\n  validateAddress,\n  xchainNetworkToEths,\n} from './utils'\n\n/**\n * Interface for custom Ethereum client\n */\nexport interface EthereumClient {\n  call<T>(params: CallParams): Promise<T>\n  estimateCall(asset: EstimateCallParams): Promise<BigNumber>\n  estimateGasPrices(): Promise<GasPrices>\n  estimateGasLimit(params: TxParams): Promise<BigNumber>\n  estimateFeesWithGasPricesAndLimits(params: TxParams): Promise<FeesWithGasPricesAndLimits>\n  estimateApprove(params: EstimateApproveParams): Promise<BigNumber>\n  isApproved(params: IsApprovedParams): Promise<boolean>\n  approve(params: ApproveParams): Promise<TransactionResponse>\n  // `getFees` of `BaseXChainClient` needs to be overridden\n  getFees(params: TxParams): Promise<Fees>\n}\n\nexport type EthereumClientParams = XChainClientParams & {\n  ethplorerUrl?: string\n  ethplorerApiKey?: string\n  explorerUrl?: ExplorerUrl\n  etherscanApiKey?: string\n  infuraCreds?: InfuraCreds\n}\n\n/**\n * Custom Ethereum client\n */\nexport default class Client extends BaseXChainClient implements XChainClient, EthereumClient {\n  private ethNetwork: EthNetwork\n  private hdNode!: HDNode\n  private etherscanApiKey?: string\n  private explorerUrl: ExplorerUrl\n  private infuraCreds: InfuraCreds | undefined\n  private ethplorerUrl: string\n  private ethplorerApiKey: string\n  private providers: Map<Network, Provider> = new Map<Network, Provider>()\n\n  /**\n   * Constructor\n   * @param {EthereumClientParams} params\n   */\n  constructor({\n    network = Network.Testnet,\n    ethplorerUrl = 'https://api.ethplorer.io',\n    ethplorerApiKey = 'freekey',\n    explorerUrl,\n    phrase = '',\n    rootDerivationPaths = {\n      [Network.Mainnet]: `m/44'/60'/0'/0/`,\n      [Network.Testnet]: `m/44'/60'/0'/0/`, // this is INCORRECT but makes the unit tests pass\n    },\n    etherscanApiKey,\n    infuraCreds,\n  }: EthereumClientParams) {\n    super(Chain.Ethereum, { network, rootDerivationPaths })\n    this.ethNetwork = xchainNetworkToEths(network)\n    this.rootDerivationPaths = rootDerivationPaths\n    this.infuraCreds = infuraCreds\n    this.etherscanApiKey = etherscanApiKey\n    this.ethplorerUrl = ethplorerUrl\n    this.ethplorerApiKey = ethplorerApiKey\n    this.explorerUrl = explorerUrl || this.getDefaultExplorerURL()\n    this.setupProviders()\n    this.setPhrase(phrase)\n  }\n\n  /**\n   * Purge client.\n   *\n   * @returns {void}\n   */\n  purgeClient(): void {\n    super.purgeClient()\n    this.hdNode = HDNode.fromMnemonic('')\n  }\n\n  /**\n   * Set/Update the explorer url.\n   *\n   * @param {string} url The explorer url.\n   * @returns {void}\n   */\n  setExplorerURL(url: ExplorerUrl): void {\n    this.explorerUrl = url\n  }\n\n  /**\n   * Get the current address.\n   *\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {Address} The current address.\n   *\n   * @throws {\"Phrase must be provided\"}\n   * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.\n   */\n  getAddress(walletIndex = 0): Address {\n    if (walletIndex < 0) {\n      throw new Error('index must be greater than zero')\n    }\n    return this.hdNode.derivePath(this.getFullDerivationPath(walletIndex)).address.toLowerCase()\n  }\n\n  /**\n   * Get etherjs wallet interface.\n   *\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {Wallet} The current etherjs wallet interface.\n   *\n   * @throws {\"Phrase must be provided\"}\n   * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.\n   */\n  getWallet(walletIndex = 0): ethers.Wallet {\n    return new Wallet(this.hdNode.derivePath(this.getFullDerivationPath(walletIndex))).connect(this.getProvider())\n  }\n  setupProviders(): void {\n    if (this.infuraCreds) {\n      // Infura provider takes either a string of project id\n      // or an object of id and secret\n      const testnetProvider = this.infuraCreds.projectSecret\n        ? new ethers.providers.InfuraProvider(EthNetwork.Test, this.infuraCreds)\n        : new ethers.providers.InfuraProvider(EthNetwork.Test, this.infuraCreds.projectId)\n      const mainnetProvider = this.infuraCreds.projectSecret\n        ? new ethers.providers.InfuraProvider(EthNetwork.Main, this.infuraCreds)\n        : new ethers.providers.InfuraProvider(EthNetwork.Main, this.infuraCreds.projectId)\n      this.providers.set(Network.Testnet, testnetProvider)\n      this.providers.set(Network.Mainnet, mainnetProvider)\n    } else {\n      this.providers.set(Network.Testnet, getDefaultProvider(EthNetwork.Test))\n      this.providers.set(Network.Mainnet, getDefaultProvider(EthNetwork.Main))\n    }\n  }\n\n  /**\n   * Get etherjs Provider interface.\n   *\n   * @returns {Provider} The current etherjs Provider interface.\n   */\n  getProvider(): Provider {\n    return this.providers.get(this.network) || getDefaultProvider(this.network)\n  }\n\n  /**\n   * Get etherjs EtherscanProvider interface.\n   *\n   * @returns {EtherscanProvider} The current etherjs EtherscanProvider interface.\n   */\n  getEtherscanProvider(): EtherscanProvider {\n    return new EtherscanProvider(this.ethNetwork, this.etherscanApiKey)\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @returns {string} The explorer url for ethereum based on the current network.\n   */\n  getExplorerUrl(): string {\n    return this.getExplorerUrlByNetwork(this.getNetwork())\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @returns {ExplorerUrl} The explorer url (both mainnet and testnet) for ethereum.\n   */\n  private getDefaultExplorerURL(): ExplorerUrl {\n    return {\n      [Network.Testnet]: 'https://ropsten.etherscan.io',\n      [Network.Mainnet]: 'https://etherscan.io',\n    }\n  }\n\n  /**\n   * Get the explorer url.\n   *\n   * @param {Network} network\n   * @returns {string} The explorer url for ethereum based on the network.\n   */\n  private getExplorerUrlByNetwork(network: Network): string {\n    return this.explorerUrl[network]\n  }\n\n  /**\n   * Get the explorer url for the given address.\n   *\n   * @param {Address} address\n   * @returns {string} The explorer url for the given address.\n   */\n  getExplorerAddressUrl(address: Address): string {\n    return `${this.getExplorerUrl()}/address/${address}`\n  }\n\n  /**\n   * Get the explorer url for the given transaction id.\n   *\n   * @param {string} txID\n   * @returns {string} The explorer url for the given transaction id.\n   */\n  getExplorerTxUrl(txID: string): string {\n    return `${this.getExplorerUrl()}/tx/${txID}`\n  }\n\n  /**\n   * Set/update the current network.\n   *\n   * @param {Network} network\n   * @returns {void}\n   *\n   * @throws {\"Network must be provided\"}\n   * Thrown if network has not been set before.\n   */\n  setNetwork(network: Network): void {\n    super.setNetwork(network)\n    this.ethNetwork = xchainNetworkToEths(network)\n  }\n\n  /**\n   * Set/update a new phrase (Eg. If user wants to change wallet)\n   *\n   * @param {string} phrase A new phrase.\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {Address} The address from the given phrase\n   *\n   * @throws {\"Invalid phrase\"}\n   * Thrown if the given phase is invalid.\n   */\n  setPhrase(phrase: string, walletIndex = 0): Address {\n    this.hdNode = HDNode.fromMnemonic(phrase)\n    return super.setPhrase(phrase, walletIndex)\n  }\n\n  /**\n   * Validate the given address.\n   *\n   * @param {Address} address\n   * @returns {boolean} `true` or `false`\n   */\n  validateAddress(address: Address): boolean {\n    return validateAddress(address)\n  }\n\n  /**\n   * Get the ETH balance of a given address.\n   *\n   * @param {Address} address By default, it will return the balance of the current wallet. (optional)\n   * @returns {Balance[]} The all balance of the address.\n   *\n   * @throws {\"Invalid asset\"} throws when the give asset is an invalid one\n   */\n  async getBalance(address: Address, assets?: Asset[]): Promise<Balance[]> {\n    const ethAddress = address || this.getAddress()\n    // get ETH balance directly from provider\n    const ethBalance: BigNumber = await this.getProvider().getBalance(ethAddress)\n    const ethBalanceAmount = baseAmount(ethBalance.toString(), ETH_DECIMAL)\n\n    switch (this.getNetwork()) {\n      case Network.Mainnet: {\n        // use ethplorerAPI for mainnet - ignore assets\n        const account = await ethplorerAPI.getAddress(this.ethplorerUrl, address, this.ethplorerApiKey)\n        const balances: Balance[] = [\n          {\n            asset: AssetETH,\n            amount: ethBalanceAmount,\n          },\n        ]\n\n        if (account.tokens) {\n          balances.push(...getTokenBalances(account.tokens))\n        }\n\n        return balances\n      }\n      case Network.Testnet: {\n        // use etherscan for testnet\n\n        const newAssets = assets || [AssetETH]\n        // Follow approach is only for testnet\n        // For mainnet, we will use ethplorer api(one request only)\n        // https://github.com/xchainjs/xchainjs-lib/issues/252\n        // And to avoid etherscan api call limit, it gets balances in a sequence way, not in parallel\n        const balances = []\n        for (let i = 0; i < newAssets.length; i++) {\n          const asset = newAssets[i]\n          const etherscan = this.getEtherscanProvider()\n          if (assetToString(asset) !== assetToString(AssetETH)) {\n            // Handle token balances\n            const assetAddress = getTokenAddress(asset)\n            if (!assetAddress) {\n              throw new Error(`Invalid asset ${asset}`)\n            }\n            const balance = await etherscanAPI.getTokenBalance({\n              baseUrl: etherscan.baseUrl,\n              address,\n              assetAddress,\n              apiKey: etherscan.apiKey,\n            })\n            const decimals =\n              BigNumber.from(\n                await this.call<BigNumberish>({ contractAddress: assetAddress, abi: erc20ABI, funcName: 'decimals' }),\n              ).toNumber() || ETH_DECIMAL\n\n            if (!Number.isNaN(decimals)) {\n              balances.push({\n                asset,\n                amount: baseAmount(balance.toString(), decimals),\n              })\n            }\n          } else {\n            balances.push({\n              asset: AssetETH,\n              amount: ethBalanceAmount,\n            })\n          }\n          // Due to etherscan api call limitation, put some delay before another call\n          // Free Etherscan api key limit: 5 calls per second\n          // So 0.3s delay is reasonable for now\n          await delay(300)\n        }\n\n        return balances\n      }\n    }\n  }\n\n  /**\n   * Get transaction history of a given address with pagination options.\n   * By default it will return the transaction history of the current wallet.\n   *\n   * @param {TxHistoryParams} params The options to get transaction history. (optional)\n   * @returns {TxsPage} The transaction history.\n   */\n  async getTransactions(params?: TxHistoryParams): Promise<TxsPage> {\n    const offset = params?.offset || 0\n    const limit = params?.limit || 10\n    const assetAddress = params?.asset\n\n    const maxCount = 10000\n\n    let transations\n    const etherscan = this.getEtherscanProvider()\n\n    if (assetAddress) {\n      transations = await etherscanAPI.getTokenTransactionHistory({\n        baseUrl: etherscan.baseUrl,\n        address: params?.address,\n        assetAddress,\n        page: 0,\n        offset: maxCount,\n        apiKey: etherscan.apiKey,\n      })\n    } else {\n      transations = await etherscanAPI.getETHTransactionHistory({\n        baseUrl: etherscan.baseUrl,\n        address: params?.address,\n        page: 0,\n        offset: maxCount,\n        apiKey: etherscan.apiKey,\n      })\n    }\n\n    return {\n      total: transations.length,\n      txs: transations.filter((_, index) => index >= offset && index < offset + limit),\n    }\n  }\n\n  /**\n   * Get the transaction details of a given transaction id.\n   *\n   * @param {string} txId The transaction id.\n   * @param {string} assetAddress The asset address. (optional)\n   * @returns {Tx} The transaction details of the given transaction id.\n   *\n   * @throws {\"Need to provide valid txId\"}\n   * Thrown if the given txId is invalid.\n   */\n  async getTransactionData(txId: string, assetAddress?: Address): Promise<Tx> {\n    switch (this.getNetwork()) {\n      case Network.Mainnet: {\n        // use ethplorerAPI for mainnet - ignore assetAddress\n        const txInfo = await ethplorerAPI.getTxInfo(this.ethplorerUrl, txId, this.ethplorerApiKey)\n        if (!txInfo.operations?.length) return getTxFromEthplorerEthTransaction(txInfo)\n        const tx = getTxFromEthplorerTokenOperation(txInfo.operations[0])\n        if (!tx) throw new Error('Could not parse transaction data')\n        return tx\n      }\n      case Network.Testnet: {\n        let tx\n        const etherscan = this.getEtherscanProvider()\n        const txInfo = await etherscan.getTransaction(txId)\n        if (txInfo) {\n          if (assetAddress) {\n            tx =\n              (\n                await etherscanAPI.getTokenTransactionHistory({\n                  baseUrl: etherscan.baseUrl,\n                  assetAddress,\n                  startblock: txInfo.blockNumber,\n                  endblock: txInfo.blockNumber,\n                  apiKey: etherscan.apiKey,\n                })\n              ).filter((info) => info.hash === txId)[0] ?? null\n          } else {\n            tx =\n              (\n                await etherscanAPI.getETHTransactionHistory({\n                  baseUrl: etherscan.baseUrl,\n                  startblock: txInfo.blockNumber,\n                  endblock: txInfo.blockNumber,\n                  apiKey: etherscan.apiKey,\n                  address: txInfo.from,\n                })\n              ).filter((info) => info.hash === txId)[0] ?? null\n          }\n        }\n\n        if (!tx) throw new Error('Could not get transaction history')\n\n        return tx\n      }\n    }\n  }\n\n  /**\n   * Call a contract function.\n   * @template T The result interface.\n   * @param {number} walletIndex (optional) HD wallet index\n   * @param {Address} contractAddress The contract address.\n   * @param {ContractInterface} abi The contract ABI json.\n   * @param {string} funcName The function to be called.\n   * @param {any[]} funcParams The parameters of the function.\n   * @returns {T} The result of the contract function call.\n   *\n   * @throws {\"contractAddress must be provided\"}\n   * Thrown if the given contract address is empty.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async call<T>({ walletIndex = 0, contractAddress, abi, funcName, funcParams = [] }: CallParams): Promise<T> {\n    if (!contractAddress) throw new Error('contractAddress must be provided')\n    const contract = new ethers.Contract(contractAddress, abi, this.getProvider()).connect(this.getWallet(walletIndex))\n    return contract[funcName](...funcParams)\n  }\n\n  /**\n   * Call a contract function.\n   * @param {Address} contractAddress The contract address.\n   * @param {ContractInterface} abi The contract ABI json.\n   * @param {string} funcName The function to be called.\n   * @param {any[]} funcParams The parameters of the function.\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {BigNumber} The result of the contract function call.\n   *\n   * @throws {\"contractAddress must be provided\"}\n   * Thrown if the given contract address is empty.\n   */\n  async estimateCall({\n    contractAddress,\n    abi,\n    funcName,\n    funcParams = [],\n    walletIndex = 0,\n  }: EstimateCallParams): Promise<BigNumber> {\n    if (!contractAddress) throw new Error('contractAddress must be provided')\n    const contract = new ethers.Contract(contractAddress, abi, this.getProvider()).connect(this.getWallet(walletIndex))\n    return contract.estimateGas[funcName](...funcParams)\n  }\n\n  /**\n   * Check allowance.\n   *\n   * @param {Address} contractAddress The spender address.\n   * @param {Address} spenderAddress The spender address.\n   * @param {BaseAmount} amount The amount to check if it's allowed to spend or not (optional).\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {boolean} `true` or `false`.\n   */\n  async isApproved({ contractAddress, spenderAddress, amount, walletIndex = 0 }: IsApprovedParams): Promise<boolean> {\n    // since amount is optional, set it to smallest amount by default\n    const txAmount = BigNumber.from(amount?.amount().toFixed() ?? 1)\n    const owner = this.getAddress(walletIndex)\n    const allowance = await this.call<BigNumberish>({\n      contractAddress,\n      abi: erc20ABI,\n      funcName: 'allowance',\n      funcParams: [owner, spenderAddress],\n    })\n    return txAmount.lte(allowance)\n  }\n\n  /**\n   * Check allowance.\n   *\n   * @param {Address} contractAddress The contract address.\n   * @param {Address} spenderAddress The spender address.\n   * @param {feeOptionKey} FeeOption Fee option (optional)\n   * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)\n   * @param {number} walletIndex (optional) HD wallet index\n   *\n   * @returns {TransactionResponse} The transaction result.\n   */\n  async approve({\n    contractAddress,\n    spenderAddress,\n    feeOptionKey: feeOption = FeeOption.Fastest,\n    amount,\n    walletIndex = 0,\n    gasLimitFallback,\n  }: ApproveParams): Promise<TransactionResponse> {\n    const gasPrice = BigNumber.from(\n      (\n        await this.estimateGasPrices()\n          .then((prices) => prices[feeOption])\n          .catch(() => getDefaultGasPrices()[feeOption])\n      )\n        .amount()\n        .toFixed(),\n    )\n    const gasLimit = await this.estimateApprove({\n      walletIndex,\n      spenderAddress,\n      contractAddress,\n      amount,\n    }).catch(() => BigNumber.from(gasLimitFallback))\n\n    const txAmount = amount ? BigNumber.from(amount.amount().toFixed()) : MAX_APPROVAL\n    return await this.call<TransactionResponse>({\n      walletIndex,\n      contractAddress,\n      abi: erc20ABI,\n      funcName: 'approve',\n      funcParams: [spenderAddress, txAmount, { from: this.getAddress(walletIndex), gasPrice, gasLimit }],\n    })\n  }\n\n  /**\n   * Estimate gas limit of approve.\n   *\n   * @param {Address} contractAddress The contract address.\n   * @param {Address} spenderAddress The spender address.\n   * @param {number} walletIndex (optional) HD wallet index\n   * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)\n   * @returns {BigNumber} The estimated gas limit.\n   */\n  async estimateApprove({\n    contractAddress,\n    spenderAddress,\n    walletIndex = 0,\n    amount,\n  }: EstimateApproveParams): Promise<BigNumber> {\n    const txAmount = amount ? BigNumber.from(amount.amount().toFixed()) : MAX_APPROVAL\n    const gasLimit = await this.estimateCall({\n      walletIndex,\n      contractAddress,\n      abi: erc20ABI,\n      funcName: 'approve',\n      funcParams: [spenderAddress, txAmount, { from: this.getAddress(walletIndex) }],\n    })\n\n    return gasLimit\n  }\n\n  /**\n   * Transfer ETH.\n   *\n   * @param {TxParams} params The transfer options.\n   * @param {feeOptionKey} FeeOption Fee option (optional)\n   * @param {gasPrice} BaseAmount Gas price (optional)\n   * @param {gasLimit} BigNumber Gas limit (optional)\n   *\n   * A given `feeOptionKey` wins over `gasPrice` and `gasLimit`\n   *\n   * @returns {TxHash} The transaction hash.\n   */\n  async transfer({\n    walletIndex = 0,\n    asset,\n    memo,\n    amount,\n    recipient,\n    feeOptionKey: feeOption,\n    gasPrice,\n    gasLimit,\n  }: TxParams & {\n    feeOptionKey?: FeeOption\n    gasPrice?: BaseAmount\n    gasLimit?: BigNumber\n  }): Promise<TxHash> {\n    const txAmount = BigNumber.from(amount.amount().toFixed())\n\n    let assetAddress\n    if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n      assetAddress = getTokenAddress(asset)\n    }\n\n    const isETHAddress = assetAddress === ETHAddress\n\n    // feeOption\n\n    const defaultGasLimit: ethers.BigNumber = isETHAddress ? SIMPLE_GAS_COST : BASE_TOKEN_GAS_COST\n\n    let overrides: TxOverrides = {\n      gasLimit: gasLimit || defaultGasLimit,\n      gasPrice: gasPrice && BigNumber.from(gasPrice.amount().toFixed()),\n    }\n\n    // override `overrides` if `feeOption` is provided\n    if (feeOption) {\n      const gasPrice = await this.estimateGasPrices()\n        .then((prices) => prices[feeOption])\n        .catch(() => getDefaultGasPrices()[feeOption])\n      const gasLimit = await this.estimateGasLimit({ asset, recipient, amount, memo }).catch(() => defaultGasLimit)\n\n      overrides = {\n        gasLimit,\n        gasPrice: BigNumber.from(gasPrice.amount().toFixed()),\n      }\n    }\n\n    let txResult\n    if (assetAddress && !isETHAddress) {\n      // Transfer ERC20\n      txResult = await this.call<TransactionResponse>({\n        walletIndex,\n        contractAddress: assetAddress,\n        abi: erc20ABI,\n        funcName: 'transfer',\n        funcParams: [recipient, txAmount, Object.assign({}, overrides)],\n      })\n    } else {\n      // Transfer ETH\n      const transactionRequest = Object.assign(\n        { to: recipient, value: txAmount },\n        {\n          ...overrides,\n          data: memo ? toUtf8Bytes(memo) : undefined,\n        },\n      )\n\n      txResult = await this.getWallet().sendTransaction(transactionRequest)\n    }\n\n    return txResult.hash\n  }\n\n  /**\n   * Estimate gas price.\n   * @see https://etherscan.io/apis#gastracker\n   *\n   * @returns {GasPrices} The gas prices (average, fast, fastest) in `Wei` (`BaseAmount`)\n   */\n  async estimateGasPrices(): Promise<GasPrices> {\n    try {\n      // Note: `rates` are in `gwei`\n      // @see https://gitlab.com/thorchain/thornode/-/blob/develop/x/thorchain/querier.go#L416-420\n      // To have all values in `BaseAmount`, they needs to be converted into `wei` (1 gwei = 1,000,000,000 wei = 1e9)\n      const ratesInGwei = standardFeeRates(await this.getFeeRateFromThorchain())\n      return {\n        [FeeOption.Average]: baseAmount(ratesInGwei[FeeOption.Average] * 10 ** 9, ETH_DECIMAL),\n        [FeeOption.Fast]: baseAmount(ratesInGwei[FeeOption.Fast] * 10 ** 9, ETH_DECIMAL),\n        [FeeOption.Fastest]: baseAmount(ratesInGwei[FeeOption.Fastest] * 10 ** 9, ETH_DECIMAL),\n      }\n    } catch (error) {}\n    //should only get here if thor fails\n    try {\n      return await this.estimateGasPricesFromEtherscan()\n    } catch (error) {\n      return Promise.reject(new Error(`Failed to estimate gas price: ${error.msg ?? error.toString()}`))\n    }\n  }\n\n  /**\n   * Estimate gas price.\n   * @see https://etherscan.io/apis#gastracker\n   *\n   * @returns {GasPrices} The gas prices (average, fast, fastest) in `Wei` (`BaseAmount`)\n   *\n   * @throws {\"Failed to estimate gas price\"} Thrown if failed to estimate gas price.\n   */\n  async estimateGasPricesFromEtherscan(): Promise<GasPrices> {\n    const etherscan = this.getEtherscanProvider()\n    const response: GasOracleResponse = await etherscanAPI.getGasOracle(etherscan.baseUrl, etherscan.apiKey)\n\n    // Convert result of gas prices: `Gwei` -> `Wei`\n    const averageWei = parseUnits(response.SafeGasPrice, 'gwei')\n    const fastWei = parseUnits(response.ProposeGasPrice, 'gwei')\n    const fastestWei = parseUnits(response.FastGasPrice, 'gwei')\n\n    return {\n      average: baseAmount(averageWei.toString(), ETH_DECIMAL),\n      fast: baseAmount(fastWei.toString(), ETH_DECIMAL),\n      fastest: baseAmount(fastestWei.toString(), ETH_DECIMAL),\n    }\n  }\n\n  /**\n   * Estimate gas.\n   *\n   * @param {TxParams} params The transaction and fees options.\n   * @returns {BaseAmount} The estimated gas fee.\n   */\n  async estimateGasLimit({ asset, recipient, amount, memo }: TxParams): Promise<BigNumber> {\n    const txAmount = BigNumber.from(amount.amount().toFixed())\n\n    let assetAddress\n    if (asset && assetToString(asset) !== assetToString(AssetETH)) {\n      assetAddress = getTokenAddress(asset)\n    }\n\n    let estimate\n\n    if (assetAddress && assetAddress !== ETHAddress) {\n      // ERC20 gas estimate\n      const contract = new ethers.Contract(assetAddress, erc20ABI, this.getProvider())\n\n      estimate = await contract.estimateGas.transfer(recipient, txAmount, {\n        from: this.getAddress(),\n      })\n    } else {\n      // ETH gas estimate\n      const transactionRequest = {\n        from: this.getAddress(),\n        to: recipient,\n        value: txAmount,\n        data: memo ? toUtf8Bytes(memo) : undefined,\n      }\n\n      estimate = await this.getProvider().estimateGas(transactionRequest)\n    }\n\n    return estimate\n  }\n\n  /**\n   * Estimate gas prices/limits (average, fast fastest).\n   *\n   * @param {TxParams} params\n   * @returns {FeesWithGasPricesAndLimits} The estimated gas prices/limits.\n   */\n  async estimateFeesWithGasPricesAndLimits(params: TxParams): Promise<FeesWithGasPricesAndLimits> {\n    // gas prices\n    const gasPrices = await this.estimateGasPrices()\n    const { fast: fastGP, fastest: fastestGP, average: averageGP } = gasPrices\n\n    // gas limits\n    const gasLimit = await this.estimateGasLimit({\n      asset: params.asset,\n      amount: params.amount,\n      recipient: params.recipient,\n      memo: params.memo,\n    })\n\n    return {\n      gasPrices,\n      fees: {\n        type: FeeType.PerByte,\n        average: getFee({ gasPrice: averageGP, gasLimit }),\n        fast: getFee({ gasPrice: fastGP, gasLimit }),\n        fastest: getFee({ gasPrice: fastestGP, gasLimit }),\n      },\n      gasLimit,\n    }\n  }\n\n  /**\n   * Get fees.\n   *\n   * @param {TxParams} params\n   * @returns {Fees} The average/fast/fastest fees.\n   *\n   * @throws {\"Failed to get fees\"} Thrown if failed to get fees.\n   */\n  getFees(): never\n  getFees(params: TxParams): Promise<Fees>\n  async getFees(params?: TxParams): Promise<Fees> {\n    if (!params) throw new Error('Params need to be passed')\n\n    const { fees } = await this.estimateFeesWithGasPricesAndLimits(params)\n    return fees\n  }\n}\n\nexport { Client }\n"],"names":["ethplorerAPI.getAddress","etherscanAPI.getTokenBalance","etherscanAPI.getTokenTransactionHistory","etherscanAPI.getETHTransactionHistory","ethplorerAPI.getTxInfo","etherscanAPI.getGasOracle"],"mappings":"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"}