import { Provider, TransactionResponse } from '@ethersproject/abstract-provider';
import { EtherscanProvider } from '@ethersproject/providers';
import { Address, Balance, BaseXChainClient, FeeOption, Fees, Network, Tx, TxHash, TxHistoryParams, TxParams, TxsPage, XChainClient, XChainClientParams } from '@xchainjs/xchain-client';
import { Asset, BaseAmount } from '@xchainjs/xchain-util';
import { BigNumber, ethers } from 'ethers';
import { ApproveParams, CallParams, EstimateApproveParams, EstimateCallParams, ExplorerUrl, FeesWithGasPricesAndLimits, GasPrices, InfuraCreds, IsApprovedParams } from './types';
/**
 * Interface for custom Ethereum client
 */
export interface EthereumClient {
    call<T>(params: CallParams): Promise<T>;
    estimateCall(asset: EstimateCallParams): Promise<BigNumber>;
    estimateGasPrices(): Promise<GasPrices>;
    estimateGasLimit(params: TxParams): Promise<BigNumber>;
    estimateFeesWithGasPricesAndLimits(params: TxParams): Promise<FeesWithGasPricesAndLimits>;
    estimateApprove(params: EstimateApproveParams): Promise<BigNumber>;
    isApproved(params: IsApprovedParams): Promise<boolean>;
    approve(params: ApproveParams): Promise<TransactionResponse>;
    getFees(params: TxParams): Promise<Fees>;
}
export declare type EthereumClientParams = XChainClientParams & {
    ethplorerUrl?: string;
    ethplorerApiKey?: string;
    explorerUrl?: ExplorerUrl;
    etherscanApiKey?: string;
    infuraCreds?: InfuraCreds;
};
/**
 * Custom Ethereum client
 */
export default class Client extends BaseXChainClient implements XChainClient, EthereumClient {
    private ethNetwork;
    private hdNode;
    private etherscanApiKey?;
    private explorerUrl;
    private infuraCreds;
    private ethplorerUrl;
    private ethplorerApiKey;
    private providers;
    /**
     * Constructor
     * @param {EthereumClientParams} params
     */
    constructor({ network, ethplorerUrl, ethplorerApiKey, explorerUrl, phrase, rootDerivationPaths, etherscanApiKey, infuraCreds, }: EthereumClientParams);
    /**
     * Purge client.
     *
     * @returns {void}
     */
    purgeClient(): void;
    /**
     * Set/Update the explorer url.
     *
     * @param {string} url The explorer url.
     * @returns {void}
     */
    setExplorerURL(url: ExplorerUrl): void;
    /**
     * Get the current address.
     *
     * @param {number} walletIndex (optional) HD wallet index
     * @returns {Address} The current address.
     *
     * @throws {"Phrase must be provided"}
     * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.
     */
    getAddress(walletIndex?: number): Address;
    /**
     * Get etherjs wallet interface.
     *
     * @param {number} walletIndex (optional) HD wallet index
     * @returns {Wallet} The current etherjs wallet interface.
     *
     * @throws {"Phrase must be provided"}
     * Thrown if phrase has not been set before. A phrase is needed to create a wallet and to derive an address from it.
     */
    getWallet(walletIndex?: number): ethers.Wallet;
    setupProviders(): void;
    /**
     * Get etherjs Provider interface.
     *
     * @returns {Provider} The current etherjs Provider interface.
     */
    getProvider(): Provider;
    /**
     * Get etherjs EtherscanProvider interface.
     *
     * @returns {EtherscanProvider} The current etherjs EtherscanProvider interface.
     */
    getEtherscanProvider(): EtherscanProvider;
    /**
     * Get the explorer url.
     *
     * @returns {string} The explorer url for ethereum based on the current network.
     */
    getExplorerUrl(): string;
    /**
     * Get the explorer url.
     *
     * @returns {ExplorerUrl} The explorer url (both mainnet and testnet) for ethereum.
     */
    private getDefaultExplorerURL;
    /**
     * Get the explorer url.
     *
     * @param {Network} network
     * @returns {string} The explorer url for ethereum based on the network.
     */
    private getExplorerUrlByNetwork;
    /**
     * Get the explorer url for the given address.
     *
     * @param {Address} address
     * @returns {string} The explorer url for the given address.
     */
    getExplorerAddressUrl(address: Address): string;
    /**
     * Get the explorer url for the given transaction id.
     *
     * @param {string} txID
     * @returns {string} The explorer url for the given transaction id.
     */
    getExplorerTxUrl(txID: string): string;
    /**
     * Set/update the current network.
     *
     * @param {Network} network
     * @returns {void}
     *
     * @throws {"Network must be provided"}
     * Thrown if network has not been set before.
     */
    setNetwork(network: Network): void;
    /**
     * Set/update a new phrase (Eg. If user wants to change wallet)
     *
     * @param {string} phrase A new phrase.
     * @param {number} walletIndex (optional) HD wallet index
     * @returns {Address} The address from the given phrase
     *
     * @throws {"Invalid phrase"}
     * Thrown if the given phase is invalid.
     */
    setPhrase(phrase: string, walletIndex?: number): Address;
    /**
     * Validate the given address.
     *
     * @param {Address} address
     * @returns {boolean} `true` or `false`
     */
    validateAddress(address: Address): boolean;
    /**
     * Get the ETH balance of a given address.
     *
     * @param {Address} address By default, it will return the balance of the current wallet. (optional)
     * @returns {Balance[]} The all balance of the address.
     *
     * @throws {"Invalid asset"} throws when the give asset is an invalid one
     */
    getBalance(address: Address, assets?: Asset[]): Promise<Balance[]>;
    /**
     * Get transaction history of a given address with pagination options.
     * By default it will return the transaction history of the current wallet.
     *
     * @param {TxHistoryParams} params The options to get transaction history. (optional)
     * @returns {TxsPage} The transaction history.
     */
    getTransactions(params?: TxHistoryParams): Promise<TxsPage>;
    /**
     * Get the transaction details of a given transaction id.
     *
     * @param {string} txId The transaction id.
     * @param {string} assetAddress The asset address. (optional)
     * @returns {Tx} The transaction details of the given transaction id.
     *
     * @throws {"Need to provide valid txId"}
     * Thrown if the given txId is invalid.
     */
    getTransactionData(txId: string, assetAddress?: Address): Promise<Tx>;
    /**
     * Call a contract function.
     * @template T The result interface.
     * @param {number} walletIndex (optional) HD wallet index
     * @param {Address} contractAddress The contract address.
     * @param {ContractInterface} abi The contract ABI json.
     * @param {string} funcName The function to be called.
     * @param {any[]} funcParams The parameters of the function.
     * @returns {T} The result of the contract function call.
     *
     * @throws {"contractAddress must be provided"}
     * Thrown if the given contract address is empty.
     */
    call<T>({ walletIndex, contractAddress, abi, funcName, funcParams }: CallParams): Promise<T>;
    /**
     * Call a contract function.
     * @param {Address} contractAddress The contract address.
     * @param {ContractInterface} abi The contract ABI json.
     * @param {string} funcName The function to be called.
     * @param {any[]} funcParams The parameters of the function.
     * @param {number} walletIndex (optional) HD wallet index
     * @returns {BigNumber} The result of the contract function call.
     *
     * @throws {"contractAddress must be provided"}
     * Thrown if the given contract address is empty.
     */
    estimateCall({ contractAddress, abi, funcName, funcParams, walletIndex, }: EstimateCallParams): Promise<BigNumber>;
    /**
     * Check allowance.
     *
     * @param {Address} contractAddress The spender address.
     * @param {Address} spenderAddress The spender address.
     * @param {BaseAmount} amount The amount to check if it's allowed to spend or not (optional).
     * @param {number} walletIndex (optional) HD wallet index
     * @returns {boolean} `true` or `false`.
     */
    isApproved({ contractAddress, spenderAddress, amount, walletIndex }: IsApprovedParams): Promise<boolean>;
    /**
     * Check allowance.
     *
     * @param {Address} contractAddress The contract address.
     * @param {Address} spenderAddress The spender address.
     * @param {feeOptionKey} FeeOption Fee option (optional)
     * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)
     * @param {number} walletIndex (optional) HD wallet index
     *
     * @returns {TransactionResponse} The transaction result.
     */
    approve({ contractAddress, spenderAddress, feeOptionKey: feeOption, amount, walletIndex, gasLimitFallback, }: ApproveParams): Promise<TransactionResponse>;
    /**
     * Estimate gas limit of approve.
     *
     * @param {Address} contractAddress The contract address.
     * @param {Address} spenderAddress The spender address.
     * @param {number} walletIndex (optional) HD wallet index
     * @param {BaseAmount} amount The amount of token. By default, it will be unlimited token allowance. (optional)
     * @returns {BigNumber} The estimated gas limit.
     */
    estimateApprove({ contractAddress, spenderAddress, walletIndex, amount, }: EstimateApproveParams): Promise<BigNumber>;
    /**
     * Transfer ETH.
     *
     * @param {TxParams} params The transfer options.
     * @param {feeOptionKey} FeeOption Fee option (optional)
     * @param {gasPrice} BaseAmount Gas price (optional)
     * @param {gasLimit} BigNumber Gas limit (optional)
     *
     * A given `feeOptionKey` wins over `gasPrice` and `gasLimit`
     *
     * @returns {TxHash} The transaction hash.
     */
    transfer({ walletIndex, asset, memo, amount, recipient, feeOptionKey: feeOption, gasPrice, gasLimit, }: TxParams & {
        feeOptionKey?: FeeOption;
        gasPrice?: BaseAmount;
        gasLimit?: BigNumber;
    }): Promise<TxHash>;
    /**
     * Estimate gas price.
     * @see https://etherscan.io/apis#gastracker
     *
     * @returns {GasPrices} The gas prices (average, fast, fastest) in `Wei` (`BaseAmount`)
     */
    estimateGasPrices(): Promise<GasPrices>;
    /**
     * Estimate gas price.
     * @see https://etherscan.io/apis#gastracker
     *
     * @returns {GasPrices} The gas prices (average, fast, fastest) in `Wei` (`BaseAmount`)
     *
     * @throws {"Failed to estimate gas price"} Thrown if failed to estimate gas price.
     */
    estimateGasPricesFromEtherscan(): Promise<GasPrices>;
    /**
     * Estimate gas.
     *
     * @param {TxParams} params The transaction and fees options.
     * @returns {BaseAmount} The estimated gas fee.
     */
    estimateGasLimit({ asset, recipient, amount, memo }: TxParams): Promise<BigNumber>;
    /**
     * Estimate gas prices/limits (average, fast fastest).
     *
     * @param {TxParams} params
     * @returns {FeesWithGasPricesAndLimits} The estimated gas prices/limits.
     */
    estimateFeesWithGasPricesAndLimits(params: TxParams): Promise<FeesWithGasPricesAndLimits>;
    /**
     * Get fees.
     *
     * @param {TxParams} params
     * @returns {Fees} The average/fast/fastest fees.
     *
     * @throws {"Failed to get fees"} Thrown if failed to get fees.
     */
    getFees(): never;
    getFees(params: TxParams): Promise<Fees>;
}
export { Client };
