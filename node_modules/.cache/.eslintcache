[{"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/index.js":"1","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/reportWebVitals.js":"2","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/App.js":"3","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/environments.js":"4","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/withdraw.js":"5","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/swap.js":"6","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/services/midgard.service.js":"7","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/services/eth-utils.service.js":"8","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/thorchain.abi.js":"9","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/erc20.abi.js":"10","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/erc20RUNE.abi.js":"11"},{"size":500,"mtime":1635783816449,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1635783816449,"results":"14","hashOfConfig":"13"},{"size":21830,"mtime":1638861177849,"results":"15","hashOfConfig":"13"},{"size":215,"mtime":1635783816449,"results":"16","hashOfConfig":"13"},{"size":6051,"mtime":1638861177853,"results":"17","hashOfConfig":"13"},{"size":11969,"mtime":1639630409651,"results":"18","hashOfConfig":"13"},{"size":2201,"mtime":1638861177853,"results":"19","hashOfConfig":"13"},{"size":6566,"mtime":1638861177853,"results":"20","hashOfConfig":"13"},{"size":8492,"mtime":1637050330000,"results":"21","hashOfConfig":"13"},{"size":2998,"mtime":1637050330000,"results":"22","hashOfConfig":"13"},{"size":5364,"mtime":1637050330000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"h6q2og",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/index.js",[],["50","51"],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/reportWebVitals.js",[],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/App.js",["52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"/** @format */\n\nimport {\n  generatePhrase,\n  encryptToKeyStore,\n  decryptFromKeystore,\n} from \"@xchainjs/xchain-crypto\";\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from \"semantic-ui-react\";\nimport \"./App.css\";\nimport { Network } from \"@xchainjs/xchain-client\";\nimport { Client as binanceClient } from \"@xchainjs/xchain-binance\";\nimport { Client as bitcoinClient } from \"@xchainjs/xchain-bitcoin\";\nimport { Client as thorchainClient } from \"@xchainjs/xchain-thorchain\";\nimport { Client as ethereumClient } from \"@xchainjs/xchain-ethereum/lib\";\nimport { Client as litecoinClient } from \"@xchainjs/xchain-litecoin\";\nimport { Client as bitcoinCashClient } from \"@xchainjs/xchain-bitcoincash\";\nimport { EthUtilsService } from \"../src/services/eth-utils.service\";\nimport {\n  AssetRuneNative,\n  BaseAmount,\n  assetAmount,\n  assetToBase,\n  baseAmount,\n  AssetETH,\n  AssetBNB,\n  assetFromString,\n  assetToString,\n  AssetCurrencySymbol,\n  currencySymbolByAsset,\n  BNBChain,\n  AssetRuneERC20,\n} from \"@xchainjs/xchain-util\";\nimport * as types from \"@xchainjs/xchain-util\";\nimport * as asset from \"@xchainjs/xchain-util\";\nimport { MidgardService } from \"./services/midgard.service\";\nimport { environment } from \"./environments\";\nimport { Client as PolkadotClient } from \"@xchainjs/xchain-polkadot\";\nimport { Client as CosmosXchainClient } from \"@xchainjs/xchain-cosmos\";\nimport BigNumber from \"bignumber.js\";\n// import Swap from \"@binance-chain/javascript-sdk/lib/client/swap\";\nimport { ClaimMsg } from \"@binance-chain/javascript-sdk/lib/types\";\nimport { ethers } from \"ethers\";\nimport { TCAbi, TCRopstenAbi } from \"../src/app/_abi/thorchain.abi\";\nimport Swap from \"./swap\";\nimport Withdraw from \"./withdraw\";\n\nfunction App() {\n  const midgardService = new MidgardService();\n  const ethUtilsService = new EthUtilsService();\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  const [fileKeyStore, setfileKeyStore] = React.useState(\"\");\n\n  // Asset modueles coming f rom here\n  let ass = asset;\n  console.log(\"Assets Moduele I am here ============>\", ass);\n  console.log(ass.assetAmount);\n\n  let key;\n  let fileReader;\n  let res;\n  let phrase;\n  // let userThorchainClient\n\n  //Generation of Random Phrase and Encryption is going on here\n  const keystore = async () => {\n    try {\n      phrase = generatePhrase();\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n\n      /*File Downloading function is called here to download the Text File*/\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*File creation and saving here*/\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\", key);\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thor_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  //File Decryption is going here\n  const decryptKeyStore = async () => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n  };\n\n  //send Transaction\n  const sendTransaction = async () => {\n    const userEthereumClient = new ethereumClient({\n      network: \"testnet\",\n      phrase: res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: { projectId: environment.infuraProjectId },\n    });\n  };\n\n  // const swapTransaction = async ()=>{\n  //   const userEthereumClient = new ethereumClient({\n  //     network:'testnet',\n  //     phrase:res,\n  //     etherscanApiKey: environment.etherscanKey,\n  //     infuraCreds: { projectId: environment.infuraProjectId },\n  //   });\n  //   console.log(\"User Ethereum Client: MidgardService---------------> \", userEthereumClient.getAddress());\n  //   const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n  //   const send_amount = baseAmount(10000, 6);\n  //   const memo = 'swap:ETH.BNB:tbnb1ftzhmpzr4t8ta3etu4x7nwujf9jqckp3th2lh0'\n\n  //   const result = await userEthereumClient.deposit({\n  //   asset: AssetBNB,\n  //   amount: send_amount,\n  //   memo,\n  //   })\n  //   console.log(result)      console.log('THORChain Balance: ---------------> ', balanceThor);\n  //   }\n\n  //File handiling is done here and getting the menomics after the decryption of the file data is done here\n  const handleFileRead = async (e) => {\n    const content = JSON.parse(fileReader.result);\n    console.log(\"content\", content);\n    res = await decryptFromKeystore(content, input);\n    console.log(\"decryption=====>\", res);\n\n    //Network is defined here for all the general networks\n    const network =\n      environment.network === \"testnet\" ? Network.Testnet : Network.Mainnet;\n    console.log(\"Enabled Network: ---------------> \", network);\n    //Binance Address is getting from here\n    const userBinanceClient = new binanceClient({ network, phrase: res });\n    let BinanceClientAddress = userBinanceClient.getAddress();\n    console.log(\n      \"User Binance Client address: ---------------> \",\n      BinanceClientAddress\n    );\n    //Transactions history of Binance Client getting here\n\n    const BinanceBalance = await userBinanceClient.getBalance(\n      BinanceClientAddress\n    );\n\n    console.log(\"Binance Balance: ---------------> \", BinanceBalance);\n    for (let i = 0; i < BinanceBalance.length; i++) {\n      console.log(\n        \"Binance Balance: ---------------> \",\n        BinanceBalance[i].amount.amount()\n      );\n    }\n    const transationResultOfBinanceClient =\n      await userBinanceClient.getTransactions({\n        address: BinanceClientAddress,\n      });\n    console.log(\n      \"Transaction Data of Binance CLient\",\n      transationResultOfBinanceClient\n    );\n\n    //Binance Transaction of swap\n\n    //Ethereum Transaction is doing here584849890757910104\n\n    //Bitcoin Client is set here\n    const userBtcClient = new bitcoinClient({\n      network,\n      phrase: res,\n      sochainUrl: \"https://sochain.com/api/v2\",\n      blockstreamUrl: \"https://blockstream.info\",\n    });\n    //Bitcoin Client is Address generating from here\n    console.log(\n      \"User Btc Client: ---------------> \",\n      userBtcClient.getAddress()\n    );\n    let addressBtc = userBtcClient.getAddress();\n    console.log(\"BTC Address: ---------------> \", addressBtc);\n    //Balance of Bitcoin is getting from here\n    const balanceBtc = await userBtcClient.getBalance(addressBtc);\n    console.log(\"balance: ---------------> \", balanceBtc[0].amount.amount());\n    //Transactions history of BTC Client getting here\n    const transationResultOfBTCClient = await userBtcClient.getTransactions({\n      address: addressBtc,\n    });\n    console.log(\"Transaction Data of BTC CLient\", transationResultOfBTCClient);\n    // Ethservices\n    // const balances = bncBalances.map((balance) => {\n    //   const asset = assetFromString(`BNB.${balance.symbol}`);\n\n    //   return {\n    //     asset,\n    //     amount: assetToBase(assetAmount(balance.free, 8)),\n    //     frozenAmount: assetToBase(assetAmount(balance.frozen, 8)),\n    //   };\n    // });\n\n    //Thorchain Client is set here\n    const userThorchainClient = new thorchainClient({ network, phrase: res });\n    console.log(\n      \"User Thorchain Client: ---------------> \",\n      userThorchainClient\n    );\n\n    //Thorchain Address is generation from here\n    const thorAddress = await userThorchainClient.getAddress();\n    console.log(\"THORChain Address: ---------------> \", thorAddress);\n\n    // const Thorprovider = userThorchainClient.getProvider();\n    // const thoorbalance = await provider.getBalance(thorAddress);\n    // console.log(\"//////////////////////,,,,,,,,,,,,,,,,,,,,\",thoorbalance);\n\n    //Balance of THORChain is getting from here \"transfer\"\n    const balanceThor = await userThorchainClient.getBalance(thorAddress);\n\n    for (let i = 0; i < balanceThor.length; i++) {\n      console.log(\"THORChain Balance: ---------------> \", balanceThor);\n      console.log(\n        \"THORChain Balance: ---------------> \",\n        balanceThor[i].amount.amount()\n      );\n    }\n    //Transactions history of Thorchain Client getting here\n    const transationResultOfTHORChain =\n      await userThorchainClient.getTransactions({ address: thorAddress });\n    console.log(\n      \"Transaction Data of THORChain CLient\",\n      transationResultOfTHORChain\n    );\n\n    // Ethereum CLinet is set here\n    const userEthereumClient = new ethereumClient({\n      network: \"testnet\",\n      phrase: res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: { projectId: environment.infuraProjectId },\n    });\n    // //Ethereum Client Address is generation from here\n    // console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n    //Ethereum CLient Provider is printing here\n    const provider = userEthereumClient.getProvider();\n    console.log(\"Ethereum Provider: ---------------> \", provider);\n    // //Ethereum Balance is getting from here\n\n    let addressEth = userEthereumClient.getAddress();\n\n    const ethBalance = await provider.getBalance(addressEth);\n    // console.log(\"Ethereum Balance: ---------------> \", ethBalance.toString());\n\n    console.log(\"Ethereum Address: ---------------> \", addressEth);\n    //Ethereum Client Balance is getting from here\n    const balance1eth = await userEthereumClient.getBalance(addressEth);\n    const assetofeth = await ass.AssetETH;\n\n    for (let i = 0; i < balance1eth.length; i++) {\n      console.log(\"Ethereum Balance: ---------------> \", ethBalance);\n      // console.log(\"Ethereum Client Balance: ---------------> \",ethBalance[i].amount.amount());\n    }\n\n    console.log(\"Ethereum Assets is coming here ========>\", assetofeth);\n\n    //LTC Client is setup here\n    const userLtcClient = new litecoinClient({\n      network,\n      phrase: res,\n    });\n    // LTC Client Address generation is done here\n    let addressLTC = userLtcClient.getAddress();\n    console.log(\"User LTC Client: ---------------> \", addressLTC);\n    //LTC Client Balance is getting from here\n    const balanceLTC = await userLtcClient.getBalance(addressLTC);\n    console.log(\"LTC Client Balance: ---------------> \", balanceLTC);\n    //Transactions history of LTC Client getting here\n    const transationResultOfLTC = await userLtcClient.getTransactions({\n      address: addressLTC,\n    });\n    console.log(\"Transaction Data of LTC CLient\", transationResultOfLTC);\n\n    //BCH Client is setup here\n    const userbchClient = new bitcoinCashClient({ network, phrase: res });\n    //BCH Client Address generation is done here\n    let addressBCH = userbchClient.getAddress();\n    console.log(\"User BCH Client: ---------------> \", addressBCH);\n    //BCH Client Balance getting is done here\n    const balanceBCH = await userbchClient.getBalance(addressBCH);\n    console.log(\"LTC Client Balance: ---------------> \", balanceBCH);\n    //Transaction History of BCH Client getting here\n    const transationResultOfBCH = await userbchClient.getTransactions({\n      address: addressBCH,\n    });\n    console.log(\"Transaction Data of LTC CLient\", transationResultOfBCH);\n\n    //PolkaDot Client is setup here\n    const userPolkaDotClient = new PolkadotClient({\n      network: \"testnet\",\n      phrase: res,\n    });\n    console.log(\n      \"User PolkaDot Client: ---------------> \",\n      userPolkaDotClient.getAddress()\n    );\n\n    //     poolName\n    //   )=> {\n    //     const asset = new Asset(poolName);\n    //     const assetAddress = asset.symbol.slice(asset.ticker.length + 1);\n    //     const strip0x =\n    //       assetAddress.substr(0, 2).toUpperCase() === '0X'\n    //         ? assetAddress.substr(2)\n    //         : assetAddress;\n    //     const checkSummedAddress = ethers.utils.getAddress(strip0x);\n    //     return {\n    //       chain: asset.chain,\n    //       ticker: asset.ticker,\n    //       symbol: `${asset.ticker}-${checkSummedAddress}`,\n    //     };\n    //   };\n\n    //   const pools = await this.midgardService.getPools().toPromise();\n    //   const ethTokenPools = pools\n    //     .filter((pool) => pool.asset.indexOf('ETH') === 0)\n    //     .filter((ethPool) => ethPool.asset.indexOf('-') >= 0);\n\n    //   for (const token of ethTokenPools) {\n    //     // const tokenAsset = checkSummedAsset(token.asset);\n    //     // assetsToQuery.push(tokenAsset);\n    //   }\n    //  console.log(\"Poolssss here ------------------------>\",pools);\n\n    //Inbound Addresses here for the pools\n\n    const pools = new MidgardService();\n    let inboundAddress;\n    (async () => {\n      const { data } = await pools.getInboundAddresses();\n      inboundAddress = data[1].address;\n      console.log(\n        \"Inbound Address coming from here ==========================>\",\n        data[1].address\n      );\n    })();\n\n    const swapBNBToRuneNative = async () => {\n      const destAddress = userBinanceClient.getAddress();\n      console.log(\n        \"User Binance Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      const to_address = \"tbnb1gr3zze7zkz2x6p08qnl88rhd22vpypmafeplr7\";\n      const send_amount = baseAmount(100000, 6);\n      const Memo = \"=:THOR.RUNE:tthor1fcaf3n4h34ls3cu4euwl6f7kex0kpctkf5p8d7\";\n\n      // const assetString = assetFromString('BNB.BUSD-BD1');\n      // console.log('assetString------------------------', assetString);\n      const result = await userBinanceClient.transfer({\n        asset: AssetBNB,\n        amount: send_amount,\n        recipient: to_address,\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    // swapBNBToRuneNative();\n    (async () => {})();\n\n    //Swap Rune to BNB\n    const swapRuneToBNB = async () => {\n      const destAddress = userThorchainClient.getAddress();\n      console.log(\n        \"User Thorchain Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      const to_address = \"tthor1mrckazz7l67tz435dp9m3qaygzm6xmsqeglrj8\";\n      const send_amount = baseAmount(2000000000, 8);\n      const Memo =\n        \"=:BNB.BNB:tbnb1yc20slera2g4fhnkkyttqxf70qxa4jtm42qq4t:63097111\";\n\n      // const assetString = assetFromString('BNB.BUSD-BD1');\n      // console.log('assetString------------------------', assetString);\n      const result = await userThorchainClient.transfer({\n        asset: AssetRuneNative,\n        amount: send_amount,\n        recipient: to_address,\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    // swapRuneToBNB();\n    (async () => {})();\n\n    //Swap Rune to ETH\n    const swapRuneToETH = async () => {\n      const destAddress = userEthereumClient.getAddress();\n      console.log(\n        \"User Ethereum Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      // const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n      // const send_amount = baseAmount(20000000000, 8);\n      const Memo =\n        \"=:ETH.ETH:0x05ad7dd40fa9457f703191211bd4cb989fd06cbf:161891111\";\n\n      // const assetString = assetFromString('BNB.BUSD-BD1');\n      // console.log('assetString------------------------', assetString);\n      const result = await userEthereumClient.deposit({\n        asset: AssetETH,\n        amount: baseAmount(2 * 10 ** 8),\n        // recipient: to_address,\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    // swapRuneToETH();\n    (async () => {})();\n\n    //Swap USDT to RUNE\n    const USDTtoRUNE = async () => {\n      const destAddress = userEthereumClient.getAddress();\n      console.log(\n        \"User Binance  Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      // const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n      // const send_amount = baseAmount(20000000000, 8);\n      const Memo = \"=:THOR.RUNE:tthor1fcaf3n4h34ls3cu4euwl6f7kex0kpctkf5p8d7\";\n\n      // const assetString = assetFromString('BNB.BUSD-BD1');\n      // console.log('assetString------------------------', assetString);\n      const result = await userEthereumClient.transfer({\n        asset: AssetETH,\n        amount: baseAmount(0.0001 * 10 ** 18),\n        // recipient: to_address,\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    //USDTtoRUNE();\n    (async () => {})();\n\n    //Swap RUNE to BUSD(BEP20)\n    const RUNETOBUSD = async () => {\n      const destAddress = userThorchainClient.getAddress();\n      console.log(\n        \"User Binance  Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      // const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n      // const send_amount = baseAmount(20000000000, 8);\n      const Memo = \"=:BNB.BUSD-BAF:tbnb1yc20slera2g4fhnkkyttqxf70qxa4jtm42qq4t\";\n\n      // const assetString = assetFromString('BNB.BUSD-BD1');\n      // console.log('assetString------------------------', assetString);\n      const result = await userThorchainClient.deposit({\n        asset: AssetRuneNative,\n        amount: baseAmount(20 * 10 ** 8),\n        // recipient: to_address,\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    // RUNETOBUSD();\n    (async () => {})();\n\n    const userCosmosXchainClient = new CosmosXchainClient({\n      network: \"testnet\",\n      phrase: res,\n    });\n\n    // ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\n    // const assetString = assetFromString('ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306');\n    // console.log('assetString------------------------', assetString);\n\n    //Contract getting here\n    const abi = environment.network === \"testnet\" ? TCRopstenAbi : TCAbi;\n    const contract = new ethers.Contract(\n      \"0xefA28233838f46a80AaaC8c309077a9ba70D123A\",\n      abi\n    );\n    console.log(\"++++++++++++++++++++++++++++++++++++++\", contract);\n\n    //Swap RUNE to BUSD(BEP20)\n    const USDTTORUNESWAP = async () => {\n      const destAddress = userThorchainClient.getAddress();\n      //ETH inbound Address\n      const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n      //MEMO to swap ETH.USDT to THOR.RUNE\n      const Memo = \"=:THOR.RUNE:destAddress\";\n      //ABI here\n      const abi = environment.network === \"testnet\" ? TCRopstenAbi : TCAbi;\n      const contract = new ethers.Contract(\n        \"0xefA28233838f46a80AaaC8c309077a9ba70D123A\",\n        abi\n      );\n      console.log(\"++++++++++++++++++++++++++++++++++++++\", contract);\n\n      const result = await contract.deposit({\n        inboundAddress: to_address,\n        asset: assetFromString(\n          \"ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\"\n        ),\n        amount: baseAmount(0.02 * 10 ** 18),\n        memo: Memo,\n      });\n      console.log(\"i am here =======================>\", result);\n\n      return result;\n    };\n    // USDTTORUNESWAP();\n    (async () => {})();\n\n    const checkBalanceOfCli = async () => {\n      const destAddress = userBinanceClient.getAddress();\n      console.log(\n        \"User Binance  Client: >>>>>>>>>>>>>>>>>>>>>>>>>---------------> \",\n        destAddress\n      );\n      const balanceCLI = await userBinanceClient.getBalance(destAddress);\n      console.log(\"XXXXXXXX>>>><<<>>>\", balanceCLI);\n      console.log(\"hey balance ===>>\", balanceCLI[1].amount.amount());\n      for (let i = 0; i < balanceCLI.length; i++) {\n        console.log(\n          balanceCLI[i].asset,\n          Number(balanceCLI[i].amount.amount().c[0]) /\n            Number(Math.pow(10, balanceCLI[i].amount.decimal))\n        );\n      }\n      const assetofetch = await ass.assetFromString(\"BNB.BUSD-BAF\");\n\n      console.log(\"<><><><><><><><><><><><><><><><><><>\", assetofetch);\n    };\n    // checkBalanceOfCli();\n  };\n  const convertAsset = async () => {\n    const a = assetFromString(\n      \"ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\"\n    );\n    // return assetToString(a);\n\n    console.log(\"Xxxxxxxxxxxxx>>>>>\", a, assetToString(a));\n  };\n  convertAsset();\n  //WITHDRAW FUNCTIONALITY\n  // const params: DepositParam = {\n  //   amount: baseAmount('0'), // what to set?\n  //   memo: 'WITHDRAW:ETH.ETH:10000:THOR.RUNE'\n  // }\n  // await thorchainClient!.deposit(params)\n\n  //Submit button to trigger the things\n  const SubmitAll = async () => {\n    console.log(\"password====>\", typeof input);\n    console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n    decryptKeyStore();\n  };\n\n  return (\n    <>\n      <Container>\n        <Segment>\n          <div>\n            <h1>Thorchain Custom Keystore Maker</h1>\n            <h4>Enter your Password</h4>\n            <input\n              id=\"input\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n            />\n            <Button primary onClick={keystore}>\n              Create KeyStore\n            </Button>\n          </div>\n          <h1> Thorchain KeyStore Decryption </h1>\n          <div>\n            <h1>Enter your password</h1>\n            {/* // <input id=\"password\" value={input} onchange ={e=> setInput(e.target.value)}/> */}\n          </div>\n          <div>\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                setfileKeyStore(e.target.files[0]);\n              }}\n            />\n            <button onClick={SubmitAll}>Upload!</button>\n          </div>\n          <button onClick={sendTransaction}>send Transaction</button>\n          <button>Swap</button>\n\n          <Swap />\n          <Withdraw />\n        </Segment>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/environments.js",[],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/withdraw.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"/** @format */\n\nimport { MidgardService } from \"./services/midgard.service\";\nimport { EthUtilsService } from \"./services/eth-utils.service\";\nimport { ethers } from \"ethers\";\nimport { environment } from \"./environments\";\nimport { TCAbi, TCRopstenAbi } from \"./app/_abi/thorchain.abi\";\nimport React, { useState, useEffect } from \"react\";\nconst thorchainClient = require(\"@xchainjs/xchain-thorchain\");\nconst binanceClient = require(\"@xchainjs/xchain-binance\");\nconst bitcoinClient = require(\"@xchainjs/xchain-bitcoin\");\nconst ethereumClient = require(\"@xchainjs/xchain-ethereum/lib\");\nconst litecoinClient = require(\"@xchainjs/xchain-litecoin\");\nconst bitcoinCashClient = require(\"@xchainjs/xchain-bitcoincash\");\nconst polkadotClient = require(\"@xchainjs/xchain-polkadot\");\n// import { polkadotClient } from \"@xchainjs/xchain-polkadot\";\nconst cosmosXchainClient = require(\"@xchainjs/xchain-cosmos\");\n\nconst {\n  AssetRuneNative,\n  AssetBNB,\n  baseAmount,\n  AssetETH,\n  assetToBase,\n  assetAmount,\n  assetFromString,\n} = require(\"@xchainjs/xchain-util\");\n\n// const blockchainClient = async () => {\n//   const CLI = new ethereumClient.Client({\n//     network: \"testnet\",\n//     phrase:\n//       \"expose blush snake marriage lock crop group define today such indoor school\",\n//   });\n//   const memo = \"=:THOR.RUNE:tthor1fcaf3n4h34ls3cu4euwl6f7kex0kpctkf5p8d7\";\n\n//   const txId = await CLI.transfer({\n//     asset: AssetETH,\n//     amount: baseAmount(0.0001 * 10 ** 8),\n//     memo,\n//   });\n//   console.log(\n//     `https://viewblock.io/thorchain/tx/${txId}?network=testnet`,\n//     txId\n//   );\n// };\nconst Withdraw = () => {\n  useEffect(() => {\n    getAllPools();\n  }, []);\n  const [eth, setEth] = useState(null);\n  const midgardService = new MidgardService();\n  const ethUtilsService = new EthUtilsService();\n\n  //Contract getting here\n  const abi = environment.network === \"testnet\" ? TCRopstenAbi : TCAbi;\n  const contract = new ethers.Contract(\n    \"0xefA28233838f46a80AaaC8c309077a9ba70D123A\",\n    abi\n  );\n  console.log(\"++++++++++++++++++++++++++++++++++++++\", contract);\n\n  //token to native swap\n  const USDTTORUNESWAP = async () => {\n    const CLI = new ethereumClient.Client({\n      network: \"testnet\",\n      phrase:\n        \"expose blush snake marriage lock crop group define today such indoor school\",\n    });\n    console.log(\"here\");\n    //ETH inbound Address\n    const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n    //MEMO to swap ETH.USDT to THOR.RUNE\n    const Memo = \"=:THOR.RUNE:tthor1fcaf3n4h34ls3cu4euwl6f7kex0kpctkf5p8d7\";\n    //ABI here\n    const abi = environment.network === \"testnet\" ? TCRopstenAbi : TCAbi;\n    console.log(\"here\");\n    const contract = new ethers.Contract(\n      \"0xefA28233838f46a80AaaC8c309077a9ba70D123A\",\n      abi\n    );\n    console.log(\"++++++++++++++++++++++++++++++++++++++\", contract);\n    console.log(\"here\");\n    // const decimals = ethUtilsService.getAssetDecimal(\n    //   assetFromString(\"ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\"),\n    //   CLI\n    // );\n    // console.log(\"decimals<><><><><><><>\", decimals);\n    // let amount = assetToBase(assetAmount(1, 18)).amount();\n    // console.log(\"amount<><><><><><><><><><><><><>\", amount);\n    const txId = await ethUtilsService.callDeposit({\n      inboundAddress: eth,\n      asset: assetFromString(\n        \"ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\"\n      ),\n      amount: 1,\n      memo: Memo,\n      ethClient: CLI,\n    });\n    console.log(\n      `https://viewblock.io/thorchain/tx/${txId}?network=testnet`,\n      txId\n    );\n\n    return txId;\n  };\n  //WITHDRAW:ETH.XRUNE\n  const WITHDRAW_ETH_XRUNE = async () => {\n    const CLI = new ethereumClient.Client({\n      network: \"testnet\",\n      phrase:\n        \"expose blush snake marriage lock crop group define today such indoor school\",\n    });\n    console.log(\"here\");\n    //ETH inbound Address\n    const to_address = \"0x62a180a09386a07235b9482f2f2c30279c6cc0f7\";\n    //MEMO to swap ETH.USDT to ETH.XRUNE\n    const Memo =\n      \"WITHDRAW:ETH.XRUNE-0X8626DB1A4F9F3E1002EEB9A4F3C6D391436FFC23:1500\";\n    //ABI here\n    const abi = environment.network === \"testnet\" ? TCRopstenAbi : TCAbi;\n    console.log(\"here\");\n    const contract = new ethers.Contract(\n      \"0xefA28233838f46a80AaaC8c309077a9ba70D123A\",\n      abi\n    );\n    console.log(\"++++++++++++++++++++++++++++++++++++++\", contract);\n    console.log(\"here\");\n    // const decimals = ethUtilsService.getAssetDecimal(\n    //   assetFromString(\"ETH.USDT-0XA3910454BF2CB59B8B3A401589A3BACC5CA42306\"),\n    //   CLI\n    // );\n    // console.log(\"decimals<><><><><><><>\", decimals);\n    // let amount = assetToBase(assetAmount(1, 18)).amount();\n    // console.log(\"amount<><><><><><><><><><><><><>\", amount);\n    const txId = await ethUtilsService.callDeposit({\n      inboundAddress: eth,\n      asset: assetFromString(\n        \"ETH.XRUNE-0X8626DB1A4F9F3E1002EEB9A4F3C6D391436FFC23\"\n      ),\n      amount: 1000000000000000000,\n      memo: Memo,\n      ethClient: CLI,\n    });\n    console.log(\n      `https://viewblock.io/thorchain/tx/${txId}?network=testnet`,\n      txId\n    );\n\n    return txId;\n  };\n\n  let inboundAddress;\n  // (async () => {\n  //   const { data } = await midgardService.getInboundAddresses();\n  //   inboundAddress = data[1].address;\n  //   console.log(\n  //     \"Inbound Address coming from here ==========================>\",\n  //     data[1].address\n  //   );\n  // })();\n  console.log(\"here\");\n  const getAllPools = async () => {\n    const callGetInboundAddresses = await midgardService.getInboundAddresses();\n    const callGetPools = await midgardService.getPools();\n    const callNetwork = await midgardService.getNetwork();\n    const callConstants = await midgardService.getConstants();\n    setEth(callGetInboundAddresses.data[3]);\n    console.log(callGetInboundAddresses.data[3]);\n  };\n\n  return (\n    <div>\n      <button onClick={WITHDRAW_ETH_XRUNE}>WITHDRAW_ETH_XRUNE.js</button>\n      <button onClick={getAllPools}>getAllPools</button>\n    </div>\n  );\n};\n\nexport default Withdraw;\n","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/swap.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/services/midgard.service.js",["127","128"],"/** @format */\n\nimport { Observable } from \"rxjs\";\n// import { HttpClient, HttpParams } from '@angular/common/http';\nimport { shareReplay } from \"rxjs/operators\";\nimport { environment } from \"../environments\";\nimport axios from \"axios\";\n\nexport class MidgardService {\n  v2BasePath;\n  _thornodeBasePath;\n  _constants;\n  _mimir$;\n\n  constructor(http) {\n    this.v2BasePath =\n      environment.network === \"testnet\"\n        ? \"https://testnet.midgard.thorchain.info/v2\"\n        : \"https://midgard.thorchain.info/v2\";\n\n    this._thornodeBasePath =\n      environment.network === \"testnet\"\n        ? \"https://testnet.thornode.thorchain.info\"\n        : \"https://thornode.thorchain.info\";\n\n    // cached since constants are constant\n    this._constants$ = axios.get(`${this.v2BasePath}/thorchain/constants`);\n    // .pipe(shareReplay());\n    this._mimir$ = axios.get(`${this._thornodeBasePath}/thorchain/mimir`);\n    // .pipe(shareReplay());\n  }\n  /**\n   * V2 Endpoints\n   *\n   */\n\n  getConstants() {\n    return this._constants$;\n  }\n\n  getLastBlock() {\n    return axios.get(`${this.v2BasePath}/thorchain/lastblock`);\n  }\n\n  getNetwork() {\n    return axios.get(`${this.v2BasePath}/network`);\n  }\n\n  getInboundAddresses() {\n    return axios.get(`${this.v2BasePath}/thorchain/inbound_addresses`);\n  }\n\n  getPools() {\n    return axios.get(`${this.v2BasePath}/pools`);\n  }\n\n  getPool(asset) {\n    return axios.get(`${this.v2BasePath}/pool/${asset}`);\n  }\n\n  getMember(address) {\n    return axios.get(`${this.v2BasePath}/member/${address}`);\n  }\n\n  getTransaction(txId) {\n    // const params = new HttpParams()\n    //   .set('offset', '0')\n    //   .set('limit', '1')\n    //   .set('txid', txId);\n    return axios.get(`${this.v2BasePath}/actions`, {\n      params: {\n        offset: 0,\n        limit: 1,\n        txid: txId,\n      },\n    });\n  }\n\n  getThornodeTransaction(hash) {\n    return axios.get(`${this._thornodeBasePath}/thorchain/tx/${hash}`);\n  }\n\n  getQueue() {\n    return axios.geMidgardService;\n  }\n\n  getMimir() {\n    return this._mimir$;\n  }\n\n  getThorchainLiquidityProviders(asset) {\n    return this.http.get(\n      `${this._thornodeBasePath}/thorchain/pool/${asset}/liquidity_providers`\n    );\n  }\n}\n","/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/services/eth-utils.service.js",[],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/thorchain.abi.js",[],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/erc20.abi.js",[],"/home/abubakar/Documents/Blockchain Projects/Thorchain/KeyStore-Thorchain/src/app/_abi/erc20RUNE.abi.js",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":8,"column":17,"nodeType":"135","messageId":"136","endLine":8,"endColumn":26},{"ruleId":"133","severity":1,"message":"137","line":8,"column":28,"nodeType":"135","messageId":"136","endLine":8,"endColumn":37},{"ruleId":"133","severity":1,"message":"138","line":9,"column":29,"nodeType":"135","messageId":"136","endLine":9,"endColumn":35},{"ruleId":"133","severity":1,"message":"139","line":9,"column":46,"nodeType":"135","messageId":"136","endLine":9,"endColumn":50},{"ruleId":"133","severity":1,"message":"140","line":21,"column":3,"nodeType":"135","messageId":"136","endLine":21,"endColumn":13},{"ruleId":"133","severity":1,"message":"141","line":22,"column":3,"nodeType":"135","messageId":"136","endLine":22,"endColumn":14},{"ruleId":"133","severity":1,"message":"142","line":23,"column":3,"nodeType":"135","messageId":"136","endLine":23,"endColumn":14},{"ruleId":"133","severity":1,"message":"143","line":29,"column":3,"nodeType":"135","messageId":"136","endLine":29,"endColumn":22},{"ruleId":"133","severity":1,"message":"144","line":30,"column":3,"nodeType":"135","messageId":"136","endLine":30,"endColumn":24},{"ruleId":"133","severity":1,"message":"145","line":31,"column":3,"nodeType":"135","messageId":"136","endLine":31,"endColumn":11},{"ruleId":"133","severity":1,"message":"146","line":32,"column":3,"nodeType":"135","messageId":"136","endLine":32,"endColumn":17},{"ruleId":"133","severity":1,"message":"147","line":34,"column":13,"nodeType":"135","messageId":"136","endLine":34,"endColumn":18},{"ruleId":"133","severity":1,"message":"148","line":40,"column":8,"nodeType":"135","messageId":"136","endLine":40,"endColumn":17},{"ruleId":"133","severity":1,"message":"149","line":42,"column":10,"nodeType":"135","messageId":"136","endLine":42,"endColumn":18},{"ruleId":"133","severity":1,"message":"150","line":49,"column":9,"nodeType":"135","messageId":"136","endLine":49,"endColumn":23},{"ruleId":"133","severity":1,"message":"151","line":50,"column":9,"nodeType":"135","messageId":"136","endLine":50,"endColumn":24},{"ruleId":"133","severity":1,"message":"152","line":51,"column":10,"nodeType":"135","messageId":"136","endLine":51,"endColumn":18},{"ruleId":"133","severity":1,"message":"153","line":51,"column":20,"nodeType":"135","messageId":"136","endLine":51,"endColumn":31},{"ruleId":"133","severity":1,"message":"154","line":103,"column":11,"nodeType":"135","messageId":"136","endLine":103,"endColumn":29},{"ruleId":"133","severity":1,"message":"155","line":346,"column":7,"nodeType":"135","messageId":"136","endLine":346,"endColumn":21},{"ruleId":"133","severity":1,"message":"156","line":353,"column":11,"nodeType":"135","messageId":"136","endLine":353,"endColumn":30},{"ruleId":"133","severity":1,"message":"157","line":379,"column":11,"nodeType":"135","messageId":"136","endLine":379,"endColumn":24},{"ruleId":"133","severity":1,"message":"158","line":406,"column":11,"nodeType":"135","messageId":"136","endLine":406,"endColumn":24},{"ruleId":"133","severity":1,"message":"159","line":433,"column":11,"nodeType":"135","messageId":"136","endLine":433,"endColumn":21},{"ruleId":"133","severity":1,"message":"160","line":459,"column":11,"nodeType":"135","messageId":"136","endLine":459,"endColumn":21},{"ruleId":"133","severity":1,"message":"161","line":484,"column":11,"nodeType":"135","messageId":"136","endLine":484,"endColumn":33},{"ruleId":"133","severity":1,"message":"162","line":502,"column":11,"nodeType":"135","messageId":"136","endLine":502,"endColumn":25},{"ruleId":"133","severity":1,"message":"163","line":503,"column":13,"nodeType":"135","messageId":"136","endLine":503,"endColumn":24},{"ruleId":"133","severity":1,"message":"164","line":531,"column":11,"nodeType":"135","messageId":"136","endLine":531,"endColumn":28},{"ruleId":"133","severity":1,"message":"165","line":9,"column":7,"nodeType":"135","messageId":"136","endLine":9,"endColumn":22},{"ruleId":"133","severity":1,"message":"166","line":10,"column":7,"nodeType":"135","messageId":"136","endLine":10,"endColumn":20},{"ruleId":"133","severity":1,"message":"167","line":11,"column":7,"nodeType":"135","messageId":"136","endLine":11,"endColumn":20},{"ruleId":"133","severity":1,"message":"168","line":13,"column":7,"nodeType":"135","messageId":"136","endLine":13,"endColumn":21},{"ruleId":"133","severity":1,"message":"169","line":14,"column":7,"nodeType":"135","messageId":"136","endLine":14,"endColumn":24},{"ruleId":"133","severity":1,"message":"170","line":15,"column":7,"nodeType":"135","messageId":"136","endLine":15,"endColumn":21},{"ruleId":"133","severity":1,"message":"171","line":17,"column":7,"nodeType":"135","messageId":"136","endLine":17,"endColumn":25},{"ruleId":"133","severity":1,"message":"172","line":20,"column":3,"nodeType":"135","messageId":"136","endLine":20,"endColumn":18},{"ruleId":"133","severity":1,"message":"173","line":21,"column":3,"nodeType":"135","messageId":"136","endLine":21,"endColumn":11},{"ruleId":"133","severity":1,"message":"174","line":22,"column":3,"nodeType":"135","messageId":"136","endLine":22,"endColumn":13},{"ruleId":"133","severity":1,"message":"175","line":23,"column":3,"nodeType":"135","messageId":"136","endLine":23,"endColumn":11},{"ruleId":"133","severity":1,"message":"176","line":24,"column":3,"nodeType":"135","messageId":"136","endLine":24,"endColumn":14},{"ruleId":"133","severity":1,"message":"177","line":25,"column":3,"nodeType":"135","messageId":"136","endLine":25,"endColumn":14},{"ruleId":"178","severity":1,"message":"179","line":50,"column":6,"nodeType":"180","endLine":50,"endColumn":8,"suggestions":"181"},{"ruleId":"133","severity":1,"message":"162","line":64,"column":9,"nodeType":"135","messageId":"136","endLine":64,"endColumn":23},{"ruleId":"133","severity":1,"message":"182","line":72,"column":11,"nodeType":"135","messageId":"136","endLine":72,"endColumn":21},{"ruleId":"133","severity":1,"message":"182","line":116,"column":11,"nodeType":"135","messageId":"136","endLine":116,"endColumn":21},{"ruleId":"133","severity":1,"message":"183","line":153,"column":7,"nodeType":"135","messageId":"136","endLine":153,"endColumn":21},{"ruleId":"133","severity":1,"message":"184","line":165,"column":11,"nodeType":"135","messageId":"136","endLine":165,"endColumn":23},{"ruleId":"133","severity":1,"message":"185","line":166,"column":11,"nodeType":"135","messageId":"136","endLine":166,"endColumn":22},{"ruleId":"133","severity":1,"message":"186","line":167,"column":11,"nodeType":"135","messageId":"136","endLine":167,"endColumn":24},{"ruleId":"133","severity":1,"message":"187","line":14,"column":3,"nodeType":"135","messageId":"136","endLine":14,"endColumn":11},{"ruleId":"133","severity":1,"message":"188","line":15,"column":3,"nodeType":"135","messageId":"136","endLine":15,"endColumn":24},{"ruleId":"133","severity":1,"message":"189","line":16,"column":3,"nodeType":"135","messageId":"136","endLine":16,"endColumn":24},{"ruleId":"133","severity":1,"message":"166","line":23,"column":7,"nodeType":"135","messageId":"136","endLine":23,"endColumn":20},{"ruleId":"133","severity":1,"message":"167","line":24,"column":7,"nodeType":"135","messageId":"136","endLine":24,"endColumn":20},{"ruleId":"133","severity":1,"message":"168","line":26,"column":7,"nodeType":"135","messageId":"136","endLine":26,"endColumn":21},{"ruleId":"133","severity":1,"message":"169","line":27,"column":7,"nodeType":"135","messageId":"136","endLine":27,"endColumn":24},{"ruleId":"133","severity":1,"message":"170","line":28,"column":7,"nodeType":"135","messageId":"136","endLine":28,"endColumn":21},{"ruleId":"133","severity":1,"message":"171","line":30,"column":7,"nodeType":"135","messageId":"136","endLine":30,"endColumn":25},{"ruleId":"133","severity":1,"message":"172","line":34,"column":3,"nodeType":"135","messageId":"136","endLine":34,"endColumn":18},{"ruleId":"133","severity":1,"message":"173","line":35,"column":3,"nodeType":"135","messageId":"136","endLine":35,"endColumn":11},{"ruleId":"133","severity":1,"message":"175","line":37,"column":3,"nodeType":"135","messageId":"136","endLine":37,"endColumn":11},{"ruleId":"133","severity":1,"message":"176","line":38,"column":3,"nodeType":"135","messageId":"136","endLine":38,"endColumn":14},{"ruleId":"133","severity":1,"message":"177","line":39,"column":3,"nodeType":"135","messageId":"136","endLine":39,"endColumn":14},{"ruleId":"133","severity":1,"message":"190","line":41,"column":3,"nodeType":"135","messageId":"136","endLine":41,"endColumn":14},{"ruleId":"133","severity":1,"message":"191","line":42,"column":3,"nodeType":"135","messageId":"136","endLine":42,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":67,"column":6,"nodeType":"180","endLine":67,"endColumn":8,"suggestions":"192"},{"ruleId":"133","severity":1,"message":"193","line":69,"column":10,"nodeType":"135","messageId":"136","endLine":69,"endColumn":22},{"ruleId":"133","severity":1,"message":"194","line":84,"column":11,"nodeType":"135","messageId":"136","endLine":84,"endColumn":14},{"ruleId":"133","severity":1,"message":"195","line":91,"column":11,"nodeType":"135","messageId":"136","endLine":91,"endColumn":18},{"ruleId":"133","severity":1,"message":"196","line":109,"column":11,"nodeType":"135","messageId":"136","endLine":109,"endColumn":21},{"ruleId":"133","severity":1,"message":"182","line":245,"column":11,"nodeType":"135","messageId":"136","endLine":245,"endColumn":21},{"ruleId":"133","severity":1,"message":"183","line":282,"column":7,"nodeType":"135","messageId":"136","endLine":282,"endColumn":21},{"ruleId":"133","severity":1,"message":"185","line":295,"column":11,"nodeType":"135","messageId":"136","endLine":295,"endColumn":22},{"ruleId":"133","severity":1,"message":"186","line":297,"column":11,"nodeType":"135","messageId":"136","endLine":297,"endColumn":24},{"ruleId":"133","severity":1,"message":"197","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":20},{"ruleId":"133","severity":1,"message":"198","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":21},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Header' is defined but never used.","'Grid' is defined but never used.","'BaseAmount' is defined but never used.","'assetAmount' is defined but never used.","'assetToBase' is defined but never used.","'AssetCurrencySymbol' is defined but never used.","'currencySymbolByAsset' is defined but never used.","'BNBChain' is defined but never used.","'AssetRuneERC20' is defined but never used.","'types' is defined but never used.","'BigNumber' is defined but never used.","'ClaimMsg' is defined but never used.","'midgardService' is assigned a value but never used.","'ethUtilsService' is assigned a value but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'userEthereumClient' is assigned a value but never used.","'inboundAddress' is assigned a value but never used.","'swapBNBToRuneNative' is assigned a value but never used.","'swapRuneToBNB' is assigned a value but never used.","'swapRuneToETH' is assigned a value but never used.","'USDTtoRUNE' is assigned a value but never used.","'RUNETOBUSD' is assigned a value but never used.","'userCosmosXchainClient' is assigned a value but never used.","'USDTTORUNESWAP' is assigned a value but never used.","'destAddress' is assigned a value but never used.","'checkBalanceOfCli' is assigned a value but never used.","'thorchainClient' is assigned a value but never used.","'binanceClient' is assigned a value but never used.","'bitcoinClient' is assigned a value but never used.","'litecoinClient' is assigned a value but never used.","'bitcoinCashClient' is assigned a value but never used.","'polkadotClient' is assigned a value but never used.","'cosmosXchainClient' is assigned a value but never used.","'AssetRuneNative' is assigned a value but never used.","'AssetBNB' is assigned a value but never used.","'baseAmount' is assigned a value but never used.","'AssetETH' is assigned a value but never used.","'assetToBase' is assigned a value but never used.","'assetAmount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllPools'. Either include it or remove the dependency array.","ArrayExpression",["201"],"'to_address' is assigned a value but never used.","'inboundAddress' is defined but never used.","'callGetPools' is assigned a value but never used.","'callNetwork' is assigned a value but never used.","'callConstants' is assigned a value but never used.","'PoolData' is defined but never used.","'getValueOfAssetInRune' is defined but never used.","'getValueOfRuneInAsset' is defined but never used.","'baseToAsset' is assigned a value but never used.","'formatAssetAmount' is assigned a value but never used.",["202"],"'PoolsMidgard' is assigned a value but never used.","'CLI' is assigned a value but never used.","'CLITHOR' is assigned a value but never used.","'poolDetail' is assigned a value but never used.","'Observable' is defined but never used.","'shareReplay' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"203","fix":"205"},"Update the dependencies array to be: [getAllPools]",{"range":"206","text":"207"},{"range":"208","text":"207"},[1667,1669],"[getAllPools]",[2075,2077]]