[{"E:\\Optimusfox\\KeyStore-Thorchain\\src\\index.js":"1","E:\\Optimusfox\\KeyStore-Thorchain\\src\\reportWebVitals.js":"2","E:\\Optimusfox\\KeyStore-Thorchain\\src\\App.js":"3","E:\\Optimusfox\\KeyStore-Thorchain\\src\\environments.js":"4","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\midgard.service.js":"5","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\metamask.service.js":"6","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\erc20.abi.js":"7","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\thorchain.abi.js":"8","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\xdefi-service.js":"9","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\user.js":"10","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\mock-client.service.js":"11","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\reconnect-xdefi-dialog.component.ts":"12","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\walletConnect-service.js":"13"},{"size":517,"mtime":1636026365697,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1636026365697,"results":"16","hashOfConfig":"15"},{"size":23668,"mtime":1636618980837,"results":"17","hashOfConfig":"15"},{"size":222,"mtime":1636026365697,"results":"18","hashOfConfig":"15"},{"size":2338,"mtime":1636368654008,"results":"19","hashOfConfig":"15"},{"size":5469,"mtime":1636619043646,"results":"20","hashOfConfig":"15"},{"size":3116,"mtime":1636028176909,"results":"21","hashOfConfig":"15"},{"size":8461,"mtime":1636028215065,"results":"22","hashOfConfig":"15"},{"size":19602,"mtime":1636548286108,"results":"23","hashOfConfig":"15"},{"size":874,"mtime":1636358050953,"results":"24","hashOfConfig":"15"},{"size":2318,"mtime":1636462701113,"results":"25","hashOfConfig":"15"},{"size":1440,"mtime":1636531080177,"results":"26","hashOfConfig":"15"},{"size":5679,"mtime":1636619109051,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"12p3j9e",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},"E:\\Optimusfox\\KeyStore-Thorchain\\src\\index.js",[],["60","61"],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\reportWebVitals.js",[],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\App.js",["62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\environments.js",[],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\midgard.service.js",["90"],"// import { Observable } from 'rxjs';\r\n// import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { shareReplay } from 'rxjs/operators';\r\nimport { environment } from '../environments';\r\nimport axios from \"axios\"\r\n\r\nexport class MidgardService {\r\n   v2BasePath;\r\n   _thornodeBasePath;\r\n   _constants;\r\n   _mimir$;\r\n\r\n  constructor( http) {\r\n    this.v2BasePath =\r\n      environment.network === 'testnet'\r\n        ? 'https://testnet.midgard.thorchain.info/v2'\r\n        : 'https://midgard.thorchain.info/v2';\r\n\r\n    this._thornodeBasePath =\r\n      environment.network === 'testnet'\r\n        ? 'https://testnet.thornode.thorchain.info'\r\n        : 'https://thornode.thorchain.info';\r\n\r\n    // cached since constants are constant\r\n    this._constants$ = axios\r\n      .get(`${this.v2BasePath}/thorchain/constants`)\r\n      // .pipe(shareReplay());\r\n    this._mimir$ = axios\r\n      .get(`${this._thornodeBasePath}/thorchain/mimir`)\r\n      // .pipe(shareReplay());\r\n  }\r\n  /**\r\n   * V2 Endpoints\r\n   *\r\n   */\r\n\r\n  getConstants() {\r\n    return this._constants$;\r\n  }\r\n\r\n  getLastBlock() {\r\n    return axios.get(`${this.v2BasePath}/thorchain/lastblock`);\r\n  }\r\n\r\n  getNetwork(){\r\n    return axios.get(`${this.v2BasePath}/network`);\r\n  }\r\n\r\n  getInboundAddresses(){\r\n    return axios.get(\r\n      `${this.v2BasePath}/thorchain/inbound_addresses`\r\n    );\r\n  }\r\n\r\n  getPools() {\r\n    return axios.get(`${this.v2BasePath}/pools`);\r\n  }\r\n  \r\n\r\n  getPool(asset) {\r\n    return axios.get(`${this.v2BasePath}/pool/${asset}`);\r\n  }\r\n\r\n  getMember(address){\r\n    return axios.get(`${this.v2BasePath}/member/${address}`);\r\n  }\r\n\r\n  getTransaction(txId){\r\n    // const params = new HttpParams()\r\n    //   .set('offset', '0')\r\n    //   .set('limit', '1')\r\n    //   .set('txid', txId);\r\n    return axios.get(`${this.v2BasePath}/actions`, {\r\n      params: {\r\n        offset: 0,\r\n        limit: 1,\r\n        txid: txId\r\n      }\r\n    });\r\n  }\r\n\r\n  getThornodeTransaction(hash){\r\n    return axios.get(\r\n      `${this._thornodeBasePath}/thorchain/tx/${hash}`\r\n    );\r\n  }\r\n\r\n  getQueue() {\r\n    return axios.geMidgardService\r\n  }\r\n  \r\n  getMimir(){\r\n    return this._mimir$;\r\n  }\r\n\r\n  getThorchainLiquidityProviders(\r\n    asset\r\n  ){\r\n    return this.http.get(\r\n      `${this._thornodeBasePath}/thorchain/pool/${asset}/liquidity_providers`\r\n    );\r\n  }\r\n}\r\n","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\metamask.service.js",["91","92"],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\erc20.abi.js",[],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\thorchain.abi.js",[],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\xdefi-service.js",["93","94","95","96","97","98","99","100"],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\user.js",["101","102","103","104","105","106","107"],"\r\nimport { Client as BinanceClient } from '@xchainjs/xchain-binance';\r\nimport { Client as BitcoinClient } from '@xchainjs/xchain-bitcoin';\r\nimport { Client as ThorchainClient } from '@xchainjs/xchain-thorchain';\r\nimport { Client as EthereumClient } from '@xchainjs/xchain-ethereum/lib';\r\nimport { Client as LitecoinClient } from '@xchainjs/xchain-litecoin';\r\nimport { Client as BitcoinCashClient } from '@xchainjs/xchain-bitcoincash';\r\nimport { Balance } from '@xchainjs/xchain-client';\r\n\r\n\r\nexport class User {\r\n  type;\r\n  wallet; // Address\r\n  keystore;\r\n  clients;\r\n\r\n  // for Ledger\r\n  ledger;\r\n  hdPath;\r\n  balances;\r\n\r\n  constructor(user) {\r\n    this.type = user.type;\r\n    this.wallet = user.wallet;\r\n    this.keystore = user.keystore ?? null;\r\n    this.ledger = user.ledger ?? null;\r\n    this.hdPath = user.hdPath ?? null;\r\n    this.clients = user.clients;\r\n  }\r\n}\r\n","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\mock-client.service.js",["108","109","110"],"import { Injectable } from '@angular/core';\r\nimport { Client as binanceClient } from '@xchainjs/xchain-binance';\r\nimport { Client as bitcoinClient } from '@xchainjs/xchain-bitcoin';\r\nimport { Client as thorchainClient } from '@xchainjs/xchain-thorchain';\r\nimport { Client as litecoinClient } from '@xchainjs/xchain-litecoin';\r\nimport { Client as bitcoinCashClient } from '@xchainjs/xchain-bitcoincash';\r\nimport { Client as ethereumClient } from '@xchainjs/xchain-ethereum/lib';\r\nimport { Chain } from '@xchainjs/xchain-util';\r\nimport { environment } from '../environments';\r\nimport { Network } from '@xchainjs/xchain-client';\r\n\r\n/**\r\n * this is used for convenience methods when user is not using keystore\r\n */\r\n\r\n\r\nexport class MockClientService {\r\n  MOCK_PHRASE =\r\n    'image rally need wedding health address purse army antenna leopard sea gain';\r\n  mockBinanceClient;\r\n  mockBtcClient;\r\n  mockThorchainClient;\r\n  mockEthereumClient;\r\n  mockLtcClient;\r\n  mockBchClient;\r\n\r\n  constructor() {\r\n    const network =\r\n      environment.network === \"testnet\" ? Network.Testnet : Network.Mainnet;\r\n    const phrase = this.MOCK_PHRASE;\r\n\r\n    this.mockBinanceClient = new binanceClient({ network, phrase });\r\n    this.mockBtcClient = new bitcoinClient({\r\n      network,\r\n      phrase,\r\n      sochainUrl: 'https://sochain.com/api/v2',\r\n      blockstreamUrl: 'https://blockstream.info',\r\n    });\r\n    this.mockThorchainClient = new thorchainClient({ network, phrase });\r\n    this.mockEthereumClient = new ethereumClient({\r\n      network,\r\n      phrase,\r\n      etherscanApiKey: environment.etherscanKey,\r\n      infuraCreds: { projectId: environment.infuraProjectId },\r\n    });\r\n    this.mockLtcClient = new litecoinClient({ network, phrase });\r\n    this.mockBchClient = new bitcoinCashClient({ network, phrase });\r\n  }\r\n\r\n  getMockClientByChain(chain) {\r\n    switch (chain) {\r\n      case 'BTC':\r\n        return this.mockBtcClient;\r\n\r\n      case 'ETH':\r\n        return this.mockEthereumClient;\r\n\r\n      case 'BNB':\r\n        return this.mockBinanceClient;\r\n\r\n      case 'BCH':\r\n        return this.mockBchClient;\r\n\r\n      case 'LTC':\r\n        return this.mockLtcClient;\r\n\r\n      case 'THOR':\r\n        return this.mockThorchainClient;\r\n    }\r\n\r\n    throw new Error(`mock client no matching client for chain: ${chain}`);\r\n  }\r\n}\r\n","E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\reconnect-xdefi-dialog.component.ts",[],["111","112"],"E:\\Optimusfox\\KeyStore-Thorchain\\src\\services\\walletConnect-service.js",["113"],"import { assetAmount, assetToBase, baseAmount } from '@xchainjs/xchain-util';\r\nimport { ethers } from 'ethers';\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { erc20ABI } from './erc20.abi';\r\n\r\n\r\nimport { ETH_DECIMAL, getTokenAddress } from '@xchainjs/xchain-ethereum';\r\nimport { TCAbi } from './thorchain.abi';\r\n\r\n\r\nconst walletConnectprovider = new WalletConnectProvider({\r\n    infuraId: \"ece2a3079cb54d0883716a41e515eb44\",})\r\n    // walletConnectprovider = walletConnectprovider || {};\r\n\r\nexport class WalletConnectService {\r\n    _provider = new BehaviorSubject(null);\r\n    provider$ = this._provider.asObservable();\r\n\r\n    _metaMaskNetwork = new BehaviorSubject(null);\r\n    metaMaskNetwork$ = this._metaMaskNetwork.asObservable();\r\n\r\n    constructor(userService) {\r\n        if (walletConnectprovider && walletConnectprovider) {\r\n            walletConnectprovider.on('accountsChanged', (a) =>\r\n                this.handleAccountsChanged(a, this._provider)\r\n            );\r\n\r\n            // provider.on('chainChanged', (_chainId) => {\r\n            //     switch (+_chainId) {\r\n            //         case 1:\r\n            //             window.location.href = 'https://app.asgard.exchange';\r\n            //             this._metaMaskNetwork.next('mainnet');\r\n            //             break;\r\n\r\n            //         case 3:\r\n            //             window.location.href = 'https://testnet.asgard.exchange';\r\n            //             this._metaMaskNetwork.next('testnet');\r\n            //             break;\r\n\r\n            //         default:\r\n            //             this._metaMaskNetwork.next(null);\r\n            //             window.location.reload();\r\n            //             break;\r\n            //     }\r\n            // });\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    async handleAccountsChanged(\r\n        accounts,\r\n        provider,\r\n    ) {\r\n        const ethProvider = new ethers.providers.Web3Provider(walletConnectprovider);\r\n        if (provider && accounts.length > 0) {\r\n            provider.next(ethProvider);\r\n            this.setMetaMaskNetwork(ethProvider);\r\n        } else {\r\n            this.userService.setUser(null);\r\n        }\r\n    }\r\n\r\n    async callDeposit({\r\n        ethInboundAddress,\r\n        asset,\r\n        input,\r\n        memo,\r\n        userAddress,\r\n        signer,\r\n    }) {\r\n        const gasPrice = baseAmount(\r\n            ethers.utils.parseUnits(ethInboundAddress.gas_rate, 'gwei').toString(),\r\n            ETH_DECIMAL\r\n        )\r\n            .amount()\r\n            .toFixed(0);\r\n\r\n        let hash;\r\n        let decimal;\r\n        const vaultContract = new ethers.Contract(ethInboundAddress.router, TCAbi);\r\n\r\n        if (asset.symbol === 'ETH') {\r\n            decimal = ETH_DECIMAL;\r\n        } else {\r\n            const tokenAddress = getTokenAddress(asset);\r\n            const tokenContract = new ethers.Contract(tokenAddress, erc20ABI, signer);\r\n            decimal = await tokenContract.decimals();\r\n        }\r\n\r\n        let amount = assetToBase(assetAmount(input, decimal)).amount();\r\n        let resp;\r\n\r\n        if (asset.ticker === 'ETH') {\r\n            const unsignedTx = await vaultContract.populateTransaction.deposit(\r\n                ethInboundAddress.address,\r\n                '0x0000000000000000000000000000000000000000',\r\n                amount.toFixed(),\r\n                memo,\r\n                { from: userAddress, value: amount.toFixed(), gasPrice }\r\n            );\r\n            resp = await signer.sendTransaction(unsignedTx);\r\n        } else {\r\n            const assetAddress = asset.symbol.slice(asset.ticker.length + 1);\r\n            const strip0x = assetAddress.substr(2);\r\n            const checkSummedAddress = ethers.utils.getAddress(strip0x);\r\n            const params = [\r\n                ethInboundAddress.address, // vault\r\n                checkSummedAddress, // asset\r\n                amount.toFixed(), // amount\r\n                memo,\r\n            ];\r\n            const unsignedTx = await vaultContract.populateTransaction.deposit(\r\n                ...params,\r\n                { from: userAddress, gasPrice }\r\n            );\r\n            resp = await signer.sendTransaction(unsignedTx);\r\n            console.log('resp is: ', resp);\r\n        }\r\n\r\n        // prettier-ignore\r\n        hash = typeof (resp) === 'string' ? resp : resp?.hash || '';\r\n        return hash;\r\n    }\r\n\r\n    async init() {\r\n        const provider = new ethers.providers.Web3Provider(walletConnectprovider);\r\n        const lastLoginType = localStorage.getItem('lastLoginType');\r\n        if (provider && lastLoginType === 'metamask') {\r\n            this.setProvider(provider);\r\n            this.setMetaMaskNetwork(provider);\r\n        } else {\r\n            this.setProvider(null);\r\n        }\r\n    }\r\n\r\n    setProvider(provider) {\r\n        this._provider.next(provider);\r\n    }\r\n\r\n    async setMetaMaskNetwork(provider) {\r\n        if (!provider) {\r\n            this._metaMaskNetwork.next(null);\r\n            return;\r\n        }\r\n\r\n        const network = await provider.getNetwork();\r\n\r\n        if (network.chainId === 3) {\r\n            this._metaMaskNetwork.next('testnet');\r\n        } else if (network.chainId === 1) {\r\n            this._metaMaskNetwork.next('mainnet');\r\n        } else {\r\n            this._metaMaskNetwork.next(null);\r\n        }\r\n    }\r\n\r\n    async connect() {\r\n        const enable = await walletConnectprovider.enable();\r\n        if (enable instanceof Array && enable.length > 0) {\r\n            this.handleAccountsChanged(enable, this._provider);\r\n        }\r\n        return enable;\r\n    }\r\n}\r\n",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":8,"column":17,"nodeType":"120","messageId":"121","endLine":8,"endColumn":26},{"ruleId":"118","severity":1,"message":"122","line":8,"column":28,"nodeType":"120","messageId":"121","endLine":8,"endColumn":37},{"ruleId":"118","severity":1,"message":"123","line":9,"column":29,"nodeType":"120","messageId":"121","endLine":9,"endColumn":35},{"ruleId":"118","severity":1,"message":"124","line":9,"column":46,"nodeType":"120","messageId":"121","endLine":9,"endColumn":50},{"ruleId":"118","severity":1,"message":"125","line":20,"column":3,"nodeType":"120","messageId":"121","endLine":20,"endColumn":13},{"ruleId":"118","severity":1,"message":"126","line":21,"column":3,"nodeType":"120","messageId":"121","endLine":21,"endColumn":14},{"ruleId":"118","severity":1,"message":"127","line":22,"column":3,"nodeType":"120","messageId":"121","endLine":22,"endColumn":14},{"ruleId":"118","severity":1,"message":"128","line":26,"column":3,"nodeType":"120","messageId":"121","endLine":26,"endColumn":18},{"ruleId":"118","severity":1,"message":"129","line":27,"column":3,"nodeType":"120","messageId":"121","endLine":27,"endColumn":16},{"ruleId":"118","severity":1,"message":"130","line":28,"column":3,"nodeType":"120","messageId":"121","endLine":28,"endColumn":22},{"ruleId":"118","severity":1,"message":"131","line":29,"column":3,"nodeType":"120","messageId":"121","endLine":29,"endColumn":24},{"ruleId":"118","severity":1,"message":"132","line":30,"column":3,"nodeType":"120","messageId":"121","endLine":30,"endColumn":11},{"ruleId":"118","severity":1,"message":"133","line":31,"column":3,"nodeType":"120","messageId":"121","endLine":31,"endColumn":17},{"ruleId":"118","severity":1,"message":"134","line":33,"column":13,"nodeType":"120","messageId":"121","endLine":33,"endColumn":18},{"ruleId":"118","severity":1,"message":"135","line":38,"column":8,"nodeType":"120","messageId":"121","endLine":38,"endColumn":17},{"ruleId":"118","severity":1,"message":"136","line":39,"column":8,"nodeType":"120","messageId":"121","endLine":39,"endColumn":12},{"ruleId":"118","severity":1,"message":"137","line":40,"column":10,"nodeType":"120","messageId":"121","endLine":40,"endColumn":18},{"ruleId":"118","severity":1,"message":"138","line":49,"column":9,"nodeType":"120","messageId":"121","endLine":49,"endColumn":21},{"ruleId":"118","severity":1,"message":"139","line":52,"column":9,"nodeType":"120","messageId":"121","endLine":52,"endColumn":38},{"ruleId":"118","severity":1,"message":"140","line":115,"column":10,"nodeType":"120","messageId":"121","endLine":115,"endColumn":18},{"ruleId":"118","severity":1,"message":"141","line":115,"column":20,"nodeType":"120","messageId":"121","endLine":115,"endColumn":31},{"ruleId":"118","severity":1,"message":"142","line":184,"column":11,"nodeType":"120","messageId":"121","endLine":184,"endColumn":29},{"ruleId":"118","severity":1,"message":"143","line":427,"column":7,"nodeType":"120","messageId":"121","endLine":427,"endColumn":21},{"ruleId":"118","severity":1,"message":"144","line":434,"column":11,"nodeType":"120","messageId":"121","endLine":434,"endColumn":30},{"ruleId":"118","severity":1,"message":"145","line":460,"column":11,"nodeType":"120","messageId":"121","endLine":460,"endColumn":24},{"ruleId":"118","severity":1,"message":"146","line":487,"column":11,"nodeType":"120","messageId":"121","endLine":487,"endColumn":24},{"ruleId":"118","severity":1,"message":"147","line":514,"column":11,"nodeType":"120","messageId":"121","endLine":514,"endColumn":21},{"ruleId":"118","severity":1,"message":"148","line":576,"column":7,"nodeType":"120","messageId":"121","endLine":576,"endColumn":17},{"ruleId":"118","severity":1,"message":"149","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":21},{"ruleId":"118","severity":1,"message":"150","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":29},{"ruleId":"118","severity":1,"message":"151","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":17},{"ruleId":"118","severity":1,"message":"152","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":20},{"ruleId":"118","severity":1,"message":"153","line":5,"column":3,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"154","line":9,"column":3,"nodeType":"120","messageId":"121","endLine":9,"endColumn":14},{"ruleId":"118","severity":1,"message":"155","line":17,"column":10,"nodeType":"120","messageId":"121","endLine":17,"endColumn":17},{"ruleId":"118","severity":1,"message":"156","line":19,"column":10,"nodeType":"120","messageId":"121","endLine":19,"endColumn":27},{"ruleId":"118","severity":1,"message":"157","line":26,"column":10,"nodeType":"120","messageId":"121","endLine":26,"endColumn":15},{"ruleId":"118","severity":1,"message":"158","line":28,"column":9,"nodeType":"120","messageId":"121","endLine":28,"endColumn":13},{"ruleId":"159","severity":1,"message":"160","line":677,"column":5,"nodeType":"161","messageId":"162","endLine":695,"endColumn":6},{"ruleId":"118","severity":1,"message":"163","line":2,"column":20,"nodeType":"120","messageId":"121","endLine":2,"endColumn":33},{"ruleId":"118","severity":1,"message":"164","line":3,"column":20,"nodeType":"120","messageId":"121","endLine":3,"endColumn":33},{"ruleId":"118","severity":1,"message":"165","line":4,"column":20,"nodeType":"120","messageId":"121","endLine":4,"endColumn":35},{"ruleId":"118","severity":1,"message":"166","line":5,"column":20,"nodeType":"120","messageId":"121","endLine":5,"endColumn":34},{"ruleId":"118","severity":1,"message":"167","line":6,"column":20,"nodeType":"120","messageId":"121","endLine":6,"endColumn":34},{"ruleId":"118","severity":1,"message":"168","line":7,"column":20,"nodeType":"120","messageId":"121","endLine":7,"endColumn":37},{"ruleId":"118","severity":1,"message":"169","line":8,"column":10,"nodeType":"120","messageId":"121","endLine":8,"endColumn":17},{"ruleId":"118","severity":1,"message":"152","line":1,"column":10,"nodeType":"120","messageId":"121","endLine":1,"endColumn":20},{"ruleId":"118","severity":1,"message":"157","line":8,"column":10,"nodeType":"120","messageId":"121","endLine":8,"endColumn":15},{"ruleId":"159","severity":1,"message":"160","line":51,"column":5,"nodeType":"161","messageId":"162","endLine":69,"endColumn":6},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"151","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":17},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Header' is defined but never used.","'Grid' is defined but never used.","'BaseAmount' is defined but never used.","'assetAmount' is defined but never used.","'assetToBase' is defined but never used.","'assetFromString' is defined but never used.","'assetToString' is defined but never used.","'AssetCurrencySymbol' is defined but never used.","'currencySymbolByAsset' is defined but never used.","'BNBChain' is defined but never used.","'AssetRuneERC20' is defined but never used.","'types' is defined but never used.","'BigNumber' is defined but never used.","'Swap' is defined but never used.","'ClaimMsg' is defined but never used.","'xDEFIService' is assigned a value but never used.","'reconnectXDEFIDialogComponent' is assigned a value but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","'userEthereumClient' is assigned a value but never used.","'inboundAddress' is assigned a value but never used.","'swapBNBToRuneNative' is assigned a value but never used.","'swapRuneToBNB' is assigned a value but never used.","'swapRuneToETH' is assigned a value but never used.","'USDTtoRUNE' is assigned a value but never used.","'BUSDTORUNE' is assigned a value but never used.","'shareReplay' is defined but never used.","'WalletConnectProvider' is defined but never used.","'Web3Modal' is defined but never used.","'Injectable' is defined but never used.","'ApproveParams' is defined but never used.","'TxOverrides' is defined but never used.","'Address' is defined but never used.","'MockClientService' is defined but never used.","'Chain' is defined but never used.","'Web3' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'BinanceClient' is defined but never used.","'BitcoinClient' is defined but never used.","'ThorchainClient' is defined but never used.","'EthereumClient' is defined but never used.","'LitecoinClient' is defined but never used.","'BitcoinCashClient' is defined but never used.","'Balance' is defined but never used.","no-global-assign","no-unsafe-negation"]