[{"/home/abubakar/Desktop/KeyStore-Thorchain/src/index.js":"1","/home/abubakar/Desktop/KeyStore-Thorchain/src/reportWebVitals.js":"2","/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js":"3"},{"size":500,"mtime":1631513399124,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1631513399124,"results":"6","hashOfConfig":"5"},{"size":2125,"mtime":1631513554883,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yatu9n",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/abubakar/Desktop/KeyStore-Thorchain/src/index.js",[],"/home/abubakar/Desktop/KeyStore-Thorchain/src/reportWebVitals.js",[],"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27"],"import { generatePhrase, encryptToKeyStore } from '@xchainjs/xchain-crypto'\nimport logo from './logo.svg';\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\n// import * as fs from 'fs';\nimport './App.css';\n\n// Crypto Constants for xchain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'xchain-keystore'\n\n// const phraseDecrypted = async()=>{\n// await decryptFromKeystore(keystore, password)\n// }\n// console.log(decryptFromKeystore)\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  let key\n  useEffect(async () => {\n    const phrase = generatePhrase()\n    console.log(phrase);\n    // const isCorrect = validatePhrase(phrase)\n    const password = 'thorchain'\n    console.log(password);\n\n    const keystore = async () => {\n      try {\n        key = await encryptToKeyStore(phrase, input);\n        console.log('key========>', key)\n        return key;\n\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    const res = await keystore();\n    setResponse(res)\n    console.log('========>', res)\n  }\n    , [input]\n  );\nconsole.log(\"Response ================ \", response)\n  //File creation and saving here \n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(response)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\nconsole.log(\"file==========\", file)\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  return <>\n    <Container>\n      <Segment>\n        <div>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)}/>\n          <Button primary onClick={downloadTextFile}>Create KeyStore</Button>\n        </div>\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;",{"ruleId":"28","severity":1,"message":"29","line":2,"column":8,"nodeType":"30","messageId":"31","endLine":2,"endColumn":12},{"ruleId":"28","severity":1,"message":"32","line":3,"column":17,"nodeType":"30","messageId":"31","endLine":3,"endColumn":25},{"ruleId":"28","severity":1,"message":"33","line":4,"column":29,"nodeType":"30","messageId":"31","endLine":4,"endColumn":35},{"ruleId":"28","severity":1,"message":"34","line":4,"column":46,"nodeType":"30","messageId":"31","endLine":4,"endColumn":50},{"ruleId":"28","severity":1,"message":"35","line":9,"column":7,"nodeType":"30","messageId":"31","endLine":9,"endColumn":13},{"ruleId":"28","severity":1,"message":"36","line":10,"column":7,"nodeType":"30","messageId":"31","endLine":10,"endColumn":10},{"ruleId":"28","severity":1,"message":"37","line":11,"column":7,"nodeType":"30","messageId":"31","endLine":11,"endColumn":10},{"ruleId":"28","severity":1,"message":"38","line":12,"column":7,"nodeType":"30","messageId":"31","endLine":12,"endColumn":12},{"ruleId":"28","severity":1,"message":"39","line":13,"column":7,"nodeType":"30","messageId":"31","endLine":13,"endColumn":8},{"ruleId":"28","severity":1,"message":"40","line":14,"column":7,"nodeType":"30","messageId":"31","endLine":14,"endColumn":19},{"ruleId":"28","severity":1,"message":"41","line":15,"column":7,"nodeType":"30","messageId":"31","endLine":15,"endColumn":11},{"ruleId":"42","severity":1,"message":"43","line":26,"column":13,"nodeType":"44","endLine":46,"endColumn":4},{"ruleId":"42","severity":1,"message":"45","line":35,"column":15,"nodeType":"46","endLine":35,"endColumn":53},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Header' is defined but never used.","'Grid' is defined but never used.","'cipher' is assigned a value but never used.","'kdf' is assigned a value but never used.","'prf' is assigned a value but never used.","'dklen' is assigned a value but never used.","'c' is assigned a value but never used.","'hashFunction' is assigned a value but never used.","'meta' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'key' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","AwaitExpression"]