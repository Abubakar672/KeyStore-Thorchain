[{"/home/abubakar/Desktop/KeyStore-Thorchain/src/index.js":"1","/home/abubakar/Desktop/KeyStore-Thorchain/src/reportWebVitals.js":"2","/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js":"3","/home/abubakar/Desktop/KeyStore-Thorchain/src/environments.js":"4"},{"size":500,"mtime":1632138412026,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1632138412026,"results":"7","hashOfConfig":"6"},{"size":8831,"mtime":1632222034245,"results":"8","hashOfConfig":"6"},{"size":215,"mtime":1632140946339,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1yatu9n",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/home/abubakar/Desktop/KeyStore-Thorchain/src/index.js",[],["20","21"],"/home/abubakar/Desktop/KeyStore-Thorchain/src/reportWebVitals.js",[],"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js",["22","23","24","25","26","27","28","29","30","31","32"],"import { generatePhrase, encryptToKeyStore ,decryptFromKeystore} from '@xchainjs/xchain-crypto'\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\nimport {Network} from '@xchainjs/xchain-client';\nimport { Client as binanceClient } from '@xchainjs/xchain-binance';\nimport { Client as bitcoinClient } from '@xchainjs/xchain-bitcoin';\nimport { Client as thorchainClient } from '@xchainjs/xchain-thorchain';\nimport { Client as ethereumClient } from '@xchainjs/xchain-ethereum/lib';\nimport { Client as litecoinClient } from '@xchainjs/xchain-litecoin';\nimport { Client as bitcoinCashClient } from '@xchainjs/xchain-bitcoincash';\nimport { AssetRuneNative, BaseAmount, assetAmount, assetToBase, baseAmount, AssetETH, AssetBNB } from '@xchainjs/xchain-util'\nimport {environment} from './environments';\nimport {Client as PolkadotClient} from '@xchainjs/xchain-polkadot';\n\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  const [fileKeyStore , setfileKeyStore] = React.useState(\"\")\n\n  let key\n  let fileReader\n  let res\n  let phrase\n  // let userThorchainClient\n\n  //Generation of Random Phrase and Encryption is going on here \n  const keystore = async () => {\n    try {\n     phrase = generatePhrase()\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n      \n      /*File Downloading function is called here to download the Text File*/\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*File creation and saving here*/ \n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\",key)\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thor_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n  \n  //File Decryption is going here\n  const decryptKeyStore = async () => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n    };\n\n    //send Transaction\n    const sendTransaction = async ()=>{\n    const userEthereumClient = new ethereumClient({\n      network:'testnet',\n      phrase:res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: { projectId: environment.infuraProjectId },\n    });\n    \n    //Ethereum Transaction is doing here\n    console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n    const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n    const send_amount = baseAmount(100000000000, 6);\n    const memo = 'transfer'\n\n    const result = await userEthereumClient.transfer({\n      asset: AssetETH,\n      recipient: to_address,\n      amount: send_amount,\n      memo,\n    })\n    console.log(result)\n   \n  }\n\n  // const swapTransaction = async ()=>{\n\n  //   const userEthereumClient = new ethereumClient({\n  //     network:'testnet',\n  //     phrase:res,\n  //     etherscanApiKey: environment.etherscanKey,\n  //     infuraCreds: { projectId: environment.infuraProjectId },\n  //   });\n  //   console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n  //   const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n  //   const send_amount = baseAmount(10000, 6);\n  //   const memo = 'swap:ETH.BNB:tbnb1ftzhmpzr4t8ta3etu4x7nwujf9jqckp3th2lh0'\n    \n  //   const result = await userEthereumClient.deposit({\n  //   asset: AssetBNB,\n  //   amount: send_amount,\n  //   memo,\n  //   })\n  //   console.log(result)\n  //   }\n\n\n    //File handiling is done here and getting the menomics after the decryption of the file data is done here\n    const handleFileRead = async (e) => {\n      const content = JSON.parse(fileReader.result);\n      console.log(\"content\", content);\n      res = await decryptFromKeystore(content, input);\n      console.log(\"decryption=====>\", res);\n\n      //Network is defined here for all the general networks \n      const network = environment.network === 'testnet' ? Network.Testnet : Network.Mainnet;\n      console.log(\"Enabled Network: ---------------> \", network)\n\n      //Binance Address is getting from here\n      const userBinanceClient = new binanceClient({ network, phrase:res });\n      console.log(\"User Binance Client address: ---------------> \", userBinanceClient.getAddress())\n      \n      //Bitcoin Client is set here \n      const userBtcClient = new bitcoinClient({\n        network,\n        phrase:res,\n        sochainUrl: 'https://sochain.com/api/v2',\n        blockstreamUrl: 'https://blockstream.info',\n      });\n\n      //Bitcoin Client is Address generating from here\n      console.log(\"User Btc Client: ---------------> \", userBtcClient.getAddress())\n      let addressBtc = userBtcClient.getAddress();\n      console.log(\"BTC Address: ---------------> \",addressBtc);\n      //Balance of Bitcoin is getting from here\n      const balanceBtc = await userBtcClient.getBalance(addressBtc);\n      console.log(\"balance: ---------------> \", balanceBtc);\n\n      //Thorchain Client is set here \n      const userThorchainClient = new thorchainClient({ network, phrase :res });\n      console.log(\"User Thorchain Client: ---------------> \",userThorchainClient);\n\n      //Thorchain Address is generation from here \n      const thorAddress = await userThorchainClient.getAddress();\n      console.log(\"THORChain Address: ---------------> \", thorAddress);\n      //Balance of THORChain is getting from here \n      const balanceThor = await userThorchainClient.getBalance(thorAddress);\n      console.log('THORChain Balance: ---------------> ', balanceThor);\n\n      // Ethereum CLinet is set here  \n      const userEthereumClient = new ethereumClient({\n        network:'testnet',\n        phrase:res,\n        etherscanApiKey: environment.etherscanKey,\n        infuraCreds: { projectId: environment.infuraProjectId },\n      });\n      \n      //Ethereum Client Address is generation from here\n      console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n      \n      //Ethereum CLient Provider is printing here\n      const provider = userEthereumClient.getProvider();\n      console.log(\"Ethereum Provider: ---------------> \",provider);\n      \n      let addressEth = userEthereumClient.getAddress();\n      console.log(\"Ethereum Address: ---------------> \", addressEth)\n      \n      //Ethereum Client Balance is getting from here \n      const balance1eth = await userEthereumClient.getBalance(addressEth);\n      console.log(\"Ethereum Client Balance: ---------------> \",balance1eth);\n\n      //Ethereum Balance is getting from here\n      const ethBalance = await provider.getBalance(addressEth);\n      console.log(\"Ethereum Balance: ---------------> \", ethBalance.toString());\n\n      //LTC Client is setup here \n      const userLtcClient = new litecoinClient({ network, phrase:res });\n      console.log(\"User LTC Client: ---------------> \",userLtcClient.getAddress());\n      \n      //BCH Client is setup here \n      const userbchClient = new bitcoinCashClient({ network, phrase:res });\n      console.log(\"User BCH Client: ---------------> \",userbchClient.getAddress());\n\n      //PolkaDot Client is setup here\n      const userPolkaDotClient = new PolkadotClient({\n        network:'testnet',\n        phrase:res\n      });\n      console.log(\"User PolkaDot Client: ---------------> \", userPolkaDotClient.getAddress());\n\n    };\n  \n  //Submit button to trigger the things \n  const SubmitAll=async()=>{\n  console.log(\"password====>\", typeof input);\n  console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n  decryptKeyStore()\n}\nreturn <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={keystore}>Create KeyStore</Button>\n        </div>\n        <h1> Thorchain KeyStore Decryption </h1>\n        <div>\n          <h1>Enter your password</h1>\n       {/* // <input id=\"password\" value={input} onchange ={e=> setInput(e.target.value)}/> */}\n        </div>\n        \n        <div>\n        <input type=\"file\"onChange={((e)=>{\n          setfileKeyStore(e.target.files[0]);\n\n        })}/>\n                <button onClick={SubmitAll} >\n                  Upload!\n                </button>\n        </div>\n        \n        <button\n         onClick={sendTransaction}>\n         send Transaction\n        </button>\n\n        <button\n         onClick={sendTransaction}>\n         Swap\n        </button>\n\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;","/home/abubakar/Desktop/KeyStore-Thorchain/src/environments.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":17,"nodeType":"39","messageId":"40","endLine":2,"endColumn":26},{"ruleId":"37","severity":1,"message":"41","line":2,"column":28,"nodeType":"39","messageId":"40","endLine":2,"endColumn":37},{"ruleId":"37","severity":1,"message":"42","line":3,"column":29,"nodeType":"39","messageId":"40","endLine":3,"endColumn":35},{"ruleId":"37","severity":1,"message":"43","line":3,"column":46,"nodeType":"39","messageId":"40","endLine":3,"endColumn":50},{"ruleId":"37","severity":1,"message":"44","line":12,"column":10,"nodeType":"39","messageId":"40","endLine":12,"endColumn":25},{"ruleId":"37","severity":1,"message":"45","line":12,"column":27,"nodeType":"39","messageId":"40","endLine":12,"endColumn":37},{"ruleId":"37","severity":1,"message":"46","line":12,"column":39,"nodeType":"39","messageId":"40","endLine":12,"endColumn":50},{"ruleId":"37","severity":1,"message":"47","line":12,"column":52,"nodeType":"39","messageId":"40","endLine":12,"endColumn":63},{"ruleId":"37","severity":1,"message":"48","line":12,"column":87,"nodeType":"39","messageId":"40","endLine":12,"endColumn":95},{"ruleId":"37","severity":1,"message":"49","line":18,"column":10,"nodeType":"39","messageId":"40","endLine":18,"endColumn":18},{"ruleId":"37","severity":1,"message":"50","line":18,"column":20,"nodeType":"39","messageId":"40","endLine":18,"endColumn":31},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Header' is defined but never used.","'Grid' is defined but never used.","'AssetRuneNative' is defined but never used.","'BaseAmount' is defined but never used.","'assetAmount' is defined but never used.","'assetToBase' is defined but never used.","'AssetBNB' is defined but never used.","'response' is assigned a value but never used.","'setResponse' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]