{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Sign } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelSign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nexport function schnorrkelSign(message, {\n  publicKey,\n  secretKey\n}) {\n  assert((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) === 32, 'Expected a valid publicKey, 32-bytes');\n  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Expected a valid secretKey, 64-bytes');\n  return sr25519Sign(publicKey, secretKey, u8aToU8a(message));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/schnorrkel/sign.js"],"names":["assert","u8aToU8a","sr25519Sign","schnorrkelSign","message","publicKey","secretKey","length"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AACtCC,EAAAA,SADsC;AAEtCC,EAAAA;AAFsC,CAAjC,EAGJ;AACDN,EAAAA,MAAM,CAAC,CAACK,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACE,MAAjE,MAA6E,EAA9E,EAAkF,sCAAlF,CAAN;AACAP,EAAAA,MAAM,CAAC,CAACM,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACC,MAAjE,MAA6E,EAA9E,EAAkF,sCAAlF,CAAN;AACA,SAAOL,WAAW,CAACG,SAAD,EAAYC,SAAZ,EAAuBL,QAAQ,CAACG,OAAD,CAA/B,CAAlB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Sign } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelSign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nexport function schnorrkelSign(message, {\n  publicKey,\n  secretKey\n}) {\n  assert((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) === 32, 'Expected a valid publicKey, 32-bytes');\n  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Expected a valid secretKey, 64-bytes');\n  return sr25519Sign(publicKey, secretKey, u8aToU8a(message));\n}"]},"metadata":{},"sourceType":"module"}