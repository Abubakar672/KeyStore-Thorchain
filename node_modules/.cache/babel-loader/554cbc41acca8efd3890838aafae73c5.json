{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}","map":{"version":3,"sources":["../../../../src/internal/operators/find.ts"],"names":[],"mappings":"AAGA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAsDA,OAAM,SAAU,IAAV,CACJ,SADI,EAEJ,OAFI,EAES;AAEb,SAAO,OAAO,CAAC,UAAU,CAAC,SAAD,EAAY,OAAZ,EAAqB,OAArB,CAAX,CAAd;AACD;AAED,OAAM,SAAU,UAAV,CACJ,SADI,EAEJ,OAFI,EAGJ,IAHI,EAGmB;AAEvB,MAAM,SAAS,GAAG,IAAI,KAAK,OAA3B;AACA,SAAO,UAAC,MAAD,EAAwB,UAAxB,EAAmD;AACxD,QAAI,KAAK,GAAG,CAAZ;AACA,IAAA,MAAM,CAAC,SAAP,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AACJ,UAAM,CAAC,GAAG,KAAK,EAAf;;AACA,UAAI,SAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,KAAxB,EAA+B,CAA/B,EAAkC,MAAlC,CAAJ,EAA+C;AAC7C,QAAA,UAAU,CAAC,IAAX,CAAgB,SAAS,GAAG,CAAH,GAAO,KAAhC;AACA,QAAA,UAAU,CAAC,QAAX;AACD;AACF,KARH,EASE,YAAA;AACE,MAAA,UAAU,CAAC,IAAX,CAAgB,SAAS,GAAG,CAAC,CAAJ,GAAQ,SAAjC;AACA,MAAA,UAAU,CAAC,QAAX;AACD,KAZH,CADF;AAgBD,GAlBD;AAmBD","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function find(predicate, thisArg) {\n    return operate(createFind(predicate, thisArg, 'value'));\n}\nexport function createFind(predicate, thisArg, emit) {\n    var findIndex = emit === 'index';\n    return function (source, subscriber) {\n        var index = 0;\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            var i = index++;\n            if (predicate.call(thisArg, value, i, source)) {\n                subscriber.next(findIndex ? i : value);\n                subscriber.complete();\n            }\n        }, function () {\n            subscriber.next(findIndex ? -1 : undefined);\n            subscriber.complete();\n        }));\n    };\n}\n//# sourceMappingURL=find.js.map"]},"metadata":{},"sourceType":"module"}