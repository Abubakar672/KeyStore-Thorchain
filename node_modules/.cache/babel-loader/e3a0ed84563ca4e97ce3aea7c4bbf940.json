{"ast":null,"code":"const sr25519_bg = require('./sr25519_bg.js');\n\nlet imports = {};\nlet wasm;\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Perform a derivation on a secret\n*\n* * secret: UIntArray with 64 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector the derived keypair as a array of 96 bytes\n* @param {Uint8Array} pair\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.derive_keypair_hard = function (pair, cc) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray8ToWasm0(pair, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.derive_keypair_hard(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v2;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n};\n/**\n* Perform a derivation on a secret\n*\n* * secret: UIntArray with 64 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector the derived keypair as a array of 96 bytes\n* @param {Uint8Array} pair\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.derive_keypair_soft = function (pair, cc) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray8ToWasm0(pair, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.derive_keypair_soft(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v2;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n};\n/**\n* Perform a derivation on a publicKey\n*\n* * pubkey: UIntArray with 32 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector is the derived publicKey as a array of 32 bytes\n* @param {Uint8Array} public_key\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.derive_public_soft = function (public_key, cc) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.derive_public_soft(retptr, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v2;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n};\n/**\n* Generate a key pair.\n*\n* * seed: UIntArray with 32 element\n*\n* returned vector is the concatenation of first the private key (64 bytes)\n* followed by the public key (32) bytes.\n* @param {Uint8Array} seed\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.keypair_from_seed = function (seed) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.keypair_from_seed(retptr, ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v1 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v1;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n};\n/**\n* Sign a message\n*\n* The combination of both public and private key must be provided.\n* This is effectively equivalent to a keypair.\n*\n* * public: UIntArray with 32 element\n* * private: UIntArray with 64 element\n* * message: Arbitrary length UIntArray\n*\n* * returned vector is the signature consisting of 64 bytes.\n* @param {Uint8Array} context\n* @param {Uint8Array} public_key\n* @param {Uint8Array} secret_key\n* @param {Uint8Array} message\n* @returns {Uint8Array}\n*/\n\n\nmodule.exports.sign = function (context, public_key, secret_key, message) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray8ToWasm0(context, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray8ToWasm0(secret_key, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.sign(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v4 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v4;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n};\n/**\n* Verify a message and its corresponding against a public key;\n*\n* * signature: UIntArray with 64 element\n* * message: Arbitrary length UIntArray\n* * pubkey: UIntArray with 32 element\n* @param {Uint8Array} context\n* @param {Uint8Array} signature\n* @param {Uint8Array} message\n* @param {Uint8Array} public_key\n* @returns {boolean}\n*/\n\n\nmodule.exports.verify = function (context, signature, message, public_key) {\n  var ptr0 = passArray8ToWasm0(context, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n  var len1 = WASM_VECTOR_LEN;\n  var ptr2 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n  var len2 = WASM_VECTOR_LEN;\n  var ptr3 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n  var len3 = WASM_VECTOR_LEN;\n  var ret = wasm.verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n  return ret !== 0;\n};\n\nconst bytes = Buffer.from(sr25519_bg.base64, 'base64');\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.instantiateStreaming(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/sr25519/sr25519.js"],"names":["sr25519_bg","require","imports","wasm","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","getArrayU8FromWasm0","len","subarray","module","exports","derive_keypair_hard","pair","cc","retptr","__wbindgen_export_0","value","ptr0","__wbindgen_malloc","len0","ptr1","len1","r0","r1","v2","slice","__wbindgen_free","derive_keypair_soft","derive_public_soft","public_key","keypair_from_seed","seed","v1","sign","context","secret_key","message","ptr2","len2","ptr3","len3","v4","verify","signature","ret","bytes","Buffer","from","base64","wasmModule","WebAssembly","Module","wasmInstance","instantiateStreaming","__wasm"],"mappings":"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","sourcesContent":["const sr25519_bg = require('./sr25519_bg.js');\n\nlet imports = {};\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* Perform a derivation on a secret\n*\n* * secret: UIntArray with 64 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector the derived keypair as a array of 96 bytes\n* @param {Uint8Array} pair\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\nmodule.exports.derive_keypair_hard = function(pair, cc) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray8ToWasm0(pair, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.derive_keypair_hard(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n};\n\n/**\n* Perform a derivation on a secret\n*\n* * secret: UIntArray with 64 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector the derived keypair as a array of 96 bytes\n* @param {Uint8Array} pair\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\nmodule.exports.derive_keypair_soft = function(pair, cc) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray8ToWasm0(pair, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.derive_keypair_soft(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n};\n\n/**\n* Perform a derivation on a publicKey\n*\n* * pubkey: UIntArray with 32 bytes\n* * cc: UIntArray with 32 bytes\n*\n* returned vector is the derived publicKey as a array of 32 bytes\n* @param {Uint8Array} public_key\n* @param {Uint8Array} cc\n* @returns {Uint8Array}\n*/\nmodule.exports.derive_public_soft = function(public_key, cc) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(cc, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.derive_public_soft(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v2 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v2;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n};\n\n/**\n* Generate a key pair.\n*\n* * seed: UIntArray with 32 element\n*\n* returned vector is the concatenation of first the private key (64 bytes)\n* followed by the public key (32) bytes.\n* @param {Uint8Array} seed\n* @returns {Uint8Array}\n*/\nmodule.exports.keypair_from_seed = function(seed) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray8ToWasm0(seed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.keypair_from_seed(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n};\n\n/**\n* Sign a message\n*\n* The combination of both public and private key must be provided.\n* This is effectively equivalent to a keypair.\n*\n* * public: UIntArray with 32 element\n* * private: UIntArray with 64 element\n* * message: Arbitrary length UIntArray\n*\n* * returned vector is the signature consisting of 64 bytes.\n* @param {Uint8Array} context\n* @param {Uint8Array} public_key\n* @param {Uint8Array} secret_key\n* @param {Uint8Array} message\n* @returns {Uint8Array}\n*/\nmodule.exports.sign = function(context, public_key, secret_key, message) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray8ToWasm0(context, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passArray8ToWasm0(secret_key, wasm.__wbindgen_malloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.sign(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v4 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v4;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n};\n\n/**\n* Verify a message and its corresponding against a public key;\n*\n* * signature: UIntArray with 64 element\n* * message: Arbitrary length UIntArray\n* * pubkey: UIntArray with 32 element\n* @param {Uint8Array} context\n* @param {Uint8Array} signature\n* @param {Uint8Array} message\n* @param {Uint8Array} public_key\n* @returns {boolean}\n*/\nmodule.exports.verify = function(context, signature, message, public_key) {\n    var ptr0 = passArray8ToWasm0(context, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(signature, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray8ToWasm0(public_key, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    var ret = wasm.verify(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n    return ret !== 0;\n};\n\nconst bytes = Buffer.from(sr25519_bg.base64, 'base64');\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.instantiateStreaming(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n"]},"metadata":{},"sourceType":"script"}