{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nimport { didUpdateToBool } from \"./util.js\";\n\nfunction parseActive(id, active) {\n  const found = active.find(([paraId]) => paraId === id);\n\n  if (found && found[1].isSome) {\n    const [collatorId, retriable] = found[1].unwrap();\n    return _objectSpread({\n      collatorId\n    }, retriable.isWithRetries ? {\n      isRetriable: true,\n      retries: retriable.asWithRetries.toNumber()\n    } : {\n      isRetriable: false,\n      retries: 0\n    });\n  }\n\n  return null;\n}\n\nfunction parseCollators(id, collatorQueue) {\n  return collatorQueue.map(queue => {\n    const found = queue.find(([paraId]) => paraId === id);\n    return found ? found[1] : null;\n  });\n}\n\nfunction parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {\n  if (info.isNone) {\n    return null;\n  }\n\n  return {\n    active: parseActive(id, active),\n    didUpdate: didUpdateToBool(didUpdate, id),\n    heads,\n    id,\n    info: _objectSpread({\n      id\n    }, info.unwrap()),\n    pendingSwapId: pendingSwap.unwrapOr(null),\n    relayDispatchQueue,\n    retryCollators: parseCollators(id, retryQueue),\n    selectedCollators: parseCollators(id, selectedThreads)\n  };\n}\n\nexport function info(instanceId, api) {\n  return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => parse(api.registry.createType('ParaId', id), result))) : of(null));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/parachains/info.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","map","of","memo","didUpdateToBool","parseActive","id","active","found","find","paraId","isSome","collatorId","retriable","unwrap","isWithRetries","isRetriable","retries","asWithRetries","toNumber","parseCollators","collatorQueue","queue","parse","retryQueue","selectedThreads","didUpdate","info","pendingSwap","heads","relayDispatchQueue","isNone","pendingSwapId","unwrapOr","retryCollators","selectedCollators","instanceId","api","query","registrar","parachains","queryMulti","paras","pipe","result","registry","createType"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nimport { didUpdateToBool } from \"./util.js\";\n\nfunction parseActive(id, active) {\n  const found = active.find(([paraId]) => paraId === id);\n\n  if (found && found[1].isSome) {\n    const [collatorId, retriable] = found[1].unwrap();\n    return _objectSpread({\n      collatorId\n    }, retriable.isWithRetries ? {\n      isRetriable: true,\n      retries: retriable.asWithRetries.toNumber()\n    } : {\n      isRetriable: false,\n      retries: 0\n    });\n  }\n\n  return null;\n}\n\nfunction parseCollators(id, collatorQueue) {\n  return collatorQueue.map(queue => {\n    const found = queue.find(([paraId]) => paraId === id);\n    return found ? found[1] : null;\n  });\n}\n\nfunction parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {\n  if (info.isNone) {\n    return null;\n  }\n\n  return {\n    active: parseActive(id, active),\n    didUpdate: didUpdateToBool(didUpdate, id),\n    heads,\n    id,\n    info: _objectSpread({\n      id\n    }, info.unwrap()),\n    pendingSwapId: pendingSwap.unwrapOr(null),\n    relayDispatchQueue,\n    retryCollators: parseCollators(id, retryQueue),\n    selectedCollators: parseCollators(id, selectedThreads)\n  };\n}\n\nexport function info(instanceId, api) {\n  return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => parse(api.registry.createType('ParaId', id), result))) : of(null));\n}"]},"metadata":{},"sourceType":"module"}