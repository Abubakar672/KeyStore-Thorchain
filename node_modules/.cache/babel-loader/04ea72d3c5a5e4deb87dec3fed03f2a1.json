{"ast":null,"code":"// (public) Constructor\nfunction BigInteger(a, b, c) {\n  if (!(this instanceof BigInteger)) return new BigInteger(a, b, c);\n\n  if (a != null) {\n    if (\"number\" == typeof a) this.fromNumber(a, b, c);else if (b == null && \"string\" != typeof a) this.fromString(a, 256);else this.fromString(a, b);\n  }\n}\n\nvar proto = BigInteger.prototype; // duck-typed isBigInteger\n\nproto.__bigi = require('../package.json').version;\n\nBigInteger.isBigInteger = function (obj, check_ver) {\n  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi);\n}; // Bits per digit\n\n\nvar dbits; // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n\n  return c;\n} // am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\n\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n      xh = x >> 15;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n\n  return c;\n} // Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\n\n\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n      xh = x >> 14;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n\n  return c;\n} // wtf?\n\n\nBigInteger.prototype.am = am1;\ndbits = 26;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nvar DV = BigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\nrr = \"a\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nrr = \"A\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // (protected) copy this to r\n\n\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\n  r.t = this.t;\n  r.s = this.s;\n} // (protected) set from integer value x, -DV <= x < DV\n\n\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;\n} // return bigint initialized to value\n\n\nfunction nbv(i) {\n  var r = new BigInteger();\n  r.fromInt(i);\n  return r;\n} // (protected) set from string and radix\n\n\nfunction bnpFromString(s, b) {\n  var self = this;\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array\n  else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {\n      self.fromRadix(s, b);\n      return;\n    }\n  self.t = 0;\n  self.s = 0;\n  var i = s.length,\n      mi = false,\n      sh = 0;\n\n  while (--i >= 0) {\n    var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n\n    mi = false;\n    if (sh == 0) self[self.t++] = x;else if (sh + k > self.DB) {\n      self[self.t - 1] |= (x & (1 << self.DB - sh) - 1) << sh;\n      self[self.t++] = x >> self.DB - sh;\n    } else self[self.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= self.DB) sh -= self.DB;\n  }\n\n  if (k == 8 && (s[0] & 0x80) != 0) {\n    self.s = -1;\n    if (sh > 0) self[self.t - 1] |= (1 << self.DB - sh) - 1 << sh;\n  }\n\n  self.clamp();\n  if (mi) BigInteger.ZERO.subTo(self, self);\n} // (protected) clamp off excess high words\n\n\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n} // (public) return string representation in given radix\n\n\nfunction bnToString(b) {\n  var self = this;\n  if (self.s < 0) return \"-\" + self.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return self.toRadix(b);\n  var km = (1 << k) - 1,\n      d,\n      m = false,\n      r = \"\",\n      i = self.t;\n  var p = self.DB - i * self.DB % k;\n\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n\n    while (i >= 0) {\n      if (p < k) {\n        d = (self[i] & (1 << p) - 1) << k - p;\n        d |= self[--i] >> (p += self.DB - k);\n      } else {\n        d = self[i] >> (p -= k) & km;\n\n        if (p <= 0) {\n          p += self.DB;\n          --i;\n        }\n      }\n\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n\n  return m ? r : \"0\";\n} // (public) -this\n\n\nfunction bnNegate() {\n  var r = new BigInteger();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n} // (public) |this|\n\n\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n} // (public) return + if this > a, - if this < a, 0 if equal\n\n\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n\n  return 0;\n} // returns bit length of the integer x\n\n\nfunction nbits(x) {\n  var r = 1,\n      t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // (public) return the number of bits in \"this\"\n\n\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n} // (public) return the number of bytes in \"this\"\n\n\nfunction bnByteLength() {\n  return this.bitLength() >> 3;\n} // (protected) r = this << n*DB\n\n\nfunction bnpDLShiftTo(n, r) {\n  var i;\n\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n\n  r.t = this.t + n;\n  r.s = this.s;\n} // (protected) r = this >> n*DB\n\n\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n} // (protected) r = this << n\n\n\nfunction bnpLShiftTo(n, r) {\n  var self = this;\n  var bs = n % self.DB;\n  var cbs = self.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / self.DB),\n      c = self.s << bs & self.DM,\n      i;\n\n  for (i = self.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = self[i] >> cbs | c;\n    c = (self[i] & bm) << bs;\n  }\n\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n\n  r[ds] = c;\n  r.t = self.t + ds + 1;\n  r.s = self.s;\n  r.clamp();\n} // (protected) r = this >> n\n\n\nfunction bnpRShiftTo(n, r) {\n  var self = this;\n  r.s = self.s;\n  var ds = Math.floor(n / self.DB);\n\n  if (ds >= self.t) {\n    r.t = 0;\n    return;\n  }\n\n  var bs = n % self.DB;\n  var cbs = self.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = self[ds] >> bs;\n\n  for (var i = ds + 1; i < self.t; ++i) {\n    r[i - ds - 1] |= (self[i] & bm) << cbs;\n    r[i - ds] = self[i] >> bs;\n  }\n\n  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs;\n  r.t = self.t - ds;\n  r.clamp();\n} // (protected) r = this - a\n\n\nfunction bnpSubTo(a, r) {\n  var self = this;\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, self.t);\n\n  while (i < m) {\n    c += self[i] - a[i];\n    r[i++] = c & self.DM;\n    c >>= self.DB;\n  }\n\n  if (a.t < self.t) {\n    c -= a.s;\n\n    while (i < self.t) {\n      c += self[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n\n    c += self.s;\n  } else {\n    c += self.s;\n\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n\n    c -= a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = self.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n} // (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n      y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n} // (protected) r = this^2, r != this (HAC 14.16)\n\n\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\n\n\nfunction bnpDivRemTo(m, q, r) {\n  var self = this;\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = self.abs();\n\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) self.copyTo(r);\n    return;\n  }\n\n  if (r == null) r = new BigInteger();\n  var y = new BigInteger(),\n      ts = self.s,\n      ms = m.s;\n  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 == 0) return;\n  var yt = y0 * (1 << self.F1) + (ys > 1 ? y[ys - 2] >> self.F2 : 0);\n  var d1 = self.FV / yt,\n      d2 = (1 << self.F1) / yt,\n      e = 1 << self.F2;\n  var i = r.t,\n      j = i - ys,\n      t = q == null ? new BigInteger() : q;\n  y.dlShiftTo(j, t);\n\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n  while (y.t < ys) y[y.t++] = 0;\n\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n} // (public) this mod a\n\n\nfunction bnMod(a) {\n  var r = new BigInteger();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n} // Modular reduction using \"classic\" algorithm\n\n\nfunction Classic(m) {\n  this.m = m;\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\n\nfunction cRevert(x) {\n  return x;\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) == 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n\n  return y > 0 ? this.DV - y : -y;\n} // Montgomery reduction\n\n\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n} // xR mod m\n\n\nfunction montConvert(x) {\n  var r = new BigInteger();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n} // x/R mod m\n\n\nfunction montRevert(x) {\n  var r = new BigInteger();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n} // x = x/R mod m (HAC 14.32)\n\n\nfunction montReduce(x) {\n  while (x.t <= this.mt2) // pad x so am has enough room later\n  x[x.t++] = 0;\n\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} // r = \"x^2/R mod m\"; x != r\n\n\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = \"xy/R mod m\"; x,y != r\n\n\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even\n\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n} // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = new BigInteger(),\n      r2 = new BigInteger(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n  g.copyTo(r);\n\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n\n  return z.revert(r);\n} // (public) this^e % m, 0 <= e < 2^32\n\n\nfunction bnModPowInt(e, m) {\n  var z;\n  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n  return this.exp(e, z);\n} // protected\n\n\nproto.copyTo = bnpCopyTo;\nproto.fromInt = bnpFromInt;\nproto.fromString = bnpFromString;\nproto.clamp = bnpClamp;\nproto.dlShiftTo = bnpDLShiftTo;\nproto.drShiftTo = bnpDRShiftTo;\nproto.lShiftTo = bnpLShiftTo;\nproto.rShiftTo = bnpRShiftTo;\nproto.subTo = bnpSubTo;\nproto.multiplyTo = bnpMultiplyTo;\nproto.squareTo = bnpSquareTo;\nproto.divRemTo = bnpDivRemTo;\nproto.invDigit = bnpInvDigit;\nproto.isEven = bnpIsEven;\nproto.exp = bnpExp; // public\n\nproto.toString = bnToString;\nproto.negate = bnNegate;\nproto.abs = bnAbs;\nproto.compareTo = bnCompareTo;\nproto.bitLength = bnBitLength;\nproto.byteLength = bnByteLength;\nproto.mod = bnMod;\nproto.modPowInt = bnModPowInt; // (public)\n\nfunction bnClone() {\n  var r = new BigInteger();\n  this.copyTo(r);\n  return r;\n} // (public) return value as integer\n\n\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32\n\n\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n} // (public) return value as byte\n\n\nfunction bnByteValue() {\n  return this.t == 0 ? this.s : this[0] << 24 >> 24;\n} // (public) return value as short (assumes DB>=16)\n\n\nfunction bnShortValue() {\n  return this.t == 0 ? this.s : this[0] << 16 >> 16;\n} // (protected) return x s.t. r^x < DV\n\n\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n} // (public) 0 if this == 0, 1 if this > 0\n\n\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n} // (protected) convert to radix string\n\n\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n      y = new BigInteger(),\n      z = new BigInteger(),\n      r = \"\";\n  this.divRemTo(d, y, z);\n\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n\n  return z.intValue().toString(b) + r;\n} // (protected) convert from radix string\n\n\nfunction bnpFromRadix(s, b) {\n  var self = this;\n  self.fromInt(0);\n  if (b == null) b = 10;\n  var cs = self.chunkSize(b);\n  var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && self.signum() == 0) mi = true;\n      continue;\n    }\n\n    w = b * w + x;\n\n    if (++j >= cs) {\n      self.dMultiply(d);\n      self.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n\n  if (j > 0) {\n    self.dMultiply(Math.pow(b, j));\n    self.dAddOffset(w, 0);\n  }\n\n  if (mi) BigInteger.ZERO.subTo(self, self);\n} // (protected) alternate constructor\n\n\nfunction bnpFromNumber(a, b, c) {\n  var self = this;\n\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) self.fromInt(1);else {\n      self.fromNumber(a, c);\n      if (!self.testBit(a - 1)) // force MSB set\n        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self);\n      if (self.isEven()) self.dAddOffset(1, 0); // force odd\n\n      while (!self.isProbablePrime(b)) {\n        self.dAddOffset(2, 0);\n        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self);\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = new Array(),\n        t = a & 7;\n    x.length = (a >> 3) + 1;\n    b.nextBytes(x);\n    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n    self.fromString(x, 256);\n  }\n} // (public) convert to bigendian byte array\n\n\nfunction bnToByteArray() {\n  var self = this;\n  var i = self.t,\n      r = new Array();\n  r[0] = self.s;\n  var p = self.DB - i * self.DB % 8,\n      d,\n      k = 0;\n\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p) r[k++] = d | self.s << self.DB - p;\n\n    while (i >= 0) {\n      if (p < 8) {\n        d = (self[i] & (1 << p) - 1) << 8 - p;\n        d |= self[--i] >> (p += self.DB - 8);\n      } else {\n        d = self[i] >> (p -= 8) & 0xff;\n\n        if (p <= 0) {\n          p += self.DB;\n          --i;\n        }\n      }\n\n      if ((d & 0x80) != 0) d |= -256;\n      if (k === 0 && (self.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != self.s) r[k++] = d;\n    }\n  }\n\n  return r;\n}\n\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\n\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\n\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n} // (protected) r = this op a (bitwise)\n\n\nfunction bnpBitwiseTo(a, op, r) {\n  var self = this;\n  var i,\n      f,\n      m = Math.min(a.t, self.t);\n\n  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i]);\n\n  if (a.t < self.t) {\n    f = a.s & self.DM;\n\n    for (i = m; i < self.t; ++i) r[i] = op(self[i], f);\n\n    r.t = self.t;\n  } else {\n    f = self.s & self.DM;\n\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\n    r.t = a.t;\n  }\n\n  r.s = op(self.s, a.s);\n  r.clamp();\n} // (public) this & a\n\n\nfunction op_and(x, y) {\n  return x & y;\n}\n\nfunction bnAnd(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n} // (public) this | a\n\n\nfunction op_or(x, y) {\n  return x | y;\n}\n\nfunction bnOr(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n} // (public) this ^ a\n\n\nfunction op_xor(x, y) {\n  return x ^ y;\n}\n\nfunction bnXor(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n} // (public) this & ~a\n\n\nfunction op_andnot(x, y) {\n  return x & ~y;\n}\n\nfunction bnAndNot(a) {\n  var r = new BigInteger();\n  this.bitwiseTo(a, op_andnot, r);\n  return r;\n} // (public) ~this\n\n\nfunction bnNot() {\n  var r = new BigInteger();\n\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n} // (public) this << n\n\n\nfunction bnShiftLeft(n) {\n  var r = new BigInteger();\n  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n  return r;\n} // (public) this >> n\n\n\nfunction bnShiftRight(n) {\n  var r = new BigInteger();\n  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n  return r;\n} // return index of lowest 1-bit in x, x < 2^31\n\n\nfunction lbit(x) {\n  if (x == 0) return -1;\n  var r = 0;\n\n  if ((x & 0xffff) == 0) {\n    x >>= 16;\n    r += 16;\n  }\n\n  if ((x & 0xff) == 0) {\n    x >>= 8;\n    r += 8;\n  }\n\n  if ((x & 0xf) == 0) {\n    x >>= 4;\n    r += 4;\n  }\n\n  if ((x & 3) == 0) {\n    x >>= 2;\n    r += 2;\n  }\n\n  if ((x & 1) == 0) ++r;\n  return r;\n} // (public) returns index of lowest 1-bit (or -1 if none)\n\n\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);\n\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n} // return number of 1 bits in x\n\n\nfunction cbit(x) {\n  var r = 0;\n\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n\n  return r;\n} // (public) return number of set bits\n\n\nfunction bnBitCount() {\n  var r = 0,\n      x = this.s & this.DM;\n\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n\n  return r;\n} // (public) true iff nth bit is set\n\n\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB);\n  if (j >= this.t) return this.s != 0;\n  return (this[j] & 1 << n % this.DB) != 0;\n} // (protected) this op (1<<n)\n\n\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r, op, r);\n  return r;\n} // (public) this | (1<<n)\n\n\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or);\n} // (public) this & ~(1<<n)\n\n\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot);\n} // (public) this ^ (1<<n)\n\n\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor);\n} // (protected) r = this + a\n\n\nfunction bnpAddTo(a, r) {\n  var self = this;\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, self.t);\n\n  while (i < m) {\n    c += self[i] + a[i];\n    r[i++] = c & self.DM;\n    c >>= self.DB;\n  }\n\n  if (a.t < self.t) {\n    c += a.s;\n\n    while (i < self.t) {\n      c += self[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n\n    c += self.s;\n  } else {\n    c += self.s;\n\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & self.DM;\n      c >>= self.DB;\n    }\n\n    c += a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = self.DV + c;\n  r.t = i;\n  r.clamp();\n} // (public) this + a\n\n\nfunction bnAdd(a) {\n  var r = new BigInteger();\n  this.addTo(a, r);\n  return r;\n} // (public) this - a\n\n\nfunction bnSubtract(a) {\n  var r = new BigInteger();\n  this.subTo(a, r);\n  return r;\n} // (public) this * a\n\n\nfunction bnMultiply(a) {\n  var r = new BigInteger();\n  this.multiplyTo(a, r);\n  return r;\n} // (public) this^2\n\n\nfunction bnSquare() {\n  var r = new BigInteger();\n  this.squareTo(r);\n  return r;\n} // (public) this / a\n\n\nfunction bnDivide(a) {\n  var r = new BigInteger();\n  this.divRemTo(a, r, null);\n  return r;\n} // (public) this % a\n\n\nfunction bnRemainder(a) {\n  var r = new BigInteger();\n  this.divRemTo(a, null, r);\n  return r;\n} // (public) [this/a,this%a]\n\n\nfunction bnDivideAndRemainder(a) {\n  var q = new BigInteger(),\n      r = new BigInteger();\n  this.divRemTo(a, q, r);\n  return new Array(q, r);\n} // (protected) this *= n, this >= 0, 1 < n < DV\n\n\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n} // (protected) this += n << w words, this >= 0\n\n\nfunction bnpDAddOffset(n, w) {\n  if (n == 0) return;\n\n  while (this.t <= w) this[this.t++] = 0;\n\n  this[w] += n;\n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n} // A \"null\" reducer\n\n\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x;\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo; // (public) this^e\n\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n} // (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n\n  r.t = i;\n\n  while (i > 0) r[--i] = 0;\n\n  var j;\n\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\n  r.clamp();\n} // (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\n  r.clamp();\n  r.drShiftTo(1, r);\n} // Barrett modular reduction\n\n\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = new BigInteger();\n  this.q3 = new BigInteger();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = new BigInteger();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\n\nfunction barrettRevert(x) {\n  return x;\n} // x = x mod m (HAC 14.42)\n\n\nfunction barrettReduce(x) {\n  var self = this;\n  x.drShiftTo(self.m.t - 1, self.r2);\n\n  if (x.t > self.m.t + 1) {\n    x.t = self.m.t + 1;\n    x.clamp();\n  }\n\n  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3);\n  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2);\n\n  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1);\n\n  x.subTo(self.r2, x);\n\n  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x);\n} // r = x^2 mod m; x != r\n\n\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = x*y mod m; x,y != r\n\n\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo; // (public) this^e % m (HAC 14.85)\n\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n      k,\n      r = nbv(1),\n      z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation\n\n  var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n  g[1] = z.convert(this);\n\n  if (k > 1) {\n    var g2 = new BigInteger();\n    z.sqrTo(g[1], g2);\n\n    while (n <= km) {\n      g[n] = new BigInteger();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = new BigInteger(),\n      t;\n  i = nbits(e[j]) - 1;\n\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n\n    while ((w & 1) == 0) {\n      w >>= 1;\n      --n;\n    }\n\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n\n    while (j >= 0 && (e[j] & 1 << i) == 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n\n  return z.revert(r);\n} // (public) gcd(this,a) (HAC 14.54)\n\n\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n\n  var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n} // (protected) this % n, n < 2^26\n\n\nfunction bnpModInt(n) {\n  if (n <= 0) return 0;\n  var d = this.DV % n,\n      r = this.s < 0 ? n - 1 : 0;\n  if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n  return r;\n} // (public) 1/this % m (HAC 14.61)\n\n\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if (this.signum() === 0) throw new Error('division by zero');\n  if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n  var u = m.clone(),\n      v = this.clone();\n  var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u);\n\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a);\n          b.subTo(m, b);\n        }\n\n        a.rShiftTo(1, a);\n      } else if (!b.isEven()) b.subTo(m, b);\n\n      b.rShiftTo(1, b);\n    }\n\n    while (v.isEven()) {\n      v.rShiftTo(1, v);\n\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c);\n          d.subTo(m, d);\n        }\n\n        c.rShiftTo(1, c);\n      } else if (!d.isEven()) d.subTo(m, d);\n\n      d.rShiftTo(1, d);\n    }\n\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u);\n      if (ac) a.subTo(c, a);\n      b.subTo(d, b);\n    } else {\n      v.subTo(u, v);\n      if (ac) c.subTo(a, c);\n      d.subTo(b, d);\n    }\n  }\n\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n\n  while (d.compareTo(m) >= 0) d.subTo(m, d);\n\n  while (d.signum() < 0) d.addTo(m, d);\n\n  return d;\n}\n\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; // (public) test primality with certainty >= 1-.5^t\n\nfunction bnIsProbablePrime(t) {\n  var i,\n      x = this.abs();\n\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;\n\n    return false;\n  }\n\n  if (x.isEven()) return false;\n  i = 1;\n\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n        j = i + 1;\n\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\n    m = x.modInt(m);\n\n    while (i < j) if (m % lowprimes[i++] == 0) return false;\n  }\n\n  return x.millerRabin(t);\n} // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\n\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if (k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = t + 1 >> 1;\n  if (t > lowprimes.length) t = lowprimes.length;\n  var a = new BigInteger(null);\n  var j,\n      bases = [];\n\n  for (var i = 0; i < t; ++i) {\n    for (;;) {\n      j = lowprimes[Math.floor(Math.random() * lowprimes.length)];\n      if (bases.indexOf(j) == -1) break;\n    }\n\n    bases.push(j);\n    a.fromInt(j);\n    var y = a.modPow(r, this);\n\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this);\n        if (y.compareTo(BigInteger.ONE) == 0) return false;\n      }\n\n      if (y.compareTo(n1) != 0) return false;\n    }\n  }\n\n  return true;\n} // protected\n\n\nproto.chunkSize = bnpChunkSize;\nproto.toRadix = bnpToRadix;\nproto.fromRadix = bnpFromRadix;\nproto.fromNumber = bnpFromNumber;\nproto.bitwiseTo = bnpBitwiseTo;\nproto.changeBit = bnpChangeBit;\nproto.addTo = bnpAddTo;\nproto.dMultiply = bnpDMultiply;\nproto.dAddOffset = bnpDAddOffset;\nproto.multiplyLowerTo = bnpMultiplyLowerTo;\nproto.multiplyUpperTo = bnpMultiplyUpperTo;\nproto.modInt = bnpModInt;\nproto.millerRabin = bnpMillerRabin; // public\n\nproto.clone = bnClone;\nproto.intValue = bnIntValue;\nproto.byteValue = bnByteValue;\nproto.shortValue = bnShortValue;\nproto.signum = bnSigNum;\nproto.toByteArray = bnToByteArray;\nproto.equals = bnEquals;\nproto.min = bnMin;\nproto.max = bnMax;\nproto.and = bnAnd;\nproto.or = bnOr;\nproto.xor = bnXor;\nproto.andNot = bnAndNot;\nproto.not = bnNot;\nproto.shiftLeft = bnShiftLeft;\nproto.shiftRight = bnShiftRight;\nproto.getLowestSetBit = bnGetLowestSetBit;\nproto.bitCount = bnBitCount;\nproto.testBit = bnTestBit;\nproto.setBit = bnSetBit;\nproto.clearBit = bnClearBit;\nproto.flipBit = bnFlipBit;\nproto.add = bnAdd;\nproto.subtract = bnSubtract;\nproto.multiply = bnMultiply;\nproto.divide = bnDivide;\nproto.remainder = bnRemainder;\nproto.divideAndRemainder = bnDivideAndRemainder;\nproto.modPow = bnModPow;\nproto.modInverse = bnModInverse;\nproto.pow = bnPow;\nproto.gcd = bnGCD;\nproto.isProbablePrime = bnIsProbablePrime; // JSBN-specific extension\n\nproto.square = bnSquare; // constants\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);\nBigInteger.valueOf = nbv;\nmodule.exports = BigInteger;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/bigi/lib/bigi.js"],"names":["BigInteger","a","b","c","fromNumber","fromString","proto","prototype","__bigi","require","version","isBigInteger","obj","check_ver","dbits","am1","i","x","w","j","n","v","Math","floor","am2","xl","xh","l","h","m","am3","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","self","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnByteLength","bitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","byteLength","modPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","Error","u","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","subtract","shiftRight","bases","random","indexOf","push","modPow","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","add","multiply","remainder","divideAndRemainder","modInverse","gcd","square","valueOf","module","exports"],"mappings":"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","sourcesContent":["// (public) Constructor\nfunction BigInteger(a, b, c) {\n  if (!(this instanceof BigInteger))\n    return new BigInteger(a, b, c)\n\n  if (a != null) {\n    if (\"number\" == typeof a) this.fromNumber(a, b, c)\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256)\n    else this.fromString(a, b)\n  }\n}\n\nvar proto = BigInteger.prototype\n\n// duck-typed isBigInteger\nproto.__bigi = require('../package.json').version\nBigInteger.isBigInteger = function (obj, check_ver) {\n  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)\n}\n\n// Bits per digit\nvar dbits\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c\n    c = Math.floor(v / 0x4000000)\n    w[j++] = v & 0x3ffffff\n  }\n  return c\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n    xh = x >> 15\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff\n    var h = this[i++] >> 15\n    var m = xh * l + h * xl\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)\n    w[j++] = l & 0x3fffffff\n  }\n  return c\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n    xh = x >> 14\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff\n    var h = this[i++] >> 14\n    var m = xh * l + h * xl\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c\n    c = (l >> 28) + (m >> 14) + xh * h\n    w[j++] = l & 0xfffffff\n  }\n  return c\n}\n\n// wtf?\nBigInteger.prototype.am = am1\ndbits = 26\n\nBigInteger.prototype.DB = dbits\nBigInteger.prototype.DM = ((1 << dbits) - 1)\nvar DV = BigInteger.prototype.DV = (1 << dbits)\n\nvar BI_FP = 52\nBigInteger.prototype.FV = Math.pow(2, BI_FP)\nBigInteger.prototype.F1 = BI_FP - dbits\nBigInteger.prototype.F2 = 2 * dbits - BI_FP\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\"\nvar BI_RC = new Array()\nvar rr, vv\nrr = \"0\".charCodeAt(0)\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv\nrr = \"a\".charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\nrr = \"A\".charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\n\nfunction int2char(n) {\n  return BI_RM.charAt(n)\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)]\n  return (c == null) ? -1 : c\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]\n  r.t = this.t\n  r.s = this.s\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1\n  this.s = (x < 0) ? -1 : 0\n  if (x > 0) this[0] = x\n  else if (x < -1) this[0] = x + DV\n  else this.t = 0\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n  var r = new BigInteger()\n  r.fromInt(i)\n  return r\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n  var self = this\n\n  var k\n  if (b == 16) k = 4\n  else if (b == 8) k = 3\n  else if (b == 256) k = 8; // byte array\n  else if (b == 2) k = 1\n  else if (b == 32) k = 5\n  else if (b == 4) k = 2\n  else {\n    self.fromRadix(s, b)\n    return\n  }\n  self.t = 0\n  self.s = 0\n  var i = s.length,\n    mi = false,\n    sh = 0\n  while (--i >= 0) {\n    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)\n    if (x < 0) {\n      if (s.charAt(i) == \"-\") mi = true\n      continue\n    }\n    mi = false\n    if (sh == 0)\n      self[self.t++] = x\n    else if (sh + k > self.DB) {\n      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh\n      self[self.t++] = (x >> (self.DB - sh))\n    } else\n      self[self.t - 1] |= x << sh\n    sh += k\n    if (sh >= self.DB) sh -= self.DB\n  }\n  if (k == 8 && (s[0] & 0x80) != 0) {\n    self.s = -1\n    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh\n  }\n  self.clamp()\n  if (mi) BigInteger.ZERO.subTo(self, self)\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s & this.DM\n  while (this.t > 0 && this[this.t - 1] == c)--this.t\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  var self = this\n  if (self.s < 0) return \"-\" + self.negate()\n    .toString(b)\n  var k\n  if (b == 16) k = 4\n  else if (b == 8) k = 3\n  else if (b == 2) k = 1\n  else if (b == 32) k = 5\n  else if (b == 4) k = 2\n  else return self.toRadix(b)\n  var km = (1 << k) - 1,\n    d, m = false,\n    r = \"\",\n    i = self.t\n  var p = self.DB - (i * self.DB) % k\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) > 0) {\n      m = true\n      r = int2char(d)\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (self[i] & ((1 << p) - 1)) << (k - p)\n        d |= self[--i] >> (p += self.DB - k)\n      } else {\n        d = (self[i] >> (p -= k)) & km\n        if (p <= 0) {\n          p += self.DB\n          --i\n        }\n      }\n      if (d > 0) m = true\n      if (m) r += int2char(d)\n    }\n  }\n  return m ? r : \"0\"\n}\n\n// (public) -this\nfunction bnNegate() {\n  var r = new BigInteger()\n  BigInteger.ZERO.subTo(this, r)\n  return r\n}\n\n// (public) |this|\nfunction bnAbs() {\n  return (this.s < 0) ? this.negate() : this\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s - a.s\n  if (r != 0) return r\n  var i = this.t\n  r = i - a.t\n  if (r != 0) return (this.s < 0) ? -r : r\n  while (--i >= 0)\n    if ((r = this[i] - a[i]) != 0) return r\n  return 0\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1,\n    t\n  if ((t = x >>> 16) != 0) {\n    x = t\n    r += 16\n  }\n  if ((t = x >> 8) != 0) {\n    x = t\n    r += 8\n  }\n  if ((t = x >> 4) != 0) {\n    x = t\n    r += 4\n  }\n  if ((t = x >> 2) != 0) {\n    x = t\n    r += 2\n  }\n  if ((t = x >> 1) != 0) {\n    x = t\n    r += 1\n  }\n  return r\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))\n}\n\n// (public) return the number of bytes in \"this\"\nfunction bnByteLength() {\n  return this.bitLength() >> 3\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  var i\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]\n  for (i = n - 1; i >= 0; --i) r[i] = 0\n  r.t = this.t + n\n  r.s = this.s\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i]\n  r.t = Math.max(this.t - n, 0)\n  r.s = this.s\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  var self = this\n  var bs = n % self.DB\n  var cbs = self.DB - bs\n  var bm = (1 << cbs) - 1\n  var ds = Math.floor(n / self.DB),\n    c = (self.s << bs) & self.DM,\n    i\n  for (i = self.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = (self[i] >> cbs) | c\n    c = (self[i] & bm) << bs\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0\n  r[ds] = c\n  r.t = self.t + ds + 1\n  r.s = self.s\n  r.clamp()\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  var self = this\n  r.s = self.s\n  var ds = Math.floor(n / self.DB)\n  if (ds >= self.t) {\n    r.t = 0\n    return\n  }\n  var bs = n % self.DB\n  var cbs = self.DB - bs\n  var bm = (1 << bs) - 1\n  r[0] = self[ds] >> bs\n  for (var i = ds + 1; i < self.t; ++i) {\n    r[i - ds - 1] |= (self[i] & bm) << cbs\n    r[i - ds] = self[i] >> bs\n  }\n  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs\n  r.t = self.t - ds\n  r.clamp()\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  var self = this\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t)\n  while (i < m) {\n    c += self[i] - a[i]\n    r[i++] = c & self.DM\n    c >>= self.DB\n  }\n  if (a.t < self.t) {\n    c -= a.s\n    while (i < self.t) {\n      c += self[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += self.s\n  } else {\n    c += self.s\n    while (i < a.t) {\n      c -= a[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c -= a.s\n  }\n  r.s = (c < 0) ? -1 : 0\n  if (c < -1) r[i++] = self.DV + c\n  else if (c > 0) r[i++] = c\n  r.t = i\n  r.clamp()\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n    y = a.abs()\n  var i = x.t\n  r.t = i + y.t\n  while (--i >= 0) r[i] = 0\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)\n  r.s = 0\n  r.clamp()\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs()\n  var i = r.t = 2 * x.t\n  while (--i >= 0) r[i] = 0\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1)\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV\n      r[i + x.t + 1] = 1\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)\n  r.s = 0\n  r.clamp()\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  var self = this\n  var pm = m.abs()\n  if (pm.t <= 0) return\n  var pt = self.abs()\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0)\n    if (r != null) self.copyTo(r)\n    return\n  }\n  if (r == null) r = new BigInteger()\n  var y = new BigInteger(),\n    ts = self.s,\n    ms = m.s\n  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y)\n    pt.lShiftTo(nsh, r)\n  } else {\n    pm.copyTo(y)\n    pt.copyTo(r)\n  }\n  var ys = y.t\n  var y0 = y[ys - 1]\n  if (y0 == 0) return\n  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)\n  var d1 = self.FV / yt,\n    d2 = (1 << self.F1) / yt,\n    e = 1 << self.F2\n  var i = r.t,\n    j = i - ys,\n    t = (q == null) ? new BigInteger() : q\n  y.dlShiftTo(j, t)\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1\n    r.subTo(t, r)\n  }\n  BigInteger.ONE.dlShiftTo(ys, t)\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n      y.dlShiftTo(j, t)\n      r.subTo(t, r)\n      while (r[i] < --qd) r.subTo(t, r)\n    }\n  }\n  if (q != null) {\n    r.drShiftTo(ys, q)\n    if (ts != ms) BigInteger.ZERO.subTo(q, q)\n  }\n  r.t = ys\n  r.clamp()\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r)\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = new BigInteger()\n  this.abs()\n    .divRemTo(a, null, r)\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)\n  return r\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n  this.m = m\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)\n  else return x\n}\n\nfunction cRevert(x) {\n  return x\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x)\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\nClassic.prototype.convert = cConvert\nClassic.prototype.revert = cRevert\nClassic.prototype.reduce = cReduce\nClassic.prototype.mulTo = cMulTo\nClassic.prototype.sqrTo = cSqrTo\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0\n  var x = this[0]\n  if ((x & 1) == 0) return 0\n  var y = x & 3; // y == 1/x mod 2^2\n  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y > 0) ? this.DV - y : -y\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m\n  this.mp = m.invDigit()\n  this.mpl = this.mp & 0x7fff\n  this.mph = this.mp >> 15\n  this.um = (1 << (m.DB - 15)) - 1\n  this.mt2 = 2 * m.t\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = new BigInteger()\n  x.abs()\n    .dlShiftTo(this.m.t, r)\n  r.divRemTo(this.m, null, r)\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\n  return r\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = new BigInteger()\n  x.copyTo(r)\n  this.reduce(r)\n  return r\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2) // pad x so am has enough room later\n    x[x.t++] = 0\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff\n    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV\n      x[++j]++\n    }\n  }\n  x.clamp()\n  x.drShiftTo(this.m.t, x)\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nMontgomery.prototype.convert = montConvert\nMontgomery.prototype.revert = montRevert\nMontgomery.prototype.reduce = montReduce\nMontgomery.prototype.mulTo = montMulTo\nMontgomery.prototype.sqrTo = montSqrTo\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE\n  var r = new BigInteger(),\n    r2 = new BigInteger(),\n    g = z.convert(this),\n    i = nbits(e) - 1\n  g.copyTo(r)\n  while (--i >= 0) {\n    z.sqrTo(r, r2)\n    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)\n    else {\n      var t = r\n      r = r2\n      r2 = t\n    }\n  }\n  return z.revert(r)\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n  var z\n  if (e < 256 || m.isEven()) z = new Classic(m)\n  else z = new Montgomery(m)\n  return this.exp(e, z)\n}\n\n// protected\nproto.copyTo = bnpCopyTo\nproto.fromInt = bnpFromInt\nproto.fromString = bnpFromString\nproto.clamp = bnpClamp\nproto.dlShiftTo = bnpDLShiftTo\nproto.drShiftTo = bnpDRShiftTo\nproto.lShiftTo = bnpLShiftTo\nproto.rShiftTo = bnpRShiftTo\nproto.subTo = bnpSubTo\nproto.multiplyTo = bnpMultiplyTo\nproto.squareTo = bnpSquareTo\nproto.divRemTo = bnpDivRemTo\nproto.invDigit = bnpInvDigit\nproto.isEven = bnpIsEven\nproto.exp = bnpExp\n\n// public\nproto.toString = bnToString\nproto.negate = bnNegate\nproto.abs = bnAbs\nproto.compareTo = bnCompareTo\nproto.bitLength = bnBitLength\nproto.byteLength = bnByteLength\nproto.mod = bnMod\nproto.modPowInt = bnModPowInt\n\n// (public)\nfunction bnClone() {\n  var r = new BigInteger()\n  this.copyTo(r)\n  return r\n}\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV\n    else if (this.t == 0) return -1\n  } else if (this.t == 1) return this[0]\n  else if (this.t == 0) return 0\n  // assumes 16 < DB < 32\n  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]\n}\n\n// (public) return value as byte\nfunction bnByteValue() {\n  return (this.t == 0) ? this.s : (this[0] << 24) >> 24\n}\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n  return (this.t == 0) ? this.s : (this[0] << 16) >> 16\n}\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r))\n}\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if (this.s < 0) return -1\n  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0\n  else return 1\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if (b == null) b = 10\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\"\n  var cs = this.chunkSize(b)\n  var a = Math.pow(b, cs)\n  var d = nbv(a),\n    y = new BigInteger(),\n    z = new BigInteger(),\n    r = \"\"\n  this.divRemTo(d, y, z)\n  while (y.signum() > 0) {\n    r = (a + z.intValue())\n      .toString(b)\n      .substr(1) + r\n    y.divRemTo(d, y, z)\n  }\n  return z.intValue()\n    .toString(b) + r\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n  var self = this\n  self.fromInt(0)\n  if (b == null) b = 10\n  var cs = self.chunkSize(b)\n  var d = Math.pow(b, cs),\n    mi = false,\n    j = 0,\n    w = 0\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i)\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && self.signum() == 0) mi = true\n      continue\n    }\n    w = b * w + x\n    if (++j >= cs) {\n      self.dMultiply(d)\n      self.dAddOffset(w, 0)\n      j = 0\n      w = 0\n    }\n  }\n  if (j > 0) {\n    self.dMultiply(Math.pow(b, j))\n    self.dAddOffset(w, 0)\n  }\n  if (mi) BigInteger.ZERO.subTo(self, self)\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a, b, c) {\n  var self = this\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) self.fromInt(1)\n    else {\n      self.fromNumber(a, c)\n      if (!self.testBit(a - 1)) // force MSB set\n        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)\n      if (self.isEven()) self.dAddOffset(1, 0); // force odd\n      while (!self.isProbablePrime(b)) {\n        self.dAddOffset(2, 0)\n        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = new Array(),\n      t = a & 7\n    x.length = (a >> 3) + 1\n    b.nextBytes(x)\n    if (t > 0) x[0] &= ((1 << t) - 1)\n    else x[0] = 0\n    self.fromString(x, 256)\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var self = this\n  var i = self.t,\n    r = new Array()\n  r[0] = self.s\n  var p = self.DB - (i * self.DB) % 8,\n    d, k = 0\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)\n      r[k++] = d | (self.s << (self.DB - p))\n    while (i >= 0) {\n      if (p < 8) {\n        d = (self[i] & ((1 << p) - 1)) << (8 - p)\n        d |= self[--i] >> (p += self.DB - 8)\n      } else {\n        d = (self[i] >> (p -= 8)) & 0xff\n        if (p <= 0) {\n          p += self.DB\n          --i\n        }\n      }\n      if ((d & 0x80) != 0) d |= -256\n      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k\n      if (k > 0 || d != self.s) r[k++] = d\n    }\n  }\n  return r\n}\n\nfunction bnEquals(a) {\n  return (this.compareTo(a) == 0)\n}\n\nfunction bnMin(a) {\n  return (this.compareTo(a) < 0) ? this : a\n}\n\nfunction bnMax(a) {\n  return (this.compareTo(a) > 0) ? this : a\n}\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n  var self = this\n  var i, f, m = Math.min(a.t, self.t)\n  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])\n  if (a.t < self.t) {\n    f = a.s & self.DM\n    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)\n    r.t = self.t\n  } else {\n    f = self.s & self.DM\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])\n    r.t = a.t\n  }\n  r.s = op(self.s, a.s)\n  r.clamp()\n}\n\n// (public) this & a\nfunction op_and(x, y) {\n  return x & y\n}\n\nfunction bnAnd(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_and, r)\n  return r\n}\n\n// (public) this | a\nfunction op_or(x, y) {\n  return x | y\n}\n\nfunction bnOr(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_or, r)\n  return r\n}\n\n// (public) this ^ a\nfunction op_xor(x, y) {\n  return x ^ y\n}\n\nfunction bnXor(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_xor, r)\n  return r\n}\n\n// (public) this & ~a\nfunction op_andnot(x, y) {\n  return x & ~y\n}\n\nfunction bnAndNot(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_andnot, r)\n  return r\n}\n\n// (public) ~this\nfunction bnNot() {\n  var r = new BigInteger()\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]\n  r.t = this.t\n  r.s = ~this.s\n  return r\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = new BigInteger()\n  if (n < 0) this.rShiftTo(-n, r)\n  else this.lShiftTo(n, r)\n  return r\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = new BigInteger()\n  if (n < 0) this.lShiftTo(-n, r)\n  else this.rShiftTo(n, r)\n  return r\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if (x == 0) return -1\n  var r = 0\n  if ((x & 0xffff) == 0) {\n    x >>= 16\n    r += 16\n  }\n  if ((x & 0xff) == 0) {\n    x >>= 8\n    r += 8\n  }\n  if ((x & 0xf) == 0) {\n    x >>= 4\n    r += 4\n  }\n  if ((x & 3) == 0) {\n    x >>= 2\n    r += 2\n  }\n  if ((x & 1) == 0)++r\n  return r\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i)\n    if (this[i] != 0) return i * this.DB + lbit(this[i])\n  if (this.s < 0) return this.t * this.DB\n  return -1\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0\n  while (x != 0) {\n    x &= x - 1\n    ++r\n  }\n  return r\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0,\n    x = this.s & this.DM\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)\n  return r\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB)\n  if (j >= this.t) return (this.s != 0)\n  return ((this[j] & (1 << (n % this.DB))) != 0)\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n)\n  this.bitwiseTo(r, op, r)\n  return r\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or)\n}\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot)\n}\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor)\n}\n\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n  var self = this\n\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t)\n  while (i < m) {\n    c += self[i] + a[i]\n    r[i++] = c & self.DM\n    c >>= self.DB\n  }\n  if (a.t < self.t) {\n    c += a.s\n    while (i < self.t) {\n      c += self[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += self.s\n  } else {\n    c += self.s\n    while (i < a.t) {\n      c += a[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += a.s\n  }\n  r.s = (c < 0) ? -1 : 0\n  if (c > 0) r[i++] = c\n  else if (c < -1) r[i++] = self.DV + c\n  r.t = i\n  r.clamp()\n}\n\n// (public) this + a\nfunction bnAdd(a) {\n  var r = new BigInteger()\n  this.addTo(a, r)\n  return r\n}\n\n// (public) this - a\nfunction bnSubtract(a) {\n  var r = new BigInteger()\n  this.subTo(a, r)\n  return r\n}\n\n// (public) this * a\nfunction bnMultiply(a) {\n  var r = new BigInteger()\n  this.multiplyTo(a, r)\n  return r\n}\n\n// (public) this^2\nfunction bnSquare() {\n  var r = new BigInteger()\n  this.squareTo(r)\n  return r\n}\n\n// (public) this / a\nfunction bnDivide(a) {\n  var r = new BigInteger()\n  this.divRemTo(a, r, null)\n  return r\n}\n\n// (public) this % a\nfunction bnRemainder(a) {\n  var r = new BigInteger()\n  this.divRemTo(a, null, r)\n  return r\n}\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = new BigInteger(),\n    r = new BigInteger()\n  this.divRemTo(a, q, r)\n  return new Array(q, r)\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)\n  ++this.t\n  this.clamp()\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n  if (n == 0) return\n  while (this.t <= w) this[this.t++] = 0\n  this[w] += n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV\n    if (++w >= this.t) this[this.t++] = 0\n    ++this[w]\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r)\n}\n\nNullExp.prototype.convert = nNop\nNullExp.prototype.revert = nNop\nNullExp.prototype.mulTo = nMulTo\nNullExp.prototype.sqrTo = nSqrTo\n\n// (public) this^e\nfunction bnPow(e) {\n  return this.exp(e, new NullExp())\n}\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n)\n  r.s = 0; // assumes a,this >= 0\n  r.t = i\n  while (i > 0) r[--i] = 0\n  var j\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)\n  r.clamp()\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n\n  var i = r.t = this.t + a.t - n\n  r.s = 0; // assumes a,this >= 0\n  while (--i >= 0) r[i] = 0\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)\n  r.clamp()\n  r.drShiftTo(1, r)\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = new BigInteger()\n  this.q3 = new BigInteger()\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)\n  this.mu = this.r2.divide(m)\n  this.m = m\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)\n  else if (x.compareTo(this.m) < 0) return x\n  else {\n    var r = new BigInteger()\n    x.copyTo(r)\n    this.reduce(r)\n    return r\n  }\n}\n\nfunction barrettRevert(x) {\n  return x\n}\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  var self = this\n  x.drShiftTo(self.m.t - 1, self.r2)\n  if (x.t > self.m.t + 1) {\n    x.t = self.m.t + 1\n    x.clamp()\n  }\n  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)\n  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)\n  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)\n  x.subTo(self.r2, x)\n  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nBarrett.prototype.convert = barrettConvert\nBarrett.prototype.revert = barrettRevert\nBarrett.prototype.reduce = barrettReduce\nBarrett.prototype.mulTo = barrettMulTo\nBarrett.prototype.sqrTo = barrettSqrTo\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n    k, r = nbv(1),\n    z\n  if (i <= 0) return r\n  else if (i < 18) k = 1\n  else if (i < 48) k = 3\n  else if (i < 144) k = 4\n  else if (i < 768) k = 5\n  else k = 6\n  if (i < 8)\n    z = new Classic(m)\n  else if (m.isEven())\n    z = new Barrett(m)\n  else\n    z = new Montgomery(m)\n\n  // precomputation\n  var g = new Array(),\n    n = 3,\n    k1 = k - 1,\n    km = (1 << k) - 1\n  g[1] = z.convert(this)\n  if (k > 1) {\n    var g2 = new BigInteger()\n    z.sqrTo(g[1], g2)\n    while (n <= km) {\n      g[n] = new BigInteger()\n      z.mulTo(g2, g[n - 2], g[n])\n      n += 2\n    }\n  }\n\n  var j = e.t - 1,\n    w, is1 = true,\n    r2 = new BigInteger(),\n    t\n  i = nbits(e[j]) - 1\n  while (j >= 0) {\n    if (i >= k1) w = (e[j] >> (i - k1)) & km\n    else {\n      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)\n      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)\n    }\n\n    n = k\n    while ((w & 1) == 0) {\n      w >>= 1\n      --n\n    }\n    if ((i -= n) < 0) {\n      i += this.DB\n      --j\n    }\n    if (is1) { // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r)\n      is1 = false\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2)\n        z.sqrTo(r2, r)\n        n -= 2\n      }\n      if (n > 0) z.sqrTo(r, r2)\n      else {\n        t = r\n        r = r2\n        r2 = t\n      }\n      z.mulTo(r2, g[w], r)\n    }\n\n    while (j >= 0 && (e[j] & (1 << i)) == 0) {\n      z.sqrTo(r, r2)\n      t = r\n      r = r2\n      r2 = t\n      if (--i < 0) {\n        i = this.DB - 1\n        --j\n      }\n    }\n  }\n  return z.revert(r)\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s < 0) ? this.negate() : this.clone()\n  var y = (a.s < 0) ? a.negate() : a.clone()\n  if (x.compareTo(y) < 0) {\n    var t = x\n    x = y\n    y = t\n  }\n  var i = x.getLowestSetBit(),\n    g = y.getLowestSetBit()\n  if (g < 0) return x\n  if (i < g) g = i\n  if (g > 0) {\n    x.rShiftTo(g, x)\n    y.rShiftTo(g, y)\n  }\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x)\n      x.rShiftTo(1, x)\n    } else {\n      y.subTo(x, y)\n      y.rShiftTo(1, y)\n    }\n  }\n  if (g > 0) y.lShiftTo(g, y)\n  return y\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if (n <= 0) return 0\n  var d = this.DV % n,\n    r = (this.s < 0) ? n - 1 : 0\n  if (this.t > 0)\n    if (d == 0) r = this[0] % n\n    else\n      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n\n  return r\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven()\n  if (this.signum() === 0) throw new Error('division by zero')\n  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO\n  var u = m.clone(),\n    v = this.clone()\n  var a = nbv(1),\n    b = nbv(0),\n    c = nbv(0),\n    d = nbv(1)\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u)\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a)\n          b.subTo(m, b)\n        }\n        a.rShiftTo(1, a)\n      } else if (!b.isEven()) b.subTo(m, b)\n      b.rShiftTo(1, b)\n    }\n    while (v.isEven()) {\n      v.rShiftTo(1, v)\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c)\n          d.subTo(m, d)\n        }\n        c.rShiftTo(1, c)\n      } else if (!d.isEven()) d.subTo(m, d)\n      d.rShiftTo(1, d)\n    }\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u)\n      if (ac) a.subTo(c, a)\n      b.subTo(d, b)\n    } else {\n      v.subTo(u, v)\n      if (ac) c.subTo(a, c)\n      d.subTo(b, d)\n    }\n  }\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO\n  while (d.compareTo(m) >= 0) d.subTo(m, d)\n  while (d.signum() < 0) d.addTo(m, d)\n  return d\n}\n\nvar lowprimes = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\n  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\n  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\n  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\n  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\n  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\n  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n]\n\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs()\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i)\n      if (x[0] == lowprimes[i]) return true\n    return false\n  }\n  if (x.isEven()) return false\n  i = 1\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n      j = i + 1\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]\n    m = x.modInt(m)\n    while (i < j) if (m % lowprimes[i++] == 0) return false\n  }\n  return x.millerRabin(t)\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE)\n  var k = n1.getLowestSetBit()\n  if (k <= 0) return false\n  var r = n1.shiftRight(k)\n  t = (t + 1) >> 1\n  if (t > lowprimes.length) t = lowprimes.length\n  var a = new BigInteger(null)\n  var j, bases = []\n  for (var i = 0; i < t; ++i) {\n    for (;;) {\n      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]\n      if (bases.indexOf(j) == -1) break\n    }\n    bases.push(j)\n    a.fromInt(j)\n    var y = a.modPow(r, this)\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this)\n        if (y.compareTo(BigInteger.ONE) == 0) return false\n      }\n      if (y.compareTo(n1) != 0) return false\n    }\n  }\n  return true\n}\n\n// protected\nproto.chunkSize = bnpChunkSize\nproto.toRadix = bnpToRadix\nproto.fromRadix = bnpFromRadix\nproto.fromNumber = bnpFromNumber\nproto.bitwiseTo = bnpBitwiseTo\nproto.changeBit = bnpChangeBit\nproto.addTo = bnpAddTo\nproto.dMultiply = bnpDMultiply\nproto.dAddOffset = bnpDAddOffset\nproto.multiplyLowerTo = bnpMultiplyLowerTo\nproto.multiplyUpperTo = bnpMultiplyUpperTo\nproto.modInt = bnpModInt\nproto.millerRabin = bnpMillerRabin\n\n// public\nproto.clone = bnClone\nproto.intValue = bnIntValue\nproto.byteValue = bnByteValue\nproto.shortValue = bnShortValue\nproto.signum = bnSigNum\nproto.toByteArray = bnToByteArray\nproto.equals = bnEquals\nproto.min = bnMin\nproto.max = bnMax\nproto.and = bnAnd\nproto.or = bnOr\nproto.xor = bnXor\nproto.andNot = bnAndNot\nproto.not = bnNot\nproto.shiftLeft = bnShiftLeft\nproto.shiftRight = bnShiftRight\nproto.getLowestSetBit = bnGetLowestSetBit\nproto.bitCount = bnBitCount\nproto.testBit = bnTestBit\nproto.setBit = bnSetBit\nproto.clearBit = bnClearBit\nproto.flipBit = bnFlipBit\nproto.add = bnAdd\nproto.subtract = bnSubtract\nproto.multiply = bnMultiply\nproto.divide = bnDivide\nproto.remainder = bnRemainder\nproto.divideAndRemainder = bnDivideAndRemainder\nproto.modPow = bnModPow\nproto.modInverse = bnModInverse\nproto.pow = bnPow\nproto.gcd = bnGCD\nproto.isProbablePrime = bnIsProbablePrime\n\n// JSBN-specific extension\nproto.square = bnSquare\n\n// constants\nBigInteger.ZERO = nbv(0)\nBigInteger.ONE = nbv(1)\nBigInteger.valueOf = nbv\n\nmodule.exports = BigInteger\n"]},"metadata":{},"sourceType":"script"}