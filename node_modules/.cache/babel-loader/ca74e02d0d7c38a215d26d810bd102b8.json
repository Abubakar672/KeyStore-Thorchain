{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// migrate a storage hasher type\n// see https://github.com/paritytech/substrate/pull/4462\n\n/** @internal */\n\n\nfunction createStorageHasher(registry, hasher) {\n  // Blake2_128_Concat has been added at index 2, so we increment all the\n  // indexes greater than 2\n  if (hasher.toNumber() >= 2) {\n    return registry.createType('StorageHasherV10', hasher.toNumber() + 1);\n  }\n\n  return registry.createType('StorageHasherV10', hasher);\n}\n/** @internal */\n\n\nfunction createStorageType(registry, entryType) {\n  if (entryType.isMap) {\n    return [_objectSpread(_objectSpread({}, entryType.asMap), {}, {\n      hasher: createStorageHasher(registry, entryType.asMap.hasher)\n    }), 1];\n  }\n\n  if (entryType.isDoubleMap) {\n    return [_objectSpread(_objectSpread({}, entryType.asDoubleMap), {}, {\n      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),\n      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)\n    }), 2];\n  }\n\n  return [entryType.asPlain, 0];\n}\n/** @internal */\n\n\nfunction convertModule(registry, mod) {\n  const storage = mod.storage.unwrapOr(null);\n  return registry.createType('ModuleMetadataV10', _objectSpread(_objectSpread({}, mod), {}, {\n    storage: storage ? _objectSpread(_objectSpread({}, storage), {}, {\n      items: storage.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n        type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))\n      }))\n    }) : null\n  }));\n}\n/** @internal */\n\n\nexport function toV10(registry, {\n  modules\n}) {\n  return registry.createType('MetadataV10', {\n    modules: modules.map(mod => convertModule(registry, mod))\n  });\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/metadata/v9/toV10.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","createStorageHasher","registry","hasher","toNumber","createType","createStorageType","entryType","isMap","asMap","isDoubleMap","asDoubleMap","key2Hasher","asPlain","convertModule","mod","storage","unwrapOr","items","map","item","type","toV10","modules"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// migrate a storage hasher type\n// see https://github.com/paritytech/substrate/pull/4462\n\n/** @internal */\nfunction createStorageHasher(registry, hasher) {\n  // Blake2_128_Concat has been added at index 2, so we increment all the\n  // indexes greater than 2\n  if (hasher.toNumber() >= 2) {\n    return registry.createType('StorageHasherV10', hasher.toNumber() + 1);\n  }\n\n  return registry.createType('StorageHasherV10', hasher);\n}\n/** @internal */\n\n\nfunction createStorageType(registry, entryType) {\n  if (entryType.isMap) {\n    return [_objectSpread(_objectSpread({}, entryType.asMap), {}, {\n      hasher: createStorageHasher(registry, entryType.asMap.hasher)\n    }), 1];\n  }\n\n  if (entryType.isDoubleMap) {\n    return [_objectSpread(_objectSpread({}, entryType.asDoubleMap), {}, {\n      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),\n      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)\n    }), 2];\n  }\n\n  return [entryType.asPlain, 0];\n}\n/** @internal */\n\n\nfunction convertModule(registry, mod) {\n  const storage = mod.storage.unwrapOr(null);\n  return registry.createType('ModuleMetadataV10', _objectSpread(_objectSpread({}, mod), {}, {\n    storage: storage ? _objectSpread(_objectSpread({}, storage), {}, {\n      items: storage.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n        type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))\n      }))\n    }) : null\n  }));\n}\n/** @internal */\n\n\nexport function toV10(registry, {\n  modules\n}) {\n  return registry.createType('MetadataV10', {\n    modules: modules.map(mod => convertModule(registry, mod))\n  });\n}"]},"metadata":{},"sourceType":"module"}