{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { Enum } from \"../codec/Enum.js\";\n/** @internal */\n\nfunction decodeDataU8a(registry, value) {\n  const indicator = value[0];\n\n  if (!indicator) {\n    return [undefined, undefined];\n  } else if (indicator >= 1 && indicator <= 33) {\n    const length = indicator - 1;\n    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)\n\n    return [registry.createType('Raw', data), 1];\n  } else if (indicator >= 34 && indicator <= 37) {\n    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2\n  }\n\n  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);\n}\n/** @internal */\n\n\nfunction decodeData(registry, value) {\n  if (!value) {\n    return [undefined, undefined];\n  } else if (isU8a(value) || isString(value)) {\n    return decodeDataU8a(registry, u8aToU8a(value));\n  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding\n\n\n  return [value, undefined];\n}\n/**\n * @name Data\n * @description\n * A [[Data]] container with node, raw or hashed data\n */\n\n\nexport class Data extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      None: 'Null',\n      // 0\n      Raw: 'Bytes',\n      // 1\n      // eslint-disable-next-line sort-keys\n      BlakeTwo256: 'H256',\n      // 2\n      Sha256: 'H256',\n      // 3\n      // eslint-disable-next-line sort-keys\n      Keccak256: 'H256',\n      // 4\n      ShaThree256: 'H256' // 5\n\n    }, ...decodeData(registry, value));\n    assert(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');\n  }\n\n  get asBlakeTwo256() {\n    return this.value;\n  }\n\n  get asKeccak256() {\n    return this.value;\n  }\n\n  get asRaw() {\n    return this.value;\n  }\n\n  get asSha256() {\n    return this.value;\n  }\n\n  get asShaThree256() {\n    return this.value;\n  }\n\n  get isBlakeTwo256() {\n    return this.index === 2;\n  }\n\n  get isKeccak256() {\n    return this.index === 4;\n  }\n\n  get isNone() {\n    return this.index === 0;\n  }\n\n  get isRaw() {\n    return this.index === 1;\n  }\n\n  get isSha256() {\n    return this.index === 3;\n  }\n\n  get isShaThree256() {\n    return this.index === 5;\n  }\n  /**\n   * @description The encoded length\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n\n\n  toU8a() {\n    if (this.index === 0) {\n      return new Uint8Array(1);\n    } else if (this.index === 1) {\n      // don't add the length, just the data\n      const data = this.value.toU8a(true);\n      const length = Math.min(data.length, 32);\n      const u8a = new Uint8Array(length + 1);\n      u8a.set([length + 1], 0);\n      u8a.set(data.subarray(0, length), 1);\n      return u8a;\n    } // otherwise we simply have a hash\n\n\n    const u8a = new Uint8Array(33);\n    u8a.set([this.index + 32], 0);\n    u8a.set(this.value.toU8a(), 1);\n    return u8a;\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/primitive/Data.js"],"names":["assert","isString","isU8a","u8aToU8a","Enum","decodeDataU8a","registry","value","indicator","undefined","length","data","subarray","createType","Error","decodeData","Data","constructor","None","Raw","BlakeTwo256","Sha256","Keccak256","ShaThree256","isRaw","asRaw","asBlakeTwo256","asKeccak256","asSha256","asShaThree256","isBlakeTwo256","index","isKeccak256","isNone","isSha256","isShaThree256","encodedLength","toU8a","Uint8Array","Math","min","u8a","set"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isString, isU8a, u8aToU8a } from '@polkadot/util';\nimport { Enum } from \"../codec/Enum.js\";\n\n/** @internal */\nfunction decodeDataU8a(registry, value) {\n  const indicator = value[0];\n\n  if (!indicator) {\n    return [undefined, undefined];\n  } else if (indicator >= 1 && indicator <= 33) {\n    const length = indicator - 1;\n    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)\n\n    return [registry.createType('Raw', data), 1];\n  } else if (indicator >= 34 && indicator <= 37) {\n    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2\n  }\n\n  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);\n}\n/** @internal */\n\n\nfunction decodeData(registry, value) {\n  if (!value) {\n    return [undefined, undefined];\n  } else if (isU8a(value) || isString(value)) {\n    return decodeDataU8a(registry, u8aToU8a(value));\n  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding\n\n\n  return [value, undefined];\n}\n/**\n * @name Data\n * @description\n * A [[Data]] container with node, raw or hashed data\n */\n\n\nexport class Data extends Enum {\n  constructor(registry, value) {\n    super(registry, {\n      None: 'Null',\n      // 0\n      Raw: 'Bytes',\n      // 1\n      // eslint-disable-next-line sort-keys\n      BlakeTwo256: 'H256',\n      // 2\n      Sha256: 'H256',\n      // 3\n      // eslint-disable-next-line sort-keys\n      Keccak256: 'H256',\n      // 4\n      ShaThree256: 'H256' // 5\n\n    }, ...decodeData(registry, value));\n    assert(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');\n  }\n\n  get asBlakeTwo256() {\n    return this.value;\n  }\n\n  get asKeccak256() {\n    return this.value;\n  }\n\n  get asRaw() {\n    return this.value;\n  }\n\n  get asSha256() {\n    return this.value;\n  }\n\n  get asShaThree256() {\n    return this.value;\n  }\n\n  get isBlakeTwo256() {\n    return this.index === 2;\n  }\n\n  get isKeccak256() {\n    return this.index === 4;\n  }\n\n  get isNone() {\n    return this.index === 0;\n  }\n\n  get isRaw() {\n    return this.index === 1;\n  }\n\n  get isSha256() {\n    return this.index === 3;\n  }\n\n  get isShaThree256() {\n    return this.index === 5;\n  }\n  /**\n   * @description The encoded length\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n\n\n  toU8a() {\n    if (this.index === 0) {\n      return new Uint8Array(1);\n    } else if (this.index === 1) {\n      // don't add the length, just the data\n      const data = this.value.toU8a(true);\n      const length = Math.min(data.length, 32);\n      const u8a = new Uint8Array(length + 1);\n      u8a.set([length + 1], 0);\n      u8a.set(data.subarray(0, length), 1);\n      return u8a;\n    } // otherwise we simply have a hash\n\n\n    const u8a = new Uint8Array(33);\n    u8a.set([this.index + 32], 0);\n    u8a.set(this.value.toU8a(), 1);\n    return u8a;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}