{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aConcat } from '@polkadot/util';\nimport { secp256k1Hasher } from \"../secp256k1/hasher.js\";\nimport { encodeAddress } from \"./encode.js\";\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\n\nexport function evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {\n  const wrapError = message => `Converting ${evmAddress}: ${message}`;\n\n  const message = u8aConcat('evm:', evmAddress);\n\n  if (message.length !== 24) {\n    throw new Error(wrapError('Invalid evm address length'));\n  }\n\n  const address = secp256k1Hasher(hashType, message);\n  return encodeAddress(address, ss58Format);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/address/evmToAddress.js"],"names":["u8aConcat","secp256k1Hasher","encodeAddress","evmToAddress","evmAddress","ss58Format","hashType","wrapError","message","length","Error","address"],"mappings":"AAAA;AACA;AACA,SAASA,SAAT,QAA0B,gBAA1B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,UAAlC,EAA8CC,QAAQ,GAAG,QAAzD,EAAmE;AACxE,QAAMC,SAAS,GAAGC,OAAO,IAAK,cAAaJ,UAAW,KAAII,OAAQ,EAAlE;;AAEA,QAAMA,OAAO,GAAGR,SAAS,CAAC,MAAD,EAASI,UAAT,CAAzB;;AAEA,MAAII,OAAO,CAACC,MAAR,KAAmB,EAAvB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAUH,SAAS,CAAC,4BAAD,CAAnB,CAAN;AACD;;AAED,QAAMI,OAAO,GAAGV,eAAe,CAACK,QAAD,EAAWE,OAAX,CAA/B;AACA,SAAON,aAAa,CAACS,OAAD,EAAUN,UAAV,CAApB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aConcat } from '@polkadot/util';\nimport { secp256k1Hasher } from \"../secp256k1/hasher.js\";\nimport { encodeAddress } from \"./encode.js\";\n/**\n * @name evmToAddress\n * @summary Converts an EVM address to its corresponding SS58 address.\n */\n\nexport function evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {\n  const wrapError = message => `Converting ${evmAddress}: ${message}`;\n\n  const message = u8aConcat('evm:', evmAddress);\n\n  if (message.length !== 24) {\n    throw new Error(wrapError('Invalid evm address length'));\n  }\n\n  const address = secp256k1Hasher(hashType, message);\n  return encodeAddress(address, ss58Format);\n}"]},"metadata":{},"sourceType":"module"}