{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { combineLatest, map, switchMap } from 'rxjs';\nimport { BN, BN_ZERO } from '@polkadot/util';\nimport { memo } from \"../util/index.js\";\nconst QUERY_OPTS = {\n  withDestination: true,\n  withLedger: true,\n  withNominations: true,\n  withPrefs: true\n};\n\nfunction groupByEra(list) {\n  return list.reduce((map, {\n    era,\n    value\n  }) => {\n    const key = era.toString();\n    map[key] = (map[key] || BN_ZERO).add(value.unwrap());\n    return map;\n  }, {});\n}\n\nfunction calculateUnlocking(api, stakingLedger, sessionInfo) {\n  const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({\n    era\n  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({\n    remainingEras: new BN(eraString).isub(sessionInfo.activeEra),\n    value: api.registry.createType('Balance', value)\n  }));\n  return results.length ? results : undefined;\n}\n\nfunction redeemableSum(api, stakingLedger, sessionInfo) {\n  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {\n    era,\n    value\n  }) => {\n    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;\n  }, new BN(0)));\n}\n\nfunction parseResult(api, sessionInfo, keys, query) {\n  return _objectSpread(_objectSpread(_objectSpread({}, keys), query), {}, {\n    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),\n    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)\n  });\n}\n/**\n * @description From a list of stashes, fill in all the relevant staking details\n */\n\n\nexport function accounts(instanceId, api) {\n  return memo(instanceId, accountIds => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(([keys, queries]) => queries.map((query, index) => parseResult(api, sessionInfo, keys[index], query)))))));\n}\n/**\n * @description From a stash, retrieve the controllerId and fill in all the relevant staking details\n */\n\nexport function account(instanceId, api) {\n  return memo(instanceId, accountId => api.derive.staking.accounts([accountId]).pipe(map(([first]) => first)));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/account.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","combineLatest","map","switchMap","BN","BN_ZERO","memo","QUERY_OPTS","withDestination","withLedger","withNominations","withPrefs","groupByEra","list","reduce","era","value","toString","add","unwrap","calculateUnlocking","api","stakingLedger","sessionInfo","results","entries","unlocking","gt","activeEra","eraString","remainingEras","isub","registry","createType","undefined","redeemableSum","total","gte","iadd","parseResult","query","redeemable","accounts","instanceId","accountIds","derive","session","info","pipe","staking","keysMulti","queryMulti","queries","index","account","accountId","first"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, switchMap } from 'rxjs';\nimport { BN, BN_ZERO } from '@polkadot/util';\nimport { memo } from \"../util/index.js\";\nconst QUERY_OPTS = {\n  withDestination: true,\n  withLedger: true,\n  withNominations: true,\n  withPrefs: true\n};\n\nfunction groupByEra(list) {\n  return list.reduce((map, {\n    era,\n    value\n  }) => {\n    const key = era.toString();\n    map[key] = (map[key] || BN_ZERO).add(value.unwrap());\n    return map;\n  }, {});\n}\n\nfunction calculateUnlocking(api, stakingLedger, sessionInfo) {\n  const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({\n    era\n  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({\n    remainingEras: new BN(eraString).isub(sessionInfo.activeEra),\n    value: api.registry.createType('Balance', value)\n  }));\n  return results.length ? results : undefined;\n}\n\nfunction redeemableSum(api, stakingLedger, sessionInfo) {\n  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {\n    era,\n    value\n  }) => {\n    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;\n  }, new BN(0)));\n}\n\nfunction parseResult(api, sessionInfo, keys, query) {\n  return _objectSpread(_objectSpread(_objectSpread({}, keys), query), {}, {\n    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),\n    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)\n  });\n}\n/**\n * @description From a list of stashes, fill in all the relevant staking details\n */\n\n\nexport function accounts(instanceId, api) {\n  return memo(instanceId, accountIds => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(([keys, queries]) => queries.map((query, index) => parseResult(api, sessionInfo, keys[index], query)))))));\n}\n/**\n * @description From a stash, retrieve the controllerId and fill in all the relevant staking details\n */\n\nexport function account(instanceId, api) {\n  return memo(instanceId, accountId => api.derive.staking.accounts([accountId]).pipe(map(([first]) => first)));\n}"]},"metadata":{},"sourceType":"module"}