{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aIsWrapped, u8aToU8a, u8aUnwrapBytes, u8aWrapBytes } from '@polkadot/util';\nimport { decodeAddress } from \"../address/decode.js\";\nimport { naclVerify } from \"../nacl/verify.js\";\nimport { schnorrkelVerify } from \"../schnorrkel/verify.js\";\nimport { secp256k1Verify } from \"../secp256k1/verify.js\";\n\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', naclVerify], ['sr25519', schnorrkelVerify], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}) {\n  assert([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, VERIFIERS_ECDSA).isValid,\n      ed25519: () => naclVerify(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => schnorrkelVerify(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction getVerifyFn(signature) {\n  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;\n}\n\nexport function signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = u8aToU8a(signature);\n  assert([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const publicKey = decodeAddress(addressOrPublicKey);\n  const input = {\n    message: u8aToU8a(message),\n    publicKey,\n    signature: signatureU8a\n  };\n  const result = {\n    crypto: 'none',\n    isValid: false,\n    isWrapped: u8aIsWrapped(input.message, true),\n    publicKey\n  };\n  const isWrappedBytes = u8aIsWrapped(input.message, false);\n  const verifyFn = getVerifyFn(signatureU8a);\n  verifyFn(result, input);\n\n  if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {\n    return result;\n  }\n\n  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);\n  return verifyFn(result, input);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/signature/verify.js"],"names":["assert","u8aIsWrapped","u8aToU8a","u8aUnwrapBytes","u8aWrapBytes","decodeAddress","naclVerify","schnorrkelVerify","secp256k1Verify","secp256k1VerifyHasher","hashType","message","signature","publicKey","VERIFIERS_ECDSA","VERIFIERS","CRYPTO_TYPES","verifyDetect","result","verifiers","isValid","some","crypto","verify","error","verifyMultisig","includes","type","ecdsa","subarray","ed25519","none","Error","sr25519","getVerifyFn","length","signatureVerify","addressOrPublicKey","signatureU8a","input","isWrapped","isWrappedBytes","verifyFn"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aIsWrapped, u8aToU8a, u8aUnwrapBytes, u8aWrapBytes } from '@polkadot/util';\nimport { decodeAddress } from \"../address/decode.js\";\nimport { naclVerify } from \"../nacl/verify.js\";\nimport { schnorrkelVerify } from \"../schnorrkel/verify.js\";\nimport { secp256k1Verify } from \"../secp256k1/verify.js\";\n\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', naclVerify], ['sr25519', schnorrkelVerify], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}) {\n  assert([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, VERIFIERS_ECDSA).isValid,\n      ed25519: () => naclVerify(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => schnorrkelVerify(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction getVerifyFn(signature) {\n  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;\n}\n\nexport function signatureVerify(message, signature, addressOrPublicKey) {\n  const signatureU8a = u8aToU8a(signature);\n  assert([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const publicKey = decodeAddress(addressOrPublicKey);\n  const input = {\n    message: u8aToU8a(message),\n    publicKey,\n    signature: signatureU8a\n  };\n  const result = {\n    crypto: 'none',\n    isValid: false,\n    isWrapped: u8aIsWrapped(input.message, true),\n    publicKey\n  };\n  const isWrappedBytes = u8aIsWrapped(input.message, false);\n  const verifyFn = getVerifyFn(signatureU8a);\n  verifyFn(result, input);\n\n  if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {\n    return result;\n  }\n\n  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);\n  return verifyFn(result, input);\n}"]},"metadata":{},"sourceType":"module"}