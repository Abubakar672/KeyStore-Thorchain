{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable } from 'rxjs';\nimport { memoize } from '@polkadot/util';\nimport { drr } from \"./drr.js\"; // Wraps a derive, doing 2 things to optimize calls -\n//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed\n//   2. wraps the observable in a drr() (which includes an unsub delay)\n\n/** @internal */\n\nexport function memo(instanceId, inner) {\n  const options = {\n    getInstanceId: () => instanceId\n  };\n  const cached = memoize((...params) => new Observable(observer => {\n    const subscription = inner(...params).subscribe(observer);\n    return () => {\n      cached.unmemoize(...params);\n      subscription.unsubscribe();\n    };\n  }).pipe(drr()), options);\n  return cached;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/rpc-core/util/memo.js"],"names":["Observable","memoize","drr","memo","instanceId","inner","options","getInstanceId","cached","params","observer","subscription","subscribe","unmemoize","unsubscribe","pipe"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,QAA2B,MAA3B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,GAAT,QAAoB,UAApB,C,CACA;AACA;AACA;;AAEA;;AACA,OAAO,SAASC,IAAT,CAAcC,UAAd,EAA0BC,KAA1B,EAAiC;AACtC,QAAMC,OAAO,GAAG;AACdC,IAAAA,aAAa,EAAE,MAAMH;AADP,GAAhB;AAGA,QAAMI,MAAM,GAAGP,OAAO,CAAC,CAAC,GAAGQ,MAAJ,KAAe,IAAIT,UAAJ,CAAeU,QAAQ,IAAI;AAC/D,UAAMC,YAAY,GAAGN,KAAK,CAAC,GAAGI,MAAJ,CAAL,CAAiBG,SAAjB,CAA2BF,QAA3B,CAArB;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACK,SAAP,CAAiB,GAAGJ,MAApB;AACAE,MAAAA,YAAY,CAACG,WAAb;AACD,KAHD;AAID,GANqC,EAMnCC,IANmC,CAM9Bb,GAAG,EAN2B,CAAhB,EAMNI,OANM,CAAtB;AAOA,SAAOE,MAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable } from 'rxjs';\nimport { memoize } from '@polkadot/util';\nimport { drr } from \"./drr.js\";\n// Wraps a derive, doing 2 things to optimize calls -\n//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed\n//   2. wraps the observable in a drr() (which includes an unsub delay)\n\n/** @internal */\nexport function memo(instanceId, inner) {\n  const options = {\n    getInstanceId: () => instanceId\n  };\n  const cached = memoize((...params) => new Observable(observer => {\n    const subscription = inner(...params).subscribe(observer);\n    return () => {\n      cached.unmemoize(...params);\n      subscription.unsubscribe();\n    };\n  }).pipe(drr()), options);\n  return cached;\n}"]},"metadata":{},"sourceType":"module"}