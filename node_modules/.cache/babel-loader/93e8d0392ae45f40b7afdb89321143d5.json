{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToU8a } from '@polkadot/util';\nimport { isReady, twox } from '@polkadot/wasm-crypto';\nimport xxhash64AsBn from \"./xxhash64/asBn.js\";\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\n\nexport function xxhashAsU8a(data, bitLength = 64, onlyJs = false) {\n  const iterations = Math.ceil(bitLength / 64);\n\n  if (isReady() && !onlyJs) {\n    return twox(u8aToU8a(data), iterations);\n  }\n\n  const u8a = new Uint8Array(Math.ceil(bitLength / 8));\n\n  for (let seed = 0; seed < iterations; seed++) {\n    u8a.set(xxhash64AsBn(data, seed).toArray('le', 8), seed * 8);\n  }\n\n  return u8a;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/xxhash/asU8a.js"],"names":["u8aToU8a","isReady","twox","xxhash64AsBn","xxhashAsU8a","data","bitLength","onlyJs","iterations","Math","ceil","u8a","Uint8Array","seed","set","toArray"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,SAAS,GAAG,EAAvC,EAA2CC,MAAM,GAAG,KAApD,EAA2D;AAChE,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAG,EAAtB,CAAnB;;AAEA,MAAIL,OAAO,MAAM,CAACM,MAAlB,EAA0B;AACxB,WAAOL,IAAI,CAACF,QAAQ,CAACK,IAAD,CAAT,EAAiBG,UAAjB,CAAX;AACD;;AAED,QAAMG,GAAG,GAAG,IAAIC,UAAJ,CAAeH,IAAI,CAACC,IAAL,CAAUJ,SAAS,GAAG,CAAtB,CAAf,CAAZ;;AAEA,OAAK,IAAIO,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGL,UAA1B,EAAsCK,IAAI,EAA1C,EAA8C;AAC5CF,IAAAA,GAAG,CAACG,GAAJ,CAAQX,YAAY,CAACE,IAAD,EAAOQ,IAAP,CAAZ,CAAyBE,OAAzB,CAAiC,IAAjC,EAAuC,CAAvC,CAAR,EAAmDF,IAAI,GAAG,CAA1D;AACD;;AAED,SAAOF,GAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToU8a } from '@polkadot/util';\nimport { isReady, twox } from '@polkadot/wasm-crypto';\nimport xxhash64AsBn from \"./xxhash64/asBn.js\";\n/**\n * @name xxhashAsU8a\n * @summary Creates a xxhash64 u8a from the input.\n * @description\n * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { xxhashAsU8a } from '@polkadot/util-crypto';\n *\n * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999\n * ```\n */\n\nexport function xxhashAsU8a(data, bitLength = 64, onlyJs = false) {\n  const iterations = Math.ceil(bitLength / 64);\n\n  if (isReady() && !onlyJs) {\n    return twox(u8aToU8a(data), iterations);\n  }\n\n  const u8a = new Uint8Array(Math.ceil(bitLength / 8));\n\n  for (let seed = 0; seed < iterations; seed++) {\n    u8a.set(xxhash64AsBn(data, seed).toArray('le', 8), seed * 8);\n  }\n\n  return u8a;\n}"]},"metadata":{},"sourceType":"module"}