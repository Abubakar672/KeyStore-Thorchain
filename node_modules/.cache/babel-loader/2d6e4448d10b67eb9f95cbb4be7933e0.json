{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { l } from \"./logging.js\";\nexport function filterEvents(extHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);\n    }\n\n    return;\n  }\n\n  return allEvents.filter(({\n    phase\n  }) => // only ApplyExtrinsic has the extrinsic index\n  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api/util/filterEvents.js"],"names":["l","filterEvents","extHash","block","extrinsics","header","allEvents","status","myHash","toHex","allHashes","map","ext","hash","index","indexOf","isInBlock","warn","join","filter","phase","isApplyExtrinsic","asApplyExtrinsic","eqn"],"mappings":"AAAA;AACA;AACA,SAASA,CAAT,QAAkB,cAAlB;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AACpCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UADK;AAELC,IAAAA;AAFK;AAD6B,CAA/B,EAKJC,SALI,EAKOC,MALP,EAKe;AACpB;AACA,QAAMC,MAAM,GAAGN,OAAO,CAACO,KAAR,EAAf;AACA,QAAMC,SAAS,GAAGN,UAAU,CAACO,GAAX,CAAeC,GAAG,IAAIA,GAAG,CAACC,IAAJ,CAASJ,KAAT,EAAtB,CAAlB,CAHoB,CAGuC;;AAE3D,QAAMK,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBP,MAAlB,CAAd,CALoB,CAKqB;;AAEzC,MAAIM,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA,QAAIP,MAAM,CAACS,SAAX,EAAsB;AACpBhB,MAAAA,CAAC,CAACiB,IAAF,CAAQ,SAAQZ,MAAM,CAACQ,IAAP,CAAYJ,KAAZ,EAAoB,8BAA6BD,MAAO,WAAUE,SAAS,CAACQ,IAAV,CAAe,IAAf,CAAqB,EAAvG;AACD;;AAED;AACD;;AAED,SAAOZ,SAAS,CAACa,MAAV,CAAiB,CAAC;AACvBC,IAAAA;AADuB,GAAD,KAElB;AACNA,EAAAA,KAAK,CAACC,gBAAN,IAA0BD,KAAK,CAACE,gBAAN,CAAuBC,GAAvB,CAA2BT,KAA3B,CAHnB,CAAP;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { l } from \"./logging.js\";\nexport function filterEvents(extHash, {\n  block: {\n    extrinsics,\n    header\n  }\n}, allEvents, status) {\n  // extrinsics to hashes\n  const myHash = extHash.toHex();\n  const allHashes = extrinsics.map(ext => ext.hash.toHex()); // find the index of our extrinsic in the block\n\n  const index = allHashes.indexOf(myHash); // if we do get the block after finalized, it _should_ be there\n\n  if (index === -1) {\n    // only warn on filtering with isInBlock (finalization finalizes after)\n    if (status.isInBlock) {\n      l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${myHash} inside ${allHashes.join(', ')}`);\n    }\n\n    return;\n  }\n\n  return allEvents.filter(({\n    phase\n  }) => // only ApplyExtrinsic has the extrinsic index\n  phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));\n}"]},"metadata":{},"sourceType":"module"}