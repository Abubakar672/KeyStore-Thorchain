{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, BN, bnToU8a, isU8a } from '@polkadot/util';\nimport { secp256k1 } from \"./secp256k1.js\";\nconst ecparams = secp256k1.curve;\nexport function secp256k1PrivateKeyTweakAdd(seckey, tweak) {\n  assert(isU8a(seckey) && seckey.length === 32, 'Expected seckey to be an Uint8Array with length 32');\n  assert(isU8a(tweak) && tweak.length === 32, 'Expected tweak to be an Uint8Array with length 32');\n  const bn = new BN(tweak);\n  assert(bn.cmp(ecparams.n) < 0, 'Tweak parameter is out of range');\n  bn.iadd(new BN(seckey));\n\n  if (bn.cmp(ecparams.n) >= 0) {\n    bn.isub(ecparams.n);\n  }\n\n  assert(!bn.isZero(), 'Invalid resulting private key');\n  return bnToU8a(bn, {\n    bitLength: 256,\n    isLe: false\n  });\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js"],"names":["assert","BN","bnToU8a","isU8a","secp256k1","ecparams","curve","secp256k1PrivateKeyTweakAdd","seckey","tweak","length","bn","cmp","n","iadd","isub","isZero","bitLength","isLe"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,EAAjB,EAAqBC,OAArB,EAA8BC,KAA9B,QAA2C,gBAA3C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,MAAMC,QAAQ,GAAGD,SAAS,CAACE,KAA3B;AACA,OAAO,SAASC,2BAAT,CAAqCC,MAArC,EAA6CC,KAA7C,EAAoD;AACzDT,EAAAA,MAAM,CAACG,KAAK,CAACK,MAAD,CAAL,IAAiBA,MAAM,CAACE,MAAP,KAAkB,EAApC,EAAwC,oDAAxC,CAAN;AACAV,EAAAA,MAAM,CAACG,KAAK,CAACM,KAAD,CAAL,IAAgBA,KAAK,CAACC,MAAN,KAAiB,EAAlC,EAAsC,mDAAtC,CAAN;AACA,QAAMC,EAAE,GAAG,IAAIV,EAAJ,CAAOQ,KAAP,CAAX;AACAT,EAAAA,MAAM,CAACW,EAAE,CAACC,GAAH,CAAOP,QAAQ,CAACQ,CAAhB,IAAqB,CAAtB,EAAyB,iCAAzB,CAAN;AACAF,EAAAA,EAAE,CAACG,IAAH,CAAQ,IAAIb,EAAJ,CAAOO,MAAP,CAAR;;AAEA,MAAIG,EAAE,CAACC,GAAH,CAAOP,QAAQ,CAACQ,CAAhB,KAAsB,CAA1B,EAA6B;AAC3BF,IAAAA,EAAE,CAACI,IAAH,CAAQV,QAAQ,CAACQ,CAAjB;AACD;;AAEDb,EAAAA,MAAM,CAAC,CAACW,EAAE,CAACK,MAAH,EAAF,EAAe,+BAAf,CAAN;AACA,SAAOd,OAAO,CAACS,EAAD,EAAK;AACjBM,IAAAA,SAAS,EAAE,GADM;AAEjBC,IAAAA,IAAI,EAAE;AAFW,GAAL,CAAd;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, BN, bnToU8a, isU8a } from '@polkadot/util';\nimport { secp256k1 } from \"./secp256k1.js\";\nconst ecparams = secp256k1.curve;\nexport function secp256k1PrivateKeyTweakAdd(seckey, tweak) {\n  assert(isU8a(seckey) && seckey.length === 32, 'Expected seckey to be an Uint8Array with length 32');\n  assert(isU8a(tweak) && tweak.length === 32, 'Expected tweak to be an Uint8Array with length 32');\n  const bn = new BN(tweak);\n  assert(bn.cmp(ecparams.n) < 0, 'Tweak parameter is out of range');\n  bn.iadd(new BN(seckey));\n\n  if (bn.cmp(ecparams.n) >= 0) {\n    bn.isub(ecparams.n);\n  }\n\n  assert(!bn.isZero(), 'Invalid resulting private key');\n  return bnToU8a(bn, {\n    bitLength: 256,\n    isLe: false\n  });\n}"]},"metadata":{},"sourceType":"module"}