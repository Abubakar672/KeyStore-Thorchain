{"ast":null,"code":"// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aConcat } from '@polkadot/util';\nimport { naclEncrypt, scryptEncode, scryptToU8a } from '@polkadot/util-crypto';\nimport { PKCS8_DIVIDER, PKCS8_HEADER } from \"./defaults.js\";\nexport function encodePair({\n  publicKey,\n  secretKey\n}, passphrase) {\n  assert(secretKey, 'Expected a valid secretKey to be passed to encode');\n  const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);\n\n  if (!passphrase) {\n    return encoded;\n  }\n\n  const {\n    params,\n    password,\n    salt\n  } = scryptEncode(passphrase);\n  const {\n    encrypted,\n    nonce\n  } = naclEncrypt(encoded, password.subarray(0, 32));\n  return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/keyring/pair/encode.js"],"names":["assert","u8aConcat","naclEncrypt","scryptEncode","scryptToU8a","PKCS8_DIVIDER","PKCS8_HEADER","encodePair","publicKey","secretKey","passphrase","encoded","params","password","salt","encrypted","nonce","subarray"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,gBAAlC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,uBAAvD;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;AACA,OAAO,SAASC,UAAT,CAAoB;AACzBC,EAAAA,SADyB;AAEzBC,EAAAA;AAFyB,CAApB,EAGJC,UAHI,EAGQ;AACbV,EAAAA,MAAM,CAACS,SAAD,EAAY,mDAAZ,CAAN;AACA,QAAME,OAAO,GAAGV,SAAS,CAACK,YAAD,EAAeG,SAAf,EAA0BJ,aAA1B,EAAyCG,SAAzC,CAAzB;;AAEA,MAAI,CAACE,UAAL,EAAiB;AACf,WAAOC,OAAP;AACD;;AAED,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA;AAHI,MAIFX,YAAY,CAACO,UAAD,CAJhB;AAKA,QAAM;AACJK,IAAAA,SADI;AAEJC,IAAAA;AAFI,MAGFd,WAAW,CAACS,OAAD,EAAUE,QAAQ,CAACI,QAAT,CAAkB,CAAlB,EAAqB,EAArB,CAAV,CAHf;AAIA,SAAOhB,SAAS,CAACG,WAAW,CAACU,IAAD,EAAOF,MAAP,CAAZ,EAA4BI,KAA5B,EAAmCD,SAAnC,CAAhB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/keyring authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aConcat } from '@polkadot/util';\nimport { naclEncrypt, scryptEncode, scryptToU8a } from '@polkadot/util-crypto';\nimport { PKCS8_DIVIDER, PKCS8_HEADER } from \"./defaults.js\";\nexport function encodePair({\n  publicKey,\n  secretKey\n}, passphrase) {\n  assert(secretKey, 'Expected a valid secretKey to be passed to encode');\n  const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);\n\n  if (!passphrase) {\n    return encoded;\n  }\n\n  const {\n    params,\n    password,\n    salt\n  } = scryptEncode(passphrase);\n  const {\n    encrypted,\n    nonce\n  } = naclEncrypt(encoded, password.subarray(0, 32));\n  return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);\n}"]},"metadata":{},"sourceType":"module"}