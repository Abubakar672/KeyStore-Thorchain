{"ast":null,"code":"/**\n\tC-like unsigned 64 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;\n\n(function (root) {\n  // Local cache for typical radices\n  var radixPowerCache = {\n    16: UINT64(Math.pow(16, 5)),\n    10: UINT64(Math.pow(10, 5)),\n    2: UINT64(Math.pow(2, 5))\n  };\n  var radixCache = {\n    16: UINT64(16),\n    10: UINT64(10),\n    2: UINT64(2)\n  };\n  /**\n   *\tRepresents an unsigned 64 bits integer\n   * @constructor\n   * @param {Number} first low bits (8)\n   * @param {Number} second low bits (8)\n   * @param {Number} first high bits (8)\n   * @param {Number} second high bits (8)\n   * or\n   * @param {Number} low bits (32)\n   * @param {Number} high bits (32)\n   * or\n   * @param {String|Number} integer as a string \t\t | integer as a number\n   * @param {Number|Undefined} radix (optional, default=10)\n   * @return \n   */\n\n  function UINT64(a00, a16, a32, a48) {\n    if (!(this instanceof UINT64)) return new UINT64(a00, a16, a32, a48);\n    this.remainder = null;\n    if (typeof a00 == 'string') return fromString.call(this, a00, a16);\n    if (typeof a16 == 'undefined') return fromNumber.call(this, a00);\n    fromBits.apply(this, arguments);\n  }\n  /**\n   * Set the current _UINT64_ object with its low and high bits\n   * @method fromBits\n   * @param {Number} first low bits (8)\n   * @param {Number} second low bits (8)\n   * @param {Number} first high bits (8)\n   * @param {Number} second high bits (8)\n   * or\n   * @param {Number} low bits (32)\n   * @param {Number} high bits (32)\n   * @return ThisExpression\n   */\n\n\n  function fromBits(a00, a16, a32, a48) {\n    if (typeof a32 == 'undefined') {\n      this._a00 = a00 & 0xFFFF;\n      this._a16 = a00 >>> 16;\n      this._a32 = a16 & 0xFFFF;\n      this._a48 = a16 >>> 16;\n      return this;\n    }\n\n    this._a00 = a00 | 0;\n    this._a16 = a16 | 0;\n    this._a32 = a32 | 0;\n    this._a48 = a48 | 0;\n    return this;\n  }\n\n  UINT64.prototype.fromBits = fromBits;\n  /**\n   * Set the current _UINT64_ object from a number\n   * @method fromNumber\n   * @param {Number} number\n   * @return ThisExpression\n   */\n\n  function fromNumber(value) {\n    this._a00 = value & 0xFFFF;\n    this._a16 = value >>> 16;\n    this._a32 = 0;\n    this._a48 = 0;\n    return this;\n  }\n\n  UINT64.prototype.fromNumber = fromNumber;\n  /**\n   * Set the current _UINT64_ object from a string\n   * @method fromString\n   * @param {String} integer as a string\n   * @param {Number} radix (optional, default=10)\n   * @return ThisExpression\n   */\n\n  function fromString(s, radix) {\n    radix = radix || 10;\n    this._a00 = 0;\n    this._a16 = 0;\n    this._a32 = 0;\n    this._a48 = 0;\n    /*\n    \tIn Javascript, bitwise operators only operate on the first 32 bits \n    \tof a number, even though parseInt() encodes numbers with a 53 bits \n    \tmantissa.\n    \tTherefore UINT64(<Number>) can only work on 32 bits.\n    \tThe radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)\n    \tmaximum input value is m = 32bits as 1 = 2^32 - 1\n    \tSo the maximum substring length n is:\n    \t36^(n+1) - 1 = 2^32 - 1\n    \t36^(n+1) = 2^32\n    \t(n+1)ln(36) = 32ln(2)\n    \tn = 32ln(2)/ln(36) - 1\n    \tn = 5.189644915687692\n    \tn = 5\n     */\n\n    var radixUint = radixPowerCache[radix] || new UINT64(Math.pow(radix, 5));\n\n    for (var i = 0, len = s.length; i < len; i += 5) {\n      var size = Math.min(5, len - i);\n      var value = parseInt(s.slice(i, i + size), radix);\n      this.multiply(size < 5 ? new UINT64(Math.pow(radix, size)) : radixUint).add(new UINT64(value));\n    }\n\n    return this;\n  }\n\n  UINT64.prototype.fromString = fromString;\n  /**\n   * Convert this _UINT64_ to a number (last 32 bits are dropped)\n   * @method toNumber\n   * @return {Number} the converted UINT64\n   */\n\n  UINT64.prototype.toNumber = function () {\n    return this._a16 * 65536 + this._a00;\n  };\n  /**\n   * Convert this _UINT64_ to a string\n   * @method toString\n   * @param {Number} radix (optional, default=10)\n   * @return {String} the converted UINT64\n   */\n\n\n  UINT64.prototype.toString = function (radix) {\n    radix = radix || 10;\n    var radixUint = radixCache[radix] || new UINT64(radix);\n    if (!this.gt(radixUint)) return this.toNumber().toString(radix);\n    var self = this.clone();\n    var res = new Array(64);\n\n    for (var i = 63; i >= 0; i--) {\n      self.div(radixUint);\n      res[i] = self.remainder.toNumber().toString(radix);\n      if (!self.gt(radixUint)) break;\n    }\n\n    res[i - 1] = self.toNumber().toString(radix);\n    return res.join('');\n  };\n  /**\n   * Add two _UINT64_. The current _UINT64_ stores the result\n   * @method add\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.add = function (other) {\n    var a00 = this._a00 + other._a00;\n    var a16 = a00 >>> 16;\n    a16 += this._a16 + other._a16;\n    var a32 = a16 >>> 16;\n    a32 += this._a32 + other._a32;\n    var a48 = a32 >>> 16;\n    a48 += this._a48 + other._a48;\n    this._a00 = a00 & 0xFFFF;\n    this._a16 = a16 & 0xFFFF;\n    this._a32 = a32 & 0xFFFF;\n    this._a48 = a48 & 0xFFFF;\n    return this;\n  };\n  /**\n   * Subtract two _UINT64_. The current _UINT64_ stores the result\n   * @method subtract\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.subtract = function (other) {\n    return this.add(other.clone().negate());\n  };\n  /**\n   * Multiply two _UINT64_. The current _UINT64_ stores the result\n   * @method multiply\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.multiply = function (other) {\n    /*\n    \ta = a00 + a16 + a32 + a48\n    \tb = b00 + b16 + b32 + b48\n    \ta*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)\n    \t\t= a00b00 + a00b16 + a00b32 + a00b48\n    \t\t+ a16b00 + a16b16 + a16b32 + a16b48\n    \t\t+ a32b00 + a32b16 + a32b32 + a32b48\n    \t\t+ a48b00 + a48b16 + a48b32 + a48b48\n    \t\ta16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits\n    \tso it comes down to:\n    \ta*b\t= a00b00 + a00b16 + a00b32 + a00b48\n    \t\t+ a16b00 + a16b16 + a16b32\n    \t\t+ a32b00 + a32b16\n    \t\t+ a48b00\n    \t\t= a00b00\n    \t\t+ a00b16 + a16b00\n    \t\t+ a00b32 + a16b16 + a32b00\n    \t\t+ a00b48 + a16b32 + a32b16 + a48b00\n     */\n    var a00 = this._a00;\n    var a16 = this._a16;\n    var a32 = this._a32;\n    var a48 = this._a48;\n    var b00 = other._a00;\n    var b16 = other._a16;\n    var b32 = other._a32;\n    var b48 = other._a48;\n    var c00 = a00 * b00;\n    var c16 = c00 >>> 16;\n    c16 += a00 * b16;\n    var c32 = c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c32 += a00 * b32;\n    var c48 = c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c48 += a00 * b48;\n    c48 &= 0xFFFF;\n    c48 += a16 * b32;\n    c48 &= 0xFFFF;\n    c48 += a32 * b16;\n    c48 &= 0xFFFF;\n    c48 += a48 * b00;\n    this._a00 = c00 & 0xFFFF;\n    this._a16 = c16 & 0xFFFF;\n    this._a32 = c32 & 0xFFFF;\n    this._a48 = c48 & 0xFFFF;\n    return this;\n  };\n  /**\n   * Divide two _UINT64_. The current _UINT64_ stores the result.\n   * The remainder is made available as the _remainder_ property on\n   * the _UINT64_ object. It can be null, meaning there are no remainder.\n   * @method div\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.div = function (other) {\n    if (other._a16 == 0 && other._a32 == 0 && other._a48 == 0) {\n      if (other._a00 == 0) throw Error('division by zero'); // other == 1: this\n\n      if (other._a00 == 1) {\n        this.remainder = new UINT64(0);\n        return this;\n      }\n    } // other > this: 0\n\n\n    if (other.gt(this)) {\n      this.remainder = this.clone();\n      this._a00 = 0;\n      this._a16 = 0;\n      this._a32 = 0;\n      this._a48 = 0;\n      return this;\n    } // other == this: 1\n\n\n    if (this.eq(other)) {\n      this.remainder = new UINT64(0);\n      this._a00 = 1;\n      this._a16 = 0;\n      this._a32 = 0;\n      this._a48 = 0;\n      return this;\n    } // Shift the divisor left until it is higher than the dividend\n\n\n    var _other = other.clone();\n\n    var i = -1;\n\n    while (!this.lt(_other)) {\n      // High bit can overflow the default 16bits\n      // Its ok since we right shift after this loop\n      // The overflown bit must be kept though\n      _other.shiftLeft(1, true);\n\n      i++;\n    } // Set the remainder\n\n\n    this.remainder = this.clone(); // Initialize the current result to 0\n\n    this._a00 = 0;\n    this._a16 = 0;\n    this._a32 = 0;\n    this._a48 = 0;\n\n    for (; i >= 0; i--) {\n      _other.shiftRight(1); // If shifted divisor is smaller than the dividend\n      // then subtract it from the dividend\n\n\n      if (!this.remainder.lt(_other)) {\n        this.remainder.subtract(_other); // Update the current result\n\n        if (i >= 48) {\n          this._a48 |= 1 << i - 48;\n        } else if (i >= 32) {\n          this._a32 |= 1 << i - 32;\n        } else if (i >= 16) {\n          this._a16 |= 1 << i - 16;\n        } else {\n          this._a00 |= 1 << i;\n        }\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Negate the current _UINT64_\n   * @method negate\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.negate = function () {\n    var v = (~this._a00 & 0xFFFF) + 1;\n    this._a00 = v & 0xFFFF;\n    v = (~this._a16 & 0xFFFF) + (v >>> 16);\n    this._a16 = v & 0xFFFF;\n    v = (~this._a32 & 0xFFFF) + (v >>> 16);\n    this._a32 = v & 0xFFFF;\n    this._a48 = ~this._a48 + (v >>> 16) & 0xFFFF;\n    return this;\n  };\n  /**\n  \t * @method eq\n   * @param {Object} other UINT64\n   * @return {Boolean}\n   */\n\n\n  UINT64.prototype.equals = UINT64.prototype.eq = function (other) {\n    return this._a48 == other._a48 && this._a00 == other._a00 && this._a32 == other._a32 && this._a16 == other._a16;\n  };\n  /**\n   * Greater than (strict)\n   * @method gt\n   * @param {Object} other UINT64\n   * @return {Boolean}\n   */\n\n\n  UINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {\n    if (this._a48 > other._a48) return true;\n    if (this._a48 < other._a48) return false;\n    if (this._a32 > other._a32) return true;\n    if (this._a32 < other._a32) return false;\n    if (this._a16 > other._a16) return true;\n    if (this._a16 < other._a16) return false;\n    return this._a00 > other._a00;\n  };\n  /**\n   * Less than (strict)\n   * @method lt\n   * @param {Object} other UINT64\n   * @return {Boolean}\n   */\n\n\n  UINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {\n    if (this._a48 < other._a48) return true;\n    if (this._a48 > other._a48) return false;\n    if (this._a32 < other._a32) return true;\n    if (this._a32 > other._a32) return false;\n    if (this._a16 < other._a16) return true;\n    if (this._a16 > other._a16) return false;\n    return this._a00 < other._a00;\n  };\n  /**\n   * Bitwise OR\n   * @method or\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.or = function (other) {\n    this._a00 |= other._a00;\n    this._a16 |= other._a16;\n    this._a32 |= other._a32;\n    this._a48 |= other._a48;\n    return this;\n  };\n  /**\n   * Bitwise AND\n   * @method and\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.and = function (other) {\n    this._a00 &= other._a00;\n    this._a16 &= other._a16;\n    this._a32 &= other._a32;\n    this._a48 &= other._a48;\n    return this;\n  };\n  /**\n   * Bitwise XOR\n   * @method xor\n   * @param {Object} other UINT64\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.xor = function (other) {\n    this._a00 ^= other._a00;\n    this._a16 ^= other._a16;\n    this._a32 ^= other._a32;\n    this._a48 ^= other._a48;\n    return this;\n  };\n  /**\n   * Bitwise NOT\n   * @method not\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.not = function () {\n    this._a00 = ~this._a00 & 0xFFFF;\n    this._a16 = ~this._a16 & 0xFFFF;\n    this._a32 = ~this._a32 & 0xFFFF;\n    this._a48 = ~this._a48 & 0xFFFF;\n    return this;\n  };\n  /**\n   * Bitwise shift right\n   * @method shiftRight\n   * @param {Number} number of bits to shift\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {\n    n %= 64;\n\n    if (n >= 48) {\n      this._a00 = this._a48 >> n - 48;\n      this._a16 = 0;\n      this._a32 = 0;\n      this._a48 = 0;\n    } else if (n >= 32) {\n      n -= 32;\n      this._a00 = (this._a32 >> n | this._a48 << 16 - n) & 0xFFFF;\n      this._a16 = this._a48 >> n & 0xFFFF;\n      this._a32 = 0;\n      this._a48 = 0;\n    } else if (n >= 16) {\n      n -= 16;\n      this._a00 = (this._a16 >> n | this._a32 << 16 - n) & 0xFFFF;\n      this._a16 = (this._a32 >> n | this._a48 << 16 - n) & 0xFFFF;\n      this._a32 = this._a48 >> n & 0xFFFF;\n      this._a48 = 0;\n    } else {\n      this._a00 = (this._a00 >> n | this._a16 << 16 - n) & 0xFFFF;\n      this._a16 = (this._a16 >> n | this._a32 << 16 - n) & 0xFFFF;\n      this._a32 = (this._a32 >> n | this._a48 << 16 - n) & 0xFFFF;\n      this._a48 = this._a48 >> n & 0xFFFF;\n    }\n\n    return this;\n  };\n  /**\n   * Bitwise shift left\n   * @method shiftLeft\n   * @param {Number} number of bits to shift\n   * @param {Boolean} allow overflow\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {\n    n %= 64;\n\n    if (n >= 48) {\n      this._a48 = this._a00 << n - 48;\n      this._a32 = 0;\n      this._a16 = 0;\n      this._a00 = 0;\n    } else if (n >= 32) {\n      n -= 32;\n      this._a48 = this._a16 << n | this._a00 >> 16 - n;\n      this._a32 = this._a00 << n & 0xFFFF;\n      this._a16 = 0;\n      this._a00 = 0;\n    } else if (n >= 16) {\n      n -= 16;\n      this._a48 = this._a32 << n | this._a16 >> 16 - n;\n      this._a32 = (this._a16 << n | this._a00 >> 16 - n) & 0xFFFF;\n      this._a16 = this._a00 << n & 0xFFFF;\n      this._a00 = 0;\n    } else {\n      this._a48 = this._a48 << n | this._a32 >> 16 - n;\n      this._a32 = (this._a32 << n | this._a16 >> 16 - n) & 0xFFFF;\n      this._a16 = (this._a16 << n | this._a00 >> 16 - n) & 0xFFFF;\n      this._a00 = this._a00 << n & 0xFFFF;\n    }\n\n    if (!allowOverflow) {\n      this._a48 &= 0xFFFF;\n    }\n\n    return this;\n  };\n  /**\n   * Bitwise rotate left\n   * @method rotl\n   * @param {Number} number of bits to rotate\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {\n    n %= 64;\n    if (n == 0) return this;\n\n    if (n >= 32) {\n      // A.B.C.D\n      // B.C.D.A rotl(16)\n      // C.D.A.B rotl(32)\n      var v = this._a00;\n      this._a00 = this._a32;\n      this._a32 = v;\n      v = this._a48;\n      this._a48 = this._a16;\n      this._a16 = v;\n      if (n == 32) return this;\n      n -= 32;\n    }\n\n    var high = this._a48 << 16 | this._a32;\n    var low = this._a16 << 16 | this._a00;\n\n    var _high = high << n | low >>> 32 - n;\n\n    var _low = low << n | high >>> 32 - n;\n\n    this._a00 = _low & 0xFFFF;\n    this._a16 = _low >>> 16;\n    this._a32 = _high & 0xFFFF;\n    this._a48 = _high >>> 16;\n    return this;\n  };\n  /**\n   * Bitwise rotate right\n   * @method rotr\n   * @param {Number} number of bits to rotate\n   * @return ThisExpression\n   */\n\n\n  UINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {\n    n %= 64;\n    if (n == 0) return this;\n\n    if (n >= 32) {\n      // A.B.C.D\n      // D.A.B.C rotr(16)\n      // C.D.A.B rotr(32)\n      var v = this._a00;\n      this._a00 = this._a32;\n      this._a32 = v;\n      v = this._a48;\n      this._a48 = this._a16;\n      this._a16 = v;\n      if (n == 32) return this;\n      n -= 32;\n    }\n\n    var high = this._a48 << 16 | this._a32;\n    var low = this._a16 << 16 | this._a00;\n\n    var _high = high >>> n | low << 32 - n;\n\n    var _low = low >>> n | high << 32 - n;\n\n    this._a00 = _low & 0xFFFF;\n    this._a16 = _low >>> 16;\n    this._a32 = _high & 0xFFFF;\n    this._a48 = _high >>> 16;\n    return this;\n  };\n  /**\n   * Clone the current _UINT64_\n   * @method clone\n   * @return {Object} cloned UINT64\n   */\n\n\n  UINT64.prototype.clone = function () {\n    return new UINT64(this._a00, this._a16, this._a32, this._a48);\n  };\n\n  if (typeof define != 'undefined' && define.amd) {\n    // AMD / RequireJS\n    define([], function () {\n      return UINT64;\n    });\n  } else if (typeof module != 'undefined' && module.exports) {\n    // Node.js\n    module.exports = UINT64;\n  } else {\n    // Browser\n    root['UINT64'] = UINT64;\n  }\n})(this);","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/cuint/lib/uint64.js"],"names":["root","radixPowerCache","UINT64","Math","pow","radixCache","a00","a16","a32","a48","remainder","fromString","call","fromNumber","fromBits","apply","arguments","_a00","_a16","_a32","_a48","prototype","value","s","radix","radixUint","i","len","length","size","min","parseInt","slice","multiply","add","toNumber","toString","gt","self","clone","res","Array","div","join","other","subtract","negate","b00","b16","b32","b48","c00","c16","c32","c48","Error","eq","_other","lt","shiftLeft","shiftRight","v","equals","greaterThan","lessThan","or","and","xor","not","shiftr","n","shiftl","allowOverflow","rotateLeft","rotl","high","low","_high","_low","rotateRight","rotr","define","amd","module","exports"],"mappings":"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","sourcesContent":["/**\n\tC-like unsigned 64 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t16: UINT64( Math.pow(16, 5) )\n\t,\t10: UINT64( Math.pow(10, 5) )\n\t,\t2:  UINT64( Math.pow(2, 5) )\n\t}\n\tvar radixCache = {\n\t\t16: UINT64(16)\n\t,\t10: UINT64(10)\n\t,\t2:  UINT64(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 64 bits integer\n\t * @constructor\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * or\n\t * @param {String|Number} integer as a string \t\t | integer as a number\n\t * @param {Number|Undefined} radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT64 (a00, a16, a32, a48) {\n\t\tif ( !(this instanceof UINT64) )\n\t\t\treturn new UINT64(a00, a16, a32, a48)\n\n\t\tthis.remainder = null\n\t\tif (typeof a00 == 'string')\n\t\t\treturn fromString.call(this, a00, a16)\n\n\t\tif (typeof a16 == 'undefined')\n\t\t\treturn fromNumber.call(this, a00)\n\n\t\tfromBits.apply(this, arguments)\n\t}\n\n\t/**\n\t * Set the current _UINT64_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (a00, a16, a32, a48) {\n\t\tif (typeof a32 == 'undefined') {\n\t\t\tthis._a00 = a00 & 0xFFFF\n\t\t\tthis._a16 = a00 >>> 16\n\t\t\tthis._a32 = a16 & 0xFFFF\n\t\t\tthis._a48 = a16 >>> 16\n\t\t\treturn this\n\t\t}\n\n\t\tthis._a00 = a00 | 0\n\t\tthis._a16 = a16 | 0\n\t\tthis._a32 = a32 | 0\n\t\tthis._a48 = a48 | 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT64_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._a00 = value & 0xFFFF\n\t\tthis._a16 = value >>> 16\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT64_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tradix = radix || 10\n\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\t/*\n\t\t\tIn Javascript, bitwise operators only operate on the first 32 bits \n\t\t\tof a number, even though parseInt() encodes numbers with a 53 bits \n\t\t\tmantissa.\n\t\t\tTherefore UINT64(<Number>) can only work on 32 bits.\n\t\t\tThe radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)\n\t\t\tmaximum input value is m = 32bits as 1 = 2^32 - 1\n\t\t\tSo the maximum substring length n is:\n\t\t\t36^(n+1) - 1 = 2^32 - 1\n\t\t\t36^(n+1) = 2^32\n\t\t\t(n+1)ln(36) = 32ln(2)\n\t\t\tn = 32ln(2)/ln(36) - 1\n\t\t\tn = 5.189644915687692\n\t\t\tn = 5\n\t\t */\n\t\tvar radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) )\n\n\t\tfor (var i = 0, len = s.length; i < len; i += 5) {\n\t\t\tvar size = Math.min(5, len - i)\n\t\t\tvar value = parseInt( s.slice(i, i + size), radix )\n\t\t\tthis.multiply(\n\t\t\t\t\tsize < 5\n\t\t\t\t\t\t? new UINT64( Math.pow(radix, size) )\n\t\t\t\t\t\t: radixUint\n\t\t\t\t)\n\t\t\t\t.add( new UINT64(value) )\n\t\t}\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT64_ to a number (last 32 bits are dropped)\n\t * @method toNumber\n\t * @return {Number} the converted UINT64\n\t */\n\tUINT64.prototype.toNumber = function () {\n\t\treturn (this._a16 * 65536) + this._a00\n\t}\n\n\t/**\n\t * Convert this _UINT64_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT64\n\t */\n\tUINT64.prototype.toString = function (radix) {\n\t\tradix = radix || 10\n\t\tvar radixUint = radixCache[radix] || new UINT64(radix)\n\n\t\tif ( !this.gt(radixUint) ) return this.toNumber().toString(radix)\n\n\t\tvar self = this.clone()\n\t\tvar res = new Array(64)\n\t\tfor (var i = 63; i >= 0; i--) {\n\t\t\tself.div(radixUint)\n\t\t\tres[i] = self.remainder.toNumber().toString(radix)\n\t\t\tif ( !self.gt(radixUint) ) break\n\t\t}\n\t\tres[i-1] = self.toNumber().toString(radix)\n\n\t\treturn res.join('')\n\t}\n\n\t/**\n\t * Add two _UINT64_. The current _UINT64_ stores the result\n\t * @method add\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.add = function (other) {\n\t\tvar a00 = this._a00 + other._a00\n\n\t\tvar a16 = a00 >>> 16\n\t\ta16 += this._a16 + other._a16\n\n\t\tvar a32 = a16 >>> 16\n\t\ta32 += this._a32 + other._a32\n\n\t\tvar a48 = a32 >>> 16\n\t\ta48 += this._a48 + other._a48\n\n\t\tthis._a00 = a00 & 0xFFFF\n\t\tthis._a16 = a16 & 0xFFFF\n\t\tthis._a32 = a32 & 0xFFFF\n\t\tthis._a48 = a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT64_. The current _UINT64_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.subtract = function (other) {\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT64_. The current _UINT64_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16 + a32 + a48\n\t\t\tb = b00 + b16 + b32 + b48\n\t\t\ta*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)\n\t\t\t\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32 + a16b48\n\t\t\t\t+ a32b00 + a32b16 + a32b32 + a32b48\n\t\t\t\t+ a48b00 + a48b16 + a48b32 + a48b48\n\n\t\t\ta16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits\n\t\t\tso it comes down to:\n\t\t\ta*b\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32\n\t\t\t\t+ a32b00 + a32b16\n\t\t\t\t+ a48b00\n\t\t\t\t= a00b00\n\t\t\t\t+ a00b16 + a16b00\n\t\t\t\t+ a00b32 + a16b16 + a32b00\n\t\t\t\t+ a00b48 + a16b32 + a32b16 + a48b00\n\t\t */\n\t\tvar a00 = this._a00\n\t\tvar a16 = this._a16\n\t\tvar a32 = this._a32\n\t\tvar a48 = this._a48\n\t\tvar b00 = other._a00\n\t\tvar b16 = other._a16\n\t\tvar b32 = other._a32\n\t\tvar b48 = other._a48\n\n\t\tvar c00 = a00 * b00\n\n\t\tvar c16 = c00 >>> 16\n\t\tc16 += a00 * b16\n\t\tvar c32 = c16 >>> 16\n\t\tc16 &= 0xFFFF\n\t\tc16 += a16 * b00\n\n\t\tc32 += c16 >>> 16\n\t\tc32 += a00 * b32\n\t\tvar c48 = c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a16 * b16\n\t\tc48 += c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a32 * b00\n\n\t\tc48 += c32 >>> 16\n\t\tc48 += a00 * b48\n\t\tc48 &= 0xFFFF\n\t\tc48 += a16 * b32\n\t\tc48 &= 0xFFFF\n\t\tc48 += a32 * b16\n\t\tc48 &= 0xFFFF\n\t\tc48 += a48 * b00\n\n\t\tthis._a00 = c00 & 0xFFFF\n\t\tthis._a16 = c16 & 0xFFFF\n\t\tthis._a32 = c32 & 0xFFFF\n\t\tthis._a48 = c48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT64_. The current _UINT64_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT64_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.div = function (other) {\n\t\tif ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {\n\t\t\tif (other._a00 == 0) throw Error('division by zero')\n\n\t\t\t// other == 1: this\n\t\t\tif (other._a00 == 1) {\n\t\t\t\tthis.remainder = new UINT64(0)\n\t\t\t\treturn this\n\t\t\t}\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._a00 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT64(0)\n\t\t\tthis._a00 = 1\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 48) {\n\t\t\t\t\tthis._a48 |= 1 << (i - 48)\n\t\t\t\t} else if (i >= 32) {\n\t\t\t\t\tthis._a32 |= 1 << (i - 32)\n\t\t\t\t} else if (i >= 16) {\n\t\t\t\t\tthis._a16 |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._a00 |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT64_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.negate = function () {\n\t\tvar v = ( ~this._a00 & 0xFFFF ) + 1\n\t\tthis._a00 = v & 0xFFFF\n\t\tv = (~this._a16 & 0xFFFF) + (v >>> 16)\n\t\tthis._a16 = v & 0xFFFF\n\t\tv = (~this._a32 & 0xFFFF) + (v >>> 16)\n\t\tthis._a32 = v & 0xFFFF\n\t\tthis._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\n\t * @method eq\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.equals = UINT64.prototype.eq = function (other) {\n\t\treturn (this._a48 == other._a48) && (this._a00 == other._a00)\n\t\t\t && (this._a32 == other._a32) && (this._a16 == other._a16)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {\n\t\tif (this._a48 > other._a48) return true\n\t\tif (this._a48 < other._a48) return false\n\t\tif (this._a32 > other._a32) return true\n\t\tif (this._a32 < other._a32) return false\n\t\tif (this._a16 > other._a16) return true\n\t\tif (this._a16 < other._a16) return false\n\t\treturn this._a00 > other._a00\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {\n\t\tif (this._a48 < other._a48) return true\n\t\tif (this._a48 > other._a48) return false\n\t\tif (this._a32 < other._a32) return true\n\t\tif (this._a32 > other._a32) return false\n\t\tif (this._a16 < other._a16) return true\n\t\tif (this._a16 > other._a16) return false\n\t\treturn this._a00 < other._a00\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.or = function (other) {\n\t\tthis._a00 |= other._a00\n\t\tthis._a16 |= other._a16\n\t\tthis._a32 |= other._a32\n\t\tthis._a48 |= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.and = function (other) {\n\t\tthis._a00 &= other._a00\n\t\tthis._a16 &= other._a16\n\t\tthis._a32 &= other._a32\n\t\tthis._a48 &= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.xor = function (other) {\n\t\tthis._a00 ^= other._a00\n\t\tthis._a16 ^= other._a16\n\t\tthis._a32 ^= other._a32\n\t\tthis._a48 ^= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.not = function() {\n\t\tthis._a00 = ~this._a00 & 0xFFFF\n\t\tthis._a16 = ~this._a16 & 0xFFFF\n\t\tthis._a32 = ~this._a32 & 0xFFFF\n\t\tthis._a48 = ~this._a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a00 = this._a48 >> (n - 48)\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a48 = 0\n\t\t} else {\n\t\t\tthis._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a48 = (this._a48 >> n) & 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a48 = this._a00 << (n - 48)\n\t\t\tthis._a32 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a48 = (this._a16 << n) | (this._a00 >> (16-n))\n\t\t\tthis._a32 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a48 = (this._a32 << n) | (this._a16 >> (16-n))\n\t\t\tthis._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a00 = 0\n\t\t} else {\n\t\t\tthis._a48 = (this._a48 << n) | (this._a32 >> (16-n))\n\t\t\tthis._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a00 = (this._a00 << n) & 0xFFFF\n\t\t}\n\t\tif (!allowOverflow) {\n\t\t\tthis._a48 &= 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// B.C.D.A rotl(16)\n\t\t\t// C.D.A.B rotl(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high << n) | (low >>> (32 - n))\n\t\tvar _low = (low << n) | (high >>> (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// D.A.B.C rotr(16)\n\t\t\t// C.D.A.B rotr(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high >>> n) | (low << (32 - n))\n\t\tvar _low = (low >>> n) | (high << (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT64_\n\t * @method clone\n\t * @return {Object} cloned UINT64\n\t */\n\tUINT64.prototype.clone = function () {\n\t\treturn new UINT64(this._a00, this._a16, this._a32, this._a48)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT64\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT64\n\t} else {\n\t\t// Browser\n\t\troot['UINT64'] = UINT64\n\t}\n\n})(this)\n"]},"metadata":{},"sourceType":"script"}