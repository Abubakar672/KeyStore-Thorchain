{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { BN, BN_ONE, BN_TWO, bnToBn, bnToU8a } from \"../bn/index.js\";\nimport { u8aConcat } from \"../u8a/index.js\";\nconst MAX_U8 = new BN(2).pow(new BN(8 - 2)).subn(1);\nconst MAX_U16 = new BN(2).pow(new BN(16 - 2)).subn(1);\nconst MAX_U32 = new BN(2).pow(new BN(32 - 2)).subn(1);\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\n\nexport function compactToU8a(_value) {\n  const value = bnToBn(_value);\n\n  if (value.lte(MAX_U8)) {\n    return new Uint8Array([value.toNumber() << 2]);\n  } else if (value.lte(MAX_U16)) {\n    return bnToU8a(value.shln(2).iadd(BN_ONE), 16, true);\n  } else if (value.lte(MAX_U32)) {\n    return bnToU8a(value.shln(2).iadd(BN_TWO), 32, true);\n  }\n\n  const u8a = bnToU8a(value);\n  let length = u8a.length; // adjust to the minimum number of bytes\n\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n\n  assert(length >= 4, 'Invalid length, previous checks match anything less than 2^30');\n  return u8aConcat( // subtract 4 as minimum (also catered for in decoding)\n  [(length - 4 << 2) + 0b11], u8a.subarray(0, length));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/compact/toU8a.js"],"names":["assert","BN","BN_ONE","BN_TWO","bnToBn","bnToU8a","u8aConcat","MAX_U8","pow","subn","MAX_U16","MAX_U32","compactToU8a","_value","value","lte","Uint8Array","toNumber","shln","iadd","u8a","length","subarray"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,EAAT,EAAaC,MAAb,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,QAAoD,gBAApD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,MAAMC,MAAM,GAAG,IAAIN,EAAJ,CAAO,CAAP,EAAUO,GAAV,CAAc,IAAIP,EAAJ,CAAO,IAAI,CAAX,CAAd,EAA6BQ,IAA7B,CAAkC,CAAlC,CAAf;AACA,MAAMC,OAAO,GAAG,IAAIT,EAAJ,CAAO,CAAP,EAAUO,GAAV,CAAc,IAAIP,EAAJ,CAAO,KAAK,CAAZ,CAAd,EAA8BQ,IAA9B,CAAmC,CAAnC,CAAhB;AACA,MAAME,OAAO,GAAG,IAAIV,EAAJ,CAAO,CAAP,EAAUO,GAAV,CAAc,IAAIP,EAAJ,CAAO,KAAK,CAAZ,CAAd,EAA8BQ,IAA9B,CAAmC,CAAnC,CAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,YAAT,CAAsBC,MAAtB,EAA8B;AACnC,QAAMC,KAAK,GAAGV,MAAM,CAACS,MAAD,CAApB;;AAEA,MAAIC,KAAK,CAACC,GAAN,CAAUR,MAAV,CAAJ,EAAuB;AACrB,WAAO,IAAIS,UAAJ,CAAe,CAACF,KAAK,CAACG,QAAN,MAAoB,CAArB,CAAf,CAAP;AACD,GAFD,MAEO,IAAIH,KAAK,CAACC,GAAN,CAAUL,OAAV,CAAJ,EAAwB;AAC7B,WAAOL,OAAO,CAACS,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcC,IAAd,CAAmBjB,MAAnB,CAAD,EAA6B,EAA7B,EAAiC,IAAjC,CAAd;AACD,GAFM,MAEA,IAAIY,KAAK,CAACC,GAAN,CAAUJ,OAAV,CAAJ,EAAwB;AAC7B,WAAON,OAAO,CAACS,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcC,IAAd,CAAmBhB,MAAnB,CAAD,EAA6B,EAA7B,EAAiC,IAAjC,CAAd;AACD;;AAED,QAAMiB,GAAG,GAAGf,OAAO,CAACS,KAAD,CAAnB;AACA,MAAIO,MAAM,GAAGD,GAAG,CAACC,MAAjB,CAZmC,CAYV;;AAEzB,SAAOD,GAAG,CAACC,MAAM,GAAG,CAAV,CAAH,KAAoB,CAA3B,EAA8B;AAC5BA,IAAAA,MAAM;AACP;;AAEDrB,EAAAA,MAAM,CAACqB,MAAM,IAAI,CAAX,EAAc,+DAAd,CAAN;AACA,SAAOf,SAAS,EAAE;AAClB,GAAC,CAACe,MAAM,GAAG,CAAT,IAAc,CAAf,IAAoB,IAArB,CADgB,EACYD,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgBD,MAAhB,CADZ,CAAhB;AAED","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { BN, BN_ONE, BN_TWO, bnToBn, bnToU8a } from \"../bn/index.js\";\nimport { u8aConcat } from \"../u8a/index.js\";\nconst MAX_U8 = new BN(2).pow(new BN(8 - 2)).subn(1);\nconst MAX_U16 = new BN(2).pow(new BN(16 - 2)).subn(1);\nconst MAX_U32 = new BN(2).pow(new BN(32 - 2)).subn(1);\n/**\n * @name compactToU8a\n * @description Encodes a number into a compact representation\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactToU8a } from '@polkadot/util';\n *\n * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])\n * ```\n */\n\nexport function compactToU8a(_value) {\n  const value = bnToBn(_value);\n\n  if (value.lte(MAX_U8)) {\n    return new Uint8Array([value.toNumber() << 2]);\n  } else if (value.lte(MAX_U16)) {\n    return bnToU8a(value.shln(2).iadd(BN_ONE), 16, true);\n  } else if (value.lte(MAX_U32)) {\n    return bnToU8a(value.shln(2).iadd(BN_TWO), 32, true);\n  }\n\n  const u8a = bnToU8a(value);\n  let length = u8a.length; // adjust to the minimum number of bytes\n\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n\n  assert(length >= 4, 'Invalid length, previous checks match anything less than 2^30');\n  return u8aConcat( // subtract 4 as minimum (also catered for in decoding)\n  [(length - 4 << 2) + 0b11], u8a.subarray(0, length));\n}"]},"metadata":{},"sourceType":"module"}