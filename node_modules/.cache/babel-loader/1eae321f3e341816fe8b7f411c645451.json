{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Verify } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelVerify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nexport function schnorrkelVerify(message, signature, publicKey) {\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const signatureU8a = u8aToU8a(signature);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);\n  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return sr25519Verify(signatureU8a, u8aToU8a(message), publicKeyU8a);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/schnorrkel/verify.js"],"names":["assert","u8aToU8a","sr25519Verify","schnorrkelVerify","message","signature","publicKey","publicKeyU8a","signatureU8a","length"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AAC9D,QAAMC,YAAY,GAAGN,QAAQ,CAACK,SAAD,CAA7B;AACA,QAAME,YAAY,GAAGP,QAAQ,CAACI,SAAD,CAA7B;AACAL,EAAAA,MAAM,CAACO,YAAY,CAACE,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BF,YAAY,CAACE,MAAO,qBAAtF,CAAN;AACAT,EAAAA,MAAM,CAACQ,YAAY,CAACC,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BD,YAAY,CAACC,MAAO,qBAAtF,CAAN;AACA,SAAOP,aAAa,CAACM,YAAD,EAAeP,QAAQ,CAACG,OAAD,CAAvB,EAAkCG,YAAlC,CAApB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Verify } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelVerify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\nexport function schnorrkelVerify(message, signature, publicKey) {\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const signatureU8a = u8aToU8a(signature);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);\n  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return sr25519Verify(signatureU8a, u8aToU8a(message), publicKeyU8a);\n}"]},"metadata":{},"sourceType":"module"}