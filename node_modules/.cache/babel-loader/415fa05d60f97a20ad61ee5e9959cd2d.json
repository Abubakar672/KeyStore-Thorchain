{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNull } from '@polkadot/util';\nimport { keyExtractPath } from \"./extractPath.js\";\nconst RE_CAPTURE = /^(\\w+( \\w+)*)((\\/\\/?[^/]+)*)(\\/\\/\\/(.*))?$/;\n/**\n * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).\n */\n\nexport function keyExtractSuri(suri) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const matches = suri.match(RE_CAPTURE);\n  assert(!isNull(matches), 'Unable to match provided value to a secret URI');\n  const [, phrase,, derivePath,,, password] = matches;\n  const {\n    path\n  } = keyExtractPath(derivePath);\n  return {\n    derivePath,\n    password,\n    path,\n    phrase\n  };\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/key/extractSuri.js"],"names":["assert","isNull","keyExtractPath","RE_CAPTURE","keyExtractSuri","suri","matches","match","phrase","derivePath","password","path"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,gBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,MAAMC,UAAU,GAAG,4CAAnB;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACnC;AACA,QAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAWJ,UAAX,CAAhB;AACAH,EAAAA,MAAM,CAAC,CAACC,MAAM,CAACK,OAAD,CAAR,EAAmB,gDAAnB,CAAN;AACA,QAAM,GAAGE,MAAH,GAAYC,UAAZ,IAA0BC,QAA1B,IAAsCJ,OAA5C;AACA,QAAM;AACJK,IAAAA;AADI,MAEFT,cAAc,CAACO,UAAD,CAFlB;AAGA,SAAO;AACLA,IAAAA,UADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,IAHK;AAILH,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNull } from '@polkadot/util';\nimport { keyExtractPath } from \"./extractPath.js\";\nconst RE_CAPTURE = /^(\\w+( \\w+)*)((\\/\\/?[^/]+)*)(\\/\\/\\/(.*))?$/;\n/**\n * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).\n */\n\nexport function keyExtractSuri(suri) {\n  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n  const matches = suri.match(RE_CAPTURE);\n  assert(!isNull(matches), 'Unable to match provided value to a secret URI');\n  const [, phrase,, derivePath,,, password] = matches;\n  const {\n    path\n  } = keyExtractPath(derivePath);\n  return {\n    derivePath,\n    password,\n    path,\n    phrase\n  };\n}"]},"metadata":{},"sourceType":"module"}