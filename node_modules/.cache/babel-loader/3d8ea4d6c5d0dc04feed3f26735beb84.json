{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { BN_ZERO } from '@polkadot/util';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nconst CACHE_KEY = 'eraPoints';\n\nfunction mapValidators({\n  individual\n}) {\n  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {\n    result[validatorId.toString()] = points;\n    return result;\n  }, {});\n}\n\nfunction mapPoints(eras, points) {\n  return eras.map((era, index) => ({\n    era,\n    eraPoints: points[index].total,\n    validators: mapValidators(points[index])\n  }));\n}\n\nexport function _erasPoints(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = filterEras(eras, cached);\n    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(points => {\n      const query = mapPoints(remaining, points);\n      !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\nexport function erasPoints(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasPoints(eras, withActive))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/erasPoints.js"],"names":["map","of","switchMap","BN_ZERO","deriveCache","memo","filterEras","CACHE_KEY","mapValidators","individual","entries","filter","points","gt","reduce","result","validatorId","toString","mapPoints","eras","era","index","eraPoints","total","validators","_erasPoints","instanceId","api","withActive","length","cached","get","value","remaining","query","staking","erasRewardPoints","multi","pipe","forEach","q","set","find","eq","erasPoints","derive","erasHistoric"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { BN_ZERO } from '@polkadot/util';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nconst CACHE_KEY = 'eraPoints';\n\nfunction mapValidators({\n  individual\n}) {\n  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {\n    result[validatorId.toString()] = points;\n    return result;\n  }, {});\n}\n\nfunction mapPoints(eras, points) {\n  return eras.map((era, index) => ({\n    era,\n    eraPoints: points[index].total,\n    validators: mapValidators(points[index])\n  }));\n}\n\nexport function _erasPoints(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = filterEras(eras, cached);\n    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(points => {\n      const query = mapPoints(remaining, points);\n      !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\nexport function erasPoints(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasPoints(eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}