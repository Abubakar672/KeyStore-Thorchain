{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { vrfVerify } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name schnorrkelVrfVerify\n * @description Verify with sr25519 vrf verification\n */\n\nexport function schnorrkelVrfVerify(message, signOutput, publicKey, context = EMPTY_U8A, extra = EMPTY_U8A) {\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const proofU8a = u8aToU8a(signOutput);\n  assert(publicKeyU8a.length === 32, 'Invalid publicKey, expected 32-bytes');\n  assert(proofU8a.length === 96, 'Invalid vrfSign output, expected 96 bytes');\n  return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/schnorrkel/vrfVerify.js"],"names":["assert","u8aToU8a","vrfVerify","EMPTY_U8A","Uint8Array","schnorrkelVrfVerify","message","signOutput","publicKey","context","extra","publicKeyU8a","proofU8a","length"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,MAAMC,SAAS,GAAG,IAAIC,UAAJ,EAAlB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,UAAtC,EAAkDC,SAAlD,EAA6DC,OAAO,GAAGN,SAAvE,EAAkFO,KAAK,GAAGP,SAA1F,EAAqG;AAC1G,QAAMQ,YAAY,GAAGV,QAAQ,CAACO,SAAD,CAA7B;AACA,QAAMI,QAAQ,GAAGX,QAAQ,CAACM,UAAD,CAAzB;AACAP,EAAAA,MAAM,CAACW,YAAY,CAACE,MAAb,KAAwB,EAAzB,EAA6B,sCAA7B,CAAN;AACAb,EAAAA,MAAM,CAACY,QAAQ,CAACC,MAAT,KAAoB,EAArB,EAAyB,2CAAzB,CAAN;AACA,SAAOX,SAAS,CAACS,YAAD,EAAeV,QAAQ,CAACQ,OAAD,CAAvB,EAAkCR,QAAQ,CAACK,OAAD,CAA1C,EAAqDL,QAAQ,CAACS,KAAD,CAA7D,EAAsEE,QAAtE,CAAhB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { vrfVerify } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name schnorrkelVrfVerify\n * @description Verify with sr25519 vrf verification\n */\n\nexport function schnorrkelVrfVerify(message, signOutput, publicKey, context = EMPTY_U8A, extra = EMPTY_U8A) {\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const proofU8a = u8aToU8a(signOutput);\n  assert(publicKeyU8a.length === 32, 'Invalid publicKey, expected 32-bytes');\n  assert(proofU8a.length === 96, 'Invalid vrfSign output, expected 96 bytes');\n  return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);\n}"]},"metadata":{},"sourceType":"module"}