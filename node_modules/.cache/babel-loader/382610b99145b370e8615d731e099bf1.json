{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore, decryptFromKeystore } from '@xchainjs/xchain-crypto';\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  const [fileKeyStore, setfileKeyStore] = React.useState(\"\");\n  let key;\n  let fileReader; // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase();\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input); // console.log('key========>', key)\n\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  }; //   const handleValidation =() => {\n  //     const { input } = this.state;\n  //     // only each block with generate error\n  //     if (!input || isNaN(input)) {\n  //       this.setState({ error: 'price is not valid' });\n  //     }else {\n  //       this.setState({error: \"\"})\n  //       // submit code here\n  //     }\n  // }\n\n  /*File creation and saving here*/\n\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\", key);\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  const decryptKeyStore = async () => {\n    // console.log(\"password====>\", password);\n    // console.log(\"fileKeyStroe====>\", fileKeyStore);\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n  };\n\n  const handleFileRead = async e => {\n    const content = JSON.parse(fileReader.result);\n    console.log(content);\n    let res = await decryptFromKeystore(content, input);\n    console.log(\"decryption=====>\", res); // … do something with the 'content' …\n  };\n\n  const SubmitAll = async () => {\n    console.log(\"password====>\", typeof input);\n    console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n    decryptKeyStore();\n    handleFileRead(); // let res = await decryptFromKeystore(fileKeyStore, input);\n    // console.log(\"decryption=====>\", res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Thorchain Custom Keystore Maker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Enter your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"input\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: keystore,\n            children: \"Create KeyStore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Thorchain KeyStore Decryption \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Enter your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: e => {\n              setfileKeyStore(e.target.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: SubmitAll,\n            children: \"Upload!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"CF5PG0BXkx+BorRLMid1uAXVZrA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js"],"names":["generatePhrase","encryptToKeyStore","decryptFromKeystore","React","Component","useEffect","Button","Container","Header","Segment","Grid","App","response","setResponse","useState","input","setInput","fileKeyStore","setfileKeyStore","key","fileReader","keystore","phrase","console","log","downloadTextFile","error","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","decryptKeyStore","FileReader","onloadend","handleFileRead","readAsText","e","content","parse","result","res","SubmitAll","target","value","files"],"mappings":"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","sourcesContent":["import { generatePhrase, encryptToKeyStore ,decryptFromKeystore} from '@xchainjs/xchain-crypto'\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  const [fileKeyStore , setfileKeyStore] = React.useState(\"\")\n\n  let key\n  let fileReader\n\n  // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase()\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n      \n      downloadTextFile();\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n//   const handleValidation =() => {\n//     const { input } = this.state;\n\n//     // only each block with generate error\n//     if (!input || isNaN(input)) {\n//       this.setState({ error: 'price is not valid' });\n//     }else {\n//       this.setState({error: \"\"})\n//       // submit code here\n//     }\n// }\n\n  /*File creation and saving here*/ \n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\",key)\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n\n  const decryptKeyStore = async () => {\n    // console.log(\"password====>\", password);\n    // console.log(\"fileKeyStroe====>\", fileKeyStore);\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n    };\n\n    const handleFileRead = async (e) => {\n      const content = JSON.parse(fileReader.result);\n      console.log(content);\n      let res = await decryptFromKeystore(content, input);\n      console.log(\"decryption=====>\", res);\n      // … do something with the 'content' …\n      };\n\n\n\nconst SubmitAll=async()=>{\n  console.log(\"password====>\", typeof input);\n  console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n  decryptKeyStore()\n  handleFileRead()\n  // let res = await decryptFromKeystore(fileKeyStore, input);\n  // console.log(\"decryption=====>\", res);\n}\nreturn <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={keystore}>Create KeyStore</Button>\n        </div>\n        <h1> Thorchain KeyStore Decryption </h1>\n        <div>\n          <h1>Enter your password</h1>\n       {/* // <input id=\"password\" value={input} onchange ={e=> setInput(e.target.value)}/> */}\n        </div>\n        \n        <div>\n        <input type=\"file\"onChange={((e)=>{\n          setfileKeyStore(e.target.files[0]);\n\n        })}/>\n                <button onClick={SubmitAll} >\n                  Upload!\n                </button>\n        </div>\n\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}