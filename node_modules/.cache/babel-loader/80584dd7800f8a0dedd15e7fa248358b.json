{"ast":null,"code":"'use strict';\n\nvar Buffer = require('safe-buffer').Buffer; // Number.MAX_SAFE_INTEGER\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\nfunction checkUInt53(n) {\n  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range');\n}\n\nfunction encode(number, buffer, offset) {\n  checkUInt53(number);\n  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(number));\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0; // 8 bit\n\n  if (number < 0xfd) {\n    buffer.writeUInt8(number, offset);\n    encode.bytes = 1; // 16 bit\n  } else if (number <= 0xffff) {\n    buffer.writeUInt8(0xfd, offset);\n    buffer.writeUInt16LE(number, offset + 1);\n    encode.bytes = 3; // 32 bit\n  } else if (number <= 0xffffffff) {\n    buffer.writeUInt8(0xfe, offset);\n    buffer.writeUInt32LE(number, offset + 1);\n    encode.bytes = 5; // 64 bit\n  } else {\n    buffer.writeUInt8(0xff, offset);\n    buffer.writeUInt32LE(number >>> 0, offset + 1);\n    buffer.writeUInt32LE(number / 0x100000000 | 0, offset + 5);\n    encode.bytes = 9;\n  }\n\n  return buffer;\n}\n\nfunction decode(buffer, offset) {\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance');\n  if (!offset) offset = 0;\n  var first = buffer.readUInt8(offset); // 8 bit\n\n  if (first < 0xfd) {\n    decode.bytes = 1;\n    return first; // 16 bit\n  } else if (first === 0xfd) {\n    decode.bytes = 3;\n    return buffer.readUInt16LE(offset + 1); // 32 bit\n  } else if (first === 0xfe) {\n    decode.bytes = 5;\n    return buffer.readUInt32LE(offset + 1); // 64 bit\n  } else {\n    decode.bytes = 9;\n    var lo = buffer.readUInt32LE(offset + 1);\n    var hi = buffer.readUInt32LE(offset + 5);\n    var number = hi * 0x0100000000 + lo;\n    checkUInt53(number);\n    return number;\n  }\n}\n\nfunction encodingLength(number) {\n  checkUInt53(number);\n  return number < 0xfd ? 1 : number <= 0xffff ? 3 : number <= 0xffffffff ? 5 : 9;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  encodingLength: encodingLength\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/varuint-bitcoin/index.js"],"names":["Buffer","require","MAX_SAFE_INTEGER","checkUInt53","n","RangeError","encode","number","buffer","offset","allocUnsafe","encodingLength","isBuffer","TypeError","writeUInt8","bytes","writeUInt16LE","writeUInt32LE","decode","first","readUInt8","readUInt16LE","readUInt32LE","lo","hi","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nvar Buffer = require('safe-buffer').Buffer\n\n// Number.MAX_SAFE_INTEGER\nvar MAX_SAFE_INTEGER = 9007199254740991\n\nfunction checkUInt53 (n) {\n  if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')\n}\n\nfunction encode (number, buffer, offset) {\n  checkUInt53(number)\n\n  if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(number))\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')\n  if (!offset) offset = 0\n\n  // 8 bit\n  if (number < 0xfd) {\n    buffer.writeUInt8(number, offset)\n    encode.bytes = 1\n\n  // 16 bit\n  } else if (number <= 0xffff) {\n    buffer.writeUInt8(0xfd, offset)\n    buffer.writeUInt16LE(number, offset + 1)\n    encode.bytes = 3\n\n  // 32 bit\n  } else if (number <= 0xffffffff) {\n    buffer.writeUInt8(0xfe, offset)\n    buffer.writeUInt32LE(number, offset + 1)\n    encode.bytes = 5\n\n  // 64 bit\n  } else {\n    buffer.writeUInt8(0xff, offset)\n    buffer.writeUInt32LE(number >>> 0, offset + 1)\n    buffer.writeUInt32LE((number / 0x100000000) | 0, offset + 5)\n    encode.bytes = 9\n  }\n\n  return buffer\n}\n\nfunction decode (buffer, offset) {\n  if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')\n  if (!offset) offset = 0\n\n  var first = buffer.readUInt8(offset)\n\n  // 8 bit\n  if (first < 0xfd) {\n    decode.bytes = 1\n    return first\n\n  // 16 bit\n  } else if (first === 0xfd) {\n    decode.bytes = 3\n    return buffer.readUInt16LE(offset + 1)\n\n  // 32 bit\n  } else if (first === 0xfe) {\n    decode.bytes = 5\n    return buffer.readUInt32LE(offset + 1)\n\n  // 64 bit\n  } else {\n    decode.bytes = 9\n    var lo = buffer.readUInt32LE(offset + 1)\n    var hi = buffer.readUInt32LE(offset + 5)\n    var number = hi * 0x0100000000 + lo\n    checkUInt53(number)\n\n    return number\n  }\n}\n\nfunction encodingLength (number) {\n  checkUInt53(number)\n\n  return (\n    number < 0xfd ? 1\n      : number <= 0xffff ? 3\n        : number <= 0xffffffff ? 5\n          : 9\n  )\n}\n\nmodule.exports = { encode: encode, decode: decode, encodingLength: encodingLength }\n"]},"metadata":{},"sourceType":"script"}