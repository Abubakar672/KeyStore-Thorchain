{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { ed25519Verify, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclSign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclVerify } from '@polkadot/util-crypto';\n *\n * naclVerify([...], [...], [...]); // => true/false\n * ```\n */\n\nexport function naclVerify(message, signature, publicKey, onlyJs = false) {\n  const messageU8a = u8aToU8a(message);\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const signatureU8a = u8aToU8a(signature);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return isReady() && !onlyJs ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/nacl/verify.js"],"names":["nacl","assert","u8aToU8a","ed25519Verify","isReady","naclVerify","message","signature","publicKey","onlyJs","messageU8a","publicKeyU8a","signatureU8a","length","sign","detached","verify"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,uBAAvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,SAA7B,EAAwCC,SAAxC,EAAmDC,MAAM,GAAG,KAA5D,EAAmE;AACxE,QAAMC,UAAU,GAAGR,QAAQ,CAACI,OAAD,CAA3B;AACA,QAAMK,YAAY,GAAGT,QAAQ,CAACM,SAAD,CAA7B;AACA,QAAMI,YAAY,GAAGV,QAAQ,CAACK,SAAD,CAA7B;AACAN,EAAAA,MAAM,CAACU,YAAY,CAACE,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BF,YAAY,CAACE,MAAO,eAAtF,CAAN;AACAZ,EAAAA,MAAM,CAACW,YAAY,CAACC,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BD,YAAY,CAACC,MAAO,qBAAtF,CAAN;AACA,SAAOT,OAAO,MAAM,CAACK,MAAd,GAAuBN,aAAa,CAACS,YAAD,EAAeF,UAAf,EAA2BC,YAA3B,CAApC,GAA+EX,IAAI,CAACc,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,CAA0BN,UAA1B,EAAsCE,YAAtC,EAAoDD,YAApD,CAAtF;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { ed25519Verify, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclSign\n * @summary Verifies the signature on the supplied message.\n * @description\n * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclVerify } from '@polkadot/util-crypto';\n *\n * naclVerify([...], [...], [...]); // => true/false\n * ```\n */\n\nexport function naclVerify(message, signature, publicKey, onlyJs = false) {\n  const messageU8a = u8aToU8a(message);\n  const publicKeyU8a = u8aToU8a(publicKey);\n  const signatureU8a = u8aToU8a(signature);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);\n  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return isReady() && !onlyJs ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);\n}"]},"metadata":{},"sourceType":"module"}