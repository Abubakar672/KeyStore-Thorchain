{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { sanitize } from \"../create/sanitize.js\";\nimport { Text } from \"./Text.js\";\n/**\n * @name Type\n * @description\n * This is a extended version of Text, specifically to handle types. Here we rely fully\n * on what Text provides us, however we also adjust the types received from the runtime,\n * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.\n */\n\nexport class Type extends Text {\n  constructor(registry, value = '') {\n    super(registry, value);\n    this.setOverride(sanitize(this.toString()));\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Type';\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/primitive/Type.js"],"names":["sanitize","Text","Type","constructor","registry","value","setOverride","toString","toRawType"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,uBAAzB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAN,SAAmBD,IAAnB,CAAwB;AAC7BE,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAK,GAAG,EAAnB,EAAuB;AAChC,UAAMD,QAAN,EAAgBC,KAAhB;AACA,SAAKC,WAAL,CAAiBN,QAAQ,CAAC,KAAKO,QAAL,EAAD,CAAzB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;;AAZ4B","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { sanitize } from \"../create/sanitize.js\";\nimport { Text } from \"./Text.js\";\n/**\n * @name Type\n * @description\n * This is a extended version of Text, specifically to handle types. Here we rely fully\n * on what Text provides us, however we also adjust the types received from the runtime,\n * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.\n */\n\nexport class Type extends Text {\n  constructor(registry, value = '') {\n    super(registry, value);\n    this.setOverride(sanitize(this.toString()));\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Type';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}