{"ast":null,"code":"// Patched version of `sr25519.js` (`cosmos-client`) to run in web\n// see https://www.npmjs.com/package/cosmos-client#to-use-in-web\nasync function load(module, imports) {\n  if (typeof Response === 'function' && module instanceof Response) {\n    if (typeof WebAssembly.instantiateStreaming === 'function') {\n      try {\n        return await WebAssembly.instantiateStreaming(module, imports);\n      } catch (e) {\n        if (module.headers.get('Content-Type') !== 'application/wasm') {\n          console.warn('`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n', e);\n        } else {\n          throw e;\n        }\n      }\n    }\n\n    const bytes = await module.arrayBuffer();\n    return await WebAssembly.instantiate(bytes, imports);\n  } else {\n    const instance = await WebAssembly.instantiate(module, imports);\n\n    if (instance instanceof WebAssembly.Instance) {\n      return {\n        instance,\n        module\n      };\n    } else {\n      return instance;\n    }\n  }\n}\n\nasync function init(input) {\n  const imports = {};\n\n  if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {\n    input = fetch(input);\n  }\n\n  const {\n    instance,\n    module\n  } = await load(await input, imports);\n  wasm = instance.exports;\n  init.__wbindgen_wasm_module = module;\n  return wasm;\n}\n\nexports.default = init;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/sr25519/sr25519.js"],"names":["load","module","imports","Response","WebAssembly","instantiateStreaming","e","headers","get","console","warn","bytes","arrayBuffer","instantiate","instance","Instance","init","input","Request","URL","fetch","wasm","exports","__wbindgen_wasm_module","default"],"mappings":"AAAA;AACA;AAEA,eAAeA,IAAf,CAAoBC,MAApB,EAA4BC,OAA5B,EAAqC;AACjC,MAAI,OAAOC,QAAP,KAAoB,UAApB,IAAkCF,MAAM,YAAYE,QAAxD,EAAkE;AAChE,QAAI,OAAOC,WAAW,CAACC,oBAAnB,KAA4C,UAAhD,EAA4D;AAC1D,UAAI;AACF,eAAO,MAAMD,WAAW,CAACC,oBAAZ,CAAiCJ,MAAjC,EAAyCC,OAAzC,CAAb;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AACV,YAAIL,MAAM,CAACM,OAAP,CAAeC,GAAf,CAAmB,cAAnB,MAAuC,kBAA3C,EAA+D;AAC7DC,UAAAA,OAAO,CAACC,IAAR,CACE,mMADF,EAEEJ,CAFF;AAID,SALD,MAKO;AACL,gBAAMA,CAAN;AACD;AACF;AACF;;AAED,UAAMK,KAAK,GAAG,MAAMV,MAAM,CAACW,WAAP,EAApB;AACA,WAAO,MAAMR,WAAW,CAACS,WAAZ,CAAwBF,KAAxB,EAA+BT,OAA/B,CAAb;AACD,GAlBD,MAkBO;AACL,UAAMY,QAAQ,GAAG,MAAMV,WAAW,CAACS,WAAZ,CAAwBZ,MAAxB,EAAgCC,OAAhC,CAAvB;;AAEA,QAAIY,QAAQ,YAAYV,WAAW,CAACW,QAApC,EAA8C;AAC5C,aAAO;AAAED,QAAAA,QAAF;AAAYb,QAAAA;AAAZ,OAAP;AACD,KAFD,MAEO;AACL,aAAOa,QAAP;AACD;AACF;AACF;;AAED,eAAeE,IAAf,CAAoBC,KAApB,EAA2B;AACzB,QAAMf,OAAO,GAAG,EAAhB;;AAEA,MACE,OAAOe,KAAP,KAAiB,QAAjB,IACC,OAAOC,OAAP,KAAmB,UAAnB,IAAiCD,KAAK,YAAYC,OADnD,IAEC,OAAOC,GAAP,KAAe,UAAf,IAA6BF,KAAK,YAAYE,GAHjD,EAIE;AACAF,IAAAA,KAAK,GAAGG,KAAK,CAACH,KAAD,CAAb;AACD;;AAED,QAAM;AAAEH,IAAAA,QAAF;AAAYb,IAAAA;AAAZ,MAAuB,MAAMD,IAAI,CAAC,MAAMiB,KAAP,EAAcf,OAAd,CAAvC;AAEAmB,EAAAA,IAAI,GAAGP,QAAQ,CAACQ,OAAhB;AACAN,EAAAA,IAAI,CAACO,sBAAL,GAA8BtB,MAA9B;AAEA,SAAOoB,IAAP;AACD;;AAEDC,OAAO,CAACE,OAAR,GAAkBR,IAAlB","sourcesContent":["// Patched version of `sr25519.js` (`cosmos-client`) to run in web\n// see https://www.npmjs.com/package/cosmos-client#to-use-in-web\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n      if (typeof WebAssembly.instantiateStreaming === 'function') {\n        try {\n          return await WebAssembly.instantiateStreaming(module, imports)\n        } catch (e) {\n          if (module.headers.get('Content-Type') !== 'application/wasm') {\n            console.warn(\n              '`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n',\n              e\n            )\n          } else {\n            throw e\n          }\n        }\n      }\n  \n      const bytes = await module.arrayBuffer()\n      return await WebAssembly.instantiate(bytes, imports)\n    } else {\n      const instance = await WebAssembly.instantiate(module, imports)\n  \n      if (instance instanceof WebAssembly.Instance) {\n        return { instance, module }\n      } else {\n        return instance\n      }\n    }\n  }\n\n  async function init(input) {\n    const imports = {}\n\n    if (\n      typeof input === 'string' ||\n      (typeof Request === 'function' && input instanceof Request) ||\n      (typeof URL === 'function' && input instanceof URL)\n    ) {\n      input = fetch(input)\n    }\n\n    const { instance, module } = await load(await input, imports)\n\n    wasm = instance.exports\n    init.__wbindgen_wasm_module = module\n\n    return wasm\n  }\n\n  exports.default = init\n\n"]},"metadata":{},"sourceType":"script"}