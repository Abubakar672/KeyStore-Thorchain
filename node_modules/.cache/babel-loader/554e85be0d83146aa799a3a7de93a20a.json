{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/rpc-provider authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable camelcase */\n\n\nimport EventEmitter from 'eventemitter3';\nimport { assert, isChildClass, isNull, isUndefined, logger } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\nimport { RpcCoder } from \"../coder/index.js\";\nimport defaults from \"../defaults.js\";\nimport { getWSErrorString } from \"./errors.js\";\nconst ALIASES = {\n  chain_finalisedHead: 'chain_finalizedHead',\n  chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',\n  chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'\n};\nconst RETRY_DELAY = 2500;\nconst l = logger('api-ws');\n\nfunction eraseRecord(record, cb) {\n  Object.keys(record).forEach(key => {\n    if (cb) {\n      cb(record[key]);\n    }\n\n    delete record[key];\n  });\n}\n/**\n * # @polkadot/rpc-provider/ws\n *\n * @name WsProvider\n *\n * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Api from '@polkadot/api/promise';\n * import { WsProvider } from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const api = new Api(provider);\n * ```\n *\n * @see [[HttpProvider]]\n */\n\n\nvar _coder = /*#__PURE__*/_classPrivateFieldLooseKey(\"coder\");\n\nvar _endpoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"endpoints\");\n\nvar _headers = /*#__PURE__*/_classPrivateFieldLooseKey(\"headers\");\n\nvar _eventemitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"eventemitter\");\n\nvar _handlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"handlers\");\n\nvar _isReadyPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"isReadyPromise\");\n\nvar _waitingForId = /*#__PURE__*/_classPrivateFieldLooseKey(\"waitingForId\");\n\nvar _autoConnectMs = /*#__PURE__*/_classPrivateFieldLooseKey(\"autoConnectMs\");\n\nvar _endpointIndex = /*#__PURE__*/_classPrivateFieldLooseKey(\"endpointIndex\");\n\nvar _isConnected = /*#__PURE__*/_classPrivateFieldLooseKey(\"isConnected\");\n\nvar _subscriptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"subscriptions\");\n\nvar _websocket = /*#__PURE__*/_classPrivateFieldLooseKey(\"websocket\");\n\nvar _emit = /*#__PURE__*/_classPrivateFieldLooseKey(\"emit\");\n\nvar _onSocketClose = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketClose\");\n\nvar _onSocketError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketError\");\n\nvar _onSocketMessage = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessage\");\n\nvar _onSocketMessageResult = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessageResult\");\n\nvar _onSocketMessageSubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessageSubscribe\");\n\nvar _onSocketOpen = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketOpen\");\n\nvar _resubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"resubscribe\");\n\nexport class WsProvider {\n  /**\n   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.\n   * @param {boolean} autoConnect Whether to connect automatically or not.\n   */\n  constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {\n    Object.defineProperty(this, _coder, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _endpoints, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _headers, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _handlers, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _isReadyPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _waitingForId, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _autoConnectMs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _endpointIndex, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isConnected, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _subscriptions, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _websocket, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emit, {\n      writable: true,\n      value: (type, ...args) => {\n        _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].emit(type, ...args);\n      }\n    });\n    Object.defineProperty(this, _onSocketClose, {\n      writable: true,\n      value: event => {\n        const error = new Error(`disconnected from ${_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);\n\n        if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n          l.error(error.message);\n        }\n\n        _classPrivateFieldLooseBase(this, _isConnected)[_isConnected] = false;\n\n        if (_classPrivateFieldLooseBase(this, _websocket)[_websocket]) {\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onclose = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onerror = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onmessage = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onopen = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket] = null;\n        }\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('disconnected'); // reject all hanging requests\n\n\n        eraseRecord(_classPrivateFieldLooseBase(this, _handlers)[_handlers], h => h.callback(error, undefined));\n        eraseRecord(_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId]);\n\n        if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n          setTimeout(() => {\n            this.connectWithRetry().catch(() => {// does not throw\n            });\n          }, _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs]);\n        }\n      }\n    });\n    Object.defineProperty(this, _onSocketError, {\n      writable: true,\n      value: error => {\n        l.debug(() => ['socket error', error]);\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n      }\n    });\n    Object.defineProperty(this, _onSocketMessage, {\n      writable: true,\n      value: message => {\n        l.debug(() => ['received', message.data]);\n        const response = JSON.parse(message.data);\n        return isUndefined(response.method) ? _classPrivateFieldLooseBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldLooseBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);\n      }\n    });\n    Object.defineProperty(this, _onSocketMessageResult, {\n      writable: true,\n      value: response => {\n        const handler = _classPrivateFieldLooseBase(this, _handlers)[_handlers][response.id];\n\n        if (!handler) {\n          l.debug(() => `Unable to find handler for id=${response.id}`);\n          return;\n        }\n\n        try {\n          const {\n            method,\n            params,\n            subscription\n          } = handler;\n\n          const result = _classPrivateFieldLooseBase(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update\n          // immediately if we have some queued results already\n\n\n          handler.callback(null, result);\n\n          if (subscription) {\n            const subId = `${subscription.type}::${result}`;\n            _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subId] = _objectSpread(_objectSpread({}, subscription), {}, {\n              method,\n              params\n            }); // if we have a result waiting for this subscription already\n\n            if (_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId]) {\n              _classPrivateFieldLooseBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId]);\n            }\n          }\n        } catch (error) {\n          handler.callback(error, undefined);\n        }\n\n        delete _classPrivateFieldLooseBase(this, _handlers)[_handlers][response.id];\n      }\n    });\n    Object.defineProperty(this, _onSocketMessageSubscribe, {\n      writable: true,\n      value: response => {\n        const method = ALIASES[response.method] || response.method || 'invalid';\n        const subId = `${method}::${response.params.subscription}`;\n\n        const handler = _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subId];\n\n        if (!handler) {\n          // store the JSON, we could have out-of-order subid coming in\n          _classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId] = response;\n          l.debug(() => `Unable to find handler for subscription=${subId}`);\n          return;\n        } // housekeeping\n\n\n        delete _classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId];\n\n        try {\n          const result = _classPrivateFieldLooseBase(this, _coder)[_coder].decodeResponse(response);\n\n          handler.callback(null, result);\n        } catch (error) {\n          handler.callback(error, undefined);\n        }\n      }\n    });\n    Object.defineProperty(this, _onSocketOpen, {\n      writable: true,\n      value: () => {\n        assert(!isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');\n        l.debug(() => ['connected to', _classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]]);\n        _classPrivateFieldLooseBase(this, _isConnected)[_isConnected] = true;\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('connected');\n\n        _classPrivateFieldLooseBase(this, _resubscribe)[_resubscribe]();\n\n        return true;\n      }\n    });\n    Object.defineProperty(this, _resubscribe, {\n      writable: true,\n      value: () => {\n        const subscriptions = _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions];\n\n        _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions] = {};\n        Promise.all(Object.keys(subscriptions).map(async id => {\n          const {\n            callback,\n            method,\n            params,\n            type\n          } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where\n          // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'\n          // are not included (and will not be re-broadcast)\n\n          if (type.startsWith('author_')) {\n            return;\n          }\n\n          try {\n            await this.subscribe(type, method, params, callback);\n          } catch (error) {\n            l.error(error);\n          }\n        })).catch(l.error);\n      }\n    });\n    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n    assert(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');\n    endpoints.forEach(endpoint => {\n      assert(/^(wss|ws):\\/\\//.test(endpoint), () => `Endpoint should start with 'ws://', received '${endpoint}'`);\n    });\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter] = new EventEmitter();\n    _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;\n    _classPrivateFieldLooseBase(this, _coder)[_coder] = new RpcCoder();\n    _classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] = -1;\n    _classPrivateFieldLooseBase(this, _endpoints)[_endpoints] = endpoints;\n    _classPrivateFieldLooseBase(this, _headers)[_headers] = headers;\n    _classPrivateFieldLooseBase(this, _websocket)[_websocket] = null;\n\n    if (autoConnectMs > 0) {\n      this.connectWithRetry().catch(() => {// does not throw\n      });\n    }\n\n    _classPrivateFieldLooseBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].once('connected', () => {\n        resolve(this);\n      });\n    });\n  }\n  /**\n   * @summary `true` when this provider supports subscriptions\n   */\n\n\n  get hasSubscriptions() {\n    return true;\n  }\n  /**\n   * @summary Whether the node is connected or not.\n   * @return {boolean} true if connected\n   */\n\n\n  get isConnected() {\n    return _classPrivateFieldLooseBase(this, _isConnected)[_isConnected];\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return _classPrivateFieldLooseBase(this, _isReadyPromise)[_isReadyPromise];\n  }\n  /**\n   * @description Returns a clone of the object\n   */\n\n\n  clone() {\n    return new WsProvider(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints]);\n  }\n  /**\n   * @summary Manually connect\n   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may\n   * connect manually using this method.\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async connect() {\n    try {\n      _classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldLooseBase(this, _endpoints)[_endpoints].length;\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers\n      : new WebSocket(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldLooseBase(this, _headers)[_headers], undefined, {\n        // default: true\n        fragmentOutgoingMessages: true,\n        // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)\n        fragmentationThreshold: 256 * 1024,\n        // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that)\n        maxReceivedMessageSize: 16 * 1024 * 1024\n      });\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onclose = _classPrivateFieldLooseBase(this, _onSocketClose)[_onSocketClose];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onerror = _classPrivateFieldLooseBase(this, _onSocketError)[_onSocketError];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldLooseBase(this, _onSocketMessage)[_onSocketMessage];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onopen = _classPrivateFieldLooseBase(this, _onSocketOpen)[_onSocketOpen];\n    } catch (error) {\n      l.error(error);\n\n      _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n\n      throw error;\n    }\n  }\n  /**\n   * @description Connect, never throwing an error, but rather forcing a retry\n   */\n\n\n  async connectWithRetry() {\n    if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n      try {\n        await this.connect();\n      } catch (error) {\n        setTimeout(() => {\n          this.connectWithRetry().catch(() => {// does not throw\n          });\n        }, _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs]);\n      }\n    }\n  }\n  /**\n   * @description Manually disconnect from the connection, clearing auto-connect logic\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async disconnect() {\n    // switch off autoConnect, we are in manual mode now\n    _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] = 0;\n\n    try {\n      if (_classPrivateFieldLooseBase(this, _websocket)[_websocket]) {\n        // 1000 - Normal closure; the connection successfully completed\n        _classPrivateFieldLooseBase(this, _websocket)[_websocket].close(1000);\n      }\n    } catch (error) {\n      l.error(error);\n\n      _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n\n      throw error;\n    }\n  }\n  /**\n   * @summary Listens on events after having subscribed using the [[subscribe]] function.\n   * @param  {ProviderInterfaceEmitted} type Event\n   * @param  {ProviderInterfaceEmitCb}  sub  Callback\n   * @return unsubscribe function\n   */\n\n\n  on(type, sub) {\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].on(type, sub);\n\n    return () => {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].removeListener(type, sub);\n    };\n  }\n  /**\n   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.\n   * @param method The RPC methods to execute\n   * @param params Encoded parameters as applicable for the method\n   * @param subscription Subscription details (internally used)\n   */\n\n\n  send(method, params, subscription) {\n    return new Promise((resolve, reject) => {\n      try {\n        assert(this.isConnected && !isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]), 'WebSocket is not connected');\n\n        const json = _classPrivateFieldLooseBase(this, _coder)[_coder].encodeJson(method, params);\n\n        const id = _classPrivateFieldLooseBase(this, _coder)[_coder].getId();\n\n        const callback = (error, result) => {\n          error ? reject(error) : resolve(result);\n        };\n\n        l.debug(() => ['calling', method, json]);\n        _classPrivateFieldLooseBase(this, _handlers)[_handlers][id] = {\n          callback,\n          method,\n          params,\n          subscription\n        };\n\n        _classPrivateFieldLooseBase(this, _websocket)[_websocket].send(json);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  /**\n   * @name subscribe\n   * @summary Allows subscribing to a specific event.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const provider = new WsProvider('ws://127.0.0.1:9944');\n   * const rpc = new Rpc(provider);\n   *\n   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {\n   *   console.log(values)\n   * }).then((subscriptionId) => {\n   *   console.log('balance changes subscription id: ', subscriptionId)\n   * })\n   * ```\n   */\n\n\n  subscribe(type, method, params, callback) {\n    return this.send(method, params, {\n      callback,\n      type\n    });\n  }\n  /**\n   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].\n   */\n\n\n  async unsubscribe(type, method, id) {\n    const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub\n    // the assigned id now does not match what the API user originally received. It has\n    // a slight complication in solving - since we cannot rely on the send id, but rather\n    // need to find the actual subscription id to map it\n\n    if (isUndefined(_classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subscription])) {\n      l.debug(() => `Unable to find active subscription=${subscription}`);\n      return false;\n    }\n\n    delete _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subscription];\n\n    try {\n      return this.isConnected && !isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/rpc-provider/ws/index.js"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","EventEmitter","assert","isChildClass","isNull","isUndefined","logger","xglobal","WebSocket","RpcCoder","defaults","getWSErrorString","ALIASES","chain_finalisedHead","chain_subscribeFinalisedHeads","chain_unsubscribeFinalisedHeads","RETRY_DELAY","l","eraseRecord","record","cb","_coder","_endpoints","_headers","_eventemitter","_handlers","_isReadyPromise","_waitingForId","_autoConnectMs","_endpointIndex","_isConnected","_subscriptions","_websocket","_emit","_onSocketClose","_onSocketError","_onSocketMessage","_onSocketMessageResult","_onSocketMessageSubscribe","_onSocketOpen","_resubscribe","WsProvider","constructor","endpoint","WS_URL","autoConnectMs","headers","writable","value","type","args","emit","event","error","Error","code","reason","message","onclose","onerror","onmessage","onopen","h","callback","undefined","setTimeout","connectWithRetry","catch","debug","data","response","JSON","parse","method","handler","id","params","subscription","result","decodeResponse","subId","subscriptions","Promise","all","map","startsWith","subscribe","endpoints","Array","isArray","test","resolve","once","hasSubscriptions","isConnected","isReady","clone","connect","fragmentOutgoingMessages","fragmentationThreshold","maxReceivedMessageSize","disconnect","close","on","sub","removeListener","send","reject","json","encodeJson","getId","unsubscribe"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable camelcase */\nimport EventEmitter from 'eventemitter3';\nimport { assert, isChildClass, isNull, isUndefined, logger } from '@polkadot/util';\nimport { xglobal } from '@polkadot/x-global';\nimport { WebSocket } from '@polkadot/x-ws';\nimport { RpcCoder } from \"../coder/index.js\";\nimport defaults from \"../defaults.js\";\nimport { getWSErrorString } from \"./errors.js\";\nconst ALIASES = {\n  chain_finalisedHead: 'chain_finalizedHead',\n  chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',\n  chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'\n};\nconst RETRY_DELAY = 2500;\nconst l = logger('api-ws');\n\nfunction eraseRecord(record, cb) {\n  Object.keys(record).forEach(key => {\n    if (cb) {\n      cb(record[key]);\n    }\n\n    delete record[key];\n  });\n}\n/**\n * # @polkadot/rpc-provider/ws\n *\n * @name WsProvider\n *\n * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Api from '@polkadot/api/promise';\n * import { WsProvider } from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const api = new Api(provider);\n * ```\n *\n * @see [[HttpProvider]]\n */\n\n\nvar _coder = /*#__PURE__*/_classPrivateFieldLooseKey(\"coder\");\n\nvar _endpoints = /*#__PURE__*/_classPrivateFieldLooseKey(\"endpoints\");\n\nvar _headers = /*#__PURE__*/_classPrivateFieldLooseKey(\"headers\");\n\nvar _eventemitter = /*#__PURE__*/_classPrivateFieldLooseKey(\"eventemitter\");\n\nvar _handlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"handlers\");\n\nvar _isReadyPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"isReadyPromise\");\n\nvar _waitingForId = /*#__PURE__*/_classPrivateFieldLooseKey(\"waitingForId\");\n\nvar _autoConnectMs = /*#__PURE__*/_classPrivateFieldLooseKey(\"autoConnectMs\");\n\nvar _endpointIndex = /*#__PURE__*/_classPrivateFieldLooseKey(\"endpointIndex\");\n\nvar _isConnected = /*#__PURE__*/_classPrivateFieldLooseKey(\"isConnected\");\n\nvar _subscriptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"subscriptions\");\n\nvar _websocket = /*#__PURE__*/_classPrivateFieldLooseKey(\"websocket\");\n\nvar _emit = /*#__PURE__*/_classPrivateFieldLooseKey(\"emit\");\n\nvar _onSocketClose = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketClose\");\n\nvar _onSocketError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketError\");\n\nvar _onSocketMessage = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessage\");\n\nvar _onSocketMessageResult = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessageResult\");\n\nvar _onSocketMessageSubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketMessageSubscribe\");\n\nvar _onSocketOpen = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSocketOpen\");\n\nvar _resubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"resubscribe\");\n\nexport class WsProvider {\n  /**\n   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.\n   * @param {boolean} autoConnect Whether to connect automatically or not.\n   */\n  constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {\n    Object.defineProperty(this, _coder, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _endpoints, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _headers, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _eventemitter, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _handlers, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _isReadyPromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _waitingForId, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _autoConnectMs, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _endpointIndex, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isConnected, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _subscriptions, {\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, _websocket, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emit, {\n      writable: true,\n      value: (type, ...args) => {\n        _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].emit(type, ...args);\n      }\n    });\n    Object.defineProperty(this, _onSocketClose, {\n      writable: true,\n      value: event => {\n        const error = new Error(`disconnected from ${_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);\n\n        if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n          l.error(error.message);\n        }\n\n        _classPrivateFieldLooseBase(this, _isConnected)[_isConnected] = false;\n\n        if (_classPrivateFieldLooseBase(this, _websocket)[_websocket]) {\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onclose = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onerror = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onmessage = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket].onopen = null;\n          _classPrivateFieldLooseBase(this, _websocket)[_websocket] = null;\n        }\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('disconnected'); // reject all hanging requests\n\n\n        eraseRecord(_classPrivateFieldLooseBase(this, _handlers)[_handlers], h => h.callback(error, undefined));\n        eraseRecord(_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId]);\n\n        if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n          setTimeout(() => {\n            this.connectWithRetry().catch(() => {// does not throw\n            });\n          }, _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs]);\n        }\n      }\n    });\n    Object.defineProperty(this, _onSocketError, {\n      writable: true,\n      value: error => {\n        l.debug(() => ['socket error', error]);\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n      }\n    });\n    Object.defineProperty(this, _onSocketMessage, {\n      writable: true,\n      value: message => {\n        l.debug(() => ['received', message.data]);\n        const response = JSON.parse(message.data);\n        return isUndefined(response.method) ? _classPrivateFieldLooseBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldLooseBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);\n      }\n    });\n    Object.defineProperty(this, _onSocketMessageResult, {\n      writable: true,\n      value: response => {\n        const handler = _classPrivateFieldLooseBase(this, _handlers)[_handlers][response.id];\n\n        if (!handler) {\n          l.debug(() => `Unable to find handler for id=${response.id}`);\n          return;\n        }\n\n        try {\n          const {\n            method,\n            params,\n            subscription\n          } = handler;\n\n          const result = _classPrivateFieldLooseBase(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update\n          // immediately if we have some queued results already\n\n\n          handler.callback(null, result);\n\n          if (subscription) {\n            const subId = `${subscription.type}::${result}`;\n            _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subId] = _objectSpread(_objectSpread({}, subscription), {}, {\n              method,\n              params\n            }); // if we have a result waiting for this subscription already\n\n            if (_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId]) {\n              _classPrivateFieldLooseBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId]);\n            }\n          }\n        } catch (error) {\n          handler.callback(error, undefined);\n        }\n\n        delete _classPrivateFieldLooseBase(this, _handlers)[_handlers][response.id];\n      }\n    });\n    Object.defineProperty(this, _onSocketMessageSubscribe, {\n      writable: true,\n      value: response => {\n        const method = ALIASES[response.method] || response.method || 'invalid';\n        const subId = `${method}::${response.params.subscription}`;\n\n        const handler = _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subId];\n\n        if (!handler) {\n          // store the JSON, we could have out-of-order subid coming in\n          _classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId] = response;\n          l.debug(() => `Unable to find handler for subscription=${subId}`);\n          return;\n        } // housekeeping\n\n\n        delete _classPrivateFieldLooseBase(this, _waitingForId)[_waitingForId][subId];\n\n        try {\n          const result = _classPrivateFieldLooseBase(this, _coder)[_coder].decodeResponse(response);\n\n          handler.callback(null, result);\n        } catch (error) {\n          handler.callback(error, undefined);\n        }\n      }\n    });\n    Object.defineProperty(this, _onSocketOpen, {\n      writable: true,\n      value: () => {\n        assert(!isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');\n        l.debug(() => ['connected to', _classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]]);\n        _classPrivateFieldLooseBase(this, _isConnected)[_isConnected] = true;\n\n        _classPrivateFieldLooseBase(this, _emit)[_emit]('connected');\n\n        _classPrivateFieldLooseBase(this, _resubscribe)[_resubscribe]();\n\n        return true;\n      }\n    });\n    Object.defineProperty(this, _resubscribe, {\n      writable: true,\n      value: () => {\n        const subscriptions = _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions];\n\n        _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions] = {};\n        Promise.all(Object.keys(subscriptions).map(async id => {\n          const {\n            callback,\n            method,\n            params,\n            type\n          } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where\n          // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'\n          // are not included (and will not be re-broadcast)\n\n          if (type.startsWith('author_')) {\n            return;\n          }\n\n          try {\n            await this.subscribe(type, method, params, callback);\n          } catch (error) {\n            l.error(error);\n          }\n        })).catch(l.error);\n      }\n    });\n    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];\n    assert(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');\n    endpoints.forEach(endpoint => {\n      assert(/^(wss|ws):\\/\\//.test(endpoint), () => `Endpoint should start with 'ws://', received '${endpoint}'`);\n    });\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter] = new EventEmitter();\n    _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;\n    _classPrivateFieldLooseBase(this, _coder)[_coder] = new RpcCoder();\n    _classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] = -1;\n    _classPrivateFieldLooseBase(this, _endpoints)[_endpoints] = endpoints;\n    _classPrivateFieldLooseBase(this, _headers)[_headers] = headers;\n    _classPrivateFieldLooseBase(this, _websocket)[_websocket] = null;\n\n    if (autoConnectMs > 0) {\n      this.connectWithRetry().catch(() => {// does not throw\n      });\n    }\n\n    _classPrivateFieldLooseBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].once('connected', () => {\n        resolve(this);\n      });\n    });\n  }\n  /**\n   * @summary `true` when this provider supports subscriptions\n   */\n\n\n  get hasSubscriptions() {\n    return true;\n  }\n  /**\n   * @summary Whether the node is connected or not.\n   * @return {boolean} true if connected\n   */\n\n\n  get isConnected() {\n    return _classPrivateFieldLooseBase(this, _isConnected)[_isConnected];\n  }\n  /**\n   * @description Promise that resolves the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return _classPrivateFieldLooseBase(this, _isReadyPromise)[_isReadyPromise];\n  }\n  /**\n   * @description Returns a clone of the object\n   */\n\n\n  clone() {\n    return new WsProvider(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints]);\n  }\n  /**\n   * @summary Manually connect\n   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may\n   * connect manually using this method.\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async connect() {\n    try {\n      _classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldLooseBase(this, _endpoints)[_endpoints].length;\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers\n      : new WebSocket(_classPrivateFieldLooseBase(this, _endpoints)[_endpoints][_classPrivateFieldLooseBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldLooseBase(this, _headers)[_headers], undefined, {\n        // default: true\n        fragmentOutgoingMessages: true,\n        // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)\n        fragmentationThreshold: 256 * 1024,\n        // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that)\n        maxReceivedMessageSize: 16 * 1024 * 1024\n      });\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onclose = _classPrivateFieldLooseBase(this, _onSocketClose)[_onSocketClose];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onerror = _classPrivateFieldLooseBase(this, _onSocketError)[_onSocketError];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldLooseBase(this, _onSocketMessage)[_onSocketMessage];\n      _classPrivateFieldLooseBase(this, _websocket)[_websocket].onopen = _classPrivateFieldLooseBase(this, _onSocketOpen)[_onSocketOpen];\n    } catch (error) {\n      l.error(error);\n\n      _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n\n      throw error;\n    }\n  }\n  /**\n   * @description Connect, never throwing an error, but rather forcing a retry\n   */\n\n\n  async connectWithRetry() {\n    if (_classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] > 0) {\n      try {\n        await this.connect();\n      } catch (error) {\n        setTimeout(() => {\n          this.connectWithRetry().catch(() => {// does not throw\n          });\n        }, _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs]);\n      }\n    }\n  }\n  /**\n   * @description Manually disconnect from the connection, clearing auto-connect logic\n   */\n  // eslint-disable-next-line @typescript-eslint/require-await\n\n\n  async disconnect() {\n    // switch off autoConnect, we are in manual mode now\n    _classPrivateFieldLooseBase(this, _autoConnectMs)[_autoConnectMs] = 0;\n\n    try {\n      if (_classPrivateFieldLooseBase(this, _websocket)[_websocket]) {\n        // 1000 - Normal closure; the connection successfully completed\n        _classPrivateFieldLooseBase(this, _websocket)[_websocket].close(1000);\n      }\n    } catch (error) {\n      l.error(error);\n\n      _classPrivateFieldLooseBase(this, _emit)[_emit]('error', error);\n\n      throw error;\n    }\n  }\n  /**\n   * @summary Listens on events after having subscribed using the [[subscribe]] function.\n   * @param  {ProviderInterfaceEmitted} type Event\n   * @param  {ProviderInterfaceEmitCb}  sub  Callback\n   * @return unsubscribe function\n   */\n\n\n  on(type, sub) {\n    _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].on(type, sub);\n\n    return () => {\n      _classPrivateFieldLooseBase(this, _eventemitter)[_eventemitter].removeListener(type, sub);\n    };\n  }\n  /**\n   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.\n   * @param method The RPC methods to execute\n   * @param params Encoded parameters as applicable for the method\n   * @param subscription Subscription details (internally used)\n   */\n\n\n  send(method, params, subscription) {\n    return new Promise((resolve, reject) => {\n      try {\n        assert(this.isConnected && !isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]), 'WebSocket is not connected');\n\n        const json = _classPrivateFieldLooseBase(this, _coder)[_coder].encodeJson(method, params);\n\n        const id = _classPrivateFieldLooseBase(this, _coder)[_coder].getId();\n\n        const callback = (error, result) => {\n          error ? reject(error) : resolve(result);\n        };\n\n        l.debug(() => ['calling', method, json]);\n        _classPrivateFieldLooseBase(this, _handlers)[_handlers][id] = {\n          callback,\n          method,\n          params,\n          subscription\n        };\n\n        _classPrivateFieldLooseBase(this, _websocket)[_websocket].send(json);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  /**\n   * @name subscribe\n   * @summary Allows subscribing to a specific event.\n   *\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * const provider = new WsProvider('ws://127.0.0.1:9944');\n   * const rpc = new Rpc(provider);\n   *\n   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {\n   *   console.log(values)\n   * }).then((subscriptionId) => {\n   *   console.log('balance changes subscription id: ', subscriptionId)\n   * })\n   * ```\n   */\n\n\n  subscribe(type, method, params, callback) {\n    return this.send(method, params, {\n      callback,\n      type\n    });\n  }\n  /**\n   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].\n   */\n\n\n  async unsubscribe(type, method, id) {\n    const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub\n    // the assigned id now does not match what the API user originally received. It has\n    // a slight complication in solving - since we cannot rely on the send id, but rather\n    // need to find the actual subscription id to map it\n\n    if (isUndefined(_classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subscription])) {\n      l.debug(() => `Unable to find active subscription=${subscription}`);\n      return false;\n    }\n\n    delete _classPrivateFieldLooseBase(this, _subscriptions)[_subscriptions][subscription];\n\n    try {\n      return this.isConnected && !isNull(_classPrivateFieldLooseBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}