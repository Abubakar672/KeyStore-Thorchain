{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    epochAuthorship: {\n      description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',\n      params: [],\n      type: 'HashMap<AuthorityId, EpochAuthorship>'\n    }\n  },\n  types: {\n    AllowedSlots: {\n      _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']\n    },\n    BabeAuthorityWeight: 'u64',\n    BabeEpochConfiguration: {\n      c: '(u64, u64)',\n      allowedSlots: 'AllowedSlots'\n    },\n    BabeBlockWeight: 'u32',\n    BabeEquivocationProof: {\n      offender: 'AuthorityId',\n      slotNumber: 'SlotNumber',\n      firstHeader: 'Header',\n      secondHeader: 'Header'\n    },\n    BabeWeight: 'u64',\n    MaybeRandomness: 'Option<Randomness>',\n    MaybeVrf: 'Option<VrfData>',\n    EpochAuthorship: {\n      primary: 'Vec<u64>',\n      secondary: 'Vec<u64>',\n      secondary_vrf: 'Vec<u64>'\n    },\n    NextConfigDescriptor: {\n      _enum: {\n        V0: 'Null',\n        V1: 'NextConfigDescriptorV1'\n      }\n    },\n    NextConfigDescriptorV1: {\n      c: '(u64, u64)',\n      allowedSlots: 'AllowedSlots'\n    },\n    Randomness: 'Hash',\n    RawBabePreDigest: {\n      _enum: {\n        Phantom: 'Null',\n        // index starts at 1... empty slot at 0\n        Primary: 'RawBabePreDigestPrimary',\n        SecondaryPlain: 'RawBabePreDigestSecondaryPlain',\n        SecondaryVRF: 'RawBabePreDigestSecondaryVRF'\n      }\n    },\n    RawBabePreDigestPrimary: {\n      authorityIndex: 'u32',\n      // AuthorityIndex (also in aura)\n      slotNumber: 'SlotNumber',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestSecondaryPlain: {\n      authorityIndex: 'u32',\n      // AuthorityIndex (also in aura)\n      slotNumber: 'SlotNumber'\n    },\n    RawBabePreDigestSecondaryVRF: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestTo159: {\n      _enum: {\n        Primary: 'RawBabePreDigestPrimaryTo159',\n        Secondary: 'RawBabePreDigestSecondaryTo159'\n      }\n    },\n    RawBabePreDigestPrimaryTo159: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      weight: 'BabeBlockWeight',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestSecondaryTo159: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      weight: 'BabeBlockWeight'\n    },\n    // a cross old/new compatible version of the digest, that is _only_ useful\n    // for partial parsing and extraction of the author. This assumes that all\n    // entries has the authorityIndex in the first position - and that it is all\n    // we are interested in\n    RawBabePreDigestCompat: {\n      _enum: {\n        Zero: 'u32',\n        One: 'u32',\n        Two: 'u32',\n        Three: 'u32'\n      }\n    },\n    SlotNumber: 'u64',\n    VrfData: '[u8; 32]',\n    VrfOutput: '[u8; 32]',\n    VrfProof: '[u8; 64]'\n  }\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/interfaces/babe/definitions.js"],"names":["rpc","epochAuthorship","description","params","type","types","AllowedSlots","_enum","BabeAuthorityWeight","BabeEpochConfiguration","c","allowedSlots","BabeBlockWeight","BabeEquivocationProof","offender","slotNumber","firstHeader","secondHeader","BabeWeight","MaybeRandomness","MaybeVrf","EpochAuthorship","primary","secondary","secondary_vrf","NextConfigDescriptor","V0","V1","NextConfigDescriptorV1","Randomness","RawBabePreDigest","Phantom","Primary","SecondaryPlain","SecondaryVRF","RawBabePreDigestPrimary","authorityIndex","vrfOutput","vrfProof","RawBabePreDigestSecondaryPlain","RawBabePreDigestSecondaryVRF","RawBabePreDigestTo159","Secondary","RawBabePreDigestPrimaryTo159","weight","RawBabePreDigestSecondaryTo159","RawBabePreDigestCompat","Zero","One","Two","Three","SlotNumber","VrfData","VrfOutput","VrfProof"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    epochAuthorship: {\n      description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',\n      params: [],\n      type: 'HashMap<AuthorityId, EpochAuthorship>'\n    }\n  },\n  types: {\n    AllowedSlots: {\n      _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']\n    },\n    BabeAuthorityWeight: 'u64',\n    BabeEpochConfiguration: {\n      c: '(u64, u64)',\n      allowedSlots: 'AllowedSlots'\n    },\n    BabeBlockWeight: 'u32',\n    BabeEquivocationProof: {\n      offender: 'AuthorityId',\n      slotNumber: 'SlotNumber',\n      firstHeader: 'Header',\n      secondHeader: 'Header'\n    },\n    BabeWeight: 'u64',\n    MaybeRandomness: 'Option<Randomness>',\n    MaybeVrf: 'Option<VrfData>',\n    EpochAuthorship: {\n      primary: 'Vec<u64>',\n      secondary: 'Vec<u64>',\n      secondary_vrf: 'Vec<u64>'\n    },\n    NextConfigDescriptor: {\n      _enum: {\n        V0: 'Null',\n        V1: 'NextConfigDescriptorV1'\n      }\n    },\n    NextConfigDescriptorV1: {\n      c: '(u64, u64)',\n      allowedSlots: 'AllowedSlots'\n    },\n    Randomness: 'Hash',\n    RawBabePreDigest: {\n      _enum: {\n        Phantom: 'Null',\n        // index starts at 1... empty slot at 0\n        Primary: 'RawBabePreDigestPrimary',\n        SecondaryPlain: 'RawBabePreDigestSecondaryPlain',\n        SecondaryVRF: 'RawBabePreDigestSecondaryVRF'\n      }\n    },\n    RawBabePreDigestPrimary: {\n      authorityIndex: 'u32',\n      // AuthorityIndex (also in aura)\n      slotNumber: 'SlotNumber',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestSecondaryPlain: {\n      authorityIndex: 'u32',\n      // AuthorityIndex (also in aura)\n      slotNumber: 'SlotNumber'\n    },\n    RawBabePreDigestSecondaryVRF: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestTo159: {\n      _enum: {\n        Primary: 'RawBabePreDigestPrimaryTo159',\n        Secondary: 'RawBabePreDigestSecondaryTo159'\n      }\n    },\n    RawBabePreDigestPrimaryTo159: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      weight: 'BabeBlockWeight',\n      vrfOutput: 'VrfOutput',\n      vrfProof: 'VrfProof'\n    },\n    RawBabePreDigestSecondaryTo159: {\n      authorityIndex: 'u32',\n      slotNumber: 'SlotNumber',\n      weight: 'BabeBlockWeight'\n    },\n    // a cross old/new compatible version of the digest, that is _only_ useful\n    // for partial parsing and extraction of the author. This assumes that all\n    // entries has the authorityIndex in the first position - and that it is all\n    // we are interested in\n    RawBabePreDigestCompat: {\n      _enum: {\n        Zero: 'u32',\n        One: 'u32',\n        Two: 'u32',\n        Three: 'u32'\n      }\n    },\n    SlotNumber: 'u64',\n    VrfData: '[u8; 32]',\n    VrfOutput: '[u8; 32]',\n    VrfProof: '[u8; 64]'\n  }\n};"]},"metadata":{},"sourceType":"module"}