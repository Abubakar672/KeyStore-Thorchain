{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return operate(function (source, subscriber) {\n    var windows = [new Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var c = count - windowSize + 1;\n\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/windowCount.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AA+DA,OAAM,SAAU,WAAV,CAAyB,UAAzB,EAA6C,gBAA7C,EAAyE;AAA5B,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAA4B;;AAC7E,MAAM,UAAU,GAAG,gBAAgB,GAAG,CAAnB,GAAuB,gBAAvB,GAA0C,UAA7D;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,OAAO,GAAG,CAAC,IAAI,OAAJ,EAAD,CAAd;AACA,QAAI,MAAM,GAAa,EAAvB;AACA,QAAI,KAAK,GAAG,CAAZ;AAGA,IAAA,UAAU,CAAC,IAAX,CAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,YAAX,EAAhB;AAEA,IAAA,MAAM,CAAC,SAAP,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAS;;;;AAIP,aAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,cAAM,QAAM,GAAA,WAAA,CAAA,KAAZ;AACH,UAAA,QAAM,CAAC,IAAP,CAAY,KAAZ;AACD;;;;;;;;;;;;;AAMD,UAAM,CAAC,GAAG,KAAK,GAAG,UAAR,GAAqB,CAA/B;;AACA,UAAI,CAAC,IAAI,CAAL,IAAU,CAAC,GAAG,UAAJ,KAAmB,CAAjC,EAAoC;AAClC,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AAOD,UAAI,EAAE,KAAF,GAAU,UAAV,KAAyB,CAA7B,EAAgC;AAC9B,YAAM,QAAM,GAAG,IAAI,OAAJ,EAAf;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,QAAb;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,QAAM,CAAC,YAAP,EAAhB;AACD;AACF,KA7BH,EA8BE,YAAA;AACE,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AACD,MAAA,UAAU,CAAC,QAAX;AACD,KAnCH,EAoCE,UAAC,GAAD,EAAI;AACF,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,KAAjB,CAAuB,GAAvB;AACD;;AACD,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD,KAzCH,EA0CE,YAAA;AACE,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,OAAO,GAAG,IAAV;AACD,KA7CH,CADF;AAiDD,GAzDa,CAAd;AA0DD","sourceRoot":"","sourcesContent":["import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n    return operate(function (source, subscriber) {\n        var windows = [new Subject()];\n        var starts = [];\n        var count = 0;\n        subscriber.next(windows[0].asObservable());\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            var e_1, _a;\n            try {\n                for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n                    var window_1 = windows_1_1.value;\n                    window_1.next(value);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var c = count - windowSize + 1;\n            if (c >= 0 && c % startEvery === 0) {\n                windows.shift().complete();\n            }\n            if (++count % startEvery === 0) {\n                var window_2 = new Subject();\n                windows.push(window_2);\n                subscriber.next(window_2.asObservable());\n            }\n        }, function () {\n            while (windows.length > 0) {\n                windows.shift().complete();\n            }\n            subscriber.complete();\n        }, function (err) {\n            while (windows.length > 0) {\n                windows.shift().error(err);\n            }\n            subscriber.error(err);\n        }, function () {\n            starts = null;\n            windows = null;\n        }));\n    });\n}\n//# sourceMappingURL=windowCount.js.map"]},"metadata":{},"sourceType":"module"}