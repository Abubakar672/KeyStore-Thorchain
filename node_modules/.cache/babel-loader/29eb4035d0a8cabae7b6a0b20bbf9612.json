{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nconst CACHE_KEY = 'eraExposure';\n\nfunction mapStakers(era, stakers) {\n  const nominators = {};\n  const validators = {};\n  stakers.forEach(([key, exposure]) => {\n    const validatorId = key.args[1].toString();\n    validators[validatorId] = exposure;\n    exposure.others.forEach(({\n      who\n    }, validatorIndex) => {\n      const nominatorId = who.toString();\n      nominators[nominatorId] = nominators[nominatorId] || [];\n      nominators[nominatorId].push({\n        validatorId,\n        validatorIndex\n      });\n    });\n  });\n  return {\n    era,\n    nominators,\n    validators\n  };\n}\n\nexport function _eraExposure(instanceId, api) {\n  return memo(instanceId, (era, withActive) => {\n    const cacheKey = `${CACHE_KEY}-${era.toString()}`;\n    const cached = withActive ? undefined : deriveCache.get(cacheKey);\n    return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(stakers => {\n      const value = mapStakers(era, stakers);\n      !withActive && deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\nexport function eraExposure(instanceId, api) {\n  return memo(instanceId, era => api.derive.staking._eraExposure(era, true));\n}\nexport function _erasExposure(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraExposure(era, withActive))) : of([]));\n}\nexport function erasExposure(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasExposure(eras, withActive))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/erasExposure.js"],"names":["combineLatest","map","of","switchMap","deriveCache","memo","CACHE_KEY","mapStakers","era","stakers","nominators","validators","forEach","key","exposure","validatorId","args","toString","others","who","validatorIndex","nominatorId","push","_eraExposure","instanceId","api","withActive","cacheKey","cached","undefined","get","query","staking","erasStakersClipped","entries","pipe","value","set","eraExposure","derive","_erasExposure","eras","length","erasExposure","erasHistoric"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nconst CACHE_KEY = 'eraExposure';\n\nfunction mapStakers(era, stakers) {\n  const nominators = {};\n  const validators = {};\n  stakers.forEach(([key, exposure]) => {\n    const validatorId = key.args[1].toString();\n    validators[validatorId] = exposure;\n    exposure.others.forEach(({\n      who\n    }, validatorIndex) => {\n      const nominatorId = who.toString();\n      nominators[nominatorId] = nominators[nominatorId] || [];\n      nominators[nominatorId].push({\n        validatorId,\n        validatorIndex\n      });\n    });\n  });\n  return {\n    era,\n    nominators,\n    validators\n  };\n}\n\nexport function _eraExposure(instanceId, api) {\n  return memo(instanceId, (era, withActive) => {\n    const cacheKey = `${CACHE_KEY}-${era.toString()}`;\n    const cached = withActive ? undefined : deriveCache.get(cacheKey);\n    return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(stakers => {\n      const value = mapStakers(era, stakers);\n      !withActive && deriveCache.set(cacheKey, value);\n      return value;\n    }));\n  });\n}\nexport function eraExposure(instanceId, api) {\n  return memo(instanceId, era => api.derive.staking._eraExposure(era, true));\n}\nexport function _erasExposure(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => eras.length ? combineLatest(eras.map(era => api.derive.staking._eraExposure(era, withActive))) : of([]));\n}\nexport function erasExposure(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasExposure(eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}