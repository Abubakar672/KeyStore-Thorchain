{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { keyExtractPath } from \"../key/index.js\";\nimport { schnorrkelDerivePublic } from \"../schnorrkel/index.js\";\nimport { decodeAddress } from \"./decode.js\";\nimport { encodeAddress } from \"./encode.js\";\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\n\nexport function deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = keyExtractPath(suri);\n  assert(path.length && !path.some(path => path.isHard), 'Expected suri to contain a combination of non-hard paths');\n  return encodeAddress(path.reduce((publicKey, path) => {\n    return schnorrkelDerivePublic(publicKey, path.chainCode);\n  }, decodeAddress(who)), ss58Format);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/address/derive.js"],"names":["assert","keyExtractPath","schnorrkelDerivePublic","decodeAddress","encodeAddress","deriveAddress","who","suri","ss58Format","path","length","some","isHard","reduce","publicKey","chainCode"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,UAAlC,EAA8C;AACnD,QAAM;AACJC,IAAAA;AADI,MAEFR,cAAc,CAACM,IAAD,CAFlB;AAGAP,EAAAA,MAAM,CAACS,IAAI,CAACC,MAAL,IAAe,CAACD,IAAI,CAACE,IAAL,CAAUF,IAAI,IAAIA,IAAI,CAACG,MAAvB,CAAjB,EAAiD,0DAAjD,CAAN;AACA,SAAOR,aAAa,CAACK,IAAI,CAACI,MAAL,CAAY,CAACC,SAAD,EAAYL,IAAZ,KAAqB;AACpD,WAAOP,sBAAsB,CAACY,SAAD,EAAYL,IAAI,CAACM,SAAjB,CAA7B;AACD,GAFoB,EAElBZ,aAAa,CAACG,GAAD,CAFK,CAAD,EAEIE,UAFJ,CAApB;AAGD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { keyExtractPath } from \"../key/index.js\";\nimport { schnorrkelDerivePublic } from \"../schnorrkel/index.js\";\nimport { decodeAddress } from \"./decode.js\";\nimport { encodeAddress } from \"./encode.js\";\n/**\n * @name deriveAddress\n * @summary Creates a sr25519 derived address from the supplied and path.\n * @description\n * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.\n */\n\nexport function deriveAddress(who, suri, ss58Format) {\n  const {\n    path\n  } = keyExtractPath(suri);\n  assert(path.length && !path.some(path => path.isHard), 'Expected suri to contain a combination of non-hard paths');\n  return encodeAddress(path.reduce((publicKey, path) => {\n    return schnorrkelDerivePublic(publicKey, path.chainCode);\n  }, decodeAddress(who)), ss58Format);\n}"]},"metadata":{},"sourceType":"module"}