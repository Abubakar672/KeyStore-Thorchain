{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore, decryptFromKeystore } from '@xchainjs/xchain-crypto';\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css'; // Crypto Constants for xchain\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cipher = 'aes-128-ctr';\nconst kdf = 'pbkdf2';\nconst prf = 'hmac-sha256';\nconst dklen = 32;\nconst c = 262144;\nconst hashFunction = 'sha256';\nconst meta = 'xchain-keystore';\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  const [fileKeyStore, setfileKeyStore] = React.useState(\"\");\n  let key;\n  let tea; // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase();\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input); // console.log('key========>', key)\n\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const phraseDecrypted = async () => {\n    try {\n      tea = await decryptFromKeystore(key);\n      console.log(\"===================================>>>>>>\", tea);\n    } catch (error) {\n      console.log(error);\n    }\n  }; //   const handleValidation =() => {\n  //     const { input } = this.state;\n  //     // only each block with generate error\n  //     if (!input || isNaN(input)) {\n  //       this.setState({ error: 'price is not valid' });\n  //     }else {\n  //       this.setState({error: \"\"})\n  //       // submit code here\n  //     }\n  // }\n\n\n  const decryptKeyStore = async () => {\n    console.log(\"password====>\", input);\n    console.log(\"fileKeyStroe====>\", fileKeyStore);\n    let res = await decryptFromKeystore(fileKeyStore, input);\n    console.log(\"decryption=====>\", res);\n  };\n  /*File creation and saving here*/\n\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\", key);\n    const file = new Blob([JSON.stringify(key)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }; // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n  // const  onFileChange = event => {    \n  //     // Update the state\n  //     this.setState({ selectedFile: event.target.files[0] });\n  //   };\n  //  const onFileUpload = () => {\n  //     // Create an object of formData\n  //     const formData = new FormData();\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       this.state.selectedFile,\n  //       this.state.selectedFile.name\n  //     );}\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Thorchain Custom Keystore Maker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Enter your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"input\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: keystore,\n            children: \"Create KeyStore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Thorchain KeyStore Decryption \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Enter your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \"Upload!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"CF5PG0BXkx+BorRLMid1uAXVZrA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js"],"names":["generatePhrase","encryptToKeyStore","decryptFromKeystore","React","Component","useEffect","Button","Container","Header","Segment","Grid","cipher","kdf","prf","dklen","c","hashFunction","meta","App","response","setResponse","useState","input","setInput","fileKeyStore","setfileKeyStore","key","tea","keystore","phrase","console","log","downloadTextFile","error","phraseDecrypted","decryptKeyStore","res","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","e","target","value"],"mappings":"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","sourcesContent":["import { generatePhrase, encryptToKeyStore ,decryptFromKeystore} from '@xchainjs/xchain-crypto'\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\n\n// Crypto Constants for xchain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'xchain-keystore'\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  const [fileKeyStore , setfileKeyStore] = React.useState(\"\")\n  let key\n  let tea\n  // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase()\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n      \n      downloadTextFile();\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const phraseDecrypted = async()=>{ \n    try{\n      tea = await decryptFromKeystore(key)\n      console.log(\"===================================>>>>>>\",tea)\n    }\n    catch (error){\n      console.log(error);\n    }\n    }\n//   const handleValidation =() => {\n//     const { input } = this.state;\n\n//     // only each block with generate error\n//     if (!input || isNaN(input)) {\n//       this.setState({ error: 'price is not valid' });\n//     }else {\n//       this.setState({error: \"\"})\n//       // submit code here\n//     }\n// }\n\n\n\n\nconst decryptKeyStore = async () => {\n  console.log(\"password====>\", input);\n  console.log(\"fileKeyStroe====>\", fileKeyStore);\n  \n  let res = await decryptFromKeystore(fileKeyStore, input);\n  console.log(\"decryption=====>\", res);\n  };\n\n  /*File creation and saving here*/ \n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\",key)\n    const file = new Blob([JSON.stringify(key)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n  // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n// const  onFileChange = event => {    \n//     // Update the state\n//     this.setState({ selectedFile: event.target.files[0] });\n//   };\n//  const onFileUpload = () => {\n//     // Create an object of formData\n//     const formData = new FormData();\n//     // Update the formData object\n//     formData.append(\n//       \"myFile\",\n//       this.state.selectedFile,\n//       this.state.selectedFile.name\n//     );}\n\n\n\nreturn <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={keystore}>Create KeyStore</Button>\n        </div>\n        <h1> Thorchain KeyStore Decryption </h1>\n        \n        <div>\n          <h1>Enter your password</h1>\n       {/* // <input id=\"password\" value={input} onchange ={e=> setInput(e.target.value)}/> */}\n        </div>\n        \n        <div>\n        <input type=\"file\"/>\n                <button >\n                  Upload!\n                </button>\n        </div>\n\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}