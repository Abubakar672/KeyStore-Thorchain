{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, bnToU8a } from '@polkadot/util';\nimport { EXPAND_OPT, secp256k1 } from \"../secp256k1.js\";\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nexport function secp256k1KeypairFromSeed(seed) {\n  assert(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = secp256k1.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: bnToU8a(key.getPrivate(), EXPAND_OPT)\n  };\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/secp256k1/keypair/fromSeed.js"],"names":["assert","bnToU8a","EXPAND_OPT","secp256k1","secp256k1KeypairFromSeed","seed","length","key","keyFromPrivate","publicKey","Uint8Array","getPublic","encodeCompressed","secretKey","getPrivate"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,gBAAhC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,iBAAtC;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AAC7CL,EAAAA,MAAM,CAACK,IAAI,CAACC,MAAL,KAAgB,EAAjB,EAAqB,8CAArB,CAAN;AACA,QAAMC,GAAG,GAAGJ,SAAS,CAACK,cAAV,CAAyBH,IAAzB,CAAZ;AACA,SAAO;AACLI,IAAAA,SAAS,EAAE,IAAIC,UAAJ,CAAeH,GAAG,CAACI,SAAJ,GAAgBC,gBAAhB,EAAf,CADN;AAELC,IAAAA,SAAS,EAAEZ,OAAO,CAACM,GAAG,CAACO,UAAJ,EAAD,EAAmBZ,UAAnB;AAFb,GAAP;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, bnToU8a } from '@polkadot/util';\nimport { EXPAND_OPT, secp256k1 } from \"../secp256k1.js\";\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nexport function secp256k1KeypairFromSeed(seed) {\n  assert(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = secp256k1.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: bnToU8a(key.getPrivate(), EXPAND_OPT)\n  };\n}"]},"metadata":{},"sourceType":"module"}