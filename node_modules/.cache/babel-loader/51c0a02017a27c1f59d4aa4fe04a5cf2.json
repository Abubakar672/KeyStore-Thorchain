{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-dupe-class-members */\n\n\nimport { catchError, first, map, mapTo, mergeMap, of, switchMap, tap } from 'rxjs';\nimport { assert, isBn, isFunction, isNumber, isString, isU8a } from '@polkadot/util';\nimport { filterEvents, isKeyringPair } from \"../util/index.js\";\nimport { SubmittableResult } from \"./Result.js\";\n\nconst identity = input => input;\n\nexport function createClass({\n  api,\n  apiType,\n  decorateMethod\n}) {\n  // an instance of the base extrinsic for us to extend\n  const ExtrinsicBase = api.registry.createClass('Extrinsic');\n\n  var _ignoreStatusCb = /*#__PURE__*/_classPrivateFieldLooseKey(\"ignoreStatusCb\");\n\n  var _transformResult = /*#__PURE__*/_classPrivateFieldLooseKey(\"transformResult\");\n\n  var _makeEraOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeEraOptions\");\n\n  var _makeSignOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeSignOptions\");\n\n  var _makeSignAndSendOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeSignAndSendOptions\");\n\n  var _observeSign = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSign\");\n\n  var _observeStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeStatus\");\n\n  var _observeSend = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSend\");\n\n  var _observeSubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSubscribe\");\n\n  var _optionsOrNonce = /*#__PURE__*/_classPrivateFieldLooseKey(\"optionsOrNonce\");\n\n  var _signViaSigner = /*#__PURE__*/_classPrivateFieldLooseKey(\"signViaSigner\");\n\n  var _updateSigner = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateSigner\");\n\n  class Submittable extends ExtrinsicBase {\n    constructor(registry, extrinsic) {\n      super(registry, extrinsic, {\n        version: api.extrinsicType\n      });\n      Object.defineProperty(this, _ignoreStatusCb, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _transformResult, {\n        writable: true,\n        value: identity\n      });\n      Object.defineProperty(this, _makeEraOptions, {\n        writable: true,\n        value: (options, {\n          header,\n          mortalLength,\n          nonce\n        }) => {\n          if (!header) {\n            if (isNumber(options.era)) {\n              // since we have no header, it is immortal, remove any option overrides\n              // so we only supply the genesisHash and no era to the construction\n              delete options.era;\n              delete options.blockHash;\n            }\n\n            return _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](options, {\n              nonce\n            });\n          }\n\n          return _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](options, {\n            blockHash: header.hash,\n            era: this.registry.createType('ExtrinsicEra', {\n              current: header.number,\n              period: options.era || mortalLength\n            }),\n            nonce\n          });\n        }\n      });\n      Object.defineProperty(this, _makeSignOptions, {\n        writable: true,\n        value: (options, extras) => {\n          return _objectSpread(_objectSpread(_objectSpread({\n            blockHash: api.genesisHash,\n            genesisHash: api.genesisHash\n          }, options), extras), {}, {\n            runtimeVersion: api.runtimeVersion,\n            signedExtensions: api.registry.signedExtensions,\n            version: api.extrinsicType\n          });\n        }\n      });\n      Object.defineProperty(this, _makeSignAndSendOptions, {\n        writable: true,\n        value: (optionsOrStatus, statusCb) => {\n          let options = {};\n\n          if (isFunction(optionsOrStatus)) {\n            statusCb = optionsOrStatus;\n          } else {\n            options = _objectSpread({}, optionsOrStatus);\n          }\n\n          return [options, statusCb];\n        }\n      });\n      Object.defineProperty(this, _observeSign, {\n        writable: true,\n        value: (account, optionsOrNonce) => {\n          const address = isKeyringPair(account) ? account.address : account.toString();\n\n          const options = _classPrivateFieldLooseBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce);\n\n          let updateId;\n          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {\n            const eraOptions = _classPrivateFieldLooseBase(this, _makeEraOptions)[_makeEraOptions](options, signingInfo);\n\n            if (isKeyringPair(account)) {\n              this.sign(account, eraOptions);\n            } else {\n              updateId = await _classPrivateFieldLooseBase(this, _signViaSigner)[_signViaSigner](address, eraOptions, signingInfo.header);\n            }\n          }), mapTo(updateId));\n        }\n      });\n      Object.defineProperty(this, _observeStatus, {\n        writable: true,\n        value: (hash, status) => {\n          if (!status.isFinalized && !status.isInBlock) {\n            return of(_classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n              status\n            })));\n          }\n\n          const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;\n          return api.derive.tx.events(blockHash).pipe(map(({\n            block,\n            events\n          }) => _classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n            events: filterEvents(hash, block, events, status),\n            status\n          }))), catchError(internalError => of(_classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n            internalError,\n            status\n          })))));\n        }\n      });\n      Object.defineProperty(this, _observeSend, {\n        writable: true,\n        value: (updateId = -1) => {\n          return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {\n            _classPrivateFieldLooseBase(this, _updateSigner)[_updateSigner](updateId, hash);\n          }));\n        }\n      });\n      Object.defineProperty(this, _observeSubscribe, {\n        writable: true,\n        value: (updateId = -1) => {\n          const hash = this.hash;\n          return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => _classPrivateFieldLooseBase(this, _observeStatus)[_observeStatus](hash, status)), tap(status => {\n            _classPrivateFieldLooseBase(this, _updateSigner)[_updateSigner](updateId, status);\n          }));\n        }\n      });\n      Object.defineProperty(this, _optionsOrNonce, {\n        writable: true,\n        value: (optionsOrNonce = {}) => {\n          return isBn(optionsOrNonce) || isNumber(optionsOrNonce) ? {\n            nonce: optionsOrNonce\n          } : optionsOrNonce;\n        }\n      });\n      Object.defineProperty(this, _signViaSigner, {\n        writable: true,\n        value: async (address, options, header) => {\n          const signer = options.signer || api.signer;\n          assert(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n          const payload = this.registry.createType('SignerPayload', _objectSpread(_objectSpread({}, options), {}, {\n            address,\n            blockNumber: header ? header.number : 0,\n            method: this.method\n          }));\n          let result;\n\n          if (signer.signPayload) {\n            result = await signer.signPayload(payload.toPayload());\n          } else if (signer.signRaw) {\n            result = await signer.signRaw(payload.toRaw());\n          } else {\n            throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');\n          } // Here we explicitly call `toPayload()` again instead of working with an object\n          // (reference) as passed to the signer. This means that we are sure that the\n          // payload data is not modified from our inputs, but the signer\n\n\n          super.addSignature(address, result.signature, payload.toPayload());\n          return result.id;\n        }\n      });\n      Object.defineProperty(this, _updateSigner, {\n        writable: true,\n        value: (updateId, status) => {\n          if (updateId !== -1 && api.signer && api.signer.update) {\n            api.signer.update(updateId, status);\n          }\n        }\n      });\n      _classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] = apiType === 'rxjs';\n    } // dry run an extrinsic\n\n\n    dryRun(account, optionsOrHash) {\n      if (isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();\n    } // calculate the payment info for this transaction (if signed and submitted)\n\n\n    paymentInfo(account, optionsOrHash) {\n      if (isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));\n      }\n\n      const [allOptions] = _classPrivateFieldLooseBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrHash);\n\n      const address = isKeyringPair(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {\n        // setup our options (same way as in signAndSend)\n        const eraOptions = _classPrivateFieldLooseBase(this, _makeEraOptions)[_makeEraOptions](allOptions, signingInfo);\n\n        const signOptions = _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](eraOptions, {});\n\n        this.signFake(address, signOptions);\n        return api.rpc.payment.queryInfo(this.toHex());\n      })))();\n    } // send with an immediate Hash result\n    // send implementation for both immediate Hash and statusCb variants\n\n\n    send(statusCb) {\n      const isSubscription = api.hasSubscriptions && (_classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(isSubscription ? _classPrivateFieldLooseBase(this, _observeSubscribe)[_observeSubscribe] : _classPrivateFieldLooseBase(this, _observeSend)[_observeSend])(statusCb);\n    }\n    /**\n     * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)\n     * @deprecated\n     */\n\n\n    sign(account, optionsOrNonce) {\n      super.sign(account, _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](_classPrivateFieldLooseBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce), {}));\n      return this;\n    }\n    /**\n     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.\n     */\n\n\n    signAsync(account, optionsOrNonce) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, optionsOrNonce).pipe(mapTo(this)))();\n    } // signAndSend with an immediate Hash result\n    // signAndSend implementation for all 3 cases above\n\n\n    signAndSend(account, optionsOrStatus, optionalStatusCb) {\n      const [options, statusCb] = _classPrivateFieldLooseBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrStatus, optionalStatusCb);\n\n      const isSubscription = api.hasSubscriptions && (_classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, options).pipe(switchMap(updateId => isSubscription ? _classPrivateFieldLooseBase(this, _observeSubscribe)[_observeSubscribe](updateId) : _classPrivateFieldLooseBase(this, _observeSend)[_observeSend](updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec\n      )(statusCb);\n    } // adds a transform to the result, applied before result is returned\n\n\n    withResultTransform(transform) {\n      _classPrivateFieldLooseBase(this, _transformResult)[_transformResult] = transform;\n      return this;\n    }\n\n  }\n\n  return Submittable;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api/submittable/createClass.js"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","catchError","first","map","mapTo","mergeMap","of","switchMap","tap","assert","isBn","isFunction","isNumber","isString","isU8a","filterEvents","isKeyringPair","SubmittableResult","identity","input","createClass","api","apiType","decorateMethod","ExtrinsicBase","registry","_ignoreStatusCb","_transformResult","_makeEraOptions","_makeSignOptions","_makeSignAndSendOptions","_observeSign","_observeStatus","_observeSend","_observeSubscribe","_optionsOrNonce","_signViaSigner","_updateSigner","Submittable","constructor","extrinsic","version","extrinsicType","writable","value","options","header","mortalLength","nonce","era","blockHash","hash","createType","current","number","period","extras","genesisHash","runtimeVersion","signedExtensions","optionsOrStatus","statusCb","account","optionsOrNonce","address","toString","updateId","derive","tx","signingInfo","pipe","eraOptions","sign","status","isFinalized","isInBlock","asInBlock","asFinalized","events","block","internalError","rpc","author","submitExtrinsic","submitAndWatchExtrinsic","signer","payload","blockNumber","method","result","signPayload","toPayload","signRaw","toRaw","Error","addSignature","signature","id","update","dryRun","optionsOrHash","system","toHex","paymentInfo","payment","queryInfo","allOptions","signOptions","signFake","send","isSubscription","hasSubscriptions","signAsync","signAndSend","optionalStatusCb","withResultTransform","transform"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-dupe-class-members */\nimport { catchError, first, map, mapTo, mergeMap, of, switchMap, tap } from 'rxjs';\nimport { assert, isBn, isFunction, isNumber, isString, isU8a } from '@polkadot/util';\nimport { filterEvents, isKeyringPair } from \"../util/index.js\";\nimport { SubmittableResult } from \"./Result.js\";\n\nconst identity = input => input;\n\nexport function createClass({\n  api,\n  apiType,\n  decorateMethod\n}) {\n  // an instance of the base extrinsic for us to extend\n  const ExtrinsicBase = api.registry.createClass('Extrinsic');\n\n  var _ignoreStatusCb = /*#__PURE__*/_classPrivateFieldLooseKey(\"ignoreStatusCb\");\n\n  var _transformResult = /*#__PURE__*/_classPrivateFieldLooseKey(\"transformResult\");\n\n  var _makeEraOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeEraOptions\");\n\n  var _makeSignOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeSignOptions\");\n\n  var _makeSignAndSendOptions = /*#__PURE__*/_classPrivateFieldLooseKey(\"makeSignAndSendOptions\");\n\n  var _observeSign = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSign\");\n\n  var _observeStatus = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeStatus\");\n\n  var _observeSend = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSend\");\n\n  var _observeSubscribe = /*#__PURE__*/_classPrivateFieldLooseKey(\"observeSubscribe\");\n\n  var _optionsOrNonce = /*#__PURE__*/_classPrivateFieldLooseKey(\"optionsOrNonce\");\n\n  var _signViaSigner = /*#__PURE__*/_classPrivateFieldLooseKey(\"signViaSigner\");\n\n  var _updateSigner = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateSigner\");\n\n  class Submittable extends ExtrinsicBase {\n    constructor(registry, extrinsic) {\n      super(registry, extrinsic, {\n        version: api.extrinsicType\n      });\n      Object.defineProperty(this, _ignoreStatusCb, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _transformResult, {\n        writable: true,\n        value: identity\n      });\n      Object.defineProperty(this, _makeEraOptions, {\n        writable: true,\n        value: (options, {\n          header,\n          mortalLength,\n          nonce\n        }) => {\n          if (!header) {\n            if (isNumber(options.era)) {\n              // since we have no header, it is immortal, remove any option overrides\n              // so we only supply the genesisHash and no era to the construction\n              delete options.era;\n              delete options.blockHash;\n            }\n\n            return _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](options, {\n              nonce\n            });\n          }\n\n          return _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](options, {\n            blockHash: header.hash,\n            era: this.registry.createType('ExtrinsicEra', {\n              current: header.number,\n              period: options.era || mortalLength\n            }),\n            nonce\n          });\n        }\n      });\n      Object.defineProperty(this, _makeSignOptions, {\n        writable: true,\n        value: (options, extras) => {\n          return _objectSpread(_objectSpread(_objectSpread({\n            blockHash: api.genesisHash,\n            genesisHash: api.genesisHash\n          }, options), extras), {}, {\n            runtimeVersion: api.runtimeVersion,\n            signedExtensions: api.registry.signedExtensions,\n            version: api.extrinsicType\n          });\n        }\n      });\n      Object.defineProperty(this, _makeSignAndSendOptions, {\n        writable: true,\n        value: (optionsOrStatus, statusCb) => {\n          let options = {};\n\n          if (isFunction(optionsOrStatus)) {\n            statusCb = optionsOrStatus;\n          } else {\n            options = _objectSpread({}, optionsOrStatus);\n          }\n\n          return [options, statusCb];\n        }\n      });\n      Object.defineProperty(this, _observeSign, {\n        writable: true,\n        value: (account, optionsOrNonce) => {\n          const address = isKeyringPair(account) ? account.address : account.toString();\n\n          const options = _classPrivateFieldLooseBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce);\n\n          let updateId;\n          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {\n            const eraOptions = _classPrivateFieldLooseBase(this, _makeEraOptions)[_makeEraOptions](options, signingInfo);\n\n            if (isKeyringPair(account)) {\n              this.sign(account, eraOptions);\n            } else {\n              updateId = await _classPrivateFieldLooseBase(this, _signViaSigner)[_signViaSigner](address, eraOptions, signingInfo.header);\n            }\n          }), mapTo(updateId));\n        }\n      });\n      Object.defineProperty(this, _observeStatus, {\n        writable: true,\n        value: (hash, status) => {\n          if (!status.isFinalized && !status.isInBlock) {\n            return of(_classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n              status\n            })));\n          }\n\n          const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;\n          return api.derive.tx.events(blockHash).pipe(map(({\n            block,\n            events\n          }) => _classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n            events: filterEvents(hash, block, events, status),\n            status\n          }))), catchError(internalError => of(_classPrivateFieldLooseBase(this, _transformResult)[_transformResult](new SubmittableResult({\n            internalError,\n            status\n          })))));\n        }\n      });\n      Object.defineProperty(this, _observeSend, {\n        writable: true,\n        value: (updateId = -1) => {\n          return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {\n            _classPrivateFieldLooseBase(this, _updateSigner)[_updateSigner](updateId, hash);\n          }));\n        }\n      });\n      Object.defineProperty(this, _observeSubscribe, {\n        writable: true,\n        value: (updateId = -1) => {\n          const hash = this.hash;\n          return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => _classPrivateFieldLooseBase(this, _observeStatus)[_observeStatus](hash, status)), tap(status => {\n            _classPrivateFieldLooseBase(this, _updateSigner)[_updateSigner](updateId, status);\n          }));\n        }\n      });\n      Object.defineProperty(this, _optionsOrNonce, {\n        writable: true,\n        value: (optionsOrNonce = {}) => {\n          return isBn(optionsOrNonce) || isNumber(optionsOrNonce) ? {\n            nonce: optionsOrNonce\n          } : optionsOrNonce;\n        }\n      });\n      Object.defineProperty(this, _signViaSigner, {\n        writable: true,\n        value: async (address, options, header) => {\n          const signer = options.signer || api.signer;\n          assert(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n          const payload = this.registry.createType('SignerPayload', _objectSpread(_objectSpread({}, options), {}, {\n            address,\n            blockNumber: header ? header.number : 0,\n            method: this.method\n          }));\n          let result;\n\n          if (signer.signPayload) {\n            result = await signer.signPayload(payload.toPayload());\n          } else if (signer.signRaw) {\n            result = await signer.signRaw(payload.toRaw());\n          } else {\n            throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');\n          } // Here we explicitly call `toPayload()` again instead of working with an object\n          // (reference) as passed to the signer. This means that we are sure that the\n          // payload data is not modified from our inputs, but the signer\n\n\n          super.addSignature(address, result.signature, payload.toPayload());\n          return result.id;\n        }\n      });\n      Object.defineProperty(this, _updateSigner, {\n        writable: true,\n        value: (updateId, status) => {\n          if (updateId !== -1 && api.signer && api.signer.update) {\n            api.signer.update(updateId, status);\n          }\n        }\n      });\n      _classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] = apiType === 'rxjs';\n    } // dry run an extrinsic\n\n\n    dryRun(account, optionsOrHash) {\n      if (isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));\n      } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();\n    } // calculate the payment info for this transaction (if signed and submitted)\n\n\n    paymentInfo(account, optionsOrHash) {\n      if (isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));\n      }\n\n      const [allOptions] = _classPrivateFieldLooseBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrHash);\n\n      const address = isKeyringPair(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {\n        // setup our options (same way as in signAndSend)\n        const eraOptions = _classPrivateFieldLooseBase(this, _makeEraOptions)[_makeEraOptions](allOptions, signingInfo);\n\n        const signOptions = _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](eraOptions, {});\n\n        this.signFake(address, signOptions);\n        return api.rpc.payment.queryInfo(this.toHex());\n      })))();\n    } // send with an immediate Hash result\n\n\n    // send implementation for both immediate Hash and statusCb variants\n    send(statusCb) {\n      const isSubscription = api.hasSubscriptions && (_classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(isSubscription ? _classPrivateFieldLooseBase(this, _observeSubscribe)[_observeSubscribe] : _classPrivateFieldLooseBase(this, _observeSend)[_observeSend])(statusCb);\n    }\n    /**\n     * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)\n     * @deprecated\n     */\n\n\n    sign(account, optionsOrNonce) {\n      super.sign(account, _classPrivateFieldLooseBase(this, _makeSignOptions)[_makeSignOptions](_classPrivateFieldLooseBase(this, _optionsOrNonce)[_optionsOrNonce](optionsOrNonce), {}));\n      return this;\n    }\n    /**\n     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.\n     */\n\n\n    signAsync(account, optionsOrNonce) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, optionsOrNonce).pipe(mapTo(this)))();\n    } // signAndSend with an immediate Hash result\n\n\n    // signAndSend implementation for all 3 cases above\n    signAndSend(account, optionsOrStatus, optionalStatusCb) {\n      const [options, statusCb] = _classPrivateFieldLooseBase(this, _makeSignAndSendOptions)[_makeSignAndSendOptions](optionsOrStatus, optionalStatusCb);\n\n      const isSubscription = api.hasSubscriptions && (_classPrivateFieldLooseBase(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return decorateMethod(() => _classPrivateFieldLooseBase(this, _observeSign)[_observeSign](account, options).pipe(switchMap(updateId => isSubscription ? _classPrivateFieldLooseBase(this, _observeSubscribe)[_observeSubscribe](updateId) : _classPrivateFieldLooseBase(this, _observeSend)[_observeSend](updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec\n      )(statusCb);\n    } // adds a transform to the result, applied before result is returned\n\n\n    withResultTransform(transform) {\n      _classPrivateFieldLooseBase(this, _transformResult)[_transformResult] = transform;\n      return this;\n    }\n\n  }\n\n  return Submittable;\n}"]},"metadata":{},"sourceType":"module"}