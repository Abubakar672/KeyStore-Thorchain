{"ast":null,"code":"/**\nxxHash implementation in pure Javascript\n\nCopyright (C) 2013, Pierre Curto\nMIT license\n*/\nvar UINT32 = require('cuint').UINT32;\n/*\n\tMerged this sequence of method calls as it speeds up\n\tthe calculations by a factor of 2\n */\n// this.v1.add( other.multiply(PRIME32_2) ).rotl(13).multiply(PRIME32_1);\n\n\nUINT32.prototype.xxh_update = function (low, high) {\n  var b00 = PRIME32_2._low;\n  var b16 = PRIME32_2._high;\n  var c16, c00;\n  c00 = low * b00;\n  c16 = c00 >>> 16;\n  c16 += high * b00;\n  c16 &= 0xFFFF; // Not required but improves performance\n\n  c16 += low * b16;\n  var a00 = this._low + (c00 & 0xFFFF);\n  var a16 = a00 >>> 16;\n  a16 += this._high + (c16 & 0xFFFF);\n  var v = a16 << 16 | a00 & 0xFFFF;\n  v = v << 13 | v >>> 19;\n  a00 = v & 0xFFFF;\n  a16 = v >>> 16;\n  b00 = PRIME32_1._low;\n  b16 = PRIME32_1._high;\n  c00 = a00 * b00;\n  c16 = c00 >>> 16;\n  c16 += a16 * b00;\n  c16 &= 0xFFFF; // Not required but improves performance\n\n  c16 += a00 * b16;\n  this._low = c00 & 0xFFFF;\n  this._high = c16 & 0xFFFF;\n};\n/*\n * Constants\n */\n\n\nvar PRIME32_1 = UINT32('2654435761');\nvar PRIME32_2 = UINT32('2246822519');\nvar PRIME32_3 = UINT32('3266489917');\nvar PRIME32_4 = UINT32('668265263');\nvar PRIME32_5 = UINT32('374761393');\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\n\nfunction toUTF8Array(str) {\n  var utf8 = [];\n\n  for (var i = 0, n = str.length; i < n; i++) {\n    var charcode = str.charCodeAt(i);\n    if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } // surrogate pair\n    else {\n        i++; // UTF-16 encodes 0x10000-0x10FFFF by\n        // subtracting 0x10000 and splitting the\n        // 20 bits of 0x0-0xFFFFF into two halves\n\n        charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n        utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n      }\n  }\n\n  return new Uint8Array(utf8);\n}\n/**\n * XXH object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT32} seed\n * @return ThisExpression\n * or\n * @return {UINT32} xxHash\n */\n\n\nfunction XXH() {\n  if (arguments.length == 2) return new XXH(arguments[1]).update(arguments[0]).digest();\n  if (!(this instanceof XXH)) return new XXH(arguments[0]);\n  init.call(this, arguments[0]);\n}\n/**\n * Initialize the XXH instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n\n\nfunction init(seed) {\n  this.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed);\n  this.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2);\n  this.v2 = this.seed.clone().add(PRIME32_2);\n  this.v3 = this.seed.clone();\n  this.v4 = this.seed.clone().subtract(PRIME32_1);\n  this.total_len = 0;\n  this.memsize = 0;\n  this.memory = null;\n  return this;\n}\n\nXXH.prototype.init = init;\n/**\n * Add data to be computed for the XXH hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\n\nXXH.prototype.update = function (input) {\n  var isString = typeof input == 'string';\n  var isArrayBuffer; // Convert all strings to utf-8 first (issue #5)\n\n  if (isString) {\n    input = toUTF8Array(input);\n    isString = false;\n    isArrayBuffer = true;\n  }\n\n  if (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer) {\n    isArrayBuffer = true;\n    input = new Uint8Array(input);\n  }\n\n  var p = 0;\n  var len = input.length;\n  var bEnd = p + len;\n  if (len == 0) return this;\n  this.total_len += len;\n\n  if (this.memsize == 0) {\n    if (isString) {\n      this.memory = '';\n    } else if (isArrayBuffer) {\n      this.memory = new Uint8Array(16);\n    } else {\n      this.memory = new Buffer(16);\n    }\n  }\n\n  if (this.memsize + len < 16) // fill in tmp buffer\n    {\n      // XXH_memcpy(this.memory + this.memsize, input, len)\n      if (isString) {\n        this.memory += input;\n      } else if (isArrayBuffer) {\n        this.memory.set(input.subarray(0, len), this.memsize);\n      } else {\n        input.copy(this.memory, this.memsize, 0, len);\n      }\n\n      this.memsize += len;\n      return this;\n    }\n\n  if (this.memsize > 0) // some data left from previous update\n    {\n      // XXH_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n      if (isString) {\n        this.memory += input.slice(0, 16 - this.memsize);\n      } else if (isArrayBuffer) {\n        this.memory.set(input.subarray(0, 16 - this.memsize), this.memsize);\n      } else {\n        input.copy(this.memory, this.memsize, 0, 16 - this.memsize);\n      }\n\n      var p32 = 0;\n\n      if (isString) {\n        this.v1.xxh_update(this.memory.charCodeAt(p32 + 1) << 8 | this.memory.charCodeAt(p32), this.memory.charCodeAt(p32 + 3) << 8 | this.memory.charCodeAt(p32 + 2));\n        p32 += 4;\n        this.v2.xxh_update(this.memory.charCodeAt(p32 + 1) << 8 | this.memory.charCodeAt(p32), this.memory.charCodeAt(p32 + 3) << 8 | this.memory.charCodeAt(p32 + 2));\n        p32 += 4;\n        this.v3.xxh_update(this.memory.charCodeAt(p32 + 1) << 8 | this.memory.charCodeAt(p32), this.memory.charCodeAt(p32 + 3) << 8 | this.memory.charCodeAt(p32 + 2));\n        p32 += 4;\n        this.v4.xxh_update(this.memory.charCodeAt(p32 + 1) << 8 | this.memory.charCodeAt(p32), this.memory.charCodeAt(p32 + 3) << 8 | this.memory.charCodeAt(p32 + 2));\n      } else {\n        this.v1.xxh_update(this.memory[p32 + 1] << 8 | this.memory[p32], this.memory[p32 + 3] << 8 | this.memory[p32 + 2]);\n        p32 += 4;\n        this.v2.xxh_update(this.memory[p32 + 1] << 8 | this.memory[p32], this.memory[p32 + 3] << 8 | this.memory[p32 + 2]);\n        p32 += 4;\n        this.v3.xxh_update(this.memory[p32 + 1] << 8 | this.memory[p32], this.memory[p32 + 3] << 8 | this.memory[p32 + 2]);\n        p32 += 4;\n        this.v4.xxh_update(this.memory[p32 + 1] << 8 | this.memory[p32], this.memory[p32 + 3] << 8 | this.memory[p32 + 2]);\n      }\n\n      p += 16 - this.memsize;\n      this.memsize = 0;\n      if (isString) this.memory = '';\n    }\n\n  if (p <= bEnd - 16) {\n    var limit = bEnd - 16;\n\n    do {\n      if (isString) {\n        this.v1.xxh_update(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2));\n        p += 4;\n        this.v2.xxh_update(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2));\n        p += 4;\n        this.v3.xxh_update(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2));\n        p += 4;\n        this.v4.xxh_update(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2));\n      } else {\n        this.v1.xxh_update(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2]);\n        p += 4;\n        this.v2.xxh_update(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2]);\n        p += 4;\n        this.v3.xxh_update(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2]);\n        p += 4;\n        this.v4.xxh_update(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2]);\n      }\n\n      p += 4;\n    } while (p <= limit);\n  }\n\n  if (p < bEnd) {\n    // XXH_memcpy(this.memory, p, bEnd-p);\n    if (isString) {\n      this.memory += input.slice(p);\n    } else if (isArrayBuffer) {\n      this.memory.set(input.subarray(p, bEnd), this.memsize);\n    } else {\n      input.copy(this.memory, this.memsize, p, bEnd);\n    }\n\n    this.memsize = bEnd - p;\n  }\n\n  return this;\n};\n/**\n * Finalize the XXH computation. The XXH instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT32} xxHash\n */\n\n\nXXH.prototype.digest = function () {\n  var input = this.memory;\n  var isString = typeof input == 'string';\n  var p = 0;\n  var bEnd = this.memsize;\n  var h32, h;\n  var u = new UINT32();\n\n  if (this.total_len >= 16) {\n    h32 = this.v1.rotl(1).add(this.v2.rotl(7).add(this.v3.rotl(12).add(this.v4.rotl(18))));\n  } else {\n    h32 = this.seed.clone().add(PRIME32_5);\n  }\n\n  h32.add(u.fromNumber(this.total_len));\n\n  while (p <= bEnd - 4) {\n    if (isString) {\n      u.fromBits(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2));\n    } else {\n      u.fromBits(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2]);\n    }\n\n    h32.add(u.multiply(PRIME32_3)).rotl(17).multiply(PRIME32_4);\n    p += 4;\n  }\n\n  while (p < bEnd) {\n    u.fromBits(isString ? input.charCodeAt(p++) : input[p++], 0);\n    h32.add(u.multiply(PRIME32_5)).rotl(11).multiply(PRIME32_1);\n  }\n\n  h = h32.clone().shiftRight(15);\n  h32.xor(h).multiply(PRIME32_2);\n  h = h32.clone().shiftRight(13);\n  h32.xor(h).multiply(PRIME32_3);\n  h = h32.clone().shiftRight(16);\n  h32.xor(h); // Reset the state\n\n  this.init(this.seed);\n  return h32;\n};\n\nmodule.exports = XXH;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/xxhashjs/lib/xxhash.js"],"names":["UINT32","require","prototype","xxh_update","low","high","b00","PRIME32_2","_low","b16","_high","c16","c00","a00","a16","v","PRIME32_1","PRIME32_3","PRIME32_4","PRIME32_5","toUTF8Array","str","utf8","i","n","length","charcode","charCodeAt","push","Uint8Array","XXH","arguments","update","digest","init","call","seed","clone","v1","add","v2","v3","v4","subtract","total_len","memsize","memory","input","isString","isArrayBuffer","ArrayBuffer","p","len","bEnd","Buffer","set","subarray","copy","slice","p32","limit","h32","h","u","rotl","fromNumber","fromBits","multiply","shiftRight","xor","module","exports"],"mappings":"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","sourcesContent":["/**\nxxHash implementation in pure Javascript\n\nCopyright (C) 2013, Pierre Curto\nMIT license\n*/\nvar UINT32 = require('cuint').UINT32\n\n/*\n\tMerged this sequence of method calls as it speeds up\n\tthe calculations by a factor of 2\n */\n// this.v1.add( other.multiply(PRIME32_2) ).rotl(13).multiply(PRIME32_1);\nUINT32.prototype.xxh_update = function (low, high) {\n\tvar b00 = PRIME32_2._low\n\tvar b16 = PRIME32_2._high\n\n\tvar c16, c00\n\tc00 = low * b00\n\tc16 = c00 >>> 16\n\n\tc16 += high * b00\n\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\tc16 += low * b16\n\n\tvar a00 = this._low + (c00 & 0xFFFF)\n\tvar a16 = a00 >>> 16\n\n\ta16 += this._high + (c16 & 0xFFFF)\n\n\tvar v = (a16 << 16) | (a00 & 0xFFFF)\n\tv = (v << 13) | (v >>> 19)\n\n\ta00 = v & 0xFFFF\n\ta16 = v >>> 16\n\n\tb00 = PRIME32_1._low\n\tb16 = PRIME32_1._high\n\n\tc00 = a00 * b00\n\tc16 = c00 >>> 16\n\n\tc16 += a16 * b00\n\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\tc16 += a00 * b16\n\n\tthis._low = c00 & 0xFFFF\n\tthis._high = c16 & 0xFFFF\n}\n\n/*\n * Constants\n */\nvar PRIME32_1 = UINT32( '2654435761' )\nvar PRIME32_2 = UINT32( '2246822519' )\nvar PRIME32_3 = UINT32( '3266489917' )\nvar PRIME32_4 = UINT32(  '668265263' )\nvar PRIME32_5 = UINT32(  '374761393' )\n\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\nfunction toUTF8Array (str) {\n\tvar utf8 = []\n\tfor (var i=0, n=str.length; i < n; i++) {\n\t\tvar charcode = str.charCodeAt(i)\n\t\tif (charcode < 0x80) utf8.push(charcode)\n\t\telse if (charcode < 0x800) {\n\t\t\tutf8.push(0xc0 | (charcode >> 6),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\telse if (charcode < 0xd800 || charcode >= 0xe000) {\n\t\t\tutf8.push(0xe0 | (charcode >> 12),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\t// surrogate pair\n\t\telse {\n\t\t\ti++;\n\t\t\t// UTF-16 encodes 0x10000-0x10FFFF by\n\t\t\t// subtracting 0x10000 and splitting the\n\t\t\t// 20 bits of 0x0-0xFFFFF into two halves\n\t\t\tcharcode = 0x10000 + (((charcode & 0x3ff)<<10)\n\t\t\t| (str.charCodeAt(i) & 0x3ff))\n\t\t\tutf8.push(0xf0 | (charcode >>18),\n\t\t\t0x80 | ((charcode>>12) & 0x3f),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t}\n\n\treturn new Uint8Array(utf8)\n}\n\n/**\n * XXH object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT32} seed\n * @return ThisExpression\n * or\n * @return {UINT32} xxHash\n */\nfunction XXH () {\n\tif (arguments.length == 2)\n\t\treturn new XXH( arguments[1] ).update( arguments[0] ).digest()\n\n\tif (!(this instanceof XXH))\n\t\treturn new XXH( arguments[0] )\n\n\tinit.call(this, arguments[0])\n}\n\n/**\n * Initialize the XXH instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n function init (seed) {\n\tthis.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed)\n\tthis.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2)\n\tthis.v2 = this.seed.clone().add(PRIME32_2)\n\tthis.v3 = this.seed.clone()\n\tthis.v4 = this.seed.clone().subtract(PRIME32_1)\n\tthis.total_len = 0\n\tthis.memsize = 0\n\tthis.memory = null\n\n\treturn this\n}\nXXH.prototype.init = init\n\n/**\n * Add data to be computed for the XXH hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\nXXH.prototype.update = function (input) {\n\tvar isString = typeof input == 'string'\n\tvar isArrayBuffer\n\n\t// Convert all strings to utf-8 first (issue #5)\n\tif (isString) {\n\t\tinput = toUTF8Array(input)\n\t\tisString = false\n\t\tisArrayBuffer = true\n\t}\n\n\tif (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer)\n\t{\n\t\tisArrayBuffer = true\n\t\tinput = new Uint8Array(input);\n\t}\n\n\tvar p = 0\n\tvar len = input.length\n\tvar bEnd = p + len\n\n\tif (len == 0) return this\n\n\tthis.total_len += len\n\n\tif (this.memsize == 0)\n\t{\n\t\tif (isString) {\n\t\t\tthis.memory = ''\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory = new Uint8Array(16)\n\t\t} else {\n\t\t\tthis.memory = new Buffer(16)\n\t\t}\n\t}\n\n\tif (this.memsize + len < 16)   // fill in tmp buffer\n\t{\n\t\t// XXH_memcpy(this.memory + this.memsize, input, len)\n\t\tif (isString) {\n\t\t\tthis.memory += input\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, len), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, len )\n\t\t}\n\n\t\tthis.memsize += len\n\t\treturn this\n\t}\n\n\tif (this.memsize > 0)   // some data left from previous update\n\t{\n\t\t// XXH_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(0, 16 - this.memsize)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, 16 - this.memsize), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, 16 - this.memsize )\n\t\t}\n\n\t\tvar p32 = 0\n\t\tif (isString) {\n\t\t\tthis.v1.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v2.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v3.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v4.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t} else {\n\t\t\tthis.v1.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v2.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v3.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v4.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t}\n\n\t\tp += 16 - this.memsize\n\t\tthis.memsize = 0\n\t\tif (isString) this.memory = ''\n\t}\n\n\tif (p <= bEnd - 16)\n\t{\n\t\tvar limit = bEnd - 16\n\n\t\tdo\n\t\t{\n\t\t\tif (isString) {\n\t\t\t\tthis.v1.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v2.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v3.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v4.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthis.v1.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v2.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v3.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v4.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t}\n\t\t\tp += 4\n\t\t} while (p <= limit)\n\t}\n\n\tif (p < bEnd)\n\t{\n\t\t// XXH_memcpy(this.memory, p, bEnd-p);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(p)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(p, bEnd), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, p, bEnd )\n\t\t}\n\n\t\tthis.memsize = bEnd - p\n\t}\n\n\treturn this\n}\n\n/**\n * Finalize the XXH computation. The XXH instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT32} xxHash\n */\nXXH.prototype.digest = function () {\n\tvar input = this.memory\n\tvar isString = typeof input == 'string'\n\tvar p = 0\n\tvar bEnd = this.memsize\n\tvar h32, h\n\tvar u = new UINT32\n\n\tif (this.total_len >= 16)\n\t{\n\t\th32 = this.v1.rotl(1).add( this.v2.rotl(7).add( this.v3.rotl(12).add( this.v4.rotl(18) ) ) )\n\t}\n\telse\n\t{\n\t\th32  = this.seed.clone().add( PRIME32_5 )\n\t}\n\n\th32.add( u.fromNumber(this.total_len) )\n\n\twhile (p <= bEnd - 4)\n\t{\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t)\n\t\t}\n\t\th32\n\t\t\t.add( u.multiply(PRIME32_3) )\n\t\t\t.rotl(17)\n\t\t\t.multiply( PRIME32_4 )\n\t\tp += 4\n\t}\n\n\twhile (p < bEnd)\n\t{\n\t\tu.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0 )\n\t\th32\n\t\t\t.add( u.multiply(PRIME32_5) )\n\t\t\t.rotl(11)\n\t\t\t.multiply(PRIME32_1)\n\t}\n\n\th = h32.clone().shiftRight(15)\n\th32.xor(h).multiply(PRIME32_2)\n\n\th = h32.clone().shiftRight(13)\n\th32.xor(h).multiply(PRIME32_3)\n\n\th = h32.clone().shiftRight(16)\n\th32.xor(h)\n\n\t// Reset the state\n\tthis.init( this.seed )\n\n\treturn h32\n}\n\nmodule.exports = XXH\n"]},"metadata":{},"sourceType":"script"}