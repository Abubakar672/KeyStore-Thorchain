{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport js from 'js-sha3';\nimport { u8aToU8a } from '@polkadot/util';\nimport { isReady, keccak256 } from '@polkadot/wasm-crypto';\n/**\n * @name keccakAsU8a\n * @summary Creates a keccak Uint8Array from the input.\n * @description\n * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { keccakAsU8a } from '@polkadot/util-crypto';\n *\n * keccakAsU8a('123'); // => Uint8Array\n * ```\n */\n\nexport function keccakAsU8a(value, bitLength = 256, onlyJs = false) {\n  const is256 = bitLength === 256;\n  return isReady() && is256 && !onlyJs ? keccak256(u8aToU8a(value)) : new Uint8Array((is256 ? js.keccak256 : js.keccak512).update(u8aToU8a(value)).arrayBuffer());\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/keccak/asU8a.js"],"names":["js","u8aToU8a","isReady","keccak256","keccakAsU8a","value","bitLength","onlyJs","is256","Uint8Array","keccak512","update","arrayBuffer"],"mappings":"AAAA;AACA;AACA,OAAOA,EAAP,MAAe,SAAf;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,uBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,SAAS,GAAG,GAAxC,EAA6CC,MAAM,GAAG,KAAtD,EAA6D;AAClE,QAAMC,KAAK,GAAGF,SAAS,KAAK,GAA5B;AACA,SAAOJ,OAAO,MAAMM,KAAb,IAAsB,CAACD,MAAvB,GAAgCJ,SAAS,CAACF,QAAQ,CAACI,KAAD,CAAT,CAAzC,GAA6D,IAAII,UAAJ,CAAe,CAACD,KAAK,GAAGR,EAAE,CAACG,SAAN,GAAkBH,EAAE,CAACU,SAA3B,EAAsCC,MAAtC,CAA6CV,QAAQ,CAACI,KAAD,CAArD,EAA8DO,WAA9D,EAAf,CAApE;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport js from 'js-sha3';\nimport { u8aToU8a } from '@polkadot/util';\nimport { isReady, keccak256 } from '@polkadot/wasm-crypto';\n/**\n * @name keccakAsU8a\n * @summary Creates a keccak Uint8Array from the input.\n * @description\n * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { keccakAsU8a } from '@polkadot/util-crypto';\n *\n * keccakAsU8a('123'); // => Uint8Array\n * ```\n */\n\nexport function keccakAsU8a(value, bitLength = 256, onlyJs = false) {\n  const is256 = bitLength === 256;\n  return isReady() && is256 && !onlyJs ? keccak256(u8aToU8a(value)) : new Uint8Array((is256 ? js.keccak256 : js.keccak512).update(u8aToU8a(value)).arrayBuffer());\n}"]},"metadata":{},"sourceType":"module"}