{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { Observable, publishReplay, refCount } from 'rxjs';\nimport { rpcDefinitions } from '@polkadot/types';\nimport { assert, hexToU8a, isFunction, isNull, isUndefined, logger, memoize, u8aToU8a } from '@polkadot/util';\nimport { drr, refCountDelay } from \"./util/index.js\";\nexport { packageInfo } from \"./packageInfo.js\";\nexport * from \"./util/index.js\";\nconst l = logger('rpc-core');\nconst EMPTY_META = {\n  fallback: undefined,\n  modifier: {\n    isOptional: true\n  },\n  type: {\n    asMap: {\n      linked: {\n        isTrue: false\n      }\n    },\n    isMap: false\n  }\n}; // utility method to create a nicely-formatted error\n\n/** @internal */\n\nfunction logErrorMessage(method, {\n  params,\n  type\n}, error) {\n  const inputs = params.map(({\n    isOptional,\n    name,\n    type\n  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');\n  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);\n}\n\nfunction isTreatAsHex(key) {\n  // :code is problematic - it does not have the length attached, which is\n  // unlike all other storage entries where it is indeed properly encoded\n  return ['0x3a636f6465'].includes(key.toHex());\n}\n/**\n * @name Rpc\n * @summary The API may use a HTTP or WebSockets provider.\n * @description It allows for querying a Polkadot Client Node.\n * WebSockets provider is recommended since HTTP provider only supports basic querying.\n *\n * ```mermaid\n * graph LR;\n *   A[Api] --> |WebSockets| B[WsProvider];\n *   B --> |endpoint| C[ws://127.0.0.1:9944]\n * ```\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Rpc from '@polkadot/rpc-core';\n * import { WsProvider } from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const rpc = new Rpc(provider);\n * ```\n */\n\n\nvar _instanceId = /*#__PURE__*/_classPrivateFieldLooseKey(\"instanceId\");\n\nvar _registryDefault = /*#__PURE__*/_classPrivateFieldLooseKey(\"registryDefault\");\n\nvar _getBlockRegistry = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBlockRegistry\");\n\nvar _storageCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"storageCache\");\n\nexport class RpcCore {\n  /**\n   * @constructor\n   * Default constructor for the Api Object\n   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket\n   */\n  constructor(instanceId, registry, provider, userRpc = {}) {\n    Object.defineProperty(this, _instanceId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _registryDefault, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getBlockRegistry, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storageCache, {\n      writable: true,\n      value: new Map()\n    });\n    this.mapping = new Map();\n    this.provider = void 0;\n    this.sections = []; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    assert(provider && isFunction(provider.send), 'Expected Provider to API create');\n    _classPrivateFieldLooseBase(this, _instanceId)[_instanceId] = instanceId;\n    _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault] = registry;\n    this.provider = provider;\n    const sectionNames = Object.keys(rpcDefinitions); // these are the base keys (i.e. part of jsonrpc)\n\n    this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance\n\n    this.addUserInterfaces(userRpc);\n  }\n  /**\n   * @description Returns the connected status of a provider\n   */\n\n\n  get isConnected() {\n    return this.provider.isConnected;\n  }\n  /**\n   * @description Manually connect from the attached provider\n   */\n\n\n  connect() {\n    return this.provider.connect();\n  }\n  /**\n   * @description Manually disconnect from the attached provider\n   */\n\n\n  disconnect() {\n    return this.provider.disconnect();\n  }\n  /**\n   * @description Sets a registry swap (typically from Api)\n   */\n\n\n  setRegistrySwap(registrySwap) {\n    _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry] = memoize(registrySwap, {\n      getInstanceId: () => _classPrivateFieldLooseBase(this, _instanceId)[_instanceId]\n    });\n  }\n\n  addUserInterfaces(userRpc) {\n    // add any extra user-defined sections\n    this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods\n\n    this.sections.forEach(sectionName => {\n      var _ref, _ref2;\n\n      (_ref = this)[_ref2 = sectionName] || (_ref[_ref2] = {});\n      const section = this[sectionName];\n      Object.entries(_objectSpread(_objectSpread({}, this._createInterface(sectionName, rpcDefinitions[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {\n        section[key] || (section[key] = value);\n      });\n    });\n  }\n\n  _createInterface(section, methods) {\n    return Object.entries(methods).filter(([method, {\n      endpoint\n    }]) => !this.mapping.has(endpoint || `${section}_${method}`)).reduce((exposed, [method, {\n      endpoint\n    }]) => {\n      const def = methods[method];\n      const isSubscription = !!def.pubsub;\n      const jsonrpc = endpoint || `${section}_${method}`;\n      this.mapping.set(jsonrpc, _objectSpread(_objectSpread({}, def), {}, {\n        isSubscription,\n        jsonrpc,\n        method,\n        section\n      }));\n      exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);\n      return exposed;\n    }, {});\n  }\n\n  _memomize(creator, def) {\n    const memoized = memoize(creator('scale'), {\n      getInstanceId: () => _classPrivateFieldLooseBase(this, _instanceId)[_instanceId]\n    });\n    memoized.json = creator('json');\n    memoized.raw = creator('raw');\n    memoized.meta = def;\n    return memoized;\n  }\n\n  _createMethodSend(section, method, def) {\n    const rpcName = def.endpoint || `${section}_${method}`;\n    const hashIndex = def.params.findIndex(({\n      isHistoric\n    }) => isHistoric);\n    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable\n\n    const callWithRegistry = async (outputAs, values) => {\n      const blockHash = hashIndex === -1 ? null : values[hashIndex];\n      const {\n        registry\n      } = outputAs === 'scale' && blockHash && _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry] ? await _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry](u8aToU8a(blockHash)) : {\n        registry: _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault]\n      };\n\n      const params = this._formatInputs(registry, null, def, values);\n\n      const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));\n      return outputAs === 'scale' ? this._formatOutput(registry, blockHash, method, def, params, data) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', data);\n    };\n\n    const creator = outputAs => (...values) => {\n      const isDelayed = outputAs === 'scale' && hashIndex !== -1 && !!values[hashIndex];\n      return new Observable(observer => {\n        callWithRegistry(outputAs, values).then(value => {\n          observer.next(value);\n          observer.complete();\n        }).catch(error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n          observer.complete();\n        });\n        return () => {\n          var _memoized; // delete old results from cache\n\n\n          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);\n        };\n      }).pipe(publishReplay(1), // create a Replay(1)\n      isDelayed ? refCountDelay() // Unsubscribe after delay\n      : refCount());\n    };\n\n    memoized = this._memomize(creator, def);\n    return memoized;\n  } // create a subscriptor, it subscribes once and resolves with the id as subscribe\n\n\n  _createSubscriber({\n    paramsJson,\n    subName,\n    subType,\n    update\n  }, errorHandler) {\n    return new Promise((resolve, reject) => {\n      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {\n        errorHandler(error);\n        reject(error);\n      });\n    });\n  }\n\n  _createMethodSubscribe(section, method, def) {\n    const [updateType, subMethod, unsubMethod] = def.pubsub;\n    const subName = `${section}_${subMethod}`;\n    const unsubName = `${section}_${unsubMethod}`;\n    const subType = `${section}_${updateType}`;\n    let memoized = null;\n\n    const creator = outputAs => (...values) => {\n      return new Observable(observer => {\n        // Have at least an empty promise, as used in the unsubscribe\n        let subscriptionPromise = Promise.resolve(null);\n\n        const registry = _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault];\n\n        const errorHandler = error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n        };\n\n        try {\n          const params = this._formatInputs(registry, null, def, values);\n\n          const paramsJson = params.map(param => param.toJSON());\n\n          const update = (error, result) => {\n            if (error) {\n              logErrorMessage(method, def, error);\n              return;\n            }\n\n            try {\n              observer.next(outputAs === 'scale' ? this._formatOutput(registry, null, method, def, params, result) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', result));\n            } catch (error) {\n              observer.error(error);\n            }\n          };\n\n          subscriptionPromise = this._createSubscriber({\n            paramsJson,\n            subName,\n            subType,\n            update\n          }, errorHandler);\n        } catch (error) {\n          errorHandler(error);\n        } // Teardown logic\n\n\n        return () => {\n          var _memoized2; // Delete from cache, so old results don't hang around\n\n\n          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.unmemoize(...values); // Unsubscribe from provider\n\n          subscriptionPromise.then(subscriptionId => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));\n        };\n      }).pipe(drr());\n    };\n\n    memoized = this._memomize(creator, def);\n    return memoized;\n  }\n\n  _formatInputs(registry, blockHash, def, inputs) {\n    const reqArgCount = def.params.filter(({\n      isOptional\n    }) => !isOptional).length;\n    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;\n    assert(inputs.length >= reqArgCount && inputs.length <= def.params.length, () => `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);\n    return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {\n      blockHash\n    }));\n  }\n\n  _formatOutput(registry, blockHash, method, rpc, params, result) {\n    if (rpc.type === 'StorageData') {\n      const key = params[0];\n      return this._formatStorageData(registry, blockHash, key, result);\n    } else if (rpc.type === 'StorageChangeSet') {\n      const keys = params[0];\n      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);\n    } else if (rpc.type === 'Vec<StorageChangeSet>') {\n      const mapped = result.map(({\n        block,\n        changes\n      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten\n\n      return method === 'queryStorageAt' ? mapped[0][1] : mapped;\n    }\n\n    return registry.createTypeUnsafe(rpc.type, [result], {\n      blockHash\n    });\n  }\n\n  _formatStorageData(registry, blockHash, key, value) {\n    const isEmpty = isNull(value); // we convert to Uint8Array since it maps to the raw encoding, all\n    // data will be correctly encoded (incl. numbers, excl. :code)\n\n    const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);\n    return this._newType(registry, blockHash, key, input, isEmpty);\n  }\n\n  _formatStorageSet(registry, blockHash, keys, changes) {\n    // For StorageChangeSet, the changes has the [key, value] mappings\n    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values\n    // one at a time, all based on the query types. Three values can be returned -\n    //   - Codec - There is a valid value, non-empty\n    //   - null - The storage key is empty\n\n    return keys.reduce((results, key, index) => {\n      results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));\n      return results;\n    }, []);\n  }\n\n  _formatStorageSetEntry(registry, blockHash, key, changes, witCache, entryIndex) {\n    const hexKey = key.toHex();\n    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback\n    //   - in the case of an array of values, fill the hole from the cache\n    //   - if a single result value, don't fill - it is not an update hole\n    //   - fallback to an empty option in all cases\n\n    const value = isUndefined(found) ? witCache && _classPrivateFieldLooseBase(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];\n    const isEmpty = isNull(value);\n    const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value); // store the retrieved result - the only issue with this cache is that there is no\n    // clearing of it, so very long running processes (not just a couple of hours, longer)\n    // will increase memory beyond what is allowed.\n\n    _classPrivateFieldLooseBase(this, _storageCache)[_storageCache].set(hexKey, value);\n\n    return this._newType(registry, blockHash, key, input, isEmpty, entryIndex);\n  }\n\n  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {\n    // single return value (via state.getStorage), decode the value based on the\n    // outputType that we have specified. Fallback to Raw on nothing\n    const type = key.outputType || 'Raw';\n    const meta = key.meta || EMPTY_META;\n    const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;\n\n    try {\n      return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback ? hexToU8a(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {\n        blockHash,\n        isPedantic: true\n      }) : input], {\n        blockHash,\n        isOptional: meta.modifier.isOptional,\n        isPedantic: !meta.modifier.isOptional\n      });\n    } catch (error) {\n      throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/rpc-core/bundle.js"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","Observable","publishReplay","refCount","rpcDefinitions","assert","hexToU8a","isFunction","isNull","isUndefined","logger","memoize","u8aToU8a","drr","refCountDelay","packageInfo","l","EMPTY_META","fallback","undefined","modifier","isOptional","type","asMap","linked","isTrue","isMap","logErrorMessage","method","params","error","inputs","map","name","join","message","isTreatAsHex","includes","toHex","_instanceId","_registryDefault","_getBlockRegistry","_storageCache","RpcCore","constructor","instanceId","registry","provider","userRpc","writable","value","Map","mapping","sections","send","sectionNames","addUserInterfaces","isConnected","connect","disconnect","setRegistrySwap","registrySwap","getInstanceId","sectionName","_ref","_ref2","section","entries","_createInterface","methods","endpoint","has","reduce","exposed","def","isSubscription","pubsub","jsonrpc","set","_createMethodSubscribe","_createMethodSend","_memomize","creator","memoized","json","raw","meta","rpcName","hashIndex","findIndex","isHistoric","callWithRegistry","outputAs","values","blockHash","_formatInputs","data","param","toJSON","_formatOutput","createType","isDelayed","observer","then","next","complete","catch","_memoized","unmemoize","pipe","_createSubscriber","paramsJson","subName","subType","update","errorHandler","Promise","resolve","reject","subscribe","updateType","subMethod","unsubMethod","unsubName","subscriptionPromise","result","_memoized2","subscriptionId","unsubscribe","reqArgCount","optText","input","index","createTypeUnsafe","rpc","_formatStorageData","_formatStorageSet","block","changes","mapped","isEmpty","_newType","withCache","results","_formatStorageSetEntry","witCache","entryIndex","hexKey","found","find","get","outputType","entryNum","isPedantic","Error"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/rpc-core authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Observable, publishReplay, refCount } from 'rxjs';\nimport { rpcDefinitions } from '@polkadot/types';\nimport { assert, hexToU8a, isFunction, isNull, isUndefined, logger, memoize, u8aToU8a } from '@polkadot/util';\nimport { drr, refCountDelay } from \"./util/index.js\";\nexport { packageInfo } from \"./packageInfo.js\";\nexport * from \"./util/index.js\";\nconst l = logger('rpc-core');\nconst EMPTY_META = {\n  fallback: undefined,\n  modifier: {\n    isOptional: true\n  },\n  type: {\n    asMap: {\n      linked: {\n        isTrue: false\n      }\n    },\n    isMap: false\n  }\n}; // utility method to create a nicely-formatted error\n\n/** @internal */\n\nfunction logErrorMessage(method, {\n  params,\n  type\n}, error) {\n  const inputs = params.map(({\n    isOptional,\n    name,\n    type\n  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');\n  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);\n}\n\nfunction isTreatAsHex(key) {\n  // :code is problematic - it does not have the length attached, which is\n  // unlike all other storage entries where it is indeed properly encoded\n  return ['0x3a636f6465'].includes(key.toHex());\n}\n/**\n * @name Rpc\n * @summary The API may use a HTTP or WebSockets provider.\n * @description It allows for querying a Polkadot Client Node.\n * WebSockets provider is recommended since HTTP provider only supports basic querying.\n *\n * ```mermaid\n * graph LR;\n *   A[Api] --> |WebSockets| B[WsProvider];\n *   B --> |endpoint| C[ws://127.0.0.1:9944]\n * ```\n *\n * @example\n * <BR>\n *\n * ```javascript\n * import Rpc from '@polkadot/rpc-core';\n * import { WsProvider } from '@polkadot/rpc-provider/ws';\n *\n * const provider = new WsProvider('ws://127.0.0.1:9944');\n * const rpc = new Rpc(provider);\n * ```\n */\n\n\nvar _instanceId = /*#__PURE__*/_classPrivateFieldLooseKey(\"instanceId\");\n\nvar _registryDefault = /*#__PURE__*/_classPrivateFieldLooseKey(\"registryDefault\");\n\nvar _getBlockRegistry = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBlockRegistry\");\n\nvar _storageCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"storageCache\");\n\nexport class RpcCore {\n  /**\n   * @constructor\n   * Default constructor for the Api Object\n   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket\n   */\n  constructor(instanceId, registry, provider, userRpc = {}) {\n    Object.defineProperty(this, _instanceId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _registryDefault, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getBlockRegistry, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _storageCache, {\n      writable: true,\n      value: new Map()\n    });\n    this.mapping = new Map();\n    this.provider = void 0;\n    this.sections = [];\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    assert(provider && isFunction(provider.send), 'Expected Provider to API create');\n    _classPrivateFieldLooseBase(this, _instanceId)[_instanceId] = instanceId;\n    _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault] = registry;\n    this.provider = provider;\n    const sectionNames = Object.keys(rpcDefinitions); // these are the base keys (i.e. part of jsonrpc)\n\n    this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance\n\n    this.addUserInterfaces(userRpc);\n  }\n  /**\n   * @description Returns the connected status of a provider\n   */\n\n\n  get isConnected() {\n    return this.provider.isConnected;\n  }\n  /**\n   * @description Manually connect from the attached provider\n   */\n\n\n  connect() {\n    return this.provider.connect();\n  }\n  /**\n   * @description Manually disconnect from the attached provider\n   */\n\n\n  disconnect() {\n    return this.provider.disconnect();\n  }\n  /**\n   * @description Sets a registry swap (typically from Api)\n   */\n\n\n  setRegistrySwap(registrySwap) {\n    _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry] = memoize(registrySwap, {\n      getInstanceId: () => _classPrivateFieldLooseBase(this, _instanceId)[_instanceId]\n    });\n  }\n\n  addUserInterfaces(userRpc) {\n    // add any extra user-defined sections\n    this.sections.push(...Object.keys(userRpc).filter(key => !this.sections.includes(key))); // decorate the sections with base and user methods\n\n    this.sections.forEach(sectionName => {\n      var _ref, _ref2;\n\n      (_ref = this)[_ref2 = sectionName] || (_ref[_ref2] = {});\n      const section = this[sectionName];\n      Object.entries(_objectSpread(_objectSpread({}, this._createInterface(sectionName, rpcDefinitions[sectionName] || {})), this._createInterface(sectionName, userRpc[sectionName] || {}))).forEach(([key, value]) => {\n        section[key] || (section[key] = value);\n      });\n    });\n  }\n\n  _createInterface(section, methods) {\n    return Object.entries(methods).filter(([method, {\n      endpoint\n    }]) => !this.mapping.has(endpoint || `${section}_${method}`)).reduce((exposed, [method, {\n      endpoint\n    }]) => {\n      const def = methods[method];\n      const isSubscription = !!def.pubsub;\n      const jsonrpc = endpoint || `${section}_${method}`;\n      this.mapping.set(jsonrpc, _objectSpread(_objectSpread({}, def), {}, {\n        isSubscription,\n        jsonrpc,\n        method,\n        section\n      }));\n      exposed[method] = isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def);\n      return exposed;\n    }, {});\n  }\n\n  _memomize(creator, def) {\n    const memoized = memoize(creator('scale'), {\n      getInstanceId: () => _classPrivateFieldLooseBase(this, _instanceId)[_instanceId]\n    });\n    memoized.json = creator('json');\n    memoized.raw = creator('raw');\n    memoized.meta = def;\n    return memoized;\n  }\n\n  _createMethodSend(section, method, def) {\n    const rpcName = def.endpoint || `${section}_${method}`;\n    const hashIndex = def.params.findIndex(({\n      isHistoric\n    }) => isHistoric);\n    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable\n\n    const callWithRegistry = async (outputAs, values) => {\n      const blockHash = hashIndex === -1 ? null : values[hashIndex];\n      const {\n        registry\n      } = outputAs === 'scale' && blockHash && _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry] ? await _classPrivateFieldLooseBase(this, _getBlockRegistry)[_getBlockRegistry](u8aToU8a(blockHash)) : {\n        registry: _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault]\n      };\n\n      const params = this._formatInputs(registry, null, def, values);\n\n      const data = await this.provider.send(rpcName, params.map(param => param.toJSON()));\n      return outputAs === 'scale' ? this._formatOutput(registry, blockHash, method, def, params, data) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', data);\n    };\n\n    const creator = outputAs => (...values) => {\n      const isDelayed = outputAs === 'scale' && hashIndex !== -1 && !!values[hashIndex];\n      return new Observable(observer => {\n        callWithRegistry(outputAs, values).then(value => {\n          observer.next(value);\n          observer.complete();\n        }).catch(error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n          observer.complete();\n        });\n        return () => {\n          var _memoized;\n\n          // delete old results from cache\n          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);\n        };\n      }).pipe(publishReplay(1), // create a Replay(1)\n      isDelayed ? refCountDelay() // Unsubscribe after delay\n      : refCount());\n    };\n\n    memoized = this._memomize(creator, def);\n    return memoized;\n  } // create a subscriptor, it subscribes once and resolves with the id as subscribe\n\n\n  _createSubscriber({\n    paramsJson,\n    subName,\n    subType,\n    update\n  }, errorHandler) {\n    return new Promise((resolve, reject) => {\n      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {\n        errorHandler(error);\n        reject(error);\n      });\n    });\n  }\n\n  _createMethodSubscribe(section, method, def) {\n    const [updateType, subMethod, unsubMethod] = def.pubsub;\n    const subName = `${section}_${subMethod}`;\n    const unsubName = `${section}_${unsubMethod}`;\n    const subType = `${section}_${updateType}`;\n    let memoized = null;\n\n    const creator = outputAs => (...values) => {\n      return new Observable(observer => {\n        // Have at least an empty promise, as used in the unsubscribe\n        let subscriptionPromise = Promise.resolve(null);\n\n        const registry = _classPrivateFieldLooseBase(this, _registryDefault)[_registryDefault];\n\n        const errorHandler = error => {\n          logErrorMessage(method, def, error);\n          observer.error(error);\n        };\n\n        try {\n          const params = this._formatInputs(registry, null, def, values);\n\n          const paramsJson = params.map(param => param.toJSON());\n\n          const update = (error, result) => {\n            if (error) {\n              logErrorMessage(method, def, error);\n              return;\n            }\n\n            try {\n              observer.next(outputAs === 'scale' ? this._formatOutput(registry, null, method, def, params, result) : registry.createType(outputAs === 'raw' ? 'Raw' : 'Json', result));\n            } catch (error) {\n              observer.error(error);\n            }\n          };\n\n          subscriptionPromise = this._createSubscriber({\n            paramsJson,\n            subName,\n            subType,\n            update\n          }, errorHandler);\n        } catch (error) {\n          errorHandler(error);\n        } // Teardown logic\n\n\n        return () => {\n          var _memoized2;\n\n          // Delete from cache, so old results don't hang around\n          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.unmemoize(...values); // Unsubscribe from provider\n\n          subscriptionPromise.then(subscriptionId => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));\n        };\n      }).pipe(drr());\n    };\n\n    memoized = this._memomize(creator, def);\n    return memoized;\n  }\n\n  _formatInputs(registry, blockHash, def, inputs) {\n    const reqArgCount = def.params.filter(({\n      isOptional\n    }) => !isOptional).length;\n    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;\n    assert(inputs.length >= reqArgCount && inputs.length <= def.params.length, () => `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);\n    return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {\n      blockHash\n    }));\n  }\n\n  _formatOutput(registry, blockHash, method, rpc, params, result) {\n    if (rpc.type === 'StorageData') {\n      const key = params[0];\n      return this._formatStorageData(registry, blockHash, key, result);\n    } else if (rpc.type === 'StorageChangeSet') {\n      const keys = params[0];\n      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);\n    } else if (rpc.type === 'Vec<StorageChangeSet>') {\n      const mapped = result.map(({\n        block,\n        changes\n      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten\n\n      return method === 'queryStorageAt' ? mapped[0][1] : mapped;\n    }\n\n    return registry.createTypeUnsafe(rpc.type, [result], {\n      blockHash\n    });\n  }\n\n  _formatStorageData(registry, blockHash, key, value) {\n    const isEmpty = isNull(value); // we convert to Uint8Array since it maps to the raw encoding, all\n    // data will be correctly encoded (incl. numbers, excl. :code)\n\n    const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);\n    return this._newType(registry, blockHash, key, input, isEmpty);\n  }\n\n  _formatStorageSet(registry, blockHash, keys, changes) {\n    // For StorageChangeSet, the changes has the [key, value] mappings\n    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values\n    // one at a time, all based on the query types. Three values can be returned -\n    //   - Codec - There is a valid value, non-empty\n    //   - null - The storage key is empty\n\n    return keys.reduce((results, key, index) => {\n      results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));\n      return results;\n    }, []);\n  }\n\n  _formatStorageSetEntry(registry, blockHash, key, changes, witCache, entryIndex) {\n    const hexKey = key.toHex();\n    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback\n    //   - in the case of an array of values, fill the hole from the cache\n    //   - if a single result value, don't fill - it is not an update hole\n    //   - fallback to an empty option in all cases\n\n    const value = isUndefined(found) ? witCache && _classPrivateFieldLooseBase(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];\n    const isEmpty = isNull(value);\n    const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value); // store the retrieved result - the only issue with this cache is that there is no\n    // clearing of it, so very long running processes (not just a couple of hours, longer)\n    // will increase memory beyond what is allowed.\n\n    _classPrivateFieldLooseBase(this, _storageCache)[_storageCache].set(hexKey, value);\n\n    return this._newType(registry, blockHash, key, input, isEmpty, entryIndex);\n  }\n\n  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {\n    // single return value (via state.getStorage), decode the value based on the\n    // outputType that we have specified. Fallback to Raw on nothing\n    const type = key.outputType || 'Raw';\n    const meta = key.meta || EMPTY_META;\n    const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;\n\n    try {\n      return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback ? hexToU8a(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {\n        blockHash,\n        isPedantic: true\n      }) : input], {\n        blockHash,\n        isOptional: meta.modifier.isOptional,\n        isPedantic: !meta.modifier.isOptional\n      });\n    } catch (error) {\n      throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module"}