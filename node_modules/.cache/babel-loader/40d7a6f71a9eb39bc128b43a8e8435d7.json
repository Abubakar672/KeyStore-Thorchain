{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isHex, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\nimport { Vec } from \"./Vec.js\";\n/** @internal */\n\nfunction decodeVecFixed(registry, Type, allocLength, value) {\n  const values = Vec.decodeVec(registry, Type, isU8a(value) || isHex(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n  while (values.length < allocLength) {\n    values.push(new Type(registry));\n  }\n\n  assert(values.length === allocLength, () => `Expected a length of exactly ${allocLength} entries`);\n  return values;\n}\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nexport class VecFixed extends AbstractArray {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = typeToConstructor(registry, Type);\n    super(registry, decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, entry) => total + entry.encodedLength, 0);\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/VecFixed.js"],"names":["assert","compactToU8a","isHex","isU8a","u8aConcat","AbstractArray","typeToConstructor","Vec","decodeVecFixed","registry","Type","allocLength","value","values","decodeVec","length","push","VecFixed","constructor","Clazz","_Type","with","toRawType","encodedLength","reduce","total","entry","toU8a","encoded","map","Uint8Array"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,SAA7C,QAA8D,gBAA9D;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,GAAT,QAAoB,UAApB;AACA;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqDC,KAArD,EAA4D;AAC1D,QAAMC,MAAM,GAAGN,GAAG,CAACO,SAAJ,CAAcL,QAAd,EAAwBC,IAAxB,EAA8BP,KAAK,CAACS,KAAD,CAAL,IAAgBV,KAAK,CAACU,KAAD,CAArB,GAA+BR,SAAS,CAACH,YAAY,CAACU,WAAD,CAAb,EAA4BC,KAA5B,CAAxC,GAA6EA,KAA3G,CAAf;;AAEA,SAAOC,MAAM,CAACE,MAAP,GAAgBJ,WAAvB,EAAoC;AAClCE,IAAAA,MAAM,CAACG,IAAP,CAAY,IAAIN,IAAJ,CAASD,QAAT,CAAZ;AACD;;AAEDT,EAAAA,MAAM,CAACa,MAAM,CAACE,MAAP,KAAkBJ,WAAnB,EAAgC,MAAO,gCAA+BA,WAAY,UAAlF,CAAN;AACA,SAAOE,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMI,QAAN,SAAuBZ,aAAvB,CAAqC;AAC1Ca,EAAAA,WAAW,CAACT,QAAD,EAAWC,IAAX,EAAiBK,MAAjB,EAAyBH,KAAK,GAAG,EAAjC,EAAqC;AAC9C,UAAMO,KAAK,GAAGb,iBAAiB,CAACG,QAAD,EAAWC,IAAX,CAA/B;AACA,UAAMD,QAAN,EAAgBD,cAAc,CAACC,QAAD,EAAWU,KAAX,EAAkBJ,MAAlB,EAA0BH,KAA1B,CAA9B;AACA,SAAKQ,KAAL,GAAa,KAAK,CAAlB;AACA,SAAKA,KAAL,GAAaD,KAAb;AACD;;AAEU,SAAJE,IAAI,CAACX,IAAD,EAAOK,MAAP,EAAe;AACxB,WAAO,cAAcE,QAAd,CAAuB;AAC5BC,MAAAA,WAAW,CAACT,QAAD,EAAWG,KAAX,EAAkB;AAC3B,cAAMH,QAAN,EAAgBC,IAAhB,EAAsBK,MAAtB,EAA8BH,KAA9B;AACD;;AAH2B,KAA9B;AAMD;AACD;AACF;AACA;;;AAGU,MAAJF,IAAI,GAAG;AACT,WAAO,IAAI,KAAKU,KAAT,CAAe,KAAKX,QAApB,EAA8Ba,SAA9B,EAAP;AACD;AACD;AACF;AACA;;;AAGmB,MAAbC,aAAa,GAAG;AAClB,WAAO,KAAKC,MAAL,CAAY,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,GAAGC,KAAK,CAACH,aAA5C,EAA2D,CAA3D,CAAP;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN;AACA;AACA,UAAMC,OAAO,GAAG,KAAKC,GAAL,CAASH,KAAK,IAAIA,KAAK,CAACC,KAAN,EAAlB,CAAhB;AACA,WAAOC,OAAO,CAACb,MAAR,GAAiBX,SAAS,CAAC,GAAGwB,OAAJ,CAA1B,GAAyC,IAAIE,UAAJ,CAAe,EAAf,CAAhD;AACD;AACD;AACF;AACA;;;AAGER,EAAAA,SAAS,GAAG;AACV,WAAQ,IAAG,KAAKZ,IAAK,IAAG,KAAKK,MAAO,GAApC;AACD;;AA9CyC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactToU8a, isHex, isU8a, u8aConcat } from '@polkadot/util';\nimport { AbstractArray } from \"./AbstractArray.js\";\nimport { typeToConstructor } from \"./utils/index.js\";\nimport { Vec } from \"./Vec.js\";\n/** @internal */\n\nfunction decodeVecFixed(registry, Type, allocLength, value) {\n  const values = Vec.decodeVec(registry, Type, isU8a(value) || isHex(value) ? u8aConcat(compactToU8a(allocLength), value) : value);\n\n  while (values.length < allocLength) {\n    values.push(new Type(registry));\n  }\n\n  assert(values.length === allocLength, () => `Expected a length of exactly ${allocLength} entries`);\n  return values;\n}\n/**\n * @name VecFixed\n * @description\n * This manages codec arrays of a fixed length\n */\n\n\nexport class VecFixed extends AbstractArray {\n  constructor(registry, Type, length, value = []) {\n    const Clazz = typeToConstructor(registry, Type);\n    super(registry, decodeVecFixed(registry, Clazz, length, value));\n    this._Type = void 0;\n    this._Type = Clazz;\n  }\n\n  static with(Type, length) {\n    return class extends VecFixed {\n      constructor(registry, value) {\n        super(registry, Type, length, value);\n      }\n\n    };\n  }\n  /**\n   * @description The type for the items\n   */\n\n\n  get Type() {\n    return new this._Type(this.registry).toRawType();\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.reduce((total, entry) => total + entry.encodedLength, 0);\n  }\n\n  toU8a() {\n    // we override, we don't add the length prefix for ourselves, and at the same time we\n    // ignore isBare on entries, since they should be properly encoded at all times\n    const encoded = this.map(entry => entry.toU8a());\n    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `[${this.Type};${this.length}]`;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}