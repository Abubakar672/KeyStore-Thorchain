{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isU8a } from '@polkadot/util';\nimport { Struct } from \"../../codec/Struct.js\";\nexport const EXTRINSIC_VERSION = 4;\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\n\nexport class GenericExtrinsicV4 extends Struct {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, {\n      signature: 'ExtrinsicSignatureV4',\n      // eslint-disable-next-line sort-keys\n      method: 'Call'\n    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsic(registry, value, isSigned = false) {\n    if (value instanceof GenericExtrinsicV4) {\n      return value;\n    } else if (value instanceof registry.createClass('Call')) {\n      return {\n        method: value\n      };\n    } else if (isU8a(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = registry.createType('ExtrinsicSignatureV4', value, {\n        isSigned\n      });\n      const method = registry.createType('Call', value.subarray(signature.encodedLength));\n      return {\n        method,\n        signature\n      };\n    }\n\n    return value || {};\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignatureV4]]\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n\n\n  get version() {\n    return EXTRINSIC_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this.signature.signFake(this.method, signer, options);\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js"],"names":["isU8a","Struct","EXTRINSIC_VERSION","GenericExtrinsicV4","constructor","registry","value","isSigned","signature","method","decodeExtrinsic","createClass","createType","subarray","encodedLength","toU8a","length","get","version","addSignature","signer","payload","sign","account","options","signFake"],"mappings":"AAAA;AACA;AACA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAA1B;AAEP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAN,SAAiCF,MAAjC,CAAwC;AAC7CG,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3BC,IAAAA;AAD2B,MAEzB,EAFO,EAEH;AACN,UAAMF,QAAN,EAAgB;AACdG,MAAAA,SAAS,EAAE,sBADG;AAEd;AACAC,MAAAA,MAAM,EAAE;AAHM,KAAhB,EAIGN,kBAAkB,CAACO,eAAnB,CAAmCL,QAAnC,EAA6CC,KAA7C,EAAoDC,QAApD,CAJH;AAKD;AACD;;;AAGsB,SAAfG,eAAe,CAACL,QAAD,EAAWC,KAAX,EAAkBC,QAAQ,GAAG,KAA7B,EAAoC;AACxD,QAAID,KAAK,YAAYH,kBAArB,EAAyC;AACvC,aAAOG,KAAP;AACD,KAFD,MAEO,IAAIA,KAAK,YAAYD,QAAQ,CAACM,WAAT,CAAqB,MAArB,CAArB,EAAmD;AACxD,aAAO;AACLF,QAAAA,MAAM,EAAEH;AADH,OAAP;AAGD,KAJM,MAIA,IAAIN,KAAK,CAACM,KAAD,CAAT,EAAkB;AACvB;AACA,YAAME,SAAS,GAAGH,QAAQ,CAACO,UAAT,CAAoB,sBAApB,EAA4CN,KAA5C,EAAmD;AACnEC,QAAAA;AADmE,OAAnD,CAAlB;AAGA,YAAME,MAAM,GAAGJ,QAAQ,CAACO,UAAT,CAAoB,MAApB,EAA4BN,KAAK,CAACO,QAAN,CAAeL,SAAS,CAACM,aAAzB,CAA5B,CAAf;AACA,aAAO;AACLL,QAAAA,MADK;AAELD,QAAAA;AAFK,OAAP;AAID;;AAED,WAAOF,KAAK,IAAI,EAAhB;AACD;AACD;AACF;AACA;;;AAGmB,MAAbQ,aAAa,GAAG;AAClB,WAAO,KAAKC,KAAL,GAAaC,MAApB;AACD;AACD;AACF;AACA;;;AAGY,MAANP,MAAM,GAAG;AACX,WAAO,KAAKQ,GAAL,CAAS,QAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGe,MAATT,SAAS,GAAG;AACd,WAAO,KAAKS,GAAL,CAAS,WAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGa,MAAPC,OAAO,GAAG;AACZ,WAAOhB,iBAAP;AACD;AACD;AACF;AACA;;;AAGEiB,EAAAA,YAAY,CAACC,MAAD,EAASZ,SAAT,EAAoBa,OAApB,EAA6B;AACvC,SAAKb,SAAL,CAAeW,YAAf,CAA4BC,MAA5B,EAAoCZ,SAApC,EAA+Ca,OAA/C;AACA,WAAO,IAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,IAAI,CAACC,OAAD,EAAUC,OAAV,EAAmB;AACrB,SAAKhB,SAAL,CAAec,IAAf,CAAoB,KAAKb,MAAzB,EAAiCc,OAAjC,EAA0CC,OAA1C;AACA,WAAO,IAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,CAACL,MAAD,EAASI,OAAT,EAAkB;AACxB,SAAKhB,SAAL,CAAeiB,QAAf,CAAwB,KAAKhB,MAA7B,EAAqCW,MAArC,EAA6CI,OAA7C;AACA,WAAO,IAAP;AACD;;AA5F4C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isU8a } from '@polkadot/util';\nimport { Struct } from \"../../codec/Struct.js\";\nexport const EXTRINSIC_VERSION = 4;\n\n/**\n * @name GenericExtrinsicV4\n * @description\n * The third generation of compact extrinsics\n */\nexport class GenericExtrinsicV4 extends Struct {\n  constructor(registry, value, {\n    isSigned\n  } = {}) {\n    super(registry, {\n      signature: 'ExtrinsicSignatureV4',\n      // eslint-disable-next-line sort-keys\n      method: 'Call'\n    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));\n  }\n  /** @internal */\n\n\n  static decodeExtrinsic(registry, value, isSigned = false) {\n    if (value instanceof GenericExtrinsicV4) {\n      return value;\n    } else if (value instanceof registry.createClass('Call')) {\n      return {\n        method: value\n      };\n    } else if (isU8a(value)) {\n      // here we decode manually since we need to pull through the version information\n      const signature = registry.createType('ExtrinsicSignatureV4', value, {\n        isSigned\n      });\n      const method = registry.createType('Call', value.subarray(signature.encodedLength));\n      return {\n        method,\n        signature\n      };\n    }\n\n    return value || {};\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description The [[Call]] this extrinsic wraps\n   */\n\n\n  get method() {\n    return this.get('method');\n  }\n  /**\n   * @description The [[ExtrinsicSignatureV4]]\n   */\n\n\n  get signature() {\n    return this.get('signature');\n  }\n  /**\n   * @description The version for the signature\n   */\n\n\n  get version() {\n    return EXTRINSIC_VERSION;\n  }\n  /**\n   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)\n   */\n\n\n  addSignature(signer, signature, payload) {\n    this.signature.addSignature(signer, signature, payload);\n    return this;\n  }\n  /**\n   * @description Sign the extrinsic with a specific keypair\n   */\n\n\n  sign(account, options) {\n    this.signature.sign(this.method, account, options);\n    return this;\n  }\n  /**\n   * @describe Adds a fake signature to the extrinsic\n   */\n\n\n  signFake(signer, options) {\n    this.signature.signFake(this.method, signer, options);\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}