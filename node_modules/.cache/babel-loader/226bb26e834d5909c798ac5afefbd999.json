{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { internalFromArray } from '../observable/fromArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nexport function merge() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  var concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n  return operate(function (source, subscriber) {\n    mergeAll(concurrent)(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/merge.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,iBAAT,QAAkC,yBAAlC;AACA,SAAS,QAAT,QAAyB,YAAzB;AACA,SAAS,SAAT,EAAoB,YAApB,QAAwC,cAAxC;AAiBA,OAAM,SAAU,KAAV,GAAe;AAAI,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAkB;AAAlB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACvB,MAAM,SAAS,GAAG,YAAY,CAAC,IAAD,CAA9B;AACA,MAAM,UAAU,GAAG,SAAS,CAAC,IAAD,EAAO,QAAP,CAA5B;AACA,EAAA,IAAI,GAAG,cAAc,CAAC,IAAD,CAArB;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,IAAA,QAAQ,CAAC,UAAD,CAAR,CAAqB,iBAAiB,CAAA,aAAA,CAAA,CAAE,MAAF,CAAA,EAAQ,MAAA,CAAM,IAAN,CAAR,CAAA,EAA8C,SAA9C,CAAtC,EAAgG,SAAhG,CAA0G,UAA1G;AACD,GAFa,CAAd;AAGD","sourceRoot":"","sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { internalFromArray } from '../observable/fromArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = popScheduler(args);\n    var concurrent = popNumber(args, Infinity);\n    args = argsOrArgArray(args);\n    return operate(function (source, subscriber) {\n        mergeAll(concurrent)(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}