{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\"; // parse into Indexes\n\nfunction parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    validatorCount\n  };\n} // query based on latest\n\n\nfunction queryStaking(api) {\n  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {\n    const {\n      index,\n      start\n    } = activeOpt.unwrapOrDefault();\n    return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);\n  }));\n} // query based on latest\n\n\nfunction querySession(api) {\n  return api.query.session.currentIndex().pipe(map(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));\n} // empty set when none is available\n\n\nfunction empty(api) {\n  return of(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));\n}\n\nexport function indexes(instanceId, api) {\n  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/session/indexes.js"],"names":["map","of","memo","parse","currentIndex","activeEra","activeEraStart","currentEra","validatorCount","queryStaking","api","queryMulti","query","session","staking","pipe","activeOpt","index","start","unwrapOrDefault","querySession","registry","createType","empty","indexes","instanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,QAAwB,MAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAAyC;;AAEzC,SAASC,KAAT,CAAe,CAACC,YAAD,EAAeC,SAAf,EAA0BC,cAA1B,EAA0CC,UAA1C,EAAsDC,cAAtD,CAAf,EAAsF;AACpF,SAAO;AACLH,IAAAA,SADK;AAELC,IAAAA,cAFK;AAGLC,IAAAA,UAHK;AAILH,IAAAA,YAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,C,CAAC;;;AAGF,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,SAAOA,GAAG,CAACC,UAAJ,CAAe,CAACD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBT,YAAnB,EAAiCM,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBT,SAAnD,EAA8DK,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBP,UAAhF,EAA4FG,GAAG,CAACE,KAAJ,CAAUE,OAAV,CAAkBN,cAA9G,CAAf,EAA8IO,IAA9I,CAAmJf,GAAG,CAAC,CAAC,CAACI,YAAD,EAAeY,SAAf,EAA0BT,UAA1B,EAAsCC,cAAtC,CAAD,KAA2D;AACvN,UAAM;AACJS,MAAAA,KADI;AAEJC,MAAAA;AAFI,QAGFF,SAAS,CAACG,eAAV,EAHJ;AAIA,WAAOhB,KAAK,CAAC,CAACC,YAAD,EAAea,KAAf,EAAsBC,KAAtB,EAA6BX,UAAU,CAACY,eAAX,EAA7B,EAA2DX,cAA3D,CAAD,CAAZ;AACD,GAN4J,CAAtJ,CAAP;AAOD,C,CAAC;;;AAGF,SAASY,YAAT,CAAsBV,GAAtB,EAA2B;AACzB,SAAOA,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBT,YAAlB,GAAiCW,IAAjC,CAAsCf,GAAG,CAACI,YAAY,IAAID,KAAK,CAAC,CAACC,YAAD,EAAeM,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAAf,EAAoDZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,gBAAxB,CAApD,EAA+FZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAA/F,EAAoIZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,CAApI,CAAD,CAAtB,CAAzC,CAAP;AACD,C,CAAC;;;AAGF,SAASC,KAAT,CAAeb,GAAf,EAAoB;AAClB,SAAOT,EAAE,CAACE,KAAK,CAAC,CAACO,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwC,CAAxC,CAAD,EAA6CZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAA7C,EAAkFZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,gBAAxB,CAAlF,EAA6HZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,UAAxB,CAA7H,EAAkKZ,GAAG,CAACW,QAAJ,CAAaC,UAAb,CAAwB,KAAxB,CAAlK,CAAD,CAAN,CAAT;AACD;;AAED,OAAO,SAASE,OAAT,CAAiBC,UAAjB,EAA6Bf,GAA7B,EAAkC;AACvC,SAAOR,IAAI,CAACuB,UAAD,EAAa,MAAMf,GAAG,CAACE,KAAJ,CAAUC,OAAV,GAAoBH,GAAG,CAACE,KAAJ,CAAUE,OAAV,GAAoBL,YAAY,CAACC,GAAD,CAAhC,GAAwCU,YAAY,CAACV,GAAD,CAAxE,GAAgFa,KAAK,CAACb,GAAD,CAAxG,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\"; // parse into Indexes\n\nfunction parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {\n  return {\n    activeEra,\n    activeEraStart,\n    currentEra,\n    currentIndex,\n    validatorCount\n  };\n} // query based on latest\n\n\nfunction queryStaking(api) {\n  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {\n    const {\n      index,\n      start\n    } = activeOpt.unwrapOrDefault();\n    return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);\n  }));\n} // query based on latest\n\n\nfunction querySession(api) {\n  return api.query.session.currentIndex().pipe(map(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));\n} // empty set when none is available\n\n\nfunction empty(api) {\n  return of(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));\n}\n\nexport function indexes(instanceId, api) {\n  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));\n}"]},"metadata":{},"sourceType":"module"}