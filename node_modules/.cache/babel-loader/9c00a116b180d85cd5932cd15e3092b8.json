{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"./AbstractInt.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport class Int extends AbstractInt {\n  constructor(registry, value = 0, bitLength) {\n    super(registry, value, bitLength, true);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/Int.js"],"names":["AbstractInt","Int","constructor","registry","value","bitLength","with","typeName","toRawType"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,GAAN,SAAkBD,WAAlB,CAA8B;AACnCE,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAK,GAAG,CAAnB,EAAsBC,SAAtB,EAAiC;AAC1C,UAAMF,QAAN,EAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC,IAAlC;AACD;;AAEU,SAAJC,IAAI,CAACD,SAAD,EAAYE,QAAZ,EAAsB;AAC/B,WAAO,cAAcN,GAAd,CAAkB;AACvBC,MAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3B,cAAMD,QAAN,EAAgBC,KAAhB,EAAuBC,SAAvB;AACD;;AAEDG,MAAAA,SAAS,GAAG;AACV,eAAOD,QAAQ,IAAI,MAAMC,SAAN,EAAnB;AACD;;AAPsB,KAAzB;AAUD;;AAhBkC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInt } from \"./AbstractInt.js\";\n/**\n * @name Int\n * @description\n * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,\n * this handles the encoding and decoding of those numbers. Upon construction\n * the bitLength is provided and any additional use keeps the number to this\n * length. This extends `BN`, so all methods available on a normal `BN` object\n * is available here.\n * @noInheritDoc\n */\n\nexport class Int extends AbstractInt {\n  constructor(registry, value = 0, bitLength) {\n    super(registry, value, bitLength, true);\n  }\n\n  static with(bitLength, typeName) {\n    return class extends Int {\n      constructor(registry, value) {\n        super(registry, value, bitLength);\n      }\n\n      toRawType() {\n        return typeName || super.toRawType();\n      }\n\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}