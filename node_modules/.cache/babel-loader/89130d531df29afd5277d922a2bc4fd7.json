{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\nexport class Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(u8aToU8a(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return isAscii(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || isUndefined(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return isUtf8(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(u8aToU8a(other));\n  }\n  /**\n   * @description Create a new slice from the actual buffer. (compat)\n   * @param start The position to start at\n   * @param end The position to end at\n   */\n\n\n  slice(start, end) {\n    // Like subarray below, we have to follow this approach since we are extending the TypeArray.\n    // This happens especially when it comes to further extensions, the length may be an override\n    return Uint8Array.from(this).slice(start, end);\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. (compat)\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return u8aToString(this);\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/Raw.js"],"names":["assert","isAscii","isUndefined","isUtf8","u8aToHex","u8aToString","u8aToU8a","Raw","Uint8Array","constructor","registry","value","createdAtHash","encodedLength","length","hash","toU8a","isEmpty","find","bitLength","eq","other","some","index","slice","start","end","from","subarray","begin","toHex","toHuman","toUtf8","toJSON","toRawType","toString","isBare"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isAscii, isUndefined, isUtf8, u8aToHex, u8aToString, u8aToU8a } from '@polkadot/util';\n/**\n * @name Raw\n * @description\n * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ\n * from other implementations where it will consume the full Uint8Array as passed to it.\n * As such it is meant to be subclassed where the wrapper takes care of the\n * actual lengths instead of used directly.\n * @noInheritDoc\n */\n\nexport class Raw extends Uint8Array {\n  constructor(registry, value) {\n    super(u8aToU8a(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Returns true if the wrapped value contains only ASCII printable characters\n   */\n\n\n  get isAscii() {\n    return isAscii(this);\n  }\n  /**\n   * @description Returns true if the type wraps an empty/default all-0 value\n   */\n\n\n  get isEmpty() {\n    return !this.length || isUndefined(this.find(value => !!value));\n  }\n  /**\n   * @description Returns true if the wrapped value contains only utf8 characters\n   */\n\n\n  get isUtf8() {\n    return isUtf8(this);\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return this.length * 8;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    if (other instanceof Uint8Array) {\n      return this.length === other.length && !this.some((value, index) => value !== other[index]);\n    }\n\n    return this.eq(u8aToU8a(other));\n  }\n  /**\n   * @description Create a new slice from the actual buffer. (compat)\n   * @param start The position to start at\n   * @param end The position to end at\n   */\n\n\n  slice(start, end) {\n    // Like subarray below, we have to follow this approach since we are extending the TypeArray.\n    // This happens especially when it comes to further extensions, the length may be an override\n    return Uint8Array.from(this).slice(start, end);\n  }\n  /**\n   * @description Create a new subarray from the actual buffer. (compat)\n   * @param begin The position to start at\n   * @param end The position to end at\n   */\n\n\n  subarray(begin, end) {\n    return Uint8Array.from(this).subarray(begin, end);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return u8aToHex(this);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.isAscii ? this.toUtf8() : this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toHex();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Raw';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.toHex();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return Uint8Array.from(this);\n  }\n  /**\n   * @description Returns the wrapped data as a UTF-8 string\n   */\n\n\n  toUtf8() {\n    assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');\n    return u8aToString(this);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}