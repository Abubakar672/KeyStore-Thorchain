{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, stringCamelCase } from '@polkadot/util';\n\nfunction isTx(tx, callIndex) {\n  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];\n}\n/** @internal */\n\n\nexport function createUnchecked(registry, section, callIndex, callMetadata) {\n  const expectedArgs = callMetadata.fields;\n  const funcName = stringCamelCase(callMetadata.name);\n\n  const extrinsicFn = (...args) => {\n    assert(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);\n    return registry.createType('Call', {\n      args,\n      callIndex\n    }, callMetadata);\n  };\n\n  extrinsicFn.is = tx => isTx(tx, callIndex);\n\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n\n  extrinsicFn.toJSON = () => callMetadata.toJSON();\n\n  return extrinsicFn;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js"],"names":["assert","stringCamelCase","isTx","tx","callIndex","createUnchecked","registry","section","callMetadata","expectedArgs","fields","funcName","name","extrinsicFn","args","length","createType","is","meta","method","toJSON"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,eAAjB,QAAwC,gBAAxC;;AAEA,SAASC,IAAT,CAAcC,EAAd,EAAkBC,SAAlB,EAA6B;AAC3B,SAAOD,EAAE,CAACC,SAAH,CAAa,CAAb,MAAoBA,SAAS,CAAC,CAAD,CAA7B,IAAoCD,EAAE,CAACC,SAAH,CAAa,CAAb,MAAoBA,SAAS,CAAC,CAAD,CAAxE;AACD;AACD;;;AAGA,OAAO,SAASC,eAAT,CAAyBC,QAAzB,EAAmCC,OAAnC,EAA4CH,SAA5C,EAAuDI,YAAvD,EAAqE;AAC1E,QAAMC,YAAY,GAAGD,YAAY,CAACE,MAAlC;AACA,QAAMC,QAAQ,GAAGV,eAAe,CAACO,YAAY,CAACI,IAAd,CAAhC;;AAEA,QAAMC,WAAW,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAC/Bd,IAAAA,MAAM,CAACS,YAAY,CAACM,MAAb,KAAwBD,IAAI,CAACC,MAA9B,EAAsC,MAAO,aAAYR,OAAQ,IAAGI,QAAS,YAAWF,YAAY,CAACM,MAAO,mBAAkBD,IAAI,CAACC,MAAO,GAA1I,CAAN;AACA,WAAOT,QAAQ,CAACU,UAAT,CAAoB,MAApB,EAA4B;AACjCF,MAAAA,IADiC;AAEjCV,MAAAA;AAFiC,KAA5B,EAGJI,YAHI,CAAP;AAID,GAND;;AAQAK,EAAAA,WAAW,CAACI,EAAZ,GAAiBd,EAAE,IAAID,IAAI,CAACC,EAAD,EAAKC,SAAL,CAA3B;;AAEAS,EAAAA,WAAW,CAACT,SAAZ,GAAwBA,SAAxB;AACAS,EAAAA,WAAW,CAACK,IAAZ,GAAmBV,YAAnB;AACAK,EAAAA,WAAW,CAACM,MAAZ,GAAqBR,QAArB;AACAE,EAAAA,WAAW,CAACN,OAAZ,GAAsBA,OAAtB;;AAEAM,EAAAA,WAAW,CAACO,MAAZ,GAAqB,MAAMZ,YAAY,CAACY,MAAb,EAA3B;;AAEA,SAAOP,WAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, stringCamelCase } from '@polkadot/util';\n\nfunction isTx(tx, callIndex) {\n  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];\n}\n/** @internal */\n\n\nexport function createUnchecked(registry, section, callIndex, callMetadata) {\n  const expectedArgs = callMetadata.fields;\n  const funcName = stringCamelCase(callMetadata.name);\n\n  const extrinsicFn = (...args) => {\n    assert(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);\n    return registry.createType('Call', {\n      args,\n      callIndex\n    }, callMetadata);\n  };\n\n  extrinsicFn.is = tx => isTx(tx, callIndex);\n\n  extrinsicFn.callIndex = callIndex;\n  extrinsicFn.meta = callMetadata;\n  extrinsicFn.method = funcName;\n  extrinsicFn.section = section;\n\n  extrinsicFn.toJSON = () => callMetadata.toJSON();\n\n  return extrinsicFn;\n}"]},"metadata":{},"sourceType":"module"}