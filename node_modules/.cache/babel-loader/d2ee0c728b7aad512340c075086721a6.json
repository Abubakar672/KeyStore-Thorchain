{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bip39Validate, isReady } from '@polkadot/wasm-crypto';\nimport { validateMnemonic } from \"./bip39.js\";\n/**\n * @name mnemonicValidate\n * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n * ```\n */\n\nexport function mnemonicValidate(mnemonic, onlyJs = false) {\n  return isReady() && !onlyJs ? bip39Validate(mnemonic) : validateMnemonic(mnemonic);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/mnemonic/validate.js"],"names":["bip39Validate","isReady","validateMnemonic","mnemonicValidate","mnemonic","onlyJs"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,OAAxB,QAAuC,uBAAvC;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,MAAM,GAAG,KAA7C,EAAoD;AACzD,SAAOJ,OAAO,MAAM,CAACI,MAAd,GAAuBL,aAAa,CAACI,QAAD,CAApC,GAAiDF,gBAAgB,CAACE,QAAD,CAAxE;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bip39Validate, isReady } from '@polkadot/wasm-crypto';\nimport { validateMnemonic } from \"./bip39.js\";\n/**\n * @name mnemonicValidate\n * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n * ```\n */\n\nexport function mnemonicValidate(mnemonic, onlyJs = false) {\n  return isReady() && !onlyJs ? bip39Validate(mnemonic) : validateMnemonic(mnemonic);\n}"]},"metadata":{},"sourceType":"module"}