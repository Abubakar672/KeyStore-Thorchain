{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Option } from \"./Option.js\";\nimport { Struct } from \"./Struct.js\";\nimport { Tuple } from \"./Tuple.js\";\nimport { Vec } from \"./Vec.js\";\nconst EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nexport class Linkage extends Struct {\n  constructor(registry, Type, value) {\n    super(registry, {\n      previous: Option.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: Option.with(Type)\n    }, value);\n  }\n\n  static withKey(Type) {\n    return class extends Linkage {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n\n  get previous() {\n    return this.get('previous');\n  }\n\n  get next() {\n    return this.get('next');\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Linkage<${this.next.toRawType(true)}>`;\n  }\n  /**\n   * @description Custom toU8a which with bare mode does not return the linkage if empty\n   */\n\n\n  toU8a() {\n    // As part of a storage query (where these appear), in the case of empty, the values\n    // are NOT populated by the node - follow the same logic, leaving it empty\n    return this.isEmpty ? EMPTY : super.toU8a();\n  }\n\n}\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\nexport class LinkageResult extends Tuple {\n  constructor(registry, [TypeKey, keys], [TypeValue, values]) {\n    super(registry, {\n      Keys: Vec.with(TypeKey),\n      Values: Vec.with(TypeValue)\n    }, [keys, values]);\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/Linkage.js"],"names":["Option","Struct","Tuple","Vec","EMPTY","Uint8Array","Linkage","constructor","registry","Type","value","previous","with","next","withKey","get","toRawType","toU8a","isEmpty","LinkageResult","TypeKey","keys","TypeValue","values","Keys","Values"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,MAAMC,KAAK,GAAG,IAAIC,UAAJ,EAAd;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,OAAN,SAAsBL,MAAtB,CAA6B;AAClCM,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiBC,KAAjB,EAAwB;AACjC,UAAMF,QAAN,EAAgB;AACdG,MAAAA,QAAQ,EAAEX,MAAM,CAACY,IAAP,CAAYH,IAAZ,CADI;AAEd;AACAI,MAAAA,IAAI,EAAEb,MAAM,CAACY,IAAP,CAAYH,IAAZ;AAHQ,KAAhB,EAIGC,KAJH;AAKD;;AAEa,SAAPI,OAAO,CAACL,IAAD,EAAO;AACnB,WAAO,cAAcH,OAAd,CAAsB;AAC3BC,MAAAA,WAAW,CAACC,QAAD,EAAWE,KAAX,EAAkB;AAC3B,cAAMF,QAAN,EAAgBC,IAAhB,EAAsBC,KAAtB;AACD;;AAH0B,KAA7B;AAMD;;AAEW,MAARC,QAAQ,GAAG;AACb,WAAO,KAAKI,GAAL,CAAS,UAAT,CAAP;AACD;;AAEO,MAAJF,IAAI,GAAG;AACT,WAAO,KAAKE,GAAL,CAAS,MAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAQ,WAAU,KAAKH,IAAL,CAAUG,SAAV,CAAoB,IAApB,CAA0B,GAA5C;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN;AACA;AACA,WAAO,KAAKC,OAAL,GAAed,KAAf,GAAuB,MAAMa,KAAN,EAA9B;AACD;;AA1CiC;AA6CpC;AACA;AACA;AACA;;AAEA,OAAO,MAAME,aAAN,SAA4BjB,KAA5B,CAAkC;AACvCK,EAAAA,WAAW,CAACC,QAAD,EAAW,CAACY,OAAD,EAAUC,IAAV,CAAX,EAA4B,CAACC,SAAD,EAAYC,MAAZ,CAA5B,EAAiD;AAC1D,UAAMf,QAAN,EAAgB;AACdgB,MAAAA,IAAI,EAAErB,GAAG,CAACS,IAAJ,CAASQ,OAAT,CADQ;AAEdK,MAAAA,MAAM,EAAEtB,GAAG,CAACS,IAAJ,CAASU,SAAT;AAFM,KAAhB,EAGG,CAACD,IAAD,EAAOE,MAAP,CAHH;AAID;;AANsC","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { Option } from \"./Option.js\";\nimport { Struct } from \"./Struct.js\";\nimport { Tuple } from \"./Tuple.js\";\nimport { Vec } from \"./Vec.js\";\nconst EMPTY = new Uint8Array();\n/**\n * @name Linkage\n * @description The wrapper for the result from a LinkedMap\n */\n\nexport class Linkage extends Struct {\n  constructor(registry, Type, value) {\n    super(registry, {\n      previous: Option.with(Type),\n      // eslint-disable-next-line sort-keys\n      next: Option.with(Type)\n    }, value);\n  }\n\n  static withKey(Type) {\n    return class extends Linkage {\n      constructor(registry, value) {\n        super(registry, Type, value);\n      }\n\n    };\n  }\n\n  get previous() {\n    return this.get('previous');\n  }\n\n  get next() {\n    return this.get('next');\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `Linkage<${this.next.toRawType(true)}>`;\n  }\n  /**\n   * @description Custom toU8a which with bare mode does not return the linkage if empty\n   */\n\n\n  toU8a() {\n    // As part of a storage query (where these appear), in the case of empty, the values\n    // are NOT populated by the node - follow the same logic, leaving it empty\n    return this.isEmpty ? EMPTY : super.toU8a();\n  }\n\n}\n/**\n * @name LinkageResult\n * @description A Linkage keys/Values tuple\n */\n\nexport class LinkageResult extends Tuple {\n  constructor(registry, [TypeKey, keys], [TypeValue, values]) {\n    super(registry, {\n      Keys: Vec.with(TypeKey),\n      Values: Vec.with(TypeValue)\n    }, [keys, values]);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}