{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { BN } from \"./bn.js\";\nimport { BN_MAX_INTEGER, BN_ONE, BN_ZERO } from \"./consts.js\";\nimport { bnToBn } from \"./toBn.js\";\nconst SQRT_MAX_SAFE_INTEGER = new BN(94906265);\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\n\nexport function bnSqrt(value) {\n  const n = bnToBn(value);\n  assert(n.gte(BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n  // shortcut <= 2^53 - 1 to use the JS utils\n\n  if (n.lte(BN_MAX_INTEGER)) {\n    return new BN(Math.floor(Math.sqrt(n.toNumber())));\n  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n  // output will be larger than this, we expect this to be a safe start\n\n\n  let x0 = SQRT_MAX_SAFE_INTEGER.clone();\n\n  while (true) {\n    const x1 = n.div(x0).iadd(x0).ishrn(1);\n\n    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n      return x0;\n    }\n\n    x0 = x1;\n  }\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/bn/sqrt.js"],"names":["assert","BN","BN_MAX_INTEGER","BN_ONE","BN_ZERO","bnToBn","SQRT_MAX_SAFE_INTEGER","bnSqrt","value","n","gte","lte","Math","floor","sqrt","toNumber","x0","clone","x1","div","iadd","ishrn","eq","sub"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,EAAT,QAAmB,SAAnB;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,OAAjC,QAAgD,aAAhD;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,MAAMC,qBAAqB,GAAG,IAAIL,EAAJ,CAAO,QAAP,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,MAAT,CAAgBC,KAAhB,EAAuB;AAC5B,QAAMC,CAAC,GAAGJ,MAAM,CAACG,KAAD,CAAhB;AACAR,EAAAA,MAAM,CAACS,CAAC,CAACC,GAAF,CAAMN,OAAN,CAAD,EAAiB,kDAAjB,CAAN,CAF4B,CAEgD;AAC5E;;AAEA,MAAIK,CAAC,CAACE,GAAF,CAAMT,cAAN,CAAJ,EAA2B;AACzB,WAAO,IAAID,EAAJ,CAAOW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUL,CAAC,CAACM,QAAF,EAAV,CAAX,CAAP,CAAP;AACD,GAP2B,CAO1B;AACF;;;AAGA,MAAIC,EAAE,GAAGV,qBAAqB,CAACW,KAAtB,EAAT;;AAEA,SAAO,IAAP,EAAa;AACX,UAAMC,EAAE,GAAGT,CAAC,CAACU,GAAF,CAAMH,EAAN,EAAUI,IAAV,CAAeJ,EAAf,EAAmBK,KAAnB,CAAyB,CAAzB,CAAX;;AAEA,QAAIL,EAAE,CAACM,EAAH,CAAMJ,EAAN,KAAaF,EAAE,CAACM,EAAH,CAAMJ,EAAE,CAACK,GAAH,CAAOpB,MAAP,CAAN,CAAjB,EAAwC;AACtC,aAAOa,EAAP;AACD;;AAEDA,IAAAA,EAAE,GAAGE,EAAL;AACD;AACF","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { BN } from \"./bn.js\";\nimport { BN_MAX_INTEGER, BN_ONE, BN_ZERO } from \"./consts.js\";\nimport { bnToBn } from \"./toBn.js\";\nconst SQRT_MAX_SAFE_INTEGER = new BN(94906265);\n/**\n * @name bnSqrt\n * @summary Calculates the integer square root of a BN\n * @example\n * <BR>\n *\n * ```javascript\n * import BN from 'bn.js';\n * import { bnSqrt } from '@polkadot/util';\n *\n * bnSqrt(new BN(16)).toString(); // => '4'\n * ```\n */\n\nexport function bnSqrt(value) {\n  const n = bnToBn(value);\n  assert(n.gte(BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/\n  // shortcut <= 2^53 - 1 to use the JS utils\n\n  if (n.lte(BN_MAX_INTEGER)) {\n    return new BN(Math.floor(Math.sqrt(n.toNumber())));\n  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the\n  // output will be larger than this, we expect this to be a safe start\n\n\n  let x0 = SQRT_MAX_SAFE_INTEGER.clone();\n\n  while (true) {\n    const x1 = n.div(x0).iadd(x0).ishrn(1);\n\n    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {\n      return x0;\n    }\n\n    x0 = x1;\n  }\n}"]},"metadata":{},"sourceType":"module"}