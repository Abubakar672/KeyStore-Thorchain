{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat(count) {\n  if (count === void 0) {\n    count = Infinity;\n  }\n\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRepeat = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRepeat();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRepeat();\n      }\n    };\n\n    subscribeForRepeat();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/repeat.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AAwDA,OAAM,SAAU,MAAV,CAAoB,KAApB,EAAoC;AAAhB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,QAAA;AAAgB;;AACxC,SAAO,KAAK,IAAI,CAAT,GACH,YAAA;AAAM,WAAA,KAAA;AAAK,GADR,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAJ;;AACA,QAAM,kBAAkB,GAAG,YAAA;AACzB,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,SAAnC,EAA8C,YAAA;AAC5C,YAAI,EAAE,KAAF,GAAU,KAAd,EAAqB;AACnB,cAAI,QAAJ,EAAc;AACZ,YAAA,QAAQ,CAAC,WAAT;AACA,YAAA,QAAQ,GAAG,IAAX;AACA,YAAA,kBAAkB;AACnB,WAJD,MAIO;AACL,YAAA,SAAS,GAAG,IAAZ;AACD;AACF,SARD,MAQO;AACL,UAAA,UAAU,CAAC,QAAX;AACD;AACF,OAZD,CADS,CAAX;;AAgBA,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,WAAT;AACA,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,kBAAkB;AACnB;AACF,KAvBD;;AAwBA,IAAA,kBAAkB;AACnB,GA5BM,CAFX;AA+BD","sourceRoot":"","sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat(count) {\n    if (count === void 0) { count = Infinity; }\n    return count <= 0\n        ? function () { return EMPTY; }\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var innerSub;\n            var subscribeForRepeat = function () {\n                var syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n                    if (++soFar < count) {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRepeat();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRepeat();\n                }\n            };\n            subscribeForRepeat();\n        });\n}\n//# sourceMappingURL=repeat.js.map"]},"metadata":{},"sourceType":"module"}