{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBoolean, isNumber, isU8a, isUndefined } from '@polkadot/util';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\nimport { bool as Bool } from \"../primitive/Bool.js\"; // For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction\n\nconst AYE_BITS = 0b10000000;\nconst NAY_BITS = 0b00000000;\nconst CON_MASK = 0b01111111;\nconst DEF_CONV = 0b00000000; // the default conviction, None\n\n/** @internal */\n\nfunction decodeVoteBool(value) {\n  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\n\n\nfunction decodeVoteU8a(value) {\n  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\n\n\nfunction decodeVoteType(registry, value) {\n  const vote = new Bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;\n  const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);\n  return new Uint8Array([vote | conviction.index]);\n}\n/** @internal */\n\n\nfunction decodeVote(registry, value) {\n  if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {\n    return decodeVoteBool(new Bool(registry, value).isTrue);\n  } else if (isNumber(value)) {\n    return decodeVoteBool(value < 0);\n  } else if (isU8a(value)) {\n    return decodeVoteU8a(value);\n  }\n\n  return decodeVoteType(registry, value);\n}\n/**\n * @name GenericVote\n * @description\n * A number of lock periods, plus a vote, one way or the other.\n */\n\n\nexport class GenericVote extends U8aFixed {\n  constructor(registry, value) {\n    // decoded is just 1 byte\n    // Aye: Most Significant Bit\n    // Conviction: 0000 - 0101\n    const decoded = decodeVote(registry, value);\n    super(registry, decoded, 8);\n    this._aye = void 0;\n    this._conviction = void 0;\n    this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;\n    this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);\n  }\n  /**\n   * @description returns a V2 conviction\n   */\n\n\n  get conviction() {\n    return this._conviction;\n  }\n  /**\n   * @description true if the wrapped value is a positive vote\n   */\n\n\n  get isAye() {\n    return this._aye;\n  }\n  /**\n   * @description true if the wrapped value is a negative vote\n   */\n\n\n  get isNay() {\n    return !this.isAye;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExpanded) {\n    return {\n      conviction: this.conviction.toHuman(isExpanded),\n      vote: this.isAye ? 'Aye' : 'Nay'\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Vote';\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/generic/Vote.js"],"names":["isBoolean","isNumber","isU8a","isUndefined","U8aFixed","bool","Bool","AYE_BITS","NAY_BITS","CON_MASK","DEF_CONV","decodeVoteBool","value","Uint8Array","decodeVoteU8a","length","subarray","decodeVoteType","registry","vote","aye","isTrue","conviction","createType","index","decodeVote","Boolean","GenericVote","constructor","decoded","_aye","_conviction","isAye","isNay","toHuman","isExpanded","toRawType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isBoolean, isNumber, isU8a, isUndefined } from '@polkadot/util';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\nimport { bool as Bool } from \"../primitive/Bool.js\";\n// For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction\nconst AYE_BITS = 0b10000000;\nconst NAY_BITS = 0b00000000;\nconst CON_MASK = 0b01111111;\nconst DEF_CONV = 0b00000000; // the default conviction, None\n\n/** @internal */\n\nfunction decodeVoteBool(value) {\n  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\n\n\nfunction decodeVoteU8a(value) {\n  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);\n}\n/** @internal */\n\n\nfunction decodeVoteType(registry, value) {\n  const vote = new Bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;\n  const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);\n  return new Uint8Array([vote | conviction.index]);\n}\n/** @internal */\n\n\nfunction decodeVote(registry, value) {\n  if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {\n    return decodeVoteBool(new Bool(registry, value).isTrue);\n  } else if (isNumber(value)) {\n    return decodeVoteBool(value < 0);\n  } else if (isU8a(value)) {\n    return decodeVoteU8a(value);\n  }\n\n  return decodeVoteType(registry, value);\n}\n/**\n * @name GenericVote\n * @description\n * A number of lock periods, plus a vote, one way or the other.\n */\n\n\nexport class GenericVote extends U8aFixed {\n  constructor(registry, value) {\n    // decoded is just 1 byte\n    // Aye: Most Significant Bit\n    // Conviction: 0000 - 0101\n    const decoded = decodeVote(registry, value);\n    super(registry, decoded, 8);\n    this._aye = void 0;\n    this._conviction = void 0;\n    this._aye = (decoded[0] & AYE_BITS) === AYE_BITS;\n    this._conviction = this.registry.createType('Conviction', decoded[0] & CON_MASK);\n  }\n  /**\n   * @description returns a V2 conviction\n   */\n\n\n  get conviction() {\n    return this._conviction;\n  }\n  /**\n   * @description true if the wrapped value is a positive vote\n   */\n\n\n  get isAye() {\n    return this._aye;\n  }\n  /**\n   * @description true if the wrapped value is a negative vote\n   */\n\n\n  get isNay() {\n    return !this.isAye;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExpanded) {\n    return {\n      conviction: this.conviction.toHuman(isExpanded),\n      vote: this.isAye ? 'Aye' : 'Nay'\n    };\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Vote';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}