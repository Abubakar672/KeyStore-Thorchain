{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore, decryptFromKeystore } from '@xchainjs/xchain-crypto';\nimport logo from \"./logo.svg\";\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css'; // Crypto Constants for xchain\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cipher = 'aes-128-ctr';\nconst kdf = 'pbkdf2';\nconst prf = 'hmac-sha256';\nconst dklen = 32;\nconst c = 262144;\nconst hashFunction = 'sha256';\nconst meta = 'xchain-keystore';\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  let key;\n  let tea; // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase();\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input); // console.log('key========>', key)\n\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const phraseDecrypted = async () => {\n    try {\n      tea = await decryptFromKeystore(key);\n      console.log(\"===================================>>>>>>\", tea);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  console.log(\"===================================>>>>>>\", key); //   const handleValidation =() => {\n  //     const { input } = this.state;\n  //     // only each block with generate error\n  //     if (!input || isNaN(input)) {\n  //       this.setState({ error: 'price is not valid' });\n  //     }else {\n  //       this.setState({error: \"\"})\n  //       // submit code here\n  //     }\n  // }\n\n  /*File creation and saving here*/\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\", key);\n    const file = new Blob([JSON.stringify(key)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }; // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n  // const  onFileChange = event => {\n  //     // Update the state\n  //     this.setState({ selectedFile: event.target.files[0] });\n  //   };\n  //  const onFileUpload = () => {\n  //     // Create an object of formData\n  //     const formData = new FormData();\n  //     // Update the formData object\n  //     formData.append(\n  //       \"myFile\",\n  //       this.state.selectedFile,\n  //       this.state.selectedFile.name\n  //     );}\n  // Decryption Going on\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Thorchain Custom Keystore Maker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Enter your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"input\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: keystore,\n            children: \"Create KeyStore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"TSu7te8KrQhXIFzST5QLX0GSJa0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js"],"names":["generatePhrase","encryptToKeyStore","decryptFromKeystore","React","Component","useEffect","Button","Container","Header","Segment","Grid","cipher","kdf","prf","dklen","c","hashFunction","meta","App","response","setResponse","useState","input","setInput","key","tea","keystore","phrase","console","log","downloadTextFile","error","phraseDecrypted","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","e","target","value"],"mappings":"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","sourcesContent":["import { generatePhrase, encryptToKeyStore ,decryptFromKeystore} from '@xchainjs/xchain-crypto'\nimport logo from './logo.svg';\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\n\n// Crypto Constants for xchain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'xchain-keystore'\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  let key\n  let tea\n  // console.log(\"Response ================ \", response)\n\n  const keystore = async () => {\n    try {\n      const phrase = generatePhrase()\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n      \n      downloadTextFile();\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n\n\n  const phraseDecrypted = async()=>{\n    \n    try{\n      tea = await decryptFromKeystore(key)\n      console.log(\"===================================>>>>>>\",tea)\n\n    }\n    catch (error){\n      console.log(error);\n    }\n    }\n    console.log(\"===================================>>>>>>\",key)\n//   const handleValidation =() => {\n//     const { input } = this.state;\n\n//     // only each block with generate error\n//     if (!input || isNaN(input)) {\n//       this.setState({ error: 'price is not valid' });\n//     }else {\n//       this.setState({error: \"\"})\n//       // submit code here\n//     }\n// }\n\n  /*File creation and saving here*/ \n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\",key)\n    const file = new Blob([JSON.stringify(key)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  // state = {\n \n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n\n// const  onFileChange = event => {\n    \n//     // Update the state\n//     this.setState({ selectedFile: event.target.files[0] });\n  \n//   };\n\n//  const onFileUpload = () => {\n    \n//     // Create an object of formData\n//     const formData = new FormData();\n  \n//     // Update the formData object\n//     formData.append(\n//       \"myFile\",\n//       this.state.selectedFile,\n//       this.state.selectedFile.name\n//     );}\n\n    // Decryption Going on\n\n  return <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={keystore}>Create KeyStore</Button>\n        </div>\n        {/* <h1> Thorchain KeyStore Decryption </h1>\n        \n        <div>\n          <h1>Enter your password</h1>\n        <input id=\"input\" value={input} onchange ={e=> setInput(e.target.value)}/>\n        </div>\n        \n        <div>\n        <input type=\"file\"/>\n                <button >\n                  Upload!\n                </button>\n        </div> */}\n\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}