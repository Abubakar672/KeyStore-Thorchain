{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n    if (decoded.length > 8) {\n      const accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));\n    }\n\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));\n  } catch (error) {\n    return of([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nexport function idAndIndex(instanceId, api) {\n  return memo(instanceId, address => retrieve(api, address));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/accounts/idAndIndex.js"],"names":["map","of","isU8a","decodeAddress","memo","retrieve","api","address","decoded","toString","length","accountId","registry","createType","derive","accounts","idToIndex","pipe","accountIndex","indexToId","error","undefined","idAndIndex","instanceId"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,QAAwB,MAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9B,MAAI;AACF;AACA,UAAMC,OAAO,GAAGN,KAAK,CAACK,OAAD,CAAL,GAAiBA,OAAjB,GAA2BJ,aAAa,CAAC,CAACI,OAAO,IAAI,EAAZ,EAAgBE,QAAhB,EAAD,CAAxD;;AAEA,QAAID,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAMC,SAAS,GAAGL,GAAG,CAACM,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,OAArC,CAAlB;AACA,aAAOF,GAAG,CAACQ,MAAJ,CAAWC,QAAX,CAAoBC,SAApB,CAA8BL,SAA9B,EAAyCM,IAAzC,CAA8CjB,GAAG,CAACkB,YAAY,IAAI,CAACP,SAAD,EAAYO,YAAZ,CAAjB,CAAjD,CAAP;AACD;;AAED,UAAMA,YAAY,GAAGZ,GAAG,CAACM,QAAJ,CAAaC,UAAb,CAAwB,cAAxB,EAAwCL,OAAxC,CAArB;AACA,WAAOF,GAAG,CAACQ,MAAJ,CAAWC,QAAX,CAAoBI,SAApB,CAA8BD,YAAY,CAACT,QAAb,EAA9B,EAAuDQ,IAAvD,CAA4DjB,GAAG,CAACW,SAAS,IAAI,CAACA,SAAD,EAAYO,YAAZ,CAAd,CAA/D,CAAP;AACD,GAXD,CAWE,OAAOE,KAAP,EAAc;AACd,WAAOnB,EAAE,CAAC,CAACoB,SAAD,EAAYA,SAAZ,CAAD,CAAT;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,UAAT,CAAoBC,UAApB,EAAgCjB,GAAhC,EAAqC;AAC1C,SAAOF,IAAI,CAACmB,UAAD,EAAahB,OAAO,IAAIF,QAAQ,CAACC,GAAD,EAAMC,OAAN,CAAhC,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { isU8a } from '@polkadot/util';\nimport { decodeAddress } from '@polkadot/util-crypto';\nimport { memo } from \"../util/index.js\";\n\nfunction retrieve(api, address) {\n  try {\n    // yes, this can fail, don't care too much, catch will catch it\n    const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());\n\n    if (decoded.length > 8) {\n      const accountId = api.registry.createType('AccountId', decoded);\n      return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));\n    }\n\n    const accountIndex = api.registry.createType('AccountIndex', decoded);\n    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));\n  } catch (error) {\n    return of([undefined, undefined]);\n  }\n}\n/**\n * @name idAndIndex\n * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.\n * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {\n *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);\n * });\n * ```\n */\n\n\nexport function idAndIndex(instanceId, api) {\n  return memo(instanceId, address => retrieve(api, address));\n}"]},"metadata":{},"sourceType":"module"}