{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { BASE58_ALPHABET } from \"./bs58.js\";\nconst BASE_CONFIG = {\n  alphabet: BASE58_ALPHABET,\n  ipfsChar: 'z',\n  type: 'base58'\n};\nexport function validateChars({\n  alphabet,\n  ipfsChar,\n  type\n}, value, ipfsCompat) {\n  assert(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);\n  assert(!ipfsCompat || value[0] === ipfsChar, () => `Expected ${type} to start with '${ipfsChar}'`);\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {\n    assert(alphabet.includes(value[i]), () => `Invalid ${type} character \"${value[i]}\" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates that the supplied value is valid base58\n */\n\nexport function base58Validate(value, ipfsCompat) {\n  return validateChars(BASE_CONFIG, value, ipfsCompat);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/base58/validate.js"],"names":["assert","BASE58_ALPHABET","BASE_CONFIG","alphabet","ipfsChar","type","validateChars","value","ipfsCompat","i","length","includes","charCodeAt","toString","base58Validate"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAEF,eADQ;AAElBG,EAAAA,QAAQ,EAAE,GAFQ;AAGlBC,EAAAA,IAAI,EAAE;AAHY,CAApB;AAKA,OAAO,SAASC,aAAT,CAAuB;AAC5BH,EAAAA,QAD4B;AAE5BC,EAAAA,QAF4B;AAG5BC,EAAAA;AAH4B,CAAvB,EAIJE,KAJI,EAIGC,UAJH,EAIe;AACpBR,EAAAA,MAAM,CAACO,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA3B,EAAqC,MAAO,gCAA+BF,IAAK,eAAhF,CAAN;AACAL,EAAAA,MAAM,CAAC,CAACQ,UAAD,IAAeD,KAAK,CAAC,CAAD,CAAL,KAAaH,QAA7B,EAAuC,MAAO,YAAWC,IAAK,mBAAkBD,QAAS,GAAzF,CAAN;;AAEA,OAAK,IAAIK,CAAC,GAAGD,UAAU,GAAG,CAAH,GAAO,CAA9B,EAAiCC,CAAC,GAAGF,KAAK,CAACG,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACtDT,IAAAA,MAAM,CAACG,QAAQ,CAACQ,QAAT,CAAkBJ,KAAK,CAACE,CAAD,CAAvB,CAAD,EAA8B,MAAO,WAAUJ,IAAK,eAAcE,KAAK,CAACE,CAAD,CAAI,QAAOF,KAAK,CAACK,UAAN,CAAiBH,CAAjB,EAAoBI,QAApB,CAA6B,EAA7B,CAAiC,cAAaJ,CAAE,EAAlI,CAAN;AACD;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,cAAT,CAAwBP,KAAxB,EAA+BC,UAA/B,EAA2C;AAChD,SAAOF,aAAa,CAACJ,WAAD,EAAcK,KAAd,EAAqBC,UAArB,CAApB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { BASE58_ALPHABET } from \"./bs58.js\";\nconst BASE_CONFIG = {\n  alphabet: BASE58_ALPHABET,\n  ipfsChar: 'z',\n  type: 'base58'\n};\nexport function validateChars({\n  alphabet,\n  ipfsChar,\n  type\n}, value, ipfsCompat) {\n  assert(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);\n  assert(!ipfsCompat || value[0] === ipfsChar, () => `Expected ${type} to start with '${ipfsChar}'`);\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {\n    assert(alphabet.includes(value[i]), () => `Invalid ${type} character \"${value[i]}\" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates that the supplied value is valid base58\n */\n\nexport function base58Validate(value, ipfsCompat) {\n  return validateChars(BASE_CONFIG, value, ipfsCompat);\n}"]},"metadata":{},"sourceType":"module"}