{"ast":null,"code":"'use strict';\n\nconst preserveCamelCase = (string, locale) => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n\n    if (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;\n    }\n  }\n\n  return string;\n};\n\nconst preserveConsecutiveUppercase = input => {\n  return input.replace(/^[\\p{Lu}](?![\\p{Lu}])/gu, m1 => m1.toLowerCase());\n};\n\nconst postProcess = (input, options) => {\n  return input.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale)).replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));\n};\n\nconst camelCase = (input, options) => {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = {\n    pascalCase: false,\n    preserveConsecutiveUppercase: false,\n    ...options\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);\n  }\n\n  const hasUpperCase = input !== input.toLocaleLowerCase(options.locale);\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input, options.locale);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '');\n\n  if (options.preserveConsecutiveUppercase) {\n    input = preserveConsecutiveUppercase(input);\n  } else {\n    input = input.toLocaleLowerCase();\n  }\n\n  if (options.pascalCase) {\n    input = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);\n  }\n\n  return postProcess(input, options);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/node_modules/camelcase/index.js"],"names":["preserveCamelCase","string","locale","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","character","test","slice","toLocaleLowerCase","toLocaleUpperCase","preserveConsecutiveUppercase","input","replace","m1","toLowerCase","postProcess","options","_","p1","m","camelCase","Array","isArray","TypeError","pascalCase","map","x","trim","filter","join","hasUpperCase","charAt","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst preserveCamelCase = (string, locale) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[\\p{Ll}]/u.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLocaleLowerCase(locale) === character && character.toLocaleUpperCase(locale) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toLocaleUpperCase(locale) === character && character.toLocaleLowerCase(locale) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = input => {\n\treturn input.replace(/^[\\p{Lu}](?![\\p{Lu}])/gu, m1 => m1.toLowerCase());\n};\n\nconst postProcess = (input, options) => {\n\treturn input.replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1) => p1.toLocaleUpperCase(options.locale))\n\t\t.replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, m => m.toLocaleUpperCase(options.locale));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toLocaleUpperCase(options.locale) : input.toLocaleLowerCase(options.locale);\n\t}\n\n\tconst hasUpperCase = input !== input.toLocaleLowerCase(options.locale);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, options.locale);\n\t}\n\n\tinput = input.replace(/^[_.\\- ]+/, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input);\n\t} else {\n\t\tinput = input.toLocaleLowerCase();\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = input.charAt(0).toLocaleUpperCase(options.locale) + input.slice(1);\n\t}\n\n\treturn postProcess(input, options);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"]},"metadata":{},"sourceType":"script"}