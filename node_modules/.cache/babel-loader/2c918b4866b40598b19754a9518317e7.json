{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateOffsetLimit = exports.validateTradingPair = exports.validateSymbol = exports.checkCoins = exports.checkNumber = void 0;\n\nvar _big = _interopRequireDefault(require(\"big.js\"));\n\nvar MAX_INT64 = Math.pow(2, 63);\n/**\n * validate the input number.\n * @param {Number} value\n */\n\nvar checkNumber = function checkNumber(value) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"input number\";\n\n  if (new _big[\"default\"](value).lte(0)) {\n    throw new Error(\"\".concat(name, \" should be a positive number\"));\n  }\n\n  if (new _big[\"default\"](value).gte(MAX_INT64)) {\n    throw new Error(\"\".concat(name, \" should be less than 2^63\"));\n  }\n};\n/**\n * basic validation of coins\n * @param {Array} coins\n */\n\n\nexports.checkNumber = checkNumber;\n\nvar checkCoins = function checkCoins(coins) {\n  coins = coins || [];\n  coins.forEach(function (coin) {\n    checkNumber(coin.amount);\n\n    if (!coin.denom) {\n      throw new Error(\"invalid denmon\");\n    }\n  });\n};\n\nexports.checkCoins = checkCoins;\n\nvar validateSymbol = function validateSymbol(symbol) {\n  if (!symbol) {\n    throw new Error(\"suffixed token symbol cannot be empty\");\n  }\n\n  var splitSymbols = symbol.split(\"-\"); //check length with .B suffix\n\n  if (!/^[a-zA-z\\d/.]{3,10}$/.test(splitSymbols[0])) {\n    throw new Error(\"symbol length is limited to 3~10\");\n  }\n};\n\nexports.validateSymbol = validateSymbol;\n\nvar validateTradingPair = function validateTradingPair(pair) {\n  var symbols = pair.split(\"_\");\n\n  if (symbols.length !== 2) {\n    throw new Error('the pair should in format \"symbol1_symbol2\"');\n  }\n\n  validateSymbol(symbols[0]);\n  validateSymbol(symbols[1]);\n};\n\nexports.validateTradingPair = validateTradingPair;\n\nvar validateOffsetLimit = function validateOffsetLimit(offset, limit) {\n  if (offset < 0) {\n    throw new Error(\"offset can't be less than 0\");\n  }\n\n  if (limit < 0) {\n    throw new Error(\"limit can't be less than 0\");\n  }\n};\n\nexports.validateOffsetLimit = validateOffsetLimit;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@binance-chain/javascript-sdk/lib/utils/validateHelper.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","validateOffsetLimit","validateTradingPair","validateSymbol","checkCoins","checkNumber","_big","MAX_INT64","Math","pow","name","arguments","length","undefined","lte","Error","concat","gte","coins","forEach","coin","amount","denom","symbol","splitSymbols","split","test","pair","symbols","offset","limit"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateOffsetLimit = exports.validateTradingPair = exports.validateSymbol = exports.checkCoins = exports.checkNumber = void 0;\n\nvar _big = _interopRequireDefault(require(\"big.js\"));\n\nvar MAX_INT64 = Math.pow(2, 63);\n/**\n * validate the input number.\n * @param {Number} value\n */\n\nvar checkNumber = function checkNumber(value) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"input number\";\n\n  if (new _big[\"default\"](value).lte(0)) {\n    throw new Error(\"\".concat(name, \" should be a positive number\"));\n  }\n\n  if (new _big[\"default\"](value).gte(MAX_INT64)) {\n    throw new Error(\"\".concat(name, \" should be less than 2^63\"));\n  }\n};\n/**\n * basic validation of coins\n * @param {Array} coins\n */\n\n\nexports.checkNumber = checkNumber;\n\nvar checkCoins = function checkCoins(coins) {\n  coins = coins || [];\n  coins.forEach(function (coin) {\n    checkNumber(coin.amount);\n\n    if (!coin.denom) {\n      throw new Error(\"invalid denmon\");\n    }\n  });\n};\n\nexports.checkCoins = checkCoins;\n\nvar validateSymbol = function validateSymbol(symbol) {\n  if (!symbol) {\n    throw new Error(\"suffixed token symbol cannot be empty\");\n  }\n\n  var splitSymbols = symbol.split(\"-\"); //check length with .B suffix\n\n  if (!/^[a-zA-z\\d/.]{3,10}$/.test(splitSymbols[0])) {\n    throw new Error(\"symbol length is limited to 3~10\");\n  }\n};\n\nexports.validateSymbol = validateSymbol;\n\nvar validateTradingPair = function validateTradingPair(pair) {\n  var symbols = pair.split(\"_\");\n\n  if (symbols.length !== 2) {\n    throw new Error('the pair should in format \"symbol1_symbol2\"');\n  }\n\n  validateSymbol(symbols[0]);\n  validateSymbol(symbols[1]);\n};\n\nexports.validateTradingPair = validateTradingPair;\n\nvar validateOffsetLimit = function validateOffsetLimit(offset, limit) {\n  if (offset < 0) {\n    throw new Error(\"offset can't be less than 0\");\n  }\n\n  if (limit < 0) {\n    throw new Error(\"limit can't be less than 0\");\n  }\n};\n\nexports.validateOffsetLimit = validateOffsetLimit;"]},"metadata":{},"sourceType":"script"}