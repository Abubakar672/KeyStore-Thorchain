{"ast":null,"code":"import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  return operate(function (source, subscriber) {\n    var activeTask = null;\n    var lastValue = null;\n    var lastTime = null;\n\n    var emit = function () {\n      if (activeTask) {\n        activeTask.unsubscribe();\n        activeTask = null;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    function emitWhenIdle() {\n      var targetTime = lastTime + dueTime;\n      var now = scheduler.now();\n\n      if (now < targetTime) {\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      lastValue = value;\n      lastTime = scheduler.now();\n\n      if (!activeTask) {\n        activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n        subscriber.add(activeTask);\n      }\n    }, function () {\n      emit();\n      subscriber.complete();\n    }, undefined, function () {\n      lastValue = activeTask = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/debounceTime.ts"],"names":[],"mappings":"AAAA,SAAS,cAAT,QAA+B,oBAA/B;AAGA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AA2DA,OAAM,SAAU,YAAV,CAA0B,OAA1B,EAA2C,SAA3C,EAAoF;AAAzC,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,cAAA;AAAyC;;AACxF,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,UAAU,GAAwB,IAAtC;AACA,QAAI,SAAS,GAAa,IAA1B;AACA,QAAI,QAAQ,GAAkB,IAA9B;;AAEA,QAAM,IAAI,GAAG,YAAA;AACX,UAAI,UAAJ,EAAgB;AAEd,QAAA,UAAU,CAAC,WAAX;AACA,QAAA,UAAU,GAAG,IAAb;AACA,YAAM,KAAK,GAAG,SAAd;AACA,QAAA,SAAS,GAAG,IAAZ;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD;AACF,KATD;;AAUA,aAAS,YAAT,GAAqB;AAInB,UAAM,UAAU,GAAG,QAAS,GAAG,OAA/B;AACA,UAAM,GAAG,GAAG,SAAS,CAAC,GAAV,EAAZ;;AACA,UAAI,GAAG,GAAG,UAAV,EAAsB;AAEpB,QAAA,UAAU,GAAG,KAAK,QAAL,CAAc,SAAd,EAAyB,UAAU,GAAG,GAAtC,CAAb;AACA,QAAA,UAAU,CAAC,GAAX,CAAe,UAAf;AACA;AACD;;AAED,MAAA,IAAI;AACL;;AAED,IAAA,MAAM,CAAC,SAAP,CACE,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAS;AACP,MAAA,SAAS,GAAG,KAAZ;AACA,MAAA,QAAQ,GAAG,SAAS,CAAC,GAAV,EAAX;;AAGA,UAAI,CAAC,UAAL,EAAiB;AACf,QAAA,UAAU,GAAG,SAAS,CAAC,QAAV,CAAmB,YAAnB,EAAiC,OAAjC,CAAb;AACA,QAAA,UAAU,CAAC,GAAX,CAAe,UAAf;AACD;AACF,KAXH,EAYE,YAAA;AAGE,MAAA,IAAI;AACJ,MAAA,UAAU,CAAC,QAAX;AACD,KAjBH,EAmBE,SAnBF,EAoBE,YAAA;AAEE,MAAA,SAAS,GAAG,UAAU,GAAG,IAAzB;AACD,KAvBH,CADF;AA2BD,GA1Da,CAAd;AA2DD","sourceRoot":"","sourcesContent":["import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = asyncScheduler; }\n    return operate(function (source, subscriber) {\n        var activeTask = null;\n        var lastValue = null;\n        var lastTime = null;\n        var emit = function () {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            var targetTime = lastTime + dueTime;\n            var now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, function () {\n            emit();\n            subscriber.complete();\n        }, undefined, function () {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n//# sourceMappingURL=debounceTime.js.map"]},"metadata":{},"sourceType":"module"}