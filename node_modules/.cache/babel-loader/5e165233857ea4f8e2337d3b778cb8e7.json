{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToU8a, isNumber, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\nexport const CID_AURA = stringToU8a('aura');\nexport const CID_BABE = stringToU8a('BABE');\nexport const CID_GRPA = stringToU8a('FRNK');\nexport const CID_POW = stringToU8a('pow_');\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier identifying the engine\n */\n\nexport class GenericConsensusEngineId extends U8aFixed {\n  constructor(registry, value) {\n    super(registry, isNumber(value) ? bnToU8a(value, {\n      isLe: false\n    }) : value, 32);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getBytesAsAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    } // For pow & Moonbeam, the bytes are the actual author\n\n\n    if (this.isPow || bytes.length === 20) {\n      return this._getBytesAsAuthor(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'ConsensusEngineId';\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return this.isAscii ? u8aToString(this) : u8aToHex(this);\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/generic/ConsensusEngineId.js"],"names":["BN","bnToU8a","isNumber","stringToU8a","u8aToHex","u8aToString","U8aFixed","CID_AURA","CID_BABE","CID_GRPA","CID_POW","GenericConsensusEngineId","constructor","registry","value","isLe","isAura","eq","isBabe","isGrandpa","isPow","_getAuraAuthor","bytes","sessionValidators","createType","toU8a","slotNumber","mod","length","toNumber","_getBabeAuthor","digest","_getBytesAsAuthor","extractAuthor","undefined","toHuman","toString","toRawType","isAscii"],"mappings":"AAAA;AACA;AACA,SAASA,EAAT,EAAaC,OAAb,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,QAA7C,EAAuDC,WAAvD,QAA0E,gBAA1E;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAO,MAAMC,QAAQ,GAAGJ,WAAW,CAAC,MAAD,CAA5B;AACP,OAAO,MAAMK,QAAQ,GAAGL,WAAW,CAAC,MAAD,CAA5B;AACP,OAAO,MAAMM,QAAQ,GAAGN,WAAW,CAAC,MAAD,CAA5B;AACP,OAAO,MAAMO,OAAO,GAAGP,WAAW,CAAC,MAAD,CAA3B;AACP;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMQ,wBAAN,SAAuCL,QAAvC,CAAgD;AACrDM,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3B,UAAMD,QAAN,EAAgBX,QAAQ,CAACY,KAAD,CAAR,GAAkBb,OAAO,CAACa,KAAD,EAAQ;AAC/CC,MAAAA,IAAI,EAAE;AADyC,KAAR,CAAzB,GAEXD,KAFL,EAEY,EAFZ;AAGD;AACD;AACF;AACA;;;AAGY,MAANE,MAAM,GAAG;AACX,WAAO,KAAKC,EAAL,CAAQV,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGY,MAANW,MAAM,GAAG;AACX,WAAO,KAAKD,EAAL,CAAQT,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGe,MAATW,SAAS,GAAG;AACd,WAAO,KAAKF,EAAL,CAAQR,QAAR,CAAP;AACD;AACD;AACF;AACA;;;AAGW,MAALW,KAAK,GAAG;AACV,WAAO,KAAKH,EAAL,CAAQP,OAAR,CAAP;AACD;;AAEDW,EAAAA,cAAc,CAACC,KAAD,EAAQC,iBAAR,EAA2B;AACvC,WAAOA,iBAAiB,CAAC,KAAKV,QAAL,CAAcW,UAAd,CAAyB,kBAAzB,EAA6CF,KAAK,CAACG,KAAN,CAAY,IAAZ,CAA7C,EAAgEC,UAAhE,CAA2EC,GAA3E,CAA+E,IAAI3B,EAAJ,CAAOuB,iBAAiB,CAACK,MAAzB,CAA/E,EAAiHC,QAAjH,EAAD,CAAxB;AACD;;AAEDC,EAAAA,cAAc,CAACR,KAAD,EAAQC,iBAAR,EAA2B;AACvC,UAAMQ,MAAM,GAAG,KAAKlB,QAAL,CAAcW,UAAd,CAAyB,wBAAzB,EAAmDF,KAAK,CAACG,KAAN,CAAY,IAAZ,CAAnD,CAAf;AACA,WAAOF,iBAAiB,CAACQ,MAAM,CAACjB,KAAP,CAAae,QAAb,EAAD,CAAxB;AACD;;AAEDG,EAAAA,iBAAiB,CAACV,KAAD,EAAQ;AACvB,WAAO,KAAKT,QAAL,CAAcW,UAAd,CAAyB,WAAzB,EAAsCF,KAAtC,CAAP;AACD;AACD;AACF;AACA;;;AAGEW,EAAAA,aAAa,CAACX,KAAD,EAAQC,iBAAR,EAA2B;AACtC,QAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,IAA8DA,iBAAiB,CAACK,MAApF,EAA4F;AAC1F,UAAI,KAAKZ,MAAT,EAAiB;AACf,eAAO,KAAKK,cAAL,CAAoBC,KAApB,EAA2BC,iBAA3B,CAAP;AACD,OAFD,MAEO,IAAI,KAAKL,MAAT,EAAiB;AACtB,eAAO,KAAKY,cAAL,CAAoBR,KAApB,EAA2BC,iBAA3B,CAAP;AACD;AACF,KAPqC,CAOpC;;;AAGF,QAAI,KAAKH,KAAL,IAAcE,KAAK,CAACM,MAAN,KAAiB,EAAnC,EAAuC;AACrC,aAAO,KAAKI,iBAAL,CAAuBV,KAAvB,CAAP;AACD;;AAED,WAAOY,SAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,mBAAP;AACD;AACD;AACF;AACA;;;AAGED,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKE,OAAL,GAAejC,WAAW,CAAC,IAAD,CAA1B,GAAmCD,QAAQ,CAAC,IAAD,CAAlD;AACD;;AA/FoD","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToU8a, isNumber, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { U8aFixed } from \"../codec/U8aFixed.js\";\nexport const CID_AURA = stringToU8a('aura');\nexport const CID_BABE = stringToU8a('BABE');\nexport const CID_GRPA = stringToU8a('FRNK');\nexport const CID_POW = stringToU8a('pow_');\n/**\n * @name GenericConsensusEngineId\n * @description\n * A 4-byte identifier identifying the engine\n */\n\nexport class GenericConsensusEngineId extends U8aFixed {\n  constructor(registry, value) {\n    super(registry, isNumber(value) ? bnToU8a(value, {\n      isLe: false\n    }) : value, 32);\n  }\n  /**\n   * @description `true` if the engine matches aura\n   */\n\n\n  get isAura() {\n    return this.eq(CID_AURA);\n  }\n  /**\n   * @description `true` is the engine matches babe\n   */\n\n\n  get isBabe() {\n    return this.eq(CID_BABE);\n  }\n  /**\n   * @description `true` is the engine matches grandpa\n   */\n\n\n  get isGrandpa() {\n    return this.eq(CID_GRPA);\n  }\n  /**\n   * @description `true` is the engine matches pow\n   */\n\n\n  get isPow() {\n    return this.eq(CID_POW);\n  }\n\n  _getAuraAuthor(bytes, sessionValidators) {\n    return sessionValidators[this.registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];\n  }\n\n  _getBabeAuthor(bytes, sessionValidators) {\n    const digest = this.registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));\n    return sessionValidators[digest.value.toNumber()];\n  }\n\n  _getBytesAsAuthor(bytes) {\n    return this.registry.createType('AccountId', bytes);\n  }\n  /**\n   * @description From the input bytes, decode into an author\n   */\n\n\n  extractAuthor(bytes, sessionValidators) {\n    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {\n      if (this.isAura) {\n        return this._getAuraAuthor(bytes, sessionValidators);\n      } else if (this.isBabe) {\n        return this._getBabeAuthor(bytes, sessionValidators);\n      }\n    } // For pow & Moonbeam, the bytes are the actual author\n\n\n    if (this.isPow || bytes.length === 20) {\n      return this._getBytesAsAuthor(bytes);\n    }\n\n    return undefined;\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'ConsensusEngineId';\n  }\n  /**\n   * @description Override the default toString to return a 4-byte string\n   */\n\n\n  toString() {\n    return this.isAscii ? u8aToString(this) : u8aToHex(this);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}