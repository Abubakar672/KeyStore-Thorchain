{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst HEX_REGEX = /^0x[a-fA-F0-9]+$/;\n/**\n * @name isHex\n * @summary Tests for a hex string.\n * @description\n * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isHex } from '@polkadot/util';\n *\n * isHex('0x1234'); // => true\n * isHex('0x1234', 8); // => false\n * ```\n */\n\nexport function isHex(value, bitLength = -1, ignoreLength = false) {\n  return typeof value === 'string' && (value === '0x' || HEX_REGEX.test(value)) ? bitLength === -1 ? value.length % 2 === 0 || ignoreLength : value.length === 2 + Math.ceil(bitLength / 4) : false;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/is/hex.js"],"names":["HEX_REGEX","isHex","value","bitLength","ignoreLength","test","length","Math","ceil"],"mappings":"AAAA;AACA;AACA,MAAMA,SAAS,GAAG,kBAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAT,CAAeC,KAAf,EAAsBC,SAAS,GAAG,CAAC,CAAnC,EAAsCC,YAAY,GAAG,KAArD,EAA4D;AACjE,SAAO,OAAOF,KAAP,KAAiB,QAAjB,KAA8BA,KAAK,KAAK,IAAV,IAAkBF,SAAS,CAACK,IAAV,CAAeH,KAAf,CAAhD,IAAyEC,SAAS,KAAK,CAAC,CAAf,GAAmBD,KAAK,CAACI,MAAN,GAAe,CAAf,KAAqB,CAArB,IAA0BF,YAA7C,GAA4DF,KAAK,CAACI,MAAN,KAAiB,IAAIC,IAAI,CAACC,IAAL,CAAUL,SAAS,GAAG,CAAtB,CAA1J,GAAqL,KAA5L;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst HEX_REGEX = /^0x[a-fA-F0-9]+$/;\n/**\n * @name isHex\n * @summary Tests for a hex string.\n * @description\n * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.\n * @example\n * <BR>\n *\n * ```javascript\n * import { isHex } from '@polkadot/util';\n *\n * isHex('0x1234'); // => true\n * isHex('0x1234', 8); // => false\n * ```\n */\n\nexport function isHex(value, bitLength = -1, ignoreLength = false) {\n  return typeof value === 'string' && (value === '0x' || HEX_REGEX.test(value)) ? bitLength === -1 ? value.length % 2 === 0 || ignoreLength : value.length === 2 + Math.ceil(bitLength / 4) : false;\n}"]},"metadata":{},"sourceType":"module"}