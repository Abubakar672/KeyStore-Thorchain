{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { selectableNetworks } from '@polkadot/networks';\nimport { assert, BN, hexToU8a, stringify } from '@polkadot/util';\nimport kusama from \"./kusama.js\";\nimport polkadot from \"./polkadot.js\";\nimport westend from \"./westend.js\";\nconst allKnown = {\n  kusama,\n  polkadot,\n  westend\n}; // testnets are not available in the networks map\n\nconst NET_EXTRA = {\n  westend: {\n    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']\n  }\n};\n/** @internal */\n\nfunction checkOrder(network, versions) {\n  const ooo = versions.filter((curr, index) => {\n    const prev = versions[index - 1];\n    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];\n  });\n  assert(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${stringify(ooo)}`);\n  return versions;\n}\n/** @internal */\n\n\nfunction mapRaw([network, versions]) {\n  const chain = selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];\n  assert(chain, () => `Unable to find info for chain ${network}`);\n  return {\n    genesisHash: hexToU8a(chain.genesisHash[0]),\n    network,\n    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({\n      blockNumber: new BN(blockNumber),\n      specVersion: new BN(specVersion)\n    }))\n  };\n} // Type overrides for specific spec types & versions as given in runtimeVersion\n\n\nconst upgrades = Object.entries(allKnown).map(mapRaw);\nexport default upgrades;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types-known/upgrades/index.js"],"names":["selectableNetworks","assert","BN","hexToU8a","stringify","kusama","polkadot","westend","allKnown","NET_EXTRA","genesisHash","checkOrder","network","versions","ooo","filter","curr","index","prev","length","mapRaw","chain","find","n","map","blockNumber","specVersion","upgrades","Object","entries"],"mappings":"AAAA;AACA;AACA,SAASA,kBAAT,QAAmC,oBAAnC;AACA,SAASC,MAAT,EAAiBC,EAAjB,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,gBAAhD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,MAAMC,QAAQ,GAAG;AACfH,EAAAA,MADe;AAEfC,EAAAA,QAFe;AAGfC,EAAAA;AAHe,CAAjB,C,CAIG;;AAEH,MAAME,SAAS,GAAG;AAChBF,EAAAA,OAAO,EAAE;AACPG,IAAAA,WAAW,EAAE,CAAC,oEAAD;AADN;AADO,CAAlB;AAKA;;AAEA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,QAA7B,EAAuC;AACrC,QAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,UAAMC,IAAI,GAAGL,QAAQ,CAACI,KAAK,GAAG,CAAT,CAArB;AACA,WAAOA,KAAK,KAAK,CAAV,GAAc,KAAd,GAAsBD,IAAI,CAAC,CAAD,CAAJ,IAAWE,IAAI,CAAC,CAAD,CAAf,IAAsBF,IAAI,CAAC,CAAD,CAAJ,IAAWE,IAAI,CAAC,CAAD,CAAlE;AACD,GAHW,CAAZ;AAIAjB,EAAAA,MAAM,CAAC,CAACa,GAAG,CAACK,MAAN,EAAc,MAAO,GAAEP,OAAQ,kCAAiCR,SAAS,CAACU,GAAD,CAAM,EAA/E,CAAN;AACA,SAAOD,QAAP;AACD;AACD;;;AAGA,SAASO,MAAT,CAAgB,CAACR,OAAD,EAAUC,QAAV,CAAhB,EAAqC;AACnC,QAAMQ,KAAK,GAAGrB,kBAAkB,CAACsB,IAAnB,CAAwBC,CAAC,IAAIA,CAAC,CAACX,OAAF,KAAcA,OAA3C,KAAuDH,SAAS,CAACG,OAAD,CAA9E;AACAX,EAAAA,MAAM,CAACoB,KAAD,EAAQ,MAAO,iCAAgCT,OAAQ,EAAvD,CAAN;AACA,SAAO;AACLF,IAAAA,WAAW,EAAEP,QAAQ,CAACkB,KAAK,CAACX,WAAN,CAAkB,CAAlB,CAAD,CADhB;AAELE,IAAAA,OAFK;AAGLC,IAAAA,QAAQ,EAAEF,UAAU,CAACC,OAAD,EAAUC,QAAV,CAAV,CAA8BW,GAA9B,CAAkC,CAAC,CAACC,WAAD,EAAcC,WAAd,CAAD,MAAiC;AAC3ED,MAAAA,WAAW,EAAE,IAAIvB,EAAJ,CAAOuB,WAAP,CAD8D;AAE3EC,MAAAA,WAAW,EAAE,IAAIxB,EAAJ,CAAOwB,WAAP;AAF8D,KAAjC,CAAlC;AAHL,GAAP;AAQD,C,CAAC;;;AAGF,MAAMC,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAerB,QAAf,EAAyBgB,GAAzB,CAA6BJ,MAA7B,CAAjB;AACA,eAAeO,QAAf","sourcesContent":["// Copyright 2017-2021 @polkadot/types-known authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { selectableNetworks } from '@polkadot/networks';\nimport { assert, BN, hexToU8a, stringify } from '@polkadot/util';\nimport kusama from \"./kusama.js\";\nimport polkadot from \"./polkadot.js\";\nimport westend from \"./westend.js\";\nconst allKnown = {\n  kusama,\n  polkadot,\n  westend\n}; // testnets are not available in the networks map\n\nconst NET_EXTRA = {\n  westend: {\n    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']\n  }\n};\n/** @internal */\n\nfunction checkOrder(network, versions) {\n  const ooo = versions.filter((curr, index) => {\n    const prev = versions[index - 1];\n    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];\n  });\n  assert(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${stringify(ooo)}`);\n  return versions;\n}\n/** @internal */\n\n\nfunction mapRaw([network, versions]) {\n  const chain = selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];\n  assert(chain, () => `Unable to find info for chain ${network}`);\n  return {\n    genesisHash: hexToU8a(chain.genesisHash[0]),\n    network,\n    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({\n      blockNumber: new BN(blockNumber),\n      specVersion: new BN(specVersion)\n    }))\n  };\n} // Type overrides for specific spec types & versions as given in runtimeVersion\n\n\nconst upgrades = Object.entries(allKnown).map(mapRaw);\nexport default upgrades;"]},"metadata":{},"sourceType":"module"}