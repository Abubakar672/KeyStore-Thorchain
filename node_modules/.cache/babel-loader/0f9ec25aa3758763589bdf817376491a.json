{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { ed25519KeypairFromSeed, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclKeypairFromSeed\n * @summary Creates a new public/secret keypair from a seed.\n * @description\n * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclKeypairFromSeed } from '@polkadot/util-crypto';\n *\n * naclKeypairFromSeed(...); // => { secretKey: [...], publicKey: [...] }\n * ```\n */\n\nexport function naclKeypairFromSeed(seed, onlyJs = false) {\n  if (!onlyJs && isReady()) {\n    const full = ed25519KeypairFromSeed(seed);\n    return {\n      publicKey: full.slice(32),\n      secretKey: full.slice(0, 64)\n    };\n  }\n\n  return nacl.sign.keyPair.fromSeed(seed);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/nacl/keypair/fromSeed.js"],"names":["nacl","ed25519KeypairFromSeed","isReady","naclKeypairFromSeed","seed","onlyJs","full","publicKey","slice","secretKey","sign","keyPair","fromSeed"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,sBAAT,EAAiCC,OAAjC,QAAgD,uBAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,IAA7B,EAAmCC,MAAM,GAAG,KAA5C,EAAmD;AACxD,MAAI,CAACA,MAAD,IAAWH,OAAO,EAAtB,EAA0B;AACxB,UAAMI,IAAI,GAAGL,sBAAsB,CAACG,IAAD,CAAnC;AACA,WAAO;AACLG,MAAAA,SAAS,EAAED,IAAI,CAACE,KAAL,CAAW,EAAX,CADN;AAELC,MAAAA,SAAS,EAAEH,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,EAAd;AAFN,KAAP;AAID;;AAED,SAAOR,IAAI,CAACU,IAAL,CAAUC,OAAV,CAAkBC,QAAlB,CAA2BR,IAA3B,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { ed25519KeypairFromSeed, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclKeypairFromSeed\n * @summary Creates a new public/secret keypair from a seed.\n * @description\n * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclKeypairFromSeed } from '@polkadot/util-crypto';\n *\n * naclKeypairFromSeed(...); // => { secretKey: [...], publicKey: [...] }\n * ```\n */\n\nexport function naclKeypairFromSeed(seed, onlyJs = false) {\n  if (!onlyJs && isReady()) {\n    const full = ed25519KeypairFromSeed(seed);\n    return {\n      publicKey: full.slice(32),\n      secretKey: full.slice(0, 64)\n    };\n  }\n\n  return nacl.sign.keyPair.fromSeed(seed);\n}"]},"metadata":{},"sourceType":"module"}