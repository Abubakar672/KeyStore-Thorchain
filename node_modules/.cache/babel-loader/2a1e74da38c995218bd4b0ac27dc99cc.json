{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerPoints(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({\n      era,\n      eraPoints,\n      validators\n    }) => ({\n      era,\n      eraPoints,\n      points: validators[stakerId] || api.registry.createType('RewardPoint')\n    }))));\n  });\n}\nexport function stakerPoints(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerPoints(accountId, eras, withActive))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/stakerPoints.js"],"names":["map","switchMap","memo","_stakerPoints","instanceId","api","accountId","eras","withActive","stakerId","registry","createType","toString","derive","staking","_erasPoints","pipe","points","era","eraPoints","validators","stakerPoints","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,MAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,aAAT,CAAuBC,UAAvB,EAAmCC,GAAnC,EAAwC;AAC7C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYC,IAAZ,EAAkBC,UAAlB,KAAiC;AACvD,UAAMC,QAAQ,GAAGJ,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,SAArC,EAAgDM,QAAhD,EAAjB;AACA,WAAOP,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBC,WAAnB,CAA+BR,IAA/B,EAAqCC,UAArC,EAAiDQ,IAAjD,CAAsDhB,GAAG,CAACiB,MAAM,IAAIA,MAAM,CAACjB,GAAP,CAAW,CAAC;AACrFkB,MAAAA,GADqF;AAErFC,MAAAA,SAFqF;AAGrFC,MAAAA;AAHqF,KAAD,MAI/E;AACLF,MAAAA,GADK;AAELC,MAAAA,SAFK;AAGLF,MAAAA,MAAM,EAAEG,UAAU,CAACX,QAAD,CAAV,IAAwBJ,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,aAAxB;AAH3B,KAJ+E,CAAX,CAAX,CAAzD,CAAP;AASD,GAXU,CAAX;AAYD;AACD,OAAO,SAASU,YAAT,CAAsBjB,UAAtB,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYE,UAAU,GAAG,KAAzB,KAAmCH,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBQ,YAAnB,CAAgCd,UAAhC,EAA4CQ,IAA5C,CAAiDf,SAAS,CAACM,IAAI,IAAIF,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBX,aAAnB,CAAiCG,SAAjC,EAA4CC,IAA5C,EAAkDC,UAAlD,CAAT,CAA1D,CAAhD,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerPoints(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({\n      era,\n      eraPoints,\n      validators\n    }) => ({\n      era,\n      eraPoints,\n      points: validators[stakerId] || api.registry.createType('RewardPoint')\n    }))));\n  });\n}\nexport function stakerPoints(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerPoints(accountId, eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}