{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\n\nfunction parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),\n    exposure,\n    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId,\n    validatorPrefs\n  };\n}\n\nfunction getLedgers(api, optIds, {\n  withLedger = false\n}) {\n  const ids = optIds.filter(opt => withLedger && !!opt && opt.isSome).map(opt => opt.unwrap());\n  const emptyLed = api.registry.createType('Option<StakingLedger>');\n  return (ids.length ? api.query.staking.ledger.multi(ids) : of([])).pipe(map(optLedgers => {\n    let offset = -1;\n    return optIds.map(opt => opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed);\n  }));\n}\n\nfunction getStashInfo(api, stashIds, activeEra, {\n  withController,\n  withDestination,\n  withExposure,\n  withLedger,\n  withNominations,\n  withPrefs\n}) {\n  const emptyNoms = api.registry.createType('Option<Nominations>');\n  const emptyRewa = api.registry.createType('RewardDestination');\n  const emptyExpo = api.registry.createType('Exposure');\n  const emptyPrefs = api.registry.createType('ValidatorPrefs');\n  return combineLatest([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : of(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : of(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : of(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : of(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : of(stashIds.map(() => emptyExpo))]);\n}\n\nfunction getBatch(api, activeEra, stashIds, flags) {\n  return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));\n} //\n\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\n\n\nexport function query(instanceId, api) {\n  return memo(instanceId, (accountId, flags) => api.derive.staking.queryMulti([accountId], flags).pipe(map(([first]) => first)));\n}\nexport function queryMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({\n    activeEra\n  }) => {\n    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));\n    return getBatch(api, activeEra, stashIds, flags);\n  })) : of([]));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/query.js"],"names":["combineLatest","map","of","switchMap","memo","parseDetails","stashId","controllerIdOpt","nominatorsOpt","rewardDestination","validatorPrefs","exposure","stakingLedgerOpt","accountId","controllerId","unwrapOr","nominators","isSome","unwrap","targets","stakingLedger","unwrapOrDefault","getLedgers","api","optIds","withLedger","ids","filter","opt","emptyLed","registry","createType","length","query","staking","ledger","multi","pipe","optLedgers","offset","getStashInfo","stashIds","activeEra","withController","withDestination","withExposure","withNominations","withPrefs","emptyNoms","emptyRewa","emptyExpo","emptyPrefs","bonded","payee","validators","erasStakers","getBatch","flags","stakingLedgerOpts","index","instanceId","derive","queryMulti","first","accountIds","session","indexes"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\n\nfunction parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {\n  return {\n    accountId: stashId,\n    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),\n    exposure,\n    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],\n    rewardDestination,\n    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),\n    stashId,\n    validatorPrefs\n  };\n}\n\nfunction getLedgers(api, optIds, {\n  withLedger = false\n}) {\n  const ids = optIds.filter(opt => withLedger && !!opt && opt.isSome).map(opt => opt.unwrap());\n  const emptyLed = api.registry.createType('Option<StakingLedger>');\n  return (ids.length ? api.query.staking.ledger.multi(ids) : of([])).pipe(map(optLedgers => {\n    let offset = -1;\n    return optIds.map(opt => opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed);\n  }));\n}\n\nfunction getStashInfo(api, stashIds, activeEra, {\n  withController,\n  withDestination,\n  withExposure,\n  withLedger,\n  withNominations,\n  withPrefs\n}) {\n  const emptyNoms = api.registry.createType('Option<Nominations>');\n  const emptyRewa = api.registry.createType('RewardDestination');\n  const emptyExpo = api.registry.createType('Exposure');\n  const emptyPrefs = api.registry.createType('ValidatorPrefs');\n  return combineLatest([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : of(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : of(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : of(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : of(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : of(stashIds.map(() => emptyExpo))]);\n}\n\nfunction getBatch(api, activeEra, stashIds, flags) {\n  return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));\n} //\n\n/**\n * @description From a stash, retrieve the controllerId and all relevant details\n */\n\n\nexport function query(instanceId, api) {\n  return memo(instanceId, (accountId, flags) => api.derive.staking.queryMulti([accountId], flags).pipe(map(([first]) => first)));\n}\nexport function queryMulti(instanceId, api) {\n  return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({\n    activeEra\n  }) => {\n    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));\n    return getBatch(api, activeEra, stashIds, flags);\n  })) : of([]));\n}"]},"metadata":{},"sourceType":"module"}