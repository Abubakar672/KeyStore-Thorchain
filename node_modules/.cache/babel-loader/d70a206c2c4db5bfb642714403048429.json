{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPrivateKeyFromMnemonic = exports.validateMnemonic = exports.generateMnemonic = exports.getPrivateKeyFromKeyStore = exports.generateKeyStore = exports.verifySignature = exports.generateSignature = exports.getAddressFromPrivateKey = exports.getAddressFromPublicKey = exports.generatePubKey = exports.getPublicKeyFromPrivateKey = exports.getPublicKey = exports.generateRandomArray = exports.generatePrivateKey = exports.encodeAddress = exports.checkAddress = exports.decodeAddress = void 0;\n\nvar _bech = _interopRequireDefault(require(\"bech32\"));\n\nvar bip32 = _interopRequireWildcard(require(\"bip32\"));\n\nvar bip39 = _interopRequireWildcard(require(\"bip39\"));\n\nvar _cryptoBrowserify = _interopRequireDefault(require(\"crypto-browserify\"));\n\nvar _elliptic = require(\"elliptic\");\n\nvar _is_js = _interopRequireDefault(require(\"is_js\"));\n\nvar _secureRandom = _interopRequireDefault(require(\"secure-random\"));\n\nvar _tinySecp256k = _interopRequireDefault(require(\"tiny-secp256k1\"));\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nvar _utils = require(\"../utils\"); // secp256k1 privkey is 32 bytes\n\n\nvar PRIVKEY_LEN = 32;\nvar MNEMONIC_LEN = 256;\nvar DECODED_ADDRESS_LEN = 20;\nvar CURVE = \"secp256k1\"; //hdpath\n\nvar HDPATH = \"44'/714'/0'/0/\";\nvar ec = new _elliptic.ec(CURVE);\n/**\n * Decodes an address in bech32 format.\n * @category crypto\n * @param {string} value the bech32 address to decode\n */\n\nvar decodeAddress = function decodeAddress(value) {\n  var decodeAddress = _bech[\"default\"].decode(value);\n\n  return Buffer.from(_bech[\"default\"].fromWords(decodeAddress.words));\n};\n/**\n * Checks whether an address is valid.\n * @category crypto\n * @param {string} address the bech32 address to decode\n * @param {string} hrp the prefix to check for the bech32 address\n * @return {boolean}\n */\n\n\nexports.decodeAddress = decodeAddress;\n\nvar checkAddress = function checkAddress(address, hrp) {\n  try {\n    if (!address.startsWith(hrp)) {\n      return false;\n    }\n\n    var decodedAddress = _bech[\"default\"].decode(address);\n\n    var decodedAddressLength = decodeAddress(address).length;\n\n    if (decodedAddressLength === DECODED_ADDRESS_LEN && decodedAddress.prefix === hrp) {\n      return true;\n    }\n\n    return false;\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * Encodes an address from input data bytes.\n * @category crypto\n * @param {string} value the public key to encode\n * @param {*} prefix the address prefix\n * @param {*} type the output type (default: hex)\n */\n\n\nexports.checkAddress = checkAddress;\n\nvar encodeAddress = function encodeAddress(value) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"tbnb\";\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hex\";\n  var words;\n\n  if (Buffer.isBuffer(value)) {\n    words = _bech[\"default\"].toWords(Buffer.from(value));\n  } else {\n    words = _bech[\"default\"].toWords(Buffer.from(value, type));\n  }\n\n  return _bech[\"default\"].encode(prefix, words);\n};\n/**\n * Generates 32 bytes of random entropy\n * @category crypto\n * @param {number} len output length (default: 32 bytes)\n * @returns {string} entropy bytes hexstring\n */\n\n\nexports.encodeAddress = encodeAddress;\n\nvar generatePrivateKey = function generatePrivateKey() {\n  var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRIVKEY_LEN;\n  return (0, _utils.ab2hexstring)((0, _secureRandom[\"default\"])(len));\n};\n/**\n * Generates an arrayBuffer filled with random bits.\n * @category crypto\n * @param {number} length - Length of buffer.\n * @returns {ArrayBuffer}\n */\n\n\nexports.generatePrivateKey = generatePrivateKey;\n\nvar generateRandomArray = function generateRandomArray(length) {\n  return (0, _secureRandom[\"default\"])(length);\n};\n/**\n * @category crypto\n * @param {string} publicKey - Encoded public key\n * @return {Elliptic.PublicKey} public key hexstring\n */\n\n\nexports.generateRandomArray = generateRandomArray;\n\nvar getPublicKey = function getPublicKey(publicKey) {\n  var keyPair = ec.keyFromPublic(publicKey, \"hex\");\n  return keyPair.getPublic();\n};\n/**\n * Calculates the public key from a given private key.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring\n * @return {string} public key hexstring\n */\n\n\nexports.getPublicKey = getPublicKey;\n\nvar getPublicKeyFromPrivateKey = function getPublicKeyFromPrivateKey(privateKeyHex) {\n  if (!privateKeyHex || privateKeyHex.length !== PRIVKEY_LEN * 2) {\n    throw new Error(\"invalid privateKey\");\n  }\n\n  var curve = new _elliptic.ec(CURVE);\n  var keypair = curve.keyFromPrivate(privateKeyHex, \"hex\");\n  var unencodedPubKey = keypair.getPublic().encode(\"hex\", false);\n  return unencodedPubKey;\n};\n/**\n * PubKey performs the point-scalar multiplication from the privKey on the\n * generator point to get the pubkey.\n * @category crypto\n * @param {Buffer} privateKey\n * @return {Elliptic.PublicKey} PubKey\n * */\n\n\nexports.getPublicKeyFromPrivateKey = getPublicKeyFromPrivateKey;\n\nvar generatePubKey = function generatePubKey(privateKey) {\n  var curve = new _elliptic.ec(CURVE);\n  var keypair = curve.keyFromPrivate(privateKey);\n  return keypair.getPublic();\n};\n/**\n * Gets an address from a public key hex.\n * @category crypto\n * @param {string} publicKeyHex the public key hexstring\n * @param {string} prefix the address prefix\n */\n\n\nexports.generatePubKey = generatePubKey;\n\nvar getAddressFromPublicKey = function getAddressFromPublicKey(publicKeyHex, prefix) {\n  var pubKey = ec.keyFromPublic(publicKeyHex, \"hex\");\n  var pubPoint = pubKey.getPublic();\n  var compressed = pubPoint.encodeCompressed();\n  var hexed = (0, _utils.ab2hexstring)(compressed);\n  var hash = (0, _utils.sha256ripemd160)(hexed); // https://git.io/fAn8N\n\n  var address = encodeAddress(hash, prefix);\n  return address;\n};\n/**\n * Gets an address from a private key.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring\n * @param {string} prefix the address prefix\n */\n\n\nexports.getAddressFromPublicKey = getAddressFromPublicKey;\n\nvar getAddressFromPrivateKey = function getAddressFromPrivateKey(privateKeyHex, prefix) {\n  return getAddressFromPublicKey(getPublicKeyFromPrivateKey(privateKeyHex), prefix);\n};\n/**\n * Generates a signature (64 byte <r,s>) for a transaction based on given private key.\n * @category crypto\n * @param {string} signBytesHex - Unsigned transaction sign bytes hexstring.\n * @param {string | Buffer} privateKey - The private key.\n * @return {Buffer} Signature. Does not include tx.\n */\n\n\nexports.getAddressFromPrivateKey = getAddressFromPrivateKey;\n\nvar generateSignature = function generateSignature(signBytesHex, privateKey) {\n  var msgHash = (0, _utils.sha256)(signBytesHex);\n  var msgHashHex = Buffer.from(msgHash, \"hex\");\n\n  var signature = _tinySecp256k[\"default\"].sign(msgHashHex, typeof privateKey === \"string\" ? Buffer.from(privateKey, \"hex\") : privateKey);\n\n  return signature;\n};\n/**\n * Verifies a signature (64 byte <r,s>) given the sign bytes and public key.\n * @category crypto\n * @param {string} sigHex - The signature hexstring.\n * @param {string} signBytesHex - Unsigned transaction sign bytes hexstring.\n * @param {string} publicKeyHex - The public key.\n * @return {boolean}\n */\n\n\nexports.generateSignature = generateSignature;\n\nvar verifySignature = function verifySignature(sigHex, signBytesHex, publicKeyHex) {\n  var publicKey = Buffer.from(publicKeyHex, \"hex\");\n  if (!_tinySecp256k[\"default\"].isPoint(publicKey)) throw new Error(\"Invalid public key provided\");\n  var msgHash = (0, _utils.sha256)(signBytesHex);\n  var msgHashHex = Buffer.from(msgHash, \"hex\");\n  return _tinySecp256k[\"default\"].verify(msgHashHex, publicKey, Buffer.from(sigHex, \"hex\"));\n};\n/**\n * Generates a keystore object (web3 secret storage format) given a private key to store and a password.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring.\n * @param {string} password the password.\n * @return {object} the keystore object.\n */\n\n\nexports.verifySignature = verifySignature;\n\nvar generateKeyStore = function generateKeyStore(privateKeyHex, password) {\n  var salt = _cryptoBrowserify[\"default\"].randomBytes(32);\n\n  var iv = _cryptoBrowserify[\"default\"].randomBytes(16);\n\n  var cipherAlg = \"aes-256-ctr\";\n  var kdf = \"pbkdf2\";\n  var kdfparams = {\n    dklen: 32,\n    salt: salt.toString(\"hex\"),\n    c: 262144,\n    prf: \"hmac-sha256\"\n  };\n\n  var derivedKey = _cryptoBrowserify[\"default\"].pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, \"sha256\");\n\n  var cipher = _cryptoBrowserify[\"default\"].createCipheriv(cipherAlg, derivedKey.slice(0, 32), iv);\n\n  if (!cipher) {\n    throw new Error(\"Unsupported cipher\");\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(Buffer.from(privateKeyHex, \"hex\")), cipher[\"final\"]()]);\n  var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]);\n  return {\n    version: 1,\n    id: _uuid[\"default\"].v4({\n      random: _cryptoBrowserify[\"default\"].randomBytes(16)\n    }),\n    crypto: {\n      ciphertext: ciphertext.toString(\"hex\"),\n      cipherparams: {\n        iv: iv.toString(\"hex\")\n      },\n      cipher: cipherAlg,\n      kdf: kdf,\n      kdfparams: kdfparams,\n      // mac must use sha3 according to web3 secret storage spec\n      mac: (0, _utils.sha3)(bufferValue.toString(\"hex\"))\n    }\n  };\n};\n/**\n * Gets a private key from a keystore given its password.\n * @category crypto\n * @param {string} keystore the keystore in json format\n * @param {string} password the password.\n */\n\n\nexports.generateKeyStore = generateKeyStore;\n\nvar getPrivateKeyFromKeyStore = function getPrivateKeyFromKeyStore(keystore, password) {\n  if (!_is_js[\"default\"].string(password)) {\n    throw new Error(\"No password given.\");\n  }\n\n  var json = _is_js[\"default\"].object(keystore) ? keystore : JSON.parse(keystore);\n  var kdfparams = json.crypto.kdfparams;\n\n  if (kdfparams.prf !== \"hmac-sha256\") {\n    throw new Error(\"Unsupported parameters to PBKDF2\");\n  }\n\n  var derivedKey = _cryptoBrowserify[\"default\"].pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.c, kdfparams.dklen, \"sha256\");\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, \"hex\");\n  var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]); // try sha3 (new / ethereum keystore) mac first\n\n  var mac = (0, _utils.sha3)(bufferValue.toString(\"hex\"));\n\n  if (mac !== json.crypto.mac) {\n    // the legacy (sha256) mac is next to be checked. pre-testnet keystores used a sha256 digest for the mac.\n    // the sha256 mac was not compatible with ethereum keystores, so it was changed to sha3 for mainnet.\n    var macLegacy = (0, _utils.sha256)(bufferValue.toString(\"hex\"));\n\n    if (macLegacy !== json.crypto.mac) {\n      throw new Error(\"Keystore mac check failed (sha3 & sha256) - wrong password?\");\n    }\n  }\n\n  var decipher = _cryptoBrowserify[\"default\"].createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 32), Buffer.from(json.crypto.cipherparams.iv, \"hex\"));\n\n  var privateKey = Buffer.concat([decipher.update(ciphertext), decipher[\"final\"]()]).toString(\"hex\");\n  return privateKey;\n};\n/**\n * Generates mnemonic phrase words using random entropy.\n * @category crypto\n */\n\n\nexports.getPrivateKeyFromKeyStore = getPrivateKeyFromKeyStore;\n\nvar generateMnemonic = function generateMnemonic() {\n  return bip39.generateMnemonic(MNEMONIC_LEN);\n};\n/**\n * Validates mnemonic phrase words.\n * @ignore\n * @param {string} mnemonic the mnemonic phrase words\n * @return {bool} validation result\n */\n\n\nexports.generateMnemonic = generateMnemonic;\nvar validateMnemonic = bip39.validateMnemonic;\n/**\n * Get a private key from mnemonic words.\n * @category crypto\n * @param {string} mnemonic the mnemonic phrase words\n * @param {Boolean} derive derive a private key using the default HD path (default: true)\n * @param {number} index the bip44 address index (default: 0)\n * @param {string} password according to bip39\n * @return {string} hexstring\n */\n\nexports.validateMnemonic = validateMnemonic;\n\nvar getPrivateKeyFromMnemonic = function getPrivateKeyFromMnemonic(mnemonic) {\n  var derive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var password = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n\n  if (!bip39.validateMnemonic(mnemonic, bip39.wordlists.english) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_simplified) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_traditional) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.korean) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.french) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.italian) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.spanish) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.japanese)) {\n    throw new Error(\"wrong mnemonic format\");\n  }\n\n  var seed = bip39.mnemonicToSeedSync(mnemonic, password);\n\n  if (derive) {\n    var master = bip32.fromSeed(seed);\n    var child = master.derivePath(HDPATH + index);\n\n    if (!child.privateKey) {\n      throw new Error(\"child does not have a privateKey\");\n    }\n\n    return child.privateKey.toString(\"hex\");\n  }\n\n  return seed.toString(\"hex\");\n};\n\nexports.getPrivateKeyFromMnemonic = getPrivateKeyFromMnemonic;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@binance-chain/javascript-sdk/lib/crypto/index.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","getPrivateKeyFromMnemonic","validateMnemonic","generateMnemonic","getPrivateKeyFromKeyStore","generateKeyStore","verifySignature","generateSignature","getAddressFromPrivateKey","getAddressFromPublicKey","generatePubKey","getPublicKeyFromPrivateKey","getPublicKey","generateRandomArray","generatePrivateKey","encodeAddress","checkAddress","decodeAddress","_bech","bip32","bip39","_cryptoBrowserify","_elliptic","_is_js","_secureRandom","_tinySecp256k","_uuid","_utils","PRIVKEY_LEN","MNEMONIC_LEN","DECODED_ADDRESS_LEN","CURVE","HDPATH","ec","decode","Buffer","from","fromWords","words","address","hrp","startsWith","decodedAddress","decodedAddressLength","length","prefix","err","arguments","undefined","type","isBuffer","toWords","encode","len","ab2hexstring","publicKey","keyPair","keyFromPublic","getPublic","privateKeyHex","Error","curve","keypair","keyFromPrivate","unencodedPubKey","privateKey","publicKeyHex","pubKey","pubPoint","compressed","encodeCompressed","hexed","hash","sha256ripemd160","signBytesHex","msgHash","sha256","msgHashHex","signature","sign","sigHex","isPoint","verify","password","salt","randomBytes","iv","cipherAlg","kdf","kdfparams","dklen","toString","c","prf","derivedKey","pbkdf2Sync","cipher","createCipheriv","slice","ciphertext","concat","update","bufferValue","version","id","v4","random","crypto","cipherparams","mac","sha3","keystore","string","json","object","JSON","parse","macLegacy","decipher","createDecipheriv","mnemonic","derive","index","wordlists","english","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","seed","mnemonicToSeedSync","master","fromSeed","child","derivePath"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPrivateKeyFromMnemonic = exports.validateMnemonic = exports.generateMnemonic = exports.getPrivateKeyFromKeyStore = exports.generateKeyStore = exports.verifySignature = exports.generateSignature = exports.getAddressFromPrivateKey = exports.getAddressFromPublicKey = exports.generatePubKey = exports.getPublicKeyFromPrivateKey = exports.getPublicKey = exports.generateRandomArray = exports.generatePrivateKey = exports.encodeAddress = exports.checkAddress = exports.decodeAddress = void 0;\n\nvar _bech = _interopRequireDefault(require(\"bech32\"));\n\nvar bip32 = _interopRequireWildcard(require(\"bip32\"));\n\nvar bip39 = _interopRequireWildcard(require(\"bip39\"));\n\nvar _cryptoBrowserify = _interopRequireDefault(require(\"crypto-browserify\"));\n\nvar _elliptic = require(\"elliptic\");\n\nvar _is_js = _interopRequireDefault(require(\"is_js\"));\n\nvar _secureRandom = _interopRequireDefault(require(\"secure-random\"));\n\nvar _tinySecp256k = _interopRequireDefault(require(\"tiny-secp256k1\"));\n\nvar _uuid = _interopRequireDefault(require(\"uuid\"));\n\nvar _utils = require(\"../utils\");\n\n// secp256k1 privkey is 32 bytes\nvar PRIVKEY_LEN = 32;\nvar MNEMONIC_LEN = 256;\nvar DECODED_ADDRESS_LEN = 20;\nvar CURVE = \"secp256k1\"; //hdpath\n\nvar HDPATH = \"44'/714'/0'/0/\";\nvar ec = new _elliptic.ec(CURVE);\n/**\n * Decodes an address in bech32 format.\n * @category crypto\n * @param {string} value the bech32 address to decode\n */\n\nvar decodeAddress = function decodeAddress(value) {\n  var decodeAddress = _bech[\"default\"].decode(value);\n\n  return Buffer.from(_bech[\"default\"].fromWords(decodeAddress.words));\n};\n/**\n * Checks whether an address is valid.\n * @category crypto\n * @param {string} address the bech32 address to decode\n * @param {string} hrp the prefix to check for the bech32 address\n * @return {boolean}\n */\n\n\nexports.decodeAddress = decodeAddress;\n\nvar checkAddress = function checkAddress(address, hrp) {\n  try {\n    if (!address.startsWith(hrp)) {\n      return false;\n    }\n\n    var decodedAddress = _bech[\"default\"].decode(address);\n\n    var decodedAddressLength = decodeAddress(address).length;\n\n    if (decodedAddressLength === DECODED_ADDRESS_LEN && decodedAddress.prefix === hrp) {\n      return true;\n    }\n\n    return false;\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * Encodes an address from input data bytes.\n * @category crypto\n * @param {string} value the public key to encode\n * @param {*} prefix the address prefix\n * @param {*} type the output type (default: hex)\n */\n\n\nexports.checkAddress = checkAddress;\n\nvar encodeAddress = function encodeAddress(value) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"tbnb\";\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hex\";\n  var words;\n\n  if (Buffer.isBuffer(value)) {\n    words = _bech[\"default\"].toWords(Buffer.from(value));\n  } else {\n    words = _bech[\"default\"].toWords(Buffer.from(value, type));\n  }\n\n  return _bech[\"default\"].encode(prefix, words);\n};\n/**\n * Generates 32 bytes of random entropy\n * @category crypto\n * @param {number} len output length (default: 32 bytes)\n * @returns {string} entropy bytes hexstring\n */\n\n\nexports.encodeAddress = encodeAddress;\n\nvar generatePrivateKey = function generatePrivateKey() {\n  var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PRIVKEY_LEN;\n  return (0, _utils.ab2hexstring)((0, _secureRandom[\"default\"])(len));\n};\n/**\n * Generates an arrayBuffer filled with random bits.\n * @category crypto\n * @param {number} length - Length of buffer.\n * @returns {ArrayBuffer}\n */\n\n\nexports.generatePrivateKey = generatePrivateKey;\n\nvar generateRandomArray = function generateRandomArray(length) {\n  return (0, _secureRandom[\"default\"])(length);\n};\n/**\n * @category crypto\n * @param {string} publicKey - Encoded public key\n * @return {Elliptic.PublicKey} public key hexstring\n */\n\n\nexports.generateRandomArray = generateRandomArray;\n\nvar getPublicKey = function getPublicKey(publicKey) {\n  var keyPair = ec.keyFromPublic(publicKey, \"hex\");\n  return keyPair.getPublic();\n};\n/**\n * Calculates the public key from a given private key.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring\n * @return {string} public key hexstring\n */\n\n\nexports.getPublicKey = getPublicKey;\n\nvar getPublicKeyFromPrivateKey = function getPublicKeyFromPrivateKey(privateKeyHex) {\n  if (!privateKeyHex || privateKeyHex.length !== PRIVKEY_LEN * 2) {\n    throw new Error(\"invalid privateKey\");\n  }\n\n  var curve = new _elliptic.ec(CURVE);\n  var keypair = curve.keyFromPrivate(privateKeyHex, \"hex\");\n  var unencodedPubKey = keypair.getPublic().encode(\"hex\", false);\n  return unencodedPubKey;\n};\n/**\n * PubKey performs the point-scalar multiplication from the privKey on the\n * generator point to get the pubkey.\n * @category crypto\n * @param {Buffer} privateKey\n * @return {Elliptic.PublicKey} PubKey\n * */\n\n\nexports.getPublicKeyFromPrivateKey = getPublicKeyFromPrivateKey;\n\nvar generatePubKey = function generatePubKey(privateKey) {\n  var curve = new _elliptic.ec(CURVE);\n  var keypair = curve.keyFromPrivate(privateKey);\n  return keypair.getPublic();\n};\n/**\n * Gets an address from a public key hex.\n * @category crypto\n * @param {string} publicKeyHex the public key hexstring\n * @param {string} prefix the address prefix\n */\n\n\nexports.generatePubKey = generatePubKey;\n\nvar getAddressFromPublicKey = function getAddressFromPublicKey(publicKeyHex, prefix) {\n  var pubKey = ec.keyFromPublic(publicKeyHex, \"hex\");\n  var pubPoint = pubKey.getPublic();\n  var compressed = pubPoint.encodeCompressed();\n  var hexed = (0, _utils.ab2hexstring)(compressed);\n  var hash = (0, _utils.sha256ripemd160)(hexed); // https://git.io/fAn8N\n\n  var address = encodeAddress(hash, prefix);\n  return address;\n};\n/**\n * Gets an address from a private key.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring\n * @param {string} prefix the address prefix\n */\n\n\nexports.getAddressFromPublicKey = getAddressFromPublicKey;\n\nvar getAddressFromPrivateKey = function getAddressFromPrivateKey(privateKeyHex, prefix) {\n  return getAddressFromPublicKey(getPublicKeyFromPrivateKey(privateKeyHex), prefix);\n};\n/**\n * Generates a signature (64 byte <r,s>) for a transaction based on given private key.\n * @category crypto\n * @param {string} signBytesHex - Unsigned transaction sign bytes hexstring.\n * @param {string | Buffer} privateKey - The private key.\n * @return {Buffer} Signature. Does not include tx.\n */\n\n\nexports.getAddressFromPrivateKey = getAddressFromPrivateKey;\n\nvar generateSignature = function generateSignature(signBytesHex, privateKey) {\n  var msgHash = (0, _utils.sha256)(signBytesHex);\n  var msgHashHex = Buffer.from(msgHash, \"hex\");\n\n  var signature = _tinySecp256k[\"default\"].sign(msgHashHex, typeof privateKey === \"string\" ? Buffer.from(privateKey, \"hex\") : privateKey);\n\n  return signature;\n};\n/**\n * Verifies a signature (64 byte <r,s>) given the sign bytes and public key.\n * @category crypto\n * @param {string} sigHex - The signature hexstring.\n * @param {string} signBytesHex - Unsigned transaction sign bytes hexstring.\n * @param {string} publicKeyHex - The public key.\n * @return {boolean}\n */\n\n\nexports.generateSignature = generateSignature;\n\nvar verifySignature = function verifySignature(sigHex, signBytesHex, publicKeyHex) {\n  var publicKey = Buffer.from(publicKeyHex, \"hex\");\n  if (!_tinySecp256k[\"default\"].isPoint(publicKey)) throw new Error(\"Invalid public key provided\");\n  var msgHash = (0, _utils.sha256)(signBytesHex);\n  var msgHashHex = Buffer.from(msgHash, \"hex\");\n  return _tinySecp256k[\"default\"].verify(msgHashHex, publicKey, Buffer.from(sigHex, \"hex\"));\n};\n/**\n * Generates a keystore object (web3 secret storage format) given a private key to store and a password.\n * @category crypto\n * @param {string} privateKeyHex the private key hexstring.\n * @param {string} password the password.\n * @return {object} the keystore object.\n */\n\n\nexports.verifySignature = verifySignature;\n\nvar generateKeyStore = function generateKeyStore(privateKeyHex, password) {\n  var salt = _cryptoBrowserify[\"default\"].randomBytes(32);\n\n  var iv = _cryptoBrowserify[\"default\"].randomBytes(16);\n\n  var cipherAlg = \"aes-256-ctr\";\n  var kdf = \"pbkdf2\";\n  var kdfparams = {\n    dklen: 32,\n    salt: salt.toString(\"hex\"),\n    c: 262144,\n    prf: \"hmac-sha256\"\n  };\n\n  var derivedKey = _cryptoBrowserify[\"default\"].pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, \"sha256\");\n\n  var cipher = _cryptoBrowserify[\"default\"].createCipheriv(cipherAlg, derivedKey.slice(0, 32), iv);\n\n  if (!cipher) {\n    throw new Error(\"Unsupported cipher\");\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(Buffer.from(privateKeyHex, \"hex\")), cipher[\"final\"]()]);\n  var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]);\n  return {\n    version: 1,\n    id: _uuid[\"default\"].v4({\n      random: _cryptoBrowserify[\"default\"].randomBytes(16)\n    }),\n    crypto: {\n      ciphertext: ciphertext.toString(\"hex\"),\n      cipherparams: {\n        iv: iv.toString(\"hex\")\n      },\n      cipher: cipherAlg,\n      kdf: kdf,\n      kdfparams: kdfparams,\n      // mac must use sha3 according to web3 secret storage spec\n      mac: (0, _utils.sha3)(bufferValue.toString(\"hex\"))\n    }\n  };\n};\n/**\n * Gets a private key from a keystore given its password.\n * @category crypto\n * @param {string} keystore the keystore in json format\n * @param {string} password the password.\n */\n\n\nexports.generateKeyStore = generateKeyStore;\n\nvar getPrivateKeyFromKeyStore = function getPrivateKeyFromKeyStore(keystore, password) {\n  if (!_is_js[\"default\"].string(password)) {\n    throw new Error(\"No password given.\");\n  }\n\n  var json = _is_js[\"default\"].object(keystore) ? keystore : JSON.parse(keystore);\n  var kdfparams = json.crypto.kdfparams;\n\n  if (kdfparams.prf !== \"hmac-sha256\") {\n    throw new Error(\"Unsupported parameters to PBKDF2\");\n  }\n\n  var derivedKey = _cryptoBrowserify[\"default\"].pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, \"hex\"), kdfparams.c, kdfparams.dklen, \"sha256\");\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, \"hex\");\n  var bufferValue = Buffer.concat([derivedKey.slice(16, 32), ciphertext]); // try sha3 (new / ethereum keystore) mac first\n\n  var mac = (0, _utils.sha3)(bufferValue.toString(\"hex\"));\n\n  if (mac !== json.crypto.mac) {\n    // the legacy (sha256) mac is next to be checked. pre-testnet keystores used a sha256 digest for the mac.\n    // the sha256 mac was not compatible with ethereum keystores, so it was changed to sha3 for mainnet.\n    var macLegacy = (0, _utils.sha256)(bufferValue.toString(\"hex\"));\n\n    if (macLegacy !== json.crypto.mac) {\n      throw new Error(\"Keystore mac check failed (sha3 & sha256) - wrong password?\");\n    }\n  }\n\n  var decipher = _cryptoBrowserify[\"default\"].createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 32), Buffer.from(json.crypto.cipherparams.iv, \"hex\"));\n\n  var privateKey = Buffer.concat([decipher.update(ciphertext), decipher[\"final\"]()]).toString(\"hex\");\n  return privateKey;\n};\n/**\n * Generates mnemonic phrase words using random entropy.\n * @category crypto\n */\n\n\nexports.getPrivateKeyFromKeyStore = getPrivateKeyFromKeyStore;\n\nvar generateMnemonic = function generateMnemonic() {\n  return bip39.generateMnemonic(MNEMONIC_LEN);\n};\n/**\n * Validates mnemonic phrase words.\n * @ignore\n * @param {string} mnemonic the mnemonic phrase words\n * @return {bool} validation result\n */\n\n\nexports.generateMnemonic = generateMnemonic;\nvar validateMnemonic = bip39.validateMnemonic;\n/**\n * Get a private key from mnemonic words.\n * @category crypto\n * @param {string} mnemonic the mnemonic phrase words\n * @param {Boolean} derive derive a private key using the default HD path (default: true)\n * @param {number} index the bip44 address index (default: 0)\n * @param {string} password according to bip39\n * @return {string} hexstring\n */\n\nexports.validateMnemonic = validateMnemonic;\n\nvar getPrivateKeyFromMnemonic = function getPrivateKeyFromMnemonic(mnemonic) {\n  var derive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var password = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n\n  if (!bip39.validateMnemonic(mnemonic, bip39.wordlists.english) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_simplified) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.chinese_traditional) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.korean) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.french) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.italian) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.spanish) && !bip39.validateMnemonic(mnemonic, bip39.wordlists.japanese)) {\n    throw new Error(\"wrong mnemonic format\");\n  }\n\n  var seed = bip39.mnemonicToSeedSync(mnemonic, password);\n\n  if (derive) {\n    var master = bip32.fromSeed(seed);\n    var child = master.derivePath(HDPATH + index);\n\n    if (!child.privateKey) {\n      throw new Error(\"child does not have a privateKey\");\n    }\n\n    return child.privateKey.toString(\"hex\");\n  }\n\n  return seed.toString(\"hex\");\n};\n\nexports.getPrivateKeyFromMnemonic = getPrivateKeyFromMnemonic;"]},"metadata":{},"sourceType":"script"}