{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { ed25519Sign, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclSign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclSign } from '@polkadot/util-crypto';\n *\n * naclSign([...], [...]); // => [...]\n * ```\n */\n\nexport function naclSign(message, {\n  publicKey,\n  secretKey\n}, onlyJs = false) {\n  assert(secretKey, 'Expected a valid secretKey');\n  const messageU8a = u8aToU8a(message);\n  return isReady() && !onlyJs ? ed25519Sign(publicKey, secretKey.subarray(0, 32), messageU8a) : nacl.sign.detached(messageU8a, secretKey);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/nacl/sign.js"],"names":["nacl","assert","u8aToU8a","ed25519Sign","isReady","naclSign","message","publicKey","secretKey","onlyJs","messageU8a","subarray","sign","detached"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,uBAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAChCC,EAAAA,SADgC;AAEhCC,EAAAA;AAFgC,CAA3B,EAGJC,MAAM,GAAG,KAHL,EAGY;AACjBR,EAAAA,MAAM,CAACO,SAAD,EAAY,4BAAZ,CAAN;AACA,QAAME,UAAU,GAAGR,QAAQ,CAACI,OAAD,CAA3B;AACA,SAAOF,OAAO,MAAM,CAACK,MAAd,GAAuBN,WAAW,CAACI,SAAD,EAAYC,SAAS,CAACG,QAAV,CAAmB,CAAnB,EAAsB,EAAtB,CAAZ,EAAuCD,UAAvC,CAAlC,GAAuFV,IAAI,CAACY,IAAL,CAAUC,QAAV,CAAmBH,UAAnB,EAA+BF,SAA/B,CAA9F;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport nacl from 'tweetnacl';\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { ed25519Sign, isReady } from '@polkadot/wasm-crypto';\n/**\n * @name naclSign\n * @summary Signs a message using the supplied secretKey\n * @description\n * Returns message signature of `message`, using the `secretKey`.\n * @example\n * <BR>\n *\n * ```javascript\n * import { naclSign } from '@polkadot/util-crypto';\n *\n * naclSign([...], [...]); // => [...]\n * ```\n */\n\nexport function naclSign(message, {\n  publicKey,\n  secretKey\n}, onlyJs = false) {\n  assert(secretKey, 'Expected a valid secretKey');\n  const messageU8a = u8aToU8a(message);\n  return isReady() && !onlyJs ? ed25519Sign(publicKey, secretKey.subarray(0, 32), messageU8a) : nacl.sign.detached(messageU8a, secretKey);\n}"]},"metadata":{},"sourceType":"module"}