{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest, sessionValidators = []) {\n  const [citem] = digest.logs.filter(({\n    type\n  }) => type === 'Consensus');\n  const [pitem] = digest.logs.filter(({\n    type\n  }) => type === 'PreRuntime');\n  const [sitem] = digest.logs.filter(({\n    type\n  }) => type === 'Seal');\n  let accountId; // This is critical to be first for BABE (before Consensus)\n  // If not first, we end up dropping the author at session-end\n\n  if (pitem) {\n    try {\n      const [engine, data] = pitem.asPreRuntime;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  if (!accountId && citem) {\n    try {\n      const [engine, data] = citem.asConsensus;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  } // SEAL, still used in e.g. Kulupu for pow\n\n\n  if (!accountId && sitem) {\n    try {\n      const [engine, data] = sitem.asSeal;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  return accountId;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/type/util.js"],"names":["extractAuthor","digest","sessionValidators","citem","logs","filter","type","pitem","sitem","accountId","engine","data","asPreRuntime","asConsensus","asSeal"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,iBAAiB,GAAG,EAAnD,EAAuD;AAC5D,QAAM,CAACC,KAAD,IAAUF,MAAM,CAACG,IAAP,CAAYC,MAAZ,CAAmB,CAAC;AAClCC,IAAAA;AADkC,GAAD,KAE7BA,IAAI,KAAK,WAFC,CAAhB;AAGA,QAAM,CAACC,KAAD,IAAUN,MAAM,CAACG,IAAP,CAAYC,MAAZ,CAAmB,CAAC;AAClCC,IAAAA;AADkC,GAAD,KAE7BA,IAAI,KAAK,YAFC,CAAhB;AAGA,QAAM,CAACE,KAAD,IAAUP,MAAM,CAACG,IAAP,CAAYC,MAAZ,CAAmB,CAAC;AAClCC,IAAAA;AADkC,GAAD,KAE7BA,IAAI,KAAK,MAFC,CAAhB;AAGA,MAAIG,SAAJ,CAV4D,CAU7C;AACf;;AAEA,MAAIF,KAAJ,EAAW;AACT,QAAI;AACF,YAAM,CAACG,MAAD,EAASC,IAAT,IAAiBJ,KAAK,CAACK,YAA7B;AACAH,MAAAA,SAAS,GAAGC,MAAM,CAACV,aAAP,CAAqBW,IAArB,EAA2BT,iBAA3B,CAAZ;AACD,KAHD,CAGE,MAAM,CAAC;AACR;AACF;;AAED,MAAI,CAACO,SAAD,IAAcN,KAAlB,EAAyB;AACvB,QAAI;AACF,YAAM,CAACO,MAAD,EAASC,IAAT,IAAiBR,KAAK,CAACU,WAA7B;AACAJ,MAAAA,SAAS,GAAGC,MAAM,CAACV,aAAP,CAAqBW,IAArB,EAA2BT,iBAA3B,CAAZ;AACD,KAHD,CAGE,MAAM,CAAC;AACR;AACF,GA3B2D,CA2B1D;;;AAGF,MAAI,CAACO,SAAD,IAAcD,KAAlB,EAAyB;AACvB,QAAI;AACF,YAAM,CAACE,MAAD,EAASC,IAAT,IAAiBH,KAAK,CAACM,MAA7B;AACAL,MAAAA,SAAS,GAAGC,MAAM,CAACV,aAAP,CAAqBW,IAArB,EAA2BT,iBAA3B,CAAZ;AACD,KAHD,CAGE,MAAM,CAAC;AACR;AACF;;AAED,SAAOO,SAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nexport function extractAuthor(digest, sessionValidators = []) {\n  const [citem] = digest.logs.filter(({\n    type\n  }) => type === 'Consensus');\n  const [pitem] = digest.logs.filter(({\n    type\n  }) => type === 'PreRuntime');\n  const [sitem] = digest.logs.filter(({\n    type\n  }) => type === 'Seal');\n  let accountId; // This is critical to be first for BABE (before Consensus)\n  // If not first, we end up dropping the author at session-end\n\n  if (pitem) {\n    try {\n      const [engine, data] = pitem.asPreRuntime;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  if (!accountId && citem) {\n    try {\n      const [engine, data] = citem.asConsensus;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  } // SEAL, still used in e.g. Kulupu for pow\n\n\n  if (!accountId && sitem) {\n    try {\n      const [engine, data] = sitem.asSeal;\n      accountId = engine.extractAuthor(data, sessionValidators);\n    } catch {// ignore\n    }\n  }\n\n  return accountId;\n}"]},"metadata":{},"sourceType":"module"}