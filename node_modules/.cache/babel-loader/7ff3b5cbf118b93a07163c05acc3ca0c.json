{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { vrfSign } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name schnorrkelVrfSign\n * @description Sign with sr25519 vrf signing (deterministic)\n */\n\nexport function schnorrkelVrfSign(message, {\n  secretKey\n}, context = EMPTY_U8A, extra = EMPTY_U8A) {\n  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Invalid secretKey, expected 64-bytes');\n  return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/schnorrkel/vrfSign.js"],"names":["assert","u8aToU8a","vrfSign","EMPTY_U8A","Uint8Array","schnorrkelVrfSign","message","secretKey","context","extra","length"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,MAAMC,SAAS,GAAG,IAAIC,UAAJ,EAAlB;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AACzCC,EAAAA;AADyC,CAApC,EAEJC,OAAO,GAAGL,SAFN,EAEiBM,KAAK,GAAGN,SAFzB,EAEoC;AACzCH,EAAAA,MAAM,CAAC,CAACO,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,MAAjE,MAA6E,EAA9E,EAAkF,sCAAlF,CAAN;AACA,SAAOR,OAAO,CAACK,SAAD,EAAYN,QAAQ,CAACO,OAAD,CAApB,EAA+BP,QAAQ,CAACK,OAAD,CAAvC,EAAkDL,QAAQ,CAACQ,KAAD,CAA1D,CAAd;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { vrfSign } from '@polkadot/wasm-crypto';\nconst EMPTY_U8A = new Uint8Array();\n/**\n * @name schnorrkelVrfSign\n * @description Sign with sr25519 vrf signing (deterministic)\n */\n\nexport function schnorrkelVrfSign(message, {\n  secretKey\n}, context = EMPTY_U8A, extra = EMPTY_U8A) {\n  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Invalid secretKey, expected 64-bytes');\n  return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));\n}"]},"metadata":{},"sourceType":"module"}