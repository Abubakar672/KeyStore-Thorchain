{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { mnemonicValidate } from \"../../mnemonic/index.js\";\nimport { naclKeypairFromSeed } from \"../../nacl/index.js\";\nimport { HARDENED, hdValidatePath } from \"../validatePath.js\";\nimport { ledgerDerivePrivate } from \"./derivePrivate.js\";\nimport { ledgerMaster } from \"./master.js\";\nexport function hdLedger(_mnemonic, path) {\n  const parts = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);\n\n  assert([12, 24, 25].includes(parts.length), 'Expected a mnemonic with 24 words (or 25 including a password)');\n  const [mnemonic, password] = parts.length === 25 ? [parts.slice(0, 24).join(' '), parts[24]] : [parts.join(' '), ''];\n  assert(mnemonicValidate(mnemonic), 'Invalid mnemonic passed to ledger derivation');\n  assert(hdValidatePath(path), 'Invalid derivation path');\n  return naclKeypairFromSeed(path.split('/').slice(1).map(n => parseInt(n.replace(/'$/, ''), 10)).map(n => n < HARDENED ? n + HARDENED : n).reduce((x, n) => ledgerDerivePrivate(x, n), ledgerMaster(mnemonic, password)).slice(0, 32));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/hd/ledger/index.js"],"names":["assert","mnemonicValidate","naclKeypairFromSeed","HARDENED","hdValidatePath","ledgerDerivePrivate","ledgerMaster","hdLedger","_mnemonic","path","parts","split","map","s","trim","filter","includes","length","mnemonic","password","slice","join","n","parseInt","replace","reduce","x"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,oBAAzC;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6BC,IAA7B,EAAmC;AACxC,QAAMC,KAAK,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,CAAyBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAA9B,EAAwCC,MAAxC,CAA+CF,CAAC,IAAIA,CAApD,CAAd;;AAEAb,EAAAA,MAAM,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAagB,QAAb,CAAsBN,KAAK,CAACO,MAA5B,CAAD,EAAsC,gEAAtC,CAAN;AACA,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBT,KAAK,CAACO,MAAN,KAAiB,EAAjB,GAAsB,CAACP,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAe,EAAf,EAAmBC,IAAnB,CAAwB,GAAxB,CAAD,EAA+BX,KAAK,CAAC,EAAD,CAApC,CAAtB,GAAkE,CAACA,KAAK,CAACW,IAAN,CAAW,GAAX,CAAD,EAAkB,EAAlB,CAA/F;AACArB,EAAAA,MAAM,CAACC,gBAAgB,CAACiB,QAAD,CAAjB,EAA6B,8CAA7B,CAAN;AACAlB,EAAAA,MAAM,CAACI,cAAc,CAACK,IAAD,CAAf,EAAuB,yBAAvB,CAAN;AACA,SAAOP,mBAAmB,CAACO,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBS,KAAhB,CAAsB,CAAtB,EAAyBR,GAAzB,CAA6BU,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAACE,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAD,EAAsB,EAAtB,CAA1C,EAAqEZ,GAArE,CAAyEU,CAAC,IAAIA,CAAC,GAAGnB,QAAJ,GAAemB,CAAC,GAAGnB,QAAnB,GAA8BmB,CAA5G,EAA+GG,MAA/G,CAAsH,CAACC,CAAD,EAAIJ,CAAJ,KAAUjB,mBAAmB,CAACqB,CAAD,EAAIJ,CAAJ,CAAnJ,EAA2JhB,YAAY,CAACY,QAAD,EAAWC,QAAX,CAAvK,EAA6LC,KAA7L,CAAmM,CAAnM,EAAsM,EAAtM,CAAD,CAA1B;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { mnemonicValidate } from \"../../mnemonic/index.js\";\nimport { naclKeypairFromSeed } from \"../../nacl/index.js\";\nimport { HARDENED, hdValidatePath } from \"../validatePath.js\";\nimport { ledgerDerivePrivate } from \"./derivePrivate.js\";\nimport { ledgerMaster } from \"./master.js\";\nexport function hdLedger(_mnemonic, path) {\n  const parts = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);\n\n  assert([12, 24, 25].includes(parts.length), 'Expected a mnemonic with 24 words (or 25 including a password)');\n  const [mnemonic, password] = parts.length === 25 ? [parts.slice(0, 24).join(' '), parts[24]] : [parts.join(' '), ''];\n  assert(mnemonicValidate(mnemonic), 'Invalid mnemonic passed to ledger derivation');\n  assert(hdValidatePath(path), 'Invalid derivation path');\n  return naclKeypairFromSeed(path.split('/').slice(1).map(n => parseInt(n.replace(/'$/, ''), 10)).map(n => n < HARDENED ? n + HARDENED : n).reduce((x, n) => ledgerDerivePrivate(x, n), ledgerMaster(mnemonic, password)).slice(0, 32));\n}"]},"metadata":{},"sourceType":"module"}