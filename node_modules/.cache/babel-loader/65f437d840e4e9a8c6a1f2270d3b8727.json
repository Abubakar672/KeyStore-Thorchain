{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/from';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _a = config.count,\n      count = _a === void 0 ? Infinity : _a,\n      delay = config.delay,\n      _b = config.resetOnSuccess,\n      resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function () {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,SAAT,QAA0B,oBAA1B;AA+EA,OAAM,SAAU,KAAV,CAAmB,aAAnB,EAAiE;AAA9C,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,QAAA;AAA8C;;AACrE,MAAI,MAAJ;;AACA,MAAI,aAAa,IAAI,OAAO,aAAP,KAAyB,QAA9C,EAAwD;AACtD,IAAA,MAAM,GAAG,aAAT;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG;AACP,MAAA,KAAK,EAAE;AADA,KAAT;AAGD;;AACO,MAAA,EAAA,GAAoE,MAAM,CAA1D,KAAhB;AAAA,MAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,EAAhB;AAAA,MAAkB,KAAK,GAA6C,MAAM,CAAnD,KAAvB;AAAA,MAAyB,EAAA,GAA2C,MAAM,CAAX,cAA/D;AAAA,MAAyC,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA/D;AAER,SAAO,KAAK,IAAI,CAAT,GACH,QADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAJ;;AACA,QAAM,iBAAiB,GAAG,YAAA;AACxB,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AAEJ,YAAI,cAAJ,EAAoB;AAClB,UAAA,KAAK,GAAG,CAAR;AACD;;AACD,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD,OARH,EAUE,SAVF,EAWE,UAAC,GAAD,EAAI;AACF,YAAI,KAAK,KAAK,KAAd,EAAqB;AAEnB,cAAM,OAAK,GAAG,YAAA;AACZ,gBAAI,QAAJ,EAAc;AACZ,cAAA,QAAQ,CAAC,WAAT;AACA,cAAA,QAAQ,GAAG,IAAX;AACA,cAAA,iBAAiB;AAClB,aAJD,MAIO;AACL,cAAA,SAAS,GAAG,IAAZ;AACD;AACF,WARD;;AAUA,cAAI,KAAK,IAAI,IAAb,EAAmB;AAIjB,gBAAM,QAAQ,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAAK,CAAC,KAAD,CAAjC,GAA2C,SAAS,CAAC,KAAK,CAAC,GAAD,EAAM,KAAN,CAAN,CAArE;AACA,gBAAM,oBAAkB,GAAG,IAAI,kBAAJ,CACzB,UADyB,EAEzB,YAAA;AAIE,cAAA,oBAAkB,CAAC,WAAnB;AACA,cAAA,OAAK;AACN,aARwB,EASzB,YAAA;AAGE,cAAA,UAAU,CAAC,QAAX;AACD,aAbwB,CAA3B;AAeA,YAAA,QAAQ,CAAC,SAAT,CAAmB,oBAAnB;AACD,WArBD,MAqBO;AAEL,YAAA,OAAK;AACN;AACF,SArCD,MAqCO;AAGL,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,OAtDH,CADS,CAAX;;AA0DA,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,WAAT;AACA,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,iBAAiB;AAClB;AACF,KAjED;;AAkEA,IAAA,iBAAiB;AAClB,GAtEM,CAFX;AAyED","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/from';\nexport function retry(configOrCount) {\n    if (configOrCount === void 0) { configOrCount = Infinity; }\n    var config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;\n    return count <= 0\n        ? identity\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var innerSub;\n            var subscribeForRetry = function () {\n                var syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, function (err) {\n                    if (soFar++ < count) {\n                        var resub_1 = function () {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n                                notifierSubscriber_1.unsubscribe();\n                                resub_1();\n                            }, function () {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber_1);\n                        }\n                        else {\n                            resub_1();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}