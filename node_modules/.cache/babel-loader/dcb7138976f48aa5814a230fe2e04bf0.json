{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class Base {\n  constructor(registry, value) {\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this._raw.isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return this._raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this._raw.toJSON();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this._raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this._raw.toU8a(isBare);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Base';\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/Base.js"],"names":["Base","constructor","registry","value","createdAtHash","_raw","encodedLength","toU8a","length","hash","isEmpty","eq","other","toHex","isLe","toHuman","isExtended","toJSON","toString","isBare","toRawType"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,IAAN,CAAW;AAChBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAC3B,SAAKD,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKE,aAAL,GAAqB,KAAK,CAA1B;AACA,SAAKC,IAAL,GAAY,KAAK,CAAjB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKG,IAAL,GAAYF,KAAZ;AACD;AACD;AACF;AACA;;;AAGmB,MAAbG,aAAa,GAAG;AAClB,WAAO,KAAKC,KAAL,GAAaC,MAApB;AACD;AACD;AACF;AACA;;;AAGU,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKP,QAAL,CAAcO,IAAd,CAAmB,KAAKF,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;;AAGa,MAAPG,OAAO,GAAG;AACZ,WAAO,KAAKL,IAAL,CAAUK,OAAjB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,KAAKP,IAAL,CAAUM,EAAV,CAAaC,KAAb,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,WAAO,KAAKT,IAAL,CAAUQ,KAAV,CAAgBC,IAAhB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,CAACC,UAAD,EAAa;AAClB,WAAO,KAAKX,IAAL,CAAUU,OAAV,CAAkBC,UAAlB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKZ,IAAL,CAAUY,MAAV,EAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKb,IAAL,CAAUa,QAAV,EAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEX,EAAAA,KAAK,CAACY,MAAD,EAAS;AACZ,WAAO,KAAKd,IAAL,CAAUE,KAAV,CAAgBY,MAAhB,CAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;;AAxFe","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name Base\n * @description A type extends the Base class, when it holds a value\n */\nexport class Base {\n  constructor(registry, value) {\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    this._raw = void 0;\n    this.registry = registry;\n    this._raw = value;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this._raw.isEmpty;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return this._raw.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex(isLe) {\n    return this._raw.toHex(isLe);\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return this._raw.toHuman(isExtended);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this._raw.toJSON();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this._raw.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return this._raw.toU8a(isBare);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Base';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}