{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use\n//\n//   new URL(import.meta.url).pathname)\n//\n// The issue is the WP4 has \"some\" issues with import.meta.url. So because of bundlers, we can't have\n// nice things... In this case it is even worse since import.meta.url won't even make it compile, so\n// there is a complete dead end with usage thereof\n//\n// When that is fixed, a solution is to have both .js & .mjs files, with the following content -\n//\n// cjs: util.detectPackage(packageInfo, () => __dirname);\n// esm: detectPackage(packageInfo, () => import.meta.url);\n//\n// With the above we additionally need a .d.ts to just export the packageInfo\nimport { packageInfo as decoderInfo } from '@polkadot/x-textdecoder';\nimport { packageInfo as encoderInfo } from '@polkadot/x-textencoder';\nimport { packageInfo } from \"./packageInfo.js\";\nimport { detectPackage } from \"./versionDetect.js\";\ndetectPackage(packageInfo, typeof __dirname !== 'undefined' && __dirname, [decoderInfo, encoderInfo]);","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/detectPackage.js"],"names":["packageInfo","decoderInfo","encoderInfo","detectPackage","__dirname"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,IAAIC,WAAxB,QAA2C,yBAA3C;AACA,SAASD,WAAW,IAAIE,WAAxB,QAA2C,yBAA3C;AACA,SAASF,WAAT,QAA4B,kBAA5B;AACA,SAASG,aAAT,QAA8B,oBAA9B;AACAA,aAAa,CAACH,WAAD,EAAc,OAAOI,SAAP,KAAqB,WAArB,IAAoCA,SAAlD,EAA6D,CAACH,WAAD,EAAcC,WAAd,CAA7D,CAAb","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use\n//\n//   new URL(import.meta.url).pathname)\n//\n// The issue is the WP4 has \"some\" issues with import.meta.url. So because of bundlers, we can't have\n// nice things... In this case it is even worse since import.meta.url won't even make it compile, so\n// there is a complete dead end with usage thereof\n//\n// When that is fixed, a solution is to have both .js & .mjs files, with the following content -\n//\n// cjs: util.detectPackage(packageInfo, () => __dirname);\n// esm: detectPackage(packageInfo, () => import.meta.url);\n//\n// With the above we additionally need a .d.ts to just export the packageInfo\nimport { packageInfo as decoderInfo } from '@polkadot/x-textdecoder';\nimport { packageInfo as encoderInfo } from '@polkadot/x-textencoder';\nimport { packageInfo } from \"./packageInfo.js\";\nimport { detectPackage } from \"./versionDetect.js\";\ndetectPackage(packageInfo, typeof __dirname !== 'undefined' && __dirname, [decoderInfo, encoderInfo]);"]},"metadata":{},"sourceType":"module"}