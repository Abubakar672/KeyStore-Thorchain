{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { Enum } from \"./Enum.js\";\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\nexport class Result extends Enum {\n  constructor(registry, Ok, Err, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Err\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Err, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Err value (if isErr)\n   */\n\n\n  get asErr() {\n    assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');\n    return this.value;\n  }\n  /**\n   * @deprecated Use asErr\n   */\n\n\n  get asError() {\n    return this.asErr;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Err value\n   */\n\n\n  get isErr() {\n    return !this.isOk;\n  }\n  /**\n   * @deprecated Use isErr\n   */\n\n\n  get isError() {\n    return this.isErr;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Err}>`;\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/Result.js"],"names":["assert","Enum","Result","constructor","registry","Ok","Err","value","with","Types","asErr","isErr","asError","asOk","isOk","isEmpty","isError","index","toRawType","_toRawStruct"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,MAAN,SAAqBD,IAArB,CAA0B;AAC/BE,EAAAA,WAAW,CAACC,QAAD,EAAWC,EAAX,EAAeC,GAAf,EAAoBC,KAApB,EAA2B;AACpC;AACA;AACA,UAAMH,QAAN,EAAgB;AACdC,MAAAA,EADc;AAEdC,MAAAA;AAFc,KAAhB,EAGGC,KAHH;AAID;;AAEU,SAAJC,IAAI,CAACC,KAAD,EAAQ;AACjB,WAAO,cAAcP,MAAd,CAAqB;AAC1BC,MAAAA,WAAW,CAACC,QAAD,EAAWG,KAAX,EAAkB;AAC3B,cAAMH,QAAN,EAAgBK,KAAK,CAACJ,EAAtB,EAA0BI,KAAK,CAACH,GAAhC,EAAqCC,KAArC;AACD;;AAHyB,KAA5B;AAMD;AACD;AACF;AACA;;;AAGW,MAALG,KAAK,GAAG;AACVV,IAAAA,MAAM,CAAC,KAAKW,KAAN,EAAa,4DAAb,CAAN;AACA,WAAO,KAAKJ,KAAZ;AACD;AACD;AACF;AACA;;;AAGa,MAAPK,OAAO,GAAG;AACZ,WAAO,KAAKF,KAAZ;AACD;AACD;AACF;AACA;;;AAGU,MAAJG,IAAI,GAAG;AACTb,IAAAA,MAAM,CAAC,KAAKc,IAAN,EAAY,2DAAZ,CAAN;AACA,WAAO,KAAKP,KAAZ;AACD;AACD;AACF;AACA;;;AAGa,MAAPQ,OAAO,GAAG;AACZ,WAAO,KAAKD,IAAL,IAAa,KAAKP,KAAL,CAAWQ,OAA/B;AACD;AACD;AACF;AACA;;;AAGW,MAALJ,KAAK,GAAG;AACV,WAAO,CAAC,KAAKG,IAAb;AACD;AACD;AACF;AACA;;;AAGa,MAAPE,OAAO,GAAG;AACZ,WAAO,KAAKL,KAAZ;AACD;AACD;AACF;AACA;;;AAGU,MAAJG,IAAI,GAAG;AACT,WAAO,KAAKG,KAAL,KAAe,CAAtB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,UAAMT,KAAK,GAAG,KAAKU,YAAL,EAAd;;AAEA,WAAQ,UAASV,KAAK,CAACJ,EAAG,IAAGI,KAAK,CAACH,GAAI,GAAvC;AACD;;AArF8B","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from '@polkadot/util';\nimport { Enum } from \"./Enum.js\";\n/**\n * @name Result\n * @description\n * A Result maps to the Rust Result type, that can either wrap a success or error value\n */\n\nexport class Result extends Enum {\n  constructor(registry, Ok, Err, value) {\n    // NOTE This is order-dependent, Ok (with index 0) needs to be first\n    // eslint-disable-next-line sort-keys\n    super(registry, {\n      Ok,\n      Err\n    }, value);\n  }\n\n  static with(Types) {\n    return class extends Result {\n      constructor(registry, value) {\n        super(registry, Types.Ok, Types.Err, value);\n      }\n\n    };\n  }\n  /**\n   * @description Returns the wrapper Err value (if isErr)\n   */\n\n\n  get asErr() {\n    assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');\n    return this.value;\n  }\n  /**\n   * @deprecated Use asErr\n   */\n\n\n  get asError() {\n    return this.asErr;\n  }\n  /**\n   * @description Returns the wrapper Ok value (if isOk)\n   */\n\n\n  get asOk() {\n    assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');\n    return this.value;\n  }\n  /**\n   * @description Checks if the Result has no value\n   */\n\n\n  get isEmpty() {\n    return this.isOk && this.value.isEmpty;\n  }\n  /**\n   * @description Checks if the Result wraps an Err value\n   */\n\n\n  get isErr() {\n    return !this.isOk;\n  }\n  /**\n   * @deprecated Use isErr\n   */\n\n\n  get isError() {\n    return this.isErr;\n  }\n  /**\n   * @description Checks if the Result wraps an Ok value\n   */\n\n\n  get isOk() {\n    return this.index === 0;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    const Types = this._toRawStruct();\n\n    return `Result<${Types.Ok},${Types.Err}>`;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}