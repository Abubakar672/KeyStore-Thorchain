{"ast":null,"code":"/**\nxxHash64 implementation in pure Javascript\n\nCopyright (C) 2016, Pierre Curto\nMIT license\n*/\nvar UINT64 = require('cuint').UINT64;\n/*\n * Constants\n */\n\n\nvar PRIME64_1 = UINT64('11400714785074694791');\nvar PRIME64_2 = UINT64('14029467366897019727');\nvar PRIME64_3 = UINT64('1609587929392839161');\nvar PRIME64_4 = UINT64('9650029242287828579');\nvar PRIME64_5 = UINT64('2870177450012600261');\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\n\nfunction toUTF8Array(str) {\n  var utf8 = [];\n\n  for (var i = 0, n = str.length; i < n; i++) {\n    var charcode = str.charCodeAt(i);\n    if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } // surrogate pair\n    else {\n        i++; // UTF-16 encodes 0x10000-0x10FFFF by\n        // subtracting 0x10000 and splitting the\n        // 20 bits of 0x0-0xFFFFF into two halves\n\n        charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n        utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n      }\n  }\n\n  return new Uint8Array(utf8);\n}\n/**\n * XXH64 object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT64} seed\n * @return ThisExpression\n * or\n * @return {UINT64} xxHash\n */\n\n\nfunction XXH64() {\n  if (arguments.length == 2) return new XXH64(arguments[1]).update(arguments[0]).digest();\n  if (!(this instanceof XXH64)) return new XXH64(arguments[0]);\n  init.call(this, arguments[0]);\n}\n/**\n * Initialize the XXH64 instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n\n\nfunction init(seed) {\n  this.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed);\n  this.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2);\n  this.v2 = this.seed.clone().add(PRIME64_2);\n  this.v3 = this.seed.clone();\n  this.v4 = this.seed.clone().subtract(PRIME64_1);\n  this.total_len = 0;\n  this.memsize = 0;\n  this.memory = null;\n  return this;\n}\n\nXXH64.prototype.init = init;\n/**\n * Add data to be computed for the XXH64 hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\n\nXXH64.prototype.update = function (input) {\n  var isString = typeof input == 'string';\n  var isArrayBuffer; // Convert all strings to utf-8 first (issue #5)\n\n  if (isString) {\n    input = toUTF8Array(input);\n    isString = false;\n    isArrayBuffer = true;\n  }\n\n  if (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer) {\n    isArrayBuffer = true;\n    input = new Uint8Array(input);\n  }\n\n  var p = 0;\n  var len = input.length;\n  var bEnd = p + len;\n  if (len == 0) return this;\n  this.total_len += len;\n\n  if (this.memsize == 0) {\n    if (isString) {\n      this.memory = '';\n    } else if (isArrayBuffer) {\n      this.memory = new Uint8Array(32);\n    } else {\n      this.memory = new Buffer(32);\n    }\n  }\n\n  if (this.memsize + len < 32) // fill in tmp buffer\n    {\n      // XXH64_memcpy(this.memory + this.memsize, input, len)\n      if (isString) {\n        this.memory += input;\n      } else if (isArrayBuffer) {\n        this.memory.set(input.subarray(0, len), this.memsize);\n      } else {\n        input.copy(this.memory, this.memsize, 0, len);\n      }\n\n      this.memsize += len;\n      return this;\n    }\n\n  if (this.memsize > 0) // some data left from previous update\n    {\n      // XXH64_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n      if (isString) {\n        this.memory += input.slice(0, 32 - this.memsize);\n      } else if (isArrayBuffer) {\n        this.memory.set(input.subarray(0, 32 - this.memsize), this.memsize);\n      } else {\n        input.copy(this.memory, this.memsize, 0, 32 - this.memsize);\n      }\n\n      var p64 = 0;\n\n      if (isString) {\n        var other;\n        other = UINT64(this.memory.charCodeAt(p64 + 1) << 8 | this.memory.charCodeAt(p64), this.memory.charCodeAt(p64 + 3) << 8 | this.memory.charCodeAt(p64 + 2), this.memory.charCodeAt(p64 + 5) << 8 | this.memory.charCodeAt(p64 + 4), this.memory.charCodeAt(p64 + 7) << 8 | this.memory.charCodeAt(p64 + 6));\n        this.v1.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory.charCodeAt(p64 + 1) << 8 | this.memory.charCodeAt(p64), this.memory.charCodeAt(p64 + 3) << 8 | this.memory.charCodeAt(p64 + 2), this.memory.charCodeAt(p64 + 5) << 8 | this.memory.charCodeAt(p64 + 4), this.memory.charCodeAt(p64 + 7) << 8 | this.memory.charCodeAt(p64 + 6));\n        this.v2.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory.charCodeAt(p64 + 1) << 8 | this.memory.charCodeAt(p64), this.memory.charCodeAt(p64 + 3) << 8 | this.memory.charCodeAt(p64 + 2), this.memory.charCodeAt(p64 + 5) << 8 | this.memory.charCodeAt(p64 + 4), this.memory.charCodeAt(p64 + 7) << 8 | this.memory.charCodeAt(p64 + 6));\n        this.v3.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory.charCodeAt(p64 + 1) << 8 | this.memory.charCodeAt(p64), this.memory.charCodeAt(p64 + 3) << 8 | this.memory.charCodeAt(p64 + 2), this.memory.charCodeAt(p64 + 5) << 8 | this.memory.charCodeAt(p64 + 4), this.memory.charCodeAt(p64 + 7) << 8 | this.memory.charCodeAt(p64 + 6));\n        this.v4.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n      } else {\n        var other;\n        other = UINT64(this.memory[p64 + 1] << 8 | this.memory[p64], this.memory[p64 + 3] << 8 | this.memory[p64 + 2], this.memory[p64 + 5] << 8 | this.memory[p64 + 4], this.memory[p64 + 7] << 8 | this.memory[p64 + 6]);\n        this.v1.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory[p64 + 1] << 8 | this.memory[p64], this.memory[p64 + 3] << 8 | this.memory[p64 + 2], this.memory[p64 + 5] << 8 | this.memory[p64 + 4], this.memory[p64 + 7] << 8 | this.memory[p64 + 6]);\n        this.v2.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory[p64 + 1] << 8 | this.memory[p64], this.memory[p64 + 3] << 8 | this.memory[p64 + 2], this.memory[p64 + 5] << 8 | this.memory[p64 + 4], this.memory[p64 + 7] << 8 | this.memory[p64 + 6]);\n        this.v3.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p64 += 8;\n        other = UINT64(this.memory[p64 + 1] << 8 | this.memory[p64], this.memory[p64 + 3] << 8 | this.memory[p64 + 2], this.memory[p64 + 5] << 8 | this.memory[p64 + 4], this.memory[p64 + 7] << 8 | this.memory[p64 + 6]);\n        this.v4.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n      }\n\n      p += 32 - this.memsize;\n      this.memsize = 0;\n      if (isString) this.memory = '';\n    }\n\n  if (p <= bEnd - 32) {\n    var limit = bEnd - 32;\n\n    do {\n      if (isString) {\n        var other;\n        other = UINT64(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), input.charCodeAt(p + 5) << 8 | input.charCodeAt(p + 4), input.charCodeAt(p + 7) << 8 | input.charCodeAt(p + 6));\n        this.v1.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), input.charCodeAt(p + 5) << 8 | input.charCodeAt(p + 4), input.charCodeAt(p + 7) << 8 | input.charCodeAt(p + 6));\n        this.v2.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), input.charCodeAt(p + 5) << 8 | input.charCodeAt(p + 4), input.charCodeAt(p + 7) << 8 | input.charCodeAt(p + 6));\n        this.v3.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), input.charCodeAt(p + 5) << 8 | input.charCodeAt(p + 4), input.charCodeAt(p + 7) << 8 | input.charCodeAt(p + 6));\n        this.v4.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n      } else {\n        var other;\n        other = UINT64(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], input[p + 5] << 8 | input[p + 4], input[p + 7] << 8 | input[p + 6]);\n        this.v1.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], input[p + 5] << 8 | input[p + 4], input[p + 7] << 8 | input[p + 6]);\n        this.v2.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], input[p + 5] << 8 | input[p + 4], input[p + 7] << 8 | input[p + 6]);\n        this.v3.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n        p += 8;\n        other = UINT64(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], input[p + 5] << 8 | input[p + 4], input[p + 7] << 8 | input[p + 6]);\n        this.v4.add(other.multiply(PRIME64_2)).rotl(31).multiply(PRIME64_1);\n      }\n\n      p += 8;\n    } while (p <= limit);\n  }\n\n  if (p < bEnd) {\n    // XXH64_memcpy(this.memory, p, bEnd-p);\n    if (isString) {\n      this.memory += input.slice(p);\n    } else if (isArrayBuffer) {\n      this.memory.set(input.subarray(p, bEnd), this.memsize);\n    } else {\n      input.copy(this.memory, this.memsize, p, bEnd);\n    }\n\n    this.memsize = bEnd - p;\n  }\n\n  return this;\n};\n/**\n * Finalize the XXH64 computation. The XXH64 instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT64} xxHash\n */\n\n\nXXH64.prototype.digest = function () {\n  var input = this.memory;\n  var isString = typeof input == 'string';\n  var p = 0;\n  var bEnd = this.memsize;\n  var h64, h;\n  var u = new UINT64();\n\n  if (this.total_len >= 32) {\n    h64 = this.v1.clone().rotl(1);\n    h64.add(this.v2.clone().rotl(7));\n    h64.add(this.v3.clone().rotl(12));\n    h64.add(this.v4.clone().rotl(18));\n    h64.xor(this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1));\n    h64.multiply(PRIME64_1).add(PRIME64_4);\n    h64.xor(this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1));\n    h64.multiply(PRIME64_1).add(PRIME64_4);\n    h64.xor(this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1));\n    h64.multiply(PRIME64_1).add(PRIME64_4);\n    h64.xor(this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1));\n    h64.multiply(PRIME64_1).add(PRIME64_4);\n  } else {\n    h64 = this.seed.clone().add(PRIME64_5);\n  }\n\n  h64.add(u.fromNumber(this.total_len));\n\n  while (p <= bEnd - 8) {\n    if (isString) {\n      u.fromBits(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), input.charCodeAt(p + 5) << 8 | input.charCodeAt(p + 4), input.charCodeAt(p + 7) << 8 | input.charCodeAt(p + 6));\n    } else {\n      u.fromBits(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], input[p + 5] << 8 | input[p + 4], input[p + 7] << 8 | input[p + 6]);\n    }\n\n    u.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1);\n    h64.xor(u).rotl(27).multiply(PRIME64_1).add(PRIME64_4);\n    p += 8;\n  }\n\n  if (p + 4 <= bEnd) {\n    if (isString) {\n      u.fromBits(input.charCodeAt(p + 1) << 8 | input.charCodeAt(p), input.charCodeAt(p + 3) << 8 | input.charCodeAt(p + 2), 0, 0);\n    } else {\n      u.fromBits(input[p + 1] << 8 | input[p], input[p + 3] << 8 | input[p + 2], 0, 0);\n    }\n\n    h64.xor(u.multiply(PRIME64_1)).rotl(23).multiply(PRIME64_2).add(PRIME64_3);\n    p += 4;\n  }\n\n  while (p < bEnd) {\n    u.fromBits(isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0);\n    h64.xor(u.multiply(PRIME64_5)).rotl(11).multiply(PRIME64_1);\n  }\n\n  h = h64.clone().shiftRight(33);\n  h64.xor(h).multiply(PRIME64_2);\n  h = h64.clone().shiftRight(29);\n  h64.xor(h).multiply(PRIME64_3);\n  h = h64.clone().shiftRight(32);\n  h64.xor(h); // Reset the state\n\n  this.init(this.seed);\n  return h64;\n};\n\nmodule.exports = XXH64;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/xxhashjs/lib/xxhash64.js"],"names":["UINT64","require","PRIME64_1","PRIME64_2","PRIME64_3","PRIME64_4","PRIME64_5","toUTF8Array","str","utf8","i","n","length","charcode","charCodeAt","push","Uint8Array","XXH64","arguments","update","digest","init","call","seed","clone","v1","add","v2","v3","v4","subtract","total_len","memsize","memory","prototype","input","isString","isArrayBuffer","ArrayBuffer","p","len","bEnd","Buffer","set","subarray","copy","slice","p64","other","multiply","rotl","limit","h64","h","u","xor","fromNumber","fromBits","shiftRight","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBD,MAA9B;AAEA;AACA;AACA;;;AACA,IAAIE,SAAS,GAAGF,MAAM,CAAE,sBAAF,CAAtB;AACA,IAAIG,SAAS,GAAGH,MAAM,CAAE,sBAAF,CAAtB;AACA,IAAII,SAAS,GAAGJ,MAAM,CAAG,qBAAH,CAAtB;AACA,IAAIK,SAAS,GAAGL,MAAM,CAAG,qBAAH,CAAtB;AACA,IAAIM,SAAS,GAAGN,MAAM,CAAG,qBAAH,CAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASO,WAAT,CAAsBC,GAAtB,EAA2B;AAC1B,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAN,EAASC,CAAC,GAACH,GAAG,CAACI,MAApB,EAA4BF,CAAC,GAAGC,CAAhC,EAAmCD,CAAC,EAApC,EAAwC;AACvC,QAAIG,QAAQ,GAAGL,GAAG,CAACM,UAAJ,CAAeJ,CAAf,CAAf;AACA,QAAIG,QAAQ,GAAG,IAAf,EAAqBJ,IAAI,CAACM,IAAL,CAAUF,QAAV,EAArB,KACK,IAAIA,QAAQ,GAAG,KAAf,EAAsB;AAC1BJ,MAAAA,IAAI,CAACM,IAAL,CAAU,OAAQF,QAAQ,IAAI,CAA9B,EACA,OAAQA,QAAQ,GAAG,IADnB;AAEA,KAHI,MAIA,IAAIA,QAAQ,GAAG,MAAX,IAAqBA,QAAQ,IAAI,MAArC,EAA6C;AACjDJ,MAAAA,IAAI,CAACM,IAAL,CAAU,OAAQF,QAAQ,IAAI,EAA9B,EACA,OAASA,QAAQ,IAAE,CAAX,GAAgB,IADxB,EAEA,OAAQA,QAAQ,GAAG,IAFnB;AAGA,KAJI,CAKL;AALK,SAMA;AACJH,QAAAA,CAAC,GADG,CAEJ;AACA;AACA;;AACAG,QAAAA,QAAQ,GAAG,WAAY,CAACA,QAAQ,GAAG,KAAZ,KAAoB,EAArB,GACnBL,GAAG,CAACM,UAAJ,CAAeJ,CAAf,IAAoB,KADZ,CAAX;AAEAD,QAAAA,IAAI,CAACM,IAAL,CAAU,OAAQF,QAAQ,IAAG,EAA7B,EACA,OAASA,QAAQ,IAAE,EAAX,GAAiB,IADzB,EAEA,OAASA,QAAQ,IAAE,CAAX,GAAgB,IAFxB,EAGA,OAAQA,QAAQ,GAAG,IAHnB;AAIA;AACD;;AAED,SAAO,IAAIG,UAAJ,CAAeP,IAAf,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,KAAT,GAAkB;AACjB,MAAIC,SAAS,CAACN,MAAV,IAAoB,CAAxB,EACC,OAAO,IAAIK,KAAJ,CAAWC,SAAS,CAAC,CAAD,CAApB,EAA0BC,MAA1B,CAAkCD,SAAS,CAAC,CAAD,CAA3C,EAAiDE,MAAjD,EAAP;AAED,MAAI,EAAE,gBAAgBH,KAAlB,CAAJ,EACC,OAAO,IAAIA,KAAJ,CAAWC,SAAS,CAAC,CAAD,CAApB,CAAP;AAEDG,EAAAA,IAAI,CAACC,IAAL,CAAU,IAAV,EAAgBJ,SAAS,CAAC,CAAD,CAAzB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;;AACC,SAASG,IAAT,CAAeE,IAAf,EAAqB;AACrB,OAAKA,IAAL,GAAYA,IAAI,YAAYvB,MAAhB,GAAyBuB,IAAI,CAACC,KAAL,EAAzB,GAAwCxB,MAAM,CAACuB,IAAD,CAA1D;AACA,OAAKE,EAAL,GAAU,KAAKF,IAAL,CAAUC,KAAV,GAAkBE,GAAlB,CAAsBxB,SAAtB,EAAiCwB,GAAjC,CAAqCvB,SAArC,CAAV;AACA,OAAKwB,EAAL,GAAU,KAAKJ,IAAL,CAAUC,KAAV,GAAkBE,GAAlB,CAAsBvB,SAAtB,CAAV;AACA,OAAKyB,EAAL,GAAU,KAAKL,IAAL,CAAUC,KAAV,EAAV;AACA,OAAKK,EAAL,GAAU,KAAKN,IAAL,CAAUC,KAAV,GAAkBM,QAAlB,CAA2B5B,SAA3B,CAAV;AACA,OAAK6B,SAAL,GAAiB,CAAjB;AACA,OAAKC,OAAL,GAAe,CAAf;AACA,OAAKC,MAAL,GAAc,IAAd;AAEA,SAAO,IAAP;AACA;;AACDhB,KAAK,CAACiB,SAAN,CAAgBb,IAAhB,GAAuBA,IAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAJ,KAAK,CAACiB,SAAN,CAAgBf,MAAhB,GAAyB,UAAUgB,KAAV,EAAiB;AACzC,MAAIC,QAAQ,GAAG,OAAOD,KAAP,IAAgB,QAA/B;AACA,MAAIE,aAAJ,CAFyC,CAIzC;;AACA,MAAID,QAAJ,EAAc;AACbD,IAAAA,KAAK,GAAG5B,WAAW,CAAC4B,KAAD,CAAnB;AACAC,IAAAA,QAAQ,GAAG,KAAX;AACAC,IAAAA,aAAa,GAAG,IAAhB;AACA;;AAED,MAAI,OAAOC,WAAP,KAAuB,WAAvB,IAAsCH,KAAK,YAAYG,WAA3D,EACA;AACCD,IAAAA,aAAa,GAAG,IAAhB;AACAF,IAAAA,KAAK,GAAG,IAAInB,UAAJ,CAAemB,KAAf,CAAR;AACA;;AAED,MAAII,CAAC,GAAG,CAAR;AACA,MAAIC,GAAG,GAAGL,KAAK,CAACvB,MAAhB;AACA,MAAI6B,IAAI,GAAGF,CAAC,GAAGC,GAAf;AAEA,MAAIA,GAAG,IAAI,CAAX,EAAc,OAAO,IAAP;AAEd,OAAKT,SAAL,IAAkBS,GAAlB;;AAEA,MAAI,KAAKR,OAAL,IAAgB,CAApB,EACA;AACC,QAAII,QAAJ,EAAc;AACb,WAAKH,MAAL,GAAc,EAAd;AACA,KAFD,MAEO,IAAII,aAAJ,EAAmB;AACzB,WAAKJ,MAAL,GAAc,IAAIjB,UAAJ,CAAe,EAAf,CAAd;AACA,KAFM,MAEA;AACN,WAAKiB,MAAL,GAAc,IAAIS,MAAJ,CAAW,EAAX,CAAd;AACA;AACD;;AAED,MAAI,KAAKV,OAAL,GAAeQ,GAAf,GAAqB,EAAzB,EAA+B;AAC/B;AACC;AACA,UAAIJ,QAAJ,EAAc;AACb,aAAKH,MAAL,IAAeE,KAAf;AACA,OAFD,MAEO,IAAIE,aAAJ,EAAmB;AACzB,aAAKJ,MAAL,CAAYU,GAAZ,CAAiBR,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkBJ,GAAlB,CAAjB,EAAyC,KAAKR,OAA9C;AACA,OAFM,MAEA;AACNG,QAAAA,KAAK,CAACU,IAAN,CAAY,KAAKZ,MAAjB,EAAyB,KAAKD,OAA9B,EAAuC,CAAvC,EAA0CQ,GAA1C;AACA;;AAED,WAAKR,OAAL,IAAgBQ,GAAhB;AACA,aAAO,IAAP;AACA;;AAED,MAAI,KAAKR,OAAL,GAAe,CAAnB,EAAwB;AACxB;AACC;AACA,UAAII,QAAJ,EAAc;AACb,aAAKH,MAAL,IAAeE,KAAK,CAACW,KAAN,CAAY,CAAZ,EAAe,KAAK,KAAKd,OAAzB,CAAf;AACA,OAFD,MAEO,IAAIK,aAAJ,EAAmB;AACzB,aAAKJ,MAAL,CAAYU,GAAZ,CAAiBR,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkB,KAAK,KAAKZ,OAA5B,CAAjB,EAAuD,KAAKA,OAA5D;AACA,OAFM,MAEA;AACNG,QAAAA,KAAK,CAACU,IAAN,CAAY,KAAKZ,MAAjB,EAAyB,KAAKD,OAA9B,EAAuC,CAAvC,EAA0C,KAAK,KAAKA,OAApD;AACA;;AAED,UAAIe,GAAG,GAAG,CAAV;;AACA,UAAIX,QAAJ,EAAc;AACb,YAAIY,KAAJ;AACAA,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAvB,CAD3B,EAEV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAF5B,EAGV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAH5B,EAIV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAJ5B,CAAd;AAMA,aAAKtB,EAAL,CAAQC,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAvB,CAD3B,EAEV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAF5B,EAGV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAH5B,EAIV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAJ5B,CAAd;AAMA,aAAKpB,EAAL,CAAQD,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAvB,CAD3B,EAEV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAF5B,EAGV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAH5B,EAIV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAJ5B,CAAd;AAMA,aAAKnB,EAAL,CAAQF,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAvB,CAD3B,EAEV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAF5B,EAGV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAH5B,EAIV,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,KAAiC,CAAlC,GAAuC,KAAKd,MAAL,CAAYnB,UAAZ,CAAuBiC,GAAG,GAAC,CAA3B,CAJ5B,CAAd;AAMA,aAAKlB,EAAL,CAAQH,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA,OAjCD,MAiCO;AACN,YAAI8C,KAAJ;AACAA,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAZ,CADhB,EAEV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAFjB,EAGV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAHjB,EAIV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAJjB,CAAd;AAMA,aAAKtB,EAAL,CAAQC,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAZ,CADhB,EAEV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAFjB,EAGV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAHjB,EAIV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAJjB,CAAd;AAMA,aAAKpB,EAAL,CAAQD,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAZ,CADhB,EAEV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAFjB,EAGV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAHjB,EAIV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAJjB,CAAd;AAMA,aAAKnB,EAAL,CAAQF,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA6C,QAAAA,GAAG,IAAI,CAAP;AACAC,QAAAA,KAAK,GAAGhD,MAAM,CACX,KAAKiC,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAZ,CADhB,EAEV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAFjB,EAGV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAHjB,EAIV,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,KAAsB,CAAvB,GAA4B,KAAKd,MAAL,CAAYc,GAAG,GAAC,CAAhB,CAJjB,CAAd;AAMA,aAAKlB,EAAL,CAAQH,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA;;AAEDqC,MAAAA,CAAC,IAAI,KAAK,KAAKP,OAAf;AACA,WAAKA,OAAL,GAAe,CAAf;AACA,UAAII,QAAJ,EAAc,KAAKH,MAAL,GAAc,EAAd;AACd;;AAED,MAAIM,CAAC,IAAIE,IAAI,GAAG,EAAhB,EACA;AACC,QAAIU,KAAK,GAAGV,IAAI,GAAG,EAAnB;;AAEA,OACA;AACC,UAAIL,QAAJ,EAAc;AACb,YAAIY,KAAJ;AACAA,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADnB,EAEVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFpB,EAGVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAHpB,EAIVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAJpB,CAAd;AAMA,aAAKd,EAAL,CAAQC,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADnB,EAEVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFpB,EAGVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAHpB,EAIVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAJpB,CAAd;AAMA,aAAKZ,EAAL,CAAQD,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADnB,EAEVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFpB,EAGVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAHpB,EAIVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAJpB,CAAd;AAMA,aAAKX,EAAL,CAAQF,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADnB,EAEVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFpB,EAGVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAHpB,EAIVJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAJpB,CAAd;AAMA,aAAKV,EAAL,CAAQH,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA,OAjCD,MAiCO;AACN,YAAI8C,KAAJ;AACAA,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CADb,EAEVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAFd,EAGVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAHd,EAIVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAJd,CAAd;AAMA,aAAKd,EAAL,CAAQC,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CADb,EAEVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAFd,EAGVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAHd,EAIVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAJd,CAAd;AAMA,aAAKZ,EAAL,CAAQD,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CADb,EAEVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAFd,EAGVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAHd,EAIVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAJd,CAAd;AAMA,aAAKX,EAAL,CAAQF,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACAqC,QAAAA,CAAC,IAAI,CAAL;AACAS,QAAAA,KAAK,GAAGhD,MAAM,CACXmC,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CADb,EAEVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAFd,EAGVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAHd,EAIVJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAJd,CAAd;AAMA,aAAKV,EAAL,CAAQH,GAAR,CAAasB,KAAK,CAACC,QAAN,CAAe9C,SAAf,CAAb,EAAyC+C,IAAzC,CAA8C,EAA9C,EAAkDD,QAAlD,CAA2D/C,SAA3D;AACA;;AACDqC,MAAAA,CAAC,IAAI,CAAL;AACA,KAtED,QAsESA,CAAC,IAAIY,KAtEd;AAuEA;;AAED,MAAIZ,CAAC,GAAGE,IAAR,EACA;AACC;AACA,QAAIL,QAAJ,EAAc;AACb,WAAKH,MAAL,IAAeE,KAAK,CAACW,KAAN,CAAYP,CAAZ,CAAf;AACA,KAFD,MAEO,IAAIF,aAAJ,EAAmB;AACzB,WAAKJ,MAAL,CAAYU,GAAZ,CAAiBR,KAAK,CAACS,QAAN,CAAeL,CAAf,EAAkBE,IAAlB,CAAjB,EAA0C,KAAKT,OAA/C;AACA,KAFM,MAEA;AACNG,MAAAA,KAAK,CAACU,IAAN,CAAY,KAAKZ,MAAjB,EAAyB,KAAKD,OAA9B,EAAuCO,CAAvC,EAA0CE,IAA1C;AACA;;AAED,SAAKT,OAAL,GAAeS,IAAI,GAAGF,CAAtB;AACA;;AAED,SAAO,IAAP;AACA,CApOD;AAsOA;AACA;AACA;AACA;AACA;;;AACAtB,KAAK,CAACiB,SAAN,CAAgBd,MAAhB,GAAyB,YAAY;AACpC,MAAIe,KAAK,GAAG,KAAKF,MAAjB;AACA,MAAIG,QAAQ,GAAG,OAAOD,KAAP,IAAgB,QAA/B;AACA,MAAII,CAAC,GAAG,CAAR;AACA,MAAIE,IAAI,GAAG,KAAKT,OAAhB;AACA,MAAIoB,GAAJ,EAASC,CAAT;AACA,MAAIC,CAAC,GAAG,IAAItD,MAAJ,EAAR;;AAEA,MAAI,KAAK+B,SAAL,IAAkB,EAAtB,EACA;AACCqB,IAAAA,GAAG,GAAG,KAAK3B,EAAL,CAAQD,KAAR,GAAgB0B,IAAhB,CAAqB,CAArB,CAAN;AACAE,IAAAA,GAAG,CAAC1B,GAAJ,CAAS,KAAKC,EAAL,CAAQH,KAAR,GAAgB0B,IAAhB,CAAqB,CAArB,CAAT;AACAE,IAAAA,GAAG,CAAC1B,GAAJ,CAAS,KAAKE,EAAL,CAAQJ,KAAR,GAAgB0B,IAAhB,CAAqB,EAArB,CAAT;AACAE,IAAAA,GAAG,CAAC1B,GAAJ,CAAS,KAAKG,EAAL,CAAQL,KAAR,GAAgB0B,IAAhB,CAAqB,EAArB,CAAT;AAEAE,IAAAA,GAAG,CAACG,GAAJ,CAAS,KAAK9B,EAAL,CAAQwB,QAAR,CAAiB9C,SAAjB,EAA4B+C,IAA5B,CAAiC,EAAjC,EAAqCD,QAArC,CAA8C/C,SAA9C,CAAT;AACAkD,IAAAA,GAAG,CAACH,QAAJ,CAAa/C,SAAb,EAAwBwB,GAAxB,CAA4BrB,SAA5B;AAEA+C,IAAAA,GAAG,CAACG,GAAJ,CAAS,KAAK5B,EAAL,CAAQsB,QAAR,CAAiB9C,SAAjB,EAA4B+C,IAA5B,CAAiC,EAAjC,EAAqCD,QAArC,CAA8C/C,SAA9C,CAAT;AACAkD,IAAAA,GAAG,CAACH,QAAJ,CAAa/C,SAAb,EAAwBwB,GAAxB,CAA4BrB,SAA5B;AAEA+C,IAAAA,GAAG,CAACG,GAAJ,CAAS,KAAK3B,EAAL,CAAQqB,QAAR,CAAiB9C,SAAjB,EAA4B+C,IAA5B,CAAiC,EAAjC,EAAqCD,QAArC,CAA8C/C,SAA9C,CAAT;AACAkD,IAAAA,GAAG,CAACH,QAAJ,CAAa/C,SAAb,EAAwBwB,GAAxB,CAA4BrB,SAA5B;AAEA+C,IAAAA,GAAG,CAACG,GAAJ,CAAS,KAAK1B,EAAL,CAAQoB,QAAR,CAAiB9C,SAAjB,EAA4B+C,IAA5B,CAAiC,EAAjC,EAAqCD,QAArC,CAA8C/C,SAA9C,CAAT;AACAkD,IAAAA,GAAG,CAACH,QAAJ,CAAa/C,SAAb,EAAwBwB,GAAxB,CAA4BrB,SAA5B;AACA,GAlBD,MAoBA;AACC+C,IAAAA,GAAG,GAAI,KAAK7B,IAAL,CAAUC,KAAV,GAAkBE,GAAlB,CAAuBpB,SAAvB,CAAP;AACA;;AAED8C,EAAAA,GAAG,CAAC1B,GAAJ,CAAS4B,CAAC,CAACE,UAAF,CAAa,KAAKzB,SAAlB,CAAT;;AAEA,SAAOQ,CAAC,IAAIE,IAAI,GAAG,CAAnB,EACA;AACC,QAAIL,QAAJ,EAAc;AACbkB,MAAAA,CAAC,CAACG,QAAF,CACEtB,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADhC,EAEGJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFjC,EAGGJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAHjC,EAIGJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAJjC;AAMA,KAPD,MAOO;AACNe,MAAAA,CAAC,CAACG,QAAF,CACEtB,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CAD1B,EAEGJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAF3B,EAGGJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAH3B,EAIGJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAJ3B;AAMA;;AACDe,IAAAA,CAAC,CAACL,QAAF,CAAW9C,SAAX,EAAsB+C,IAAtB,CAA2B,EAA3B,EAA+BD,QAA/B,CAAwC/C,SAAxC;AACAkD,IAAAA,GAAG,CACDG,GADF,CACMD,CADN,EAEEJ,IAFF,CAEO,EAFP,EAGED,QAHF,CAGY/C,SAHZ,EAIEwB,GAJF,CAIOrB,SAJP;AAKAkC,IAAAA,CAAC,IAAI,CAAL;AACA;;AAED,MAAIA,CAAC,GAAG,CAAJ,IAASE,IAAb,EAAmB;AAClB,QAAIL,QAAJ,EAAc;AACbkB,MAAAA,CAAC,CAACG,QAAF,CACEtB,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAjB,CADhC,EAEGJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,KAAyB,CAA1B,GAA+BJ,KAAK,CAACrB,UAAN,CAAiByB,CAAC,GAAC,CAAnB,CAFjC,EAGE,CAHF,EAIE,CAJF;AAMA,KAPD,MAOO;AACNe,MAAAA,CAAC,CAACG,QAAF,CACEtB,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAD,CAD1B,EAEGJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAAL,IAAc,CAAf,GAAoBJ,KAAK,CAACI,CAAC,GAAC,CAAH,CAF3B,EAGE,CAHF,EAIE,CAJF;AAMA;;AACDa,IAAAA,GAAG,CACDG,GADF,CACOD,CAAC,CAACL,QAAF,CAAW/C,SAAX,CADP,EAEEgD,IAFF,CAEO,EAFP,EAGED,QAHF,CAGY9C,SAHZ,EAIEuB,GAJF,CAIOtB,SAJP;AAKAmC,IAAAA,CAAC,IAAI,CAAL;AACA;;AAED,SAAOA,CAAC,GAAGE,IAAX,EACA;AACCa,IAAAA,CAAC,CAACG,QAAF,CAAYrB,QAAQ,GAAGD,KAAK,CAACrB,UAAN,CAAiByB,CAAC,EAAlB,CAAH,GAA2BJ,KAAK,CAACI,CAAC,EAAF,CAApD,EAA2D,CAA3D,EAA8D,CAA9D,EAAiE,CAAjE;AACAa,IAAAA,GAAG,CACDG,GADF,CACOD,CAAC,CAACL,QAAF,CAAW3C,SAAX,CADP,EAEE4C,IAFF,CAEO,EAFP,EAGED,QAHF,CAGW/C,SAHX;AAIA;;AAEDmD,EAAAA,CAAC,GAAGD,GAAG,CAAC5B,KAAJ,GAAYkC,UAAZ,CAAuB,EAAvB,CAAJ;AACAN,EAAAA,GAAG,CAACG,GAAJ,CAAQF,CAAR,EAAWJ,QAAX,CAAoB9C,SAApB;AAEAkD,EAAAA,CAAC,GAAGD,GAAG,CAAC5B,KAAJ,GAAYkC,UAAZ,CAAuB,EAAvB,CAAJ;AACAN,EAAAA,GAAG,CAACG,GAAJ,CAAQF,CAAR,EAAWJ,QAAX,CAAoB7C,SAApB;AAEAiD,EAAAA,CAAC,GAAGD,GAAG,CAAC5B,KAAJ,GAAYkC,UAAZ,CAAuB,EAAvB,CAAJ;AACAN,EAAAA,GAAG,CAACG,GAAJ,CAAQF,CAAR,EApGoC,CAsGpC;;AACA,OAAKhC,IAAL,CAAW,KAAKE,IAAhB;AAEA,SAAO6B,GAAP;AACA,CA1GD;;AA4GAO,MAAM,CAACC,OAAP,GAAiB3C,KAAjB","sourcesContent":["/**\nxxHash64 implementation in pure Javascript\n\nCopyright (C) 2016, Pierre Curto\nMIT license\n*/\nvar UINT64 = require('cuint').UINT64\n\n/*\n * Constants\n */\nvar PRIME64_1 = UINT64( '11400714785074694791' )\nvar PRIME64_2 = UINT64( '14029467366897019727' )\nvar PRIME64_3 = UINT64(  '1609587929392839161' )\nvar PRIME64_4 = UINT64(  '9650029242287828579' )\nvar PRIME64_5 = UINT64(  '2870177450012600261' )\n\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\nfunction toUTF8Array (str) {\n\tvar utf8 = []\n\tfor (var i=0, n=str.length; i < n; i++) {\n\t\tvar charcode = str.charCodeAt(i)\n\t\tif (charcode < 0x80) utf8.push(charcode)\n\t\telse if (charcode < 0x800) {\n\t\t\tutf8.push(0xc0 | (charcode >> 6),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\telse if (charcode < 0xd800 || charcode >= 0xe000) {\n\t\t\tutf8.push(0xe0 | (charcode >> 12),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\t// surrogate pair\n\t\telse {\n\t\t\ti++;\n\t\t\t// UTF-16 encodes 0x10000-0x10FFFF by\n\t\t\t// subtracting 0x10000 and splitting the\n\t\t\t// 20 bits of 0x0-0xFFFFF into two halves\n\t\t\tcharcode = 0x10000 + (((charcode & 0x3ff)<<10)\n\t\t\t| (str.charCodeAt(i) & 0x3ff))\n\t\t\tutf8.push(0xf0 | (charcode >>18),\n\t\t\t0x80 | ((charcode>>12) & 0x3f),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t}\n\n\treturn new Uint8Array(utf8)\n}\n\n/**\n * XXH64 object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT64} seed\n * @return ThisExpression\n * or\n * @return {UINT64} xxHash\n */\nfunction XXH64 () {\n\tif (arguments.length == 2)\n\t\treturn new XXH64( arguments[1] ).update( arguments[0] ).digest()\n\n\tif (!(this instanceof XXH64))\n\t\treturn new XXH64( arguments[0] )\n\n\tinit.call(this, arguments[0])\n}\n\n/**\n * Initialize the XXH64 instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n function init (seed) {\n\tthis.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed)\n\tthis.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2)\n\tthis.v2 = this.seed.clone().add(PRIME64_2)\n\tthis.v3 = this.seed.clone()\n\tthis.v4 = this.seed.clone().subtract(PRIME64_1)\n\tthis.total_len = 0\n\tthis.memsize = 0\n\tthis.memory = null\n\n\treturn this\n}\nXXH64.prototype.init = init\n\n/**\n * Add data to be computed for the XXH64 hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\nXXH64.prototype.update = function (input) {\n\tvar isString = typeof input == 'string'\n\tvar isArrayBuffer\n\n\t// Convert all strings to utf-8 first (issue #5)\n\tif (isString) {\n\t\tinput = toUTF8Array(input)\n\t\tisString = false\n\t\tisArrayBuffer = true\n\t}\n\n\tif (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer)\n\t{\n\t\tisArrayBuffer = true\n\t\tinput = new Uint8Array(input);\n\t}\n\n\tvar p = 0\n\tvar len = input.length\n\tvar bEnd = p + len\n\n\tif (len == 0) return this\n\n\tthis.total_len += len\n\n\tif (this.memsize == 0)\n\t{\n\t\tif (isString) {\n\t\t\tthis.memory = ''\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory = new Uint8Array(32)\n\t\t} else {\n\t\t\tthis.memory = new Buffer(32)\n\t\t}\n\t}\n\n\tif (this.memsize + len < 32)   // fill in tmp buffer\n\t{\n\t\t// XXH64_memcpy(this.memory + this.memsize, input, len)\n\t\tif (isString) {\n\t\t\tthis.memory += input\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, len), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, len )\n\t\t}\n\n\t\tthis.memsize += len\n\t\treturn this\n\t}\n\n\tif (this.memsize > 0)   // some data left from previous update\n\t{\n\t\t// XXH64_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(0, 32 - this.memsize)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, 32 - this.memsize), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, 32 - this.memsize )\n\t\t}\n\n\t\tvar p64 = 0\n\t\tif (isString) {\n\t\t\tvar other\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t} else {\n\t\t\tvar other\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t}\n\n\t\tp += 32 - this.memsize\n\t\tthis.memsize = 0\n\t\tif (isString) this.memory = ''\n\t}\n\n\tif (p <= bEnd - 32)\n\t{\n\t\tvar limit = bEnd - 32\n\n\t\tdo\n\t\t{\n\t\t\tif (isString) {\n\t\t\t\tvar other\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t} else {\n\t\t\t\tvar other\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t}\n\t\t\tp += 8\n\t\t} while (p <= limit)\n\t}\n\n\tif (p < bEnd)\n\t{\n\t\t// XXH64_memcpy(this.memory, p, bEnd-p);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(p)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(p, bEnd), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, p, bEnd )\n\t\t}\n\n\t\tthis.memsize = bEnd - p\n\t}\n\n\treturn this\n}\n\n/**\n * Finalize the XXH64 computation. The XXH64 instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT64} xxHash\n */\nXXH64.prototype.digest = function () {\n\tvar input = this.memory\n\tvar isString = typeof input == 'string'\n\tvar p = 0\n\tvar bEnd = this.memsize\n\tvar h64, h\n\tvar u = new UINT64\n\n\tif (this.total_len >= 32)\n\t{\n\t\th64 = this.v1.clone().rotl(1)\n\t\th64.add( this.v2.clone().rotl(7) )\n\t\th64.add( this.v3.clone().rotl(12) )\n\t\th64.add( this.v4.clone().rotl(18) )\n\n\t\th64.xor( this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\t}\n\telse\n\t{\n\t\th64  = this.seed.clone().add( PRIME64_5 )\n\t}\n\n\th64.add( u.fromNumber(this.total_len) )\n\n\twhile (p <= bEnd - 8)\n\t{\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t)\n\t\t}\n\t\tu.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1)\n\t\th64\n\t\t\t.xor(u)\n\t\t\t.rotl(27)\n\t\t\t.multiply( PRIME64_1 )\n\t\t\t.add( PRIME64_4 )\n\t\tp += 8\n\t}\n\n\tif (p + 4 <= bEnd) {\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t,\t0\n\t\t\t,\t0\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t,\t0\n\t\t\t,\t0\n\t\t\t)\n\t\t}\n\t\th64\n\t\t\t.xor( u.multiply(PRIME64_1) )\n\t\t\t.rotl(23)\n\t\t\t.multiply( PRIME64_2 )\n\t\t\t.add( PRIME64_3 )\n\t\tp += 4\n\t}\n\n\twhile (p < bEnd)\n\t{\n\t\tu.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0 )\n\t\th64\n\t\t\t.xor( u.multiply(PRIME64_5) )\n\t\t\t.rotl(11)\n\t\t\t.multiply(PRIME64_1)\n\t}\n\n\th = h64.clone().shiftRight(33)\n\th64.xor(h).multiply(PRIME64_2)\n\n\th = h64.clone().shiftRight(29)\n\th64.xor(h).multiply(PRIME64_3)\n\n\th = h64.clone().shiftRight(32)\n\th64.xor(h)\n\n\t// Reset the state\n\tthis.init( this.seed )\n\n\treturn h64\n}\n\nmodule.exports = XXH64\n"]},"metadata":{},"sourceType":"script"}