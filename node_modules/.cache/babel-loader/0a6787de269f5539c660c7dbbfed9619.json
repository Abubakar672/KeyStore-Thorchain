{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Adapted from https://gist.github.com/calvinmetcalf/91e8e84dc63c75f2aa53\nimport { bnToU8a, u8aConcat } from '@polkadot/util';\nimport { hmacSha512 } from \"../hmac/index.js\";\nexport function pbkdf2Sync(password, salt, rounds, len = 64) {\n  let out = new Uint8Array();\n  let num = 0;\n  const block = u8aConcat(salt, new Uint8Array(4));\n\n  while (out.length < len) {\n    num++;\n    block.set(bnToU8a(num, {\n      bitLength: 32,\n      isLe: false\n    }), salt.length);\n    let prev = hmacSha512(password, block);\n    const md = prev;\n    let i = 0;\n\n    while (++i < rounds) {\n      prev = hmacSha512(password, prev);\n      let j = -1;\n\n      while (++j < prev.length) {\n        md[j] ^= prev[j];\n      }\n    }\n\n    out = u8aConcat(out, md);\n  }\n\n  return out.slice(0, len);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/pbkdf2/pbkdf2.js"],"names":["bnToU8a","u8aConcat","hmacSha512","pbkdf2Sync","password","salt","rounds","len","out","Uint8Array","num","block","length","set","bitLength","isLe","prev","md","i","j","slice"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,SAAlB,QAAmC,gBAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4CC,GAAG,GAAG,EAAlD,EAAsD;AAC3D,MAAIC,GAAG,GAAG,IAAIC,UAAJ,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,QAAMC,KAAK,GAAGV,SAAS,CAACI,IAAD,EAAO,IAAII,UAAJ,CAAe,CAAf,CAAP,CAAvB;;AAEA,SAAOD,GAAG,CAACI,MAAJ,GAAaL,GAApB,EAAyB;AACvBG,IAAAA,GAAG;AACHC,IAAAA,KAAK,CAACE,GAAN,CAAUb,OAAO,CAACU,GAAD,EAAM;AACrBI,MAAAA,SAAS,EAAE,EADU;AAErBC,MAAAA,IAAI,EAAE;AAFe,KAAN,CAAjB,EAGIV,IAAI,CAACO,MAHT;AAIA,QAAII,IAAI,GAAGd,UAAU,CAACE,QAAD,EAAWO,KAAX,CAArB;AACA,UAAMM,EAAE,GAAGD,IAAX;AACA,QAAIE,CAAC,GAAG,CAAR;;AAEA,WAAO,EAAEA,CAAF,GAAMZ,MAAb,EAAqB;AACnBU,MAAAA,IAAI,GAAGd,UAAU,CAACE,QAAD,EAAWY,IAAX,CAAjB;AACA,UAAIG,CAAC,GAAG,CAAC,CAAT;;AAEA,aAAO,EAAEA,CAAF,GAAMH,IAAI,CAACJ,MAAlB,EAA0B;AACxBK,QAAAA,EAAE,CAACE,CAAD,CAAF,IAASH,IAAI,CAACG,CAAD,CAAb;AACD;AACF;;AAEDX,IAAAA,GAAG,GAAGP,SAAS,CAACO,GAAD,EAAMS,EAAN,CAAf;AACD;;AAED,SAAOT,GAAG,CAACY,KAAJ,CAAU,CAAV,EAAab,GAAb,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// Adapted from https://gist.github.com/calvinmetcalf/91e8e84dc63c75f2aa53\nimport { bnToU8a, u8aConcat } from '@polkadot/util';\nimport { hmacSha512 } from \"../hmac/index.js\";\nexport function pbkdf2Sync(password, salt, rounds, len = 64) {\n  let out = new Uint8Array();\n  let num = 0;\n  const block = u8aConcat(salt, new Uint8Array(4));\n\n  while (out.length < len) {\n    num++;\n    block.set(bnToU8a(num, {\n      bitLength: 32,\n      isLe: false\n    }), salt.length);\n    let prev = hmacSha512(password, block);\n    const md = prev;\n    let i = 0;\n\n    while (++i < rounds) {\n      prev = hmacSha512(password, prev);\n      let j = -1;\n\n      while (++j < prev.length) {\n        md[j] ^= prev[j];\n      }\n    }\n\n    out = u8aConcat(out, md);\n  }\n\n  return out.slice(0, len);\n}"]},"metadata":{},"sourceType":"module"}