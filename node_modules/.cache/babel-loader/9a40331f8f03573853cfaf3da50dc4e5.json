{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name arrayChunk\n * @summary Split T[] into T[][] based on the defind size\n * @description\n * Returns a set ao arrays based on the chunksize\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayChunk } from '@polkadot/util';\n *\n * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]\n * ```\n */\nexport function arrayChunk(array, chunkSize) {\n  const outputSize = Math.ceil(array.length / chunkSize);\n  const output = Array(outputSize);\n\n  for (let index = 0; index < outputSize; index++) {\n    const offset = index * chunkSize;\n    output[index] = array.slice(offset, offset + chunkSize);\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/array/chunk.js"],"names":["arrayChunk","array","chunkSize","outputSize","Math","ceil","length","output","Array","index","offset","slice"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,SAA3B,EAAsC;AAC3C,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUJ,KAAK,CAACK,MAAN,GAAeJ,SAAzB,CAAnB;AACA,QAAMK,MAAM,GAAGC,KAAK,CAACL,UAAD,CAApB;;AAEA,OAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,UAA5B,EAAwCM,KAAK,EAA7C,EAAiD;AAC/C,UAAMC,MAAM,GAAGD,KAAK,GAAGP,SAAvB;AACAK,IAAAA,MAAM,CAACE,KAAD,CAAN,GAAgBR,KAAK,CAACU,KAAN,CAAYD,MAAZ,EAAoBA,MAAM,GAAGR,SAA7B,CAAhB;AACD;;AAED,SAAOK,MAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name arrayChunk\n * @summary Split T[] into T[][] based on the defind size\n * @description\n * Returns a set ao arrays based on the chunksize\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayChunk } from '@polkadot/util';\n *\n * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]\n * ```\n */\nexport function arrayChunk(array, chunkSize) {\n  const outputSize = Math.ceil(array.length / chunkSize);\n  const output = Array(outputSize);\n\n  for (let index = 0; index < outputSize; index++) {\n    const offset = index * chunkSize;\n    output[index] = array.slice(offset, offset + chunkSize);\n  }\n\n  return output;\n}"]},"metadata":{},"sourceType":"module"}