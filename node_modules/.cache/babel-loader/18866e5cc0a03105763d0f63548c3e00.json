{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Agree } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelAgreement\n * @description Key agreement between other's public key and self secret key\n */\n\nexport function schnorrkelAgreement(secretKey, publicKey) {\n  const secretKeyU8a = u8aToU8a(secretKey);\n  const publicKeyU8a = u8aToU8a(publicKey);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);\n  assert(secretKeyU8a.length === 64, () => `Invalid secretKey, received ${secretKeyU8a.length} bytes, expected 64`);\n  return sr25519Agree(publicKeyU8a, secretKeyU8a);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/schnorrkel/agreement.js"],"names":["assert","u8aToU8a","sr25519Agree","schnorrkelAgreement","secretKey","publicKey","secretKeyU8a","publicKeyU8a","length"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,gBAAjC;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,SAAxC,EAAmD;AACxD,QAAMC,YAAY,GAAGL,QAAQ,CAACG,SAAD,CAA7B;AACA,QAAMG,YAAY,GAAGN,QAAQ,CAACI,SAAD,CAA7B;AACAL,EAAAA,MAAM,CAACO,YAAY,CAACC,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BD,YAAY,CAACC,MAAO,qBAAtF,CAAN;AACAR,EAAAA,MAAM,CAACM,YAAY,CAACE,MAAb,KAAwB,EAAzB,EAA6B,MAAO,+BAA8BF,YAAY,CAACE,MAAO,qBAAtF,CAAN;AACA,SAAON,YAAY,CAACK,YAAD,EAAeD,YAAf,CAAnB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, u8aToU8a } from '@polkadot/util';\nimport { sr25519Agree } from '@polkadot/wasm-crypto';\n/**\n * @name schnorrkelAgreement\n * @description Key agreement between other's public key and self secret key\n */\n\nexport function schnorrkelAgreement(secretKey, publicKey) {\n  const secretKeyU8a = u8aToU8a(secretKey);\n  const publicKeyU8a = u8aToU8a(publicKey);\n  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);\n  assert(secretKeyU8a.length === 64, () => `Invalid secretKey, received ${secretKeyU8a.length} bytes, expected 64`);\n  return sr25519Agree(publicKeyU8a, secretKeyU8a);\n}"]},"metadata":{},"sourceType":"module"}