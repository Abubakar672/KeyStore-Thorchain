{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { compactFromU8a, compactToU8a, isHex, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareSet, decodeU8a, sortSet, typeToConstructor } from \"./utils/index.js\";\nconst l = logger('BTreeSet');\n/** @internal */\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n  const [offset, length] = compactFromU8a(u8a);\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = typeToConstructor(registry, valType);\n\n  if (isHex(value) || isU8a(value)) {\n    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nexport class BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(sortSet(decodeSet(registry, valType, rawValue)));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = compactToU8a(this.size).length;\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()].map(v => v.toString());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareSet(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(compactToU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return u8aConcat(...encoded);\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/codec/BTreeSet.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","compactFromU8a","compactToU8a","isHex","isU8a","logger","stringify","u8aConcat","u8aToHex","u8aToU8a","compareSet","decodeU8a","sortSet","typeToConstructor","l","decodeSetFromU8a","registry","ValClass","u8a","output","Set","offset","length","types","i","toNumber","push","values","subarray","add","decodeSetFromSet","value","forEach","val","error","message","decodeSet","valType","Array","isArray","Error","_ValClass","BTreeSet","constructor","rawValue","createdAtHash","Object","defineProperty","writable","with","encodedLength","len","size","v","hash","toU8a","isEmpty","strings","map","toString","eq","other","toHex","toHuman","isExtended","json","toJSON","toRawType","getClassName","isBare","encoded"],"mappings":"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","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a, compactToU8a, isHex, isU8a, logger, stringify, u8aConcat, u8aToHex, u8aToU8a } from '@polkadot/util';\nimport { compareSet, decodeU8a, sortSet, typeToConstructor } from \"./utils/index.js\";\nconst l = logger('BTreeSet');\n/** @internal */\n\nfunction decodeSetFromU8a(registry, ValClass, u8a) {\n  const output = new Set();\n  const [offset, length] = compactFromU8a(u8a);\n  const types = [];\n\n  for (let i = 0; i < length.toNumber(); i++) {\n    types.push(ValClass);\n  }\n\n  const values = decodeU8a(registry, u8a.subarray(offset), types);\n\n  for (let i = 0; i < values.length; i++) {\n    output.add(values[i]);\n  }\n\n  return output;\n}\n/** @internal */\n\n\nfunction decodeSetFromSet(registry, ValClass, value) {\n  const output = new Set();\n  value.forEach(val => {\n    try {\n      output.add(val instanceof ValClass ? val : new ValClass(registry, val));\n    } catch (error) {\n      l.error('Failed to decode key or value:', error.message);\n      throw error;\n    }\n  });\n  return output;\n}\n/**\n * Decode input to pass into constructor.\n *\n * @param ValClass - Type of the map value\n * @param value - Value to decode, one of:\n * - null\n * - undefined\n * - hex\n * - Uint8Array\n * - Set<any>, where both key and value types are either\n *   constructors or decodeable values for their types.\n * @param jsonSet\n * @internal\n */\n\n\nfunction decodeSet(registry, valType, value) {\n  if (!value) {\n    return new Set();\n  }\n\n  const ValClass = typeToConstructor(registry, valType);\n\n  if (isHex(value) || isU8a(value)) {\n    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));\n  } else if (Array.isArray(value) || value instanceof Set) {\n    return decodeSetFromSet(registry, ValClass, value);\n  }\n\n  throw new Error('BTreeSet: cannot decode type');\n}\n\nvar _ValClass = /*#__PURE__*/_classPrivateFieldLooseKey(\"ValClass\");\n\nexport class BTreeSet extends Set {\n  constructor(registry, valType, rawValue) {\n    super(sortSet(decodeSet(registry, valType, rawValue)));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _ValClass, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    _classPrivateFieldLooseBase(this, _ValClass)[_ValClass] = typeToConstructor(registry, valType);\n  }\n\n  static with(valType) {\n    return class extends BTreeSet {\n      constructor(registry, value) {\n        super(registry, valType, value);\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    let len = compactToU8a(this.size).length;\n    this.forEach(v => {\n      len += v.encodedLength;\n    });\n    return len;\n  }\n  /**\n   * @description Returns a hash of the value\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.size === 0;\n  }\n  /**\n   * @description The actual set values as a string[]\n   */\n\n\n  get strings() {\n    return [...super.values()].map(v => v.toString());\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return compareSet(this, other);\n  }\n  /**\n   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation\n   */\n\n\n  toHex() {\n    return u8aToHex(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toHuman(isExtended));\n    });\n    return json;\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    const json = [];\n    this.forEach(v => {\n      json.push(v.toJSON());\n    });\n    return json;\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return `BTreeSet<${this.registry.getClassName(_classPrivateFieldLooseBase(this, _ValClass)[_ValClass]) || new (_classPrivateFieldLooseBase(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    const encoded = new Array();\n\n    if (!isBare) {\n      encoded.push(compactToU8a(this.size));\n    }\n\n    this.forEach(v => {\n      encoded.push(v.toU8a(isBare));\n    });\n    return u8aConcat(...encoded);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}