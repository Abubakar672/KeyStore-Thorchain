{"ast":null,"code":"// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, stringToU8a, u8aToString } from '@polkadot/util';\nlet wasm = null;\nlet cachegetInt32 = null;\nlet cachegetUint8 = null;\nexport async function initWasm(wasmBytes, asmFn, wbg) {\n  try {\n    assert(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');\n    const source = await WebAssembly.instantiate(wasmBytes, {\n      wbg\n    });\n    wasm = source.instance.exports;\n  } catch (error) {\n    // if we have a valid supplied asm.js, return that\n    if (asmFn) {\n      wasm = asmFn(wbg);\n    } else {\n      console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');\n      console.error(error);\n      wasm = null;\n    }\n  }\n} // FIXME We really would love to clean this up and have a sign like (wasm, ...params) => T\n// Alas, TypeScript foo is not that great today, so we sadly have an extra closure here\n\nexport function withWasm(fn) {\n  return (...params) => {\n    assert(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');\n    return fn(wasm)(...params);\n  };\n}\nexport function getWasm() {\n  return wasm;\n}\nexport function getInt32() {\n  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {\n    cachegetInt32 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32;\n}\nexport function getUint8() {\n  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {\n    cachegetUint8 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8;\n}\nexport function getU8a(ptr, len) {\n  return getUint8().subarray(ptr / 1, ptr / 1 + len);\n}\nexport function getString(ptr, len) {\n  return u8aToString(getU8a(ptr, len));\n}\nexport function allocU8a(arg) {\n  const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8().set(arg, ptr / 1);\n  return [ptr, arg.length];\n}\nexport function allocString(arg) {\n  return allocU8a(stringToU8a(arg));\n}\nexport function resultU8a() {\n  const r0 = getInt32()[8 / 4 + 0];\n  const r1 = getInt32()[8 / 4 + 1];\n  const ret = getU8a(r0, r1).slice();\n\n  wasm.__wbindgen_free(r0, r1 * 1);\n\n  return ret;\n}\nexport function resultString() {\n  return u8aToString(resultU8a());\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/wasm-crypto/bridge.js"],"names":["assert","stringToU8a","u8aToString","wasm","cachegetInt32","cachegetUint8","initWasm","wasmBytes","asmFn","wbg","WebAssembly","length","source","instantiate","instance","exports","error","console","withWasm","fn","params","getWasm","getInt32","buffer","memory","Int32Array","getUint8","Uint8Array","getU8a","ptr","len","subarray","getString","allocU8a","arg","__wbindgen_malloc","set","allocString","resultU8a","r0","r1","ret","slice","__wbindgen_free","resultString"],"mappings":"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","sourcesContent":["// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { assert, stringToU8a, u8aToString } from '@polkadot/util';\nlet wasm = null;\nlet cachegetInt32 = null;\nlet cachegetUint8 = null;\nexport async function initWasm(wasmBytes, asmFn, wbg) {\n  try {\n    assert(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');\n    const source = await WebAssembly.instantiate(wasmBytes, {\n      wbg\n    });\n    wasm = source.instance.exports;\n  } catch (error) {\n    // if we have a valid supplied asm.js, return that\n    if (asmFn) {\n      wasm = asmFn(wbg);\n    } else {\n      console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');\n      console.error(error);\n      wasm = null;\n    }\n  }\n} // FIXME We really would love to clean this up and have a sign like (wasm, ...params) => T\n// Alas, TypeScript foo is not that great today, so we sadly have an extra closure here\n\nexport function withWasm(fn) {\n  return (...params) => {\n    assert(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');\n    return fn(wasm)(...params);\n  };\n}\nexport function getWasm() {\n  return wasm;\n}\nexport function getInt32() {\n  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {\n    cachegetInt32 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32;\n}\nexport function getUint8() {\n  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {\n    cachegetUint8 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8;\n}\nexport function getU8a(ptr, len) {\n  return getUint8().subarray(ptr / 1, ptr / 1 + len);\n}\nexport function getString(ptr, len) {\n  return u8aToString(getU8a(ptr, len));\n}\nexport function allocU8a(arg) {\n  const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8().set(arg, ptr / 1);\n  return [ptr, arg.length];\n}\nexport function allocString(arg) {\n  return allocU8a(stringToU8a(arg));\n}\nexport function resultU8a() {\n  const r0 = getInt32()[8 / 4 + 0];\n  const r1 = getInt32()[8 / 4 + 1];\n  const ret = getU8a(r0, r1).slice();\n\n  wasm.__wbindgen_free(r0, r1 * 1);\n\n  return ret;\n}\nexport function resultString() {\n  return u8aToString(resultU8a());\n}"]},"metadata":{},"sourceType":"module"}