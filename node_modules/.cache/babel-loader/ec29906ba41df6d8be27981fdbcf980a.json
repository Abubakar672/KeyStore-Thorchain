{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\"; // query via constants (current applicable path)\n\nfunction queryConstants(api) {\n  return of([// deprecated\n  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current\n  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);\n}\n/**\n * @name fees\n * @returns An object containing the combined results of the queries for\n * all relevant contract fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n * });\n * ```\n */\n\n\nexport function fees(instanceId, api) {\n  return memo(instanceId, () => {\n    return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({\n      callBaseFee,\n      contractFee,\n      creationFee,\n      rentByteFee,\n      rentDepositOffset,\n      surchargeReward,\n      tombstoneDeposit,\n      transactionBaseFee,\n      transactionByteFee,\n      transferFee\n    })));\n  });\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/contracts/fees.js"],"names":["map","of","memo","queryConstants","api","consts","contracts","callBaseFee","registry","createType","contractFee","creationFee","transactionBaseFee","transactionByteFee","transferFee","rentByteFee","rentDepositOffset","surchargeReward","tombstoneDeposit","fees","instanceId","pipe"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,QAAwB,MAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOH,EAAE,CAAC,CAAC;AACXG,EAAAA,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBC,WAArB,IAAoCH,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CAD1B,EAC8DL,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBI,WAArB,IAAoCN,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CADlG,EACsIL,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBK,WAArB,IAAoCP,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CAD1K,EAC8ML,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBM,kBAArB,IAA2CR,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CADzP,EAC6RL,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBO,kBAArB,IAA2CT,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CADxU,EAC4WL,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBQ,WAArB,IAAoCV,GAAG,CAACI,QAAJ,CAAaC,UAAb,CAAwB,SAAxB,CADhZ,EACob;AAC9bL,EAAAA,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBS,WAFX,EAEwBX,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBU,iBAF7C,EAEgEZ,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBW,eAFrF,EAEsGb,GAAG,CAACC,MAAJ,CAAWC,SAAX,CAAqBY,gBAF3H,CAAD,CAAT;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,IAAT,CAAcC,UAAd,EAA0BhB,GAA1B,EAA+B;AACpC,SAAOF,IAAI,CAACkB,UAAD,EAAa,MAAM;AAC5B,WAAOjB,cAAc,CAACC,GAAD,CAAd,CAAoBiB,IAApB,CAAyBrB,GAAG,CAAC,CAAC,CAACO,WAAD,EAAcG,WAAd,EAA2BC,WAA3B,EAAwCC,kBAAxC,EAA4DC,kBAA5D,EAAgFC,WAAhF,EAA6FC,WAA7F,EAA0GC,iBAA1G,EAA6HC,eAA7H,EAA8IC,gBAA9I,CAAD,MAAsK;AACxMX,MAAAA,WADwM;AAExMG,MAAAA,WAFwM;AAGxMC,MAAAA,WAHwM;AAIxMI,MAAAA,WAJwM;AAKxMC,MAAAA,iBALwM;AAMxMC,MAAAA,eANwM;AAOxMC,MAAAA,gBAPwM;AAQxMN,MAAAA,kBARwM;AASxMC,MAAAA,kBATwM;AAUxMC,MAAAA;AAVwM,KAAtK,CAAD,CAA5B,CAAP;AAYD,GAbU,CAAX;AAcD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\";\n\n// query via constants (current applicable path)\nfunction queryConstants(api) {\n  return of([// deprecated\n  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current\n  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);\n}\n/**\n * @name fees\n * @returns An object containing the combined results of the queries for\n * all relevant contract fees as declared in the substrate chain spec.\n * @example\n * <BR>\n *\n * ```javascript\n * api.derive.contracts.fees(([creationFee, transferFee]) => {\n *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);\n * });\n * ```\n */\n\n\nexport function fees(instanceId, api) {\n  return memo(instanceId, () => {\n    return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({\n      callBaseFee,\n      contractFee,\n      creationFee,\n      rentByteFee,\n      rentDepositOffset,\n      surchargeReward,\n      tombstoneDeposit,\n      transactionBaseFee,\n      transactionByteFee,\n      transferFee\n    })));\n  });\n}"]},"metadata":{},"sourceType":"module"}