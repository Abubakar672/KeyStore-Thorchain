{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { sshash } from \"./sshash.js\";\nexport function checkAddressChecksum(decoded) {\n  const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;\n  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix\n\n  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);\n  const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks\n\n  const hash = sshash(decoded.subarray(0, length));\n  const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);\n  return [isValid, length, ss58Length, ss58Decoded];\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/address/checksum.js"],"names":["sshash","checkAddressChecksum","decoded","ss58Length","ss58Decoded","isPublicKey","includes","length","hash","subarray","isValid"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMC,UAAU,GAAGD,OAAO,CAAC,CAAD,CAAP,GAAa,UAAb,GAA0B,CAA1B,GAA8B,CAAjD;AACA,QAAME,WAAW,GAAGD,UAAU,KAAK,CAAf,GAAmBD,OAAO,CAAC,CAAD,CAA1B,GAAgC,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAd,KAA6B,CAA7B,GAAiCA,OAAO,CAAC,CAAD,CAAP,IAAc,CAA/C,GAAmD,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAd,KAA6B,CAApI,CAF4C,CAE2F;;AAEvI,QAAMG,WAAW,GAAG,CAAC,KAAKF,UAAN,EAAkB,KAAKA,UAAvB,EAAmCG,QAAnC,CAA4CJ,OAAO,CAACK,MAApD,CAApB;AACA,QAAMA,MAAM,GAAGL,OAAO,CAACK,MAAR,IAAkBF,WAAW,GAAG,CAAH,GAAO,CAApC,CAAf,CAL4C,CAKW;;AAEvD,QAAMG,IAAI,GAAGR,MAAM,CAACE,OAAO,CAACO,QAAR,CAAiB,CAAjB,EAAoBF,MAApB,CAAD,CAAnB;AACA,QAAMG,OAAO,GAAG,CAACR,OAAO,CAAC,CAAD,CAAP,GAAa,UAAd,MAA8B,CAA9B,IAAmC,CAAC,CAAC,EAAD,EAAK,EAAL,EAASI,QAAT,CAAkBJ,OAAO,CAAC,CAAD,CAAzB,CAApC,KAAsEG,WAAW,GAAGH,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,KAAgCC,IAAI,CAAC,CAAD,CAApC,IAA2CN,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,KAAgCC,IAAI,CAAC,CAAD,CAAlF,GAAwFN,OAAO,CAACA,OAAO,CAACK,MAAR,GAAiB,CAAlB,CAAP,KAAgCC,IAAI,CAAC,CAAD,CAA7M,CAAhB;AACA,SAAO,CAACE,OAAD,EAAUH,MAAV,EAAkBJ,UAAlB,EAA8BC,WAA9B,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { sshash } from \"./sshash.js\";\nexport function checkAddressChecksum(decoded) {\n  const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;\n  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix\n\n  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);\n  const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks\n\n  const hash = sshash(decoded.subarray(0, length));\n  const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);\n  return [isValid, length, ss58Length, ss58Decoded];\n}"]},"metadata":{},"sourceType":"module"}