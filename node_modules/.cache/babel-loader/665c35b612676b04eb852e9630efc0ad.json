{"ast":null,"code":"/**\n * @license\n * https://github.com/ealmansi/cashaddrjs\n * Copyright (c) 2017-2020 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\n'use strict';\n\nvar validate = require('./validation').validate;\n/**\n * Base32 encoding and decoding.\n *\n * @module base32\n */\n\n/**\n * Charset containing the 32 symbols used in the base32 encoding.\n * @private\n */\n\n\nvar CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * Inverted index mapping each symbol into its index within the charset.\n * @private\n */\n\nvar CHARSET_INVERSE_INDEX = {\n  'q': 0,\n  'p': 1,\n  'z': 2,\n  'r': 3,\n  'y': 4,\n  '9': 5,\n  'x': 6,\n  '8': 7,\n  'g': 8,\n  'f': 9,\n  '2': 10,\n  't': 11,\n  'v': 12,\n  'd': 13,\n  'w': 14,\n  '0': 15,\n  's': 16,\n  '3': 17,\n  'j': 18,\n  'n': 19,\n  '5': 20,\n  '4': 21,\n  'k': 22,\n  'h': 23,\n  'c': 24,\n  'e': 25,\n  '6': 26,\n  'm': 27,\n  'u': 28,\n  'a': 29,\n  '7': 30,\n  'l': 31\n};\n/**\n * Encodes the given array of 5-bit integers as a base32-encoded string.\n *\n * @static\n * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.\n * @returns {string}\n * @throws {ValidationError}\n */\n\nfunction encode(data) {\n  validate(data instanceof Uint8Array, 'Invalid data: ' + data + '.');\n  var base32 = '';\n\n  for (var i = 0; i < data.length; ++i) {\n    var value = data[i];\n    validate(0 <= value && value < 32, 'Invalid value: ' + value + '.');\n    base32 += CHARSET[value];\n  }\n\n  return base32;\n}\n/**\n * Decodes the given base32-encoded string into an array of 5-bit integers.\n *\n * @static\n * @param {string} string\n * @returns {Uint8Array}\n * @throws {ValidationError}\n */\n\n\nfunction decode(string) {\n  validate(typeof string === 'string', 'Invalid base32-encoded string: ' + string + '.');\n  var data = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; ++i) {\n    var value = string[i];\n    validate(value in CHARSET_INVERSE_INDEX, 'Invalid value: ' + value + '.');\n    data[i] = CHARSET_INVERSE_INDEX[value];\n  }\n\n  return data;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/cashaddrjs/src/base32.js"],"names":["validate","require","CHARSET","CHARSET_INVERSE_INDEX","encode","data","Uint8Array","base32","i","length","value","decode","string","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBD,QAAvC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,IAAIE,OAAO,GAAG,kCAAd;AAEA;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB,GAAG;AAC1B,OAAK,CADqB;AAClB,OAAK,CADa;AACV,OAAK,CADK;AACF,OAAK,CADH;AACM,OAAK,CADX;AACc,OAAK,CADnB;AACsB,OAAK,CAD3B;AAC8B,OAAK,CADnC;AAE1B,OAAK,CAFqB;AAElB,OAAK,CAFa;AAEV,OAAK,EAFK;AAED,OAAK,EAFJ;AAEQ,OAAK,EAFb;AAEiB,OAAK,EAFtB;AAE0B,OAAK,EAF/B;AAEmC,OAAK,EAFxC;AAG1B,OAAK,EAHqB;AAGjB,OAAK,EAHY;AAGR,OAAK,EAHG;AAGC,OAAK,EAHN;AAGU,OAAK,EAHf;AAGmB,OAAK,EAHxB;AAG4B,OAAK,EAHjC;AAGqC,OAAK,EAH1C;AAI1B,OAAK,EAJqB;AAIjB,OAAK,EAJY;AAIR,OAAK,EAJG;AAIC,OAAK,EAJN;AAIU,OAAK,EAJf;AAImB,OAAK,EAJxB;AAI4B,OAAK,EAJjC;AAIqC,OAAK;AAJ1C,CAA5B;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpBL,EAAAA,QAAQ,CAACK,IAAI,YAAYC,UAAjB,EAA6B,mBAAmBD,IAAnB,GAA0B,GAAvD,CAAR;AACA,MAAIE,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,QAAIE,KAAK,GAAGL,IAAI,CAACG,CAAD,CAAhB;AACAR,IAAAA,QAAQ,CAAC,KAAKU,KAAL,IAAcA,KAAK,GAAG,EAAvB,EAA2B,oBAAoBA,KAApB,GAA4B,GAAvD,CAAR;AACAH,IAAAA,MAAM,IAAIL,OAAO,CAACQ,KAAD,CAAjB;AACD;;AACD,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,MAAT,CAAgBC,MAAhB,EAAwB;AACtBZ,EAAAA,QAAQ,CAAC,OAAOY,MAAP,KAAkB,QAAnB,EAA6B,oCAAoCA,MAApC,GAA6C,GAA1E,CAAR;AACA,MAAIP,IAAI,GAAG,IAAIC,UAAJ,CAAeM,MAAM,CAACH,MAAtB,CAAX;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,MAAM,CAACH,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,QAAIE,KAAK,GAAGE,MAAM,CAACJ,CAAD,CAAlB;AACAR,IAAAA,QAAQ,CAACU,KAAK,IAAIP,qBAAV,EAAiC,oBAAoBO,KAApB,GAA4B,GAA7D,CAAR;AACAL,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUL,qBAAqB,CAACO,KAAD,CAA/B;AACD;;AACD,SAAOL,IAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,MAAM,EAAEA,MADO;AAEfO,EAAAA,MAAM,EAAEA;AAFO,CAAjB","sourcesContent":["/**\n * @license\n * https://github.com/ealmansi/cashaddrjs\n * Copyright (c) 2017-2020 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\n\n'use strict';\n\nvar validate = require('./validation').validate;\n\n/**\n * Base32 encoding and decoding.\n *\n * @module base32\n */\n\n/**\n * Charset containing the 32 symbols used in the base32 encoding.\n * @private\n */\nvar CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n\n/**\n * Inverted index mapping each symbol into its index within the charset.\n * @private\n */\nvar CHARSET_INVERSE_INDEX = {\n  'q': 0, 'p': 1, 'z': 2, 'r': 3, 'y': 4, '9': 5, 'x': 6, '8': 7,\n  'g': 8, 'f': 9, '2': 10, 't': 11, 'v': 12, 'd': 13, 'w': 14, '0': 15,\n  's': 16, '3': 17, 'j': 18, 'n': 19, '5': 20, '4': 21, 'k': 22, 'h': 23,\n  'c': 24, 'e': 25, '6': 26, 'm': 27, 'u': 28, 'a': 29, '7': 30, 'l': 31,\n};\n\n/**\n * Encodes the given array of 5-bit integers as a base32-encoded string.\n *\n * @static\n * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.\n * @returns {string}\n * @throws {ValidationError}\n */\nfunction encode(data) {\n  validate(data instanceof Uint8Array, 'Invalid data: ' + data + '.');\n  var base32 = '';\n  for (var i = 0; i < data.length; ++i) {\n    var value = data[i];\n    validate(0 <= value && value < 32, 'Invalid value: ' + value + '.');\n    base32 += CHARSET[value];\n  }\n  return base32;\n}\n\n/**\n * Decodes the given base32-encoded string into an array of 5-bit integers.\n *\n * @static\n * @param {string} string\n * @returns {Uint8Array}\n * @throws {ValidationError}\n */\nfunction decode(string) {\n  validate(typeof string === 'string', 'Invalid base32-encoded string: ' + string + '.');\n  var data = new Uint8Array(string.length);\n  for (var i = 0; i < string.length; ++i) {\n    var value = string[i];\n    validate(value in CHARSET_INVERSE_INDEX, 'Invalid value: ' + value + '.');\n    data[i] = CHARSET_INVERSE_INDEX[value];\n  }\n  return data;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n};\n"]},"metadata":{},"sourceType":"script"}