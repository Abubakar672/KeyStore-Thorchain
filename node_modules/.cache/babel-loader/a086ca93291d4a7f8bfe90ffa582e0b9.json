{"ast":null,"code":"// constant-space merkle root calculation algorithm\nmodule.exports = function fastRoot(values, digestFn) {\n  if (!Array.isArray(values)) throw TypeError('Expected values Array');\n  if (typeof digestFn !== 'function') throw TypeError('Expected digest Function');\n  var length = values.length;\n  var results = values.concat();\n\n  while (length > 1) {\n    var j = 0;\n\n    for (var i = 0; i < length; i += 2, ++j) {\n      var left = results[i];\n      var right = i + 1 === length ? left : results[i + 1];\n      var data = Buffer.concat([left, right]);\n      results[j] = digestFn(data);\n    }\n\n    length = j;\n  }\n\n  return results[0];\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/merkle-lib/fastRoot.js"],"names":["module","exports","fastRoot","values","digestFn","Array","isArray","TypeError","length","results","concat","j","i","left","right","data","Buffer"],"mappings":"AAAA;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AACpD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAL,EAA4B,MAAMI,SAAS,CAAC,uBAAD,CAAf;AAC5B,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC,MAAMG,SAAS,CAAC,0BAAD,CAAf;AAEpC,MAAIC,MAAM,GAAGL,MAAM,CAACK,MAApB;AACA,MAAIC,OAAO,GAAGN,MAAM,CAACO,MAAP,EAAd;;AAEA,SAAOF,MAAM,GAAG,CAAhB,EAAmB;AACjB,QAAIG,CAAC,GAAG,CAAR;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,IAAI,CAAL,EAAQ,EAAED,CAAtC,EAAyC;AACvC,UAAIE,IAAI,GAAGJ,OAAO,CAACG,CAAD,CAAlB;AACA,UAAIE,KAAK,GAAGF,CAAC,GAAG,CAAJ,KAAUJ,MAAV,GAAmBK,IAAnB,GAA0BJ,OAAO,CAACG,CAAC,GAAG,CAAL,CAA7C;AACA,UAAIG,IAAI,GAAGC,MAAM,CAACN,MAAP,CAAc,CAACG,IAAD,EAAOC,KAAP,CAAd,CAAX;AAEAL,MAAAA,OAAO,CAACE,CAAD,CAAP,GAAaP,QAAQ,CAACW,IAAD,CAArB;AACD;;AAEDP,IAAAA,MAAM,GAAGG,CAAT;AACD;;AAED,SAAOF,OAAO,CAAC,CAAD,CAAd;AACD,CAtBD","sourcesContent":["// constant-space merkle root calculation algorithm\nmodule.exports = function fastRoot (values, digestFn) {\n  if (!Array.isArray(values)) throw TypeError('Expected values Array')\n  if (typeof digestFn !== 'function') throw TypeError('Expected digest Function')\n\n  var length = values.length\n  var results = values.concat()\n\n  while (length > 1) {\n    var j = 0\n\n    for (var i = 0; i < length; i += 2, ++j) {\n      var left = results[i]\n      var right = i + 1 === length ? left : results[i + 1]\n      var data = Buffer.concat([left, right])\n\n      results[j] = digestFn(data)\n    }\n\n    length = j\n  }\n\n  return results[0]\n}\n"]},"metadata":{},"sourceType":"script"}