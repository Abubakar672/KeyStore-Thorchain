{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst HRS = 60 * 60;\nconst DAY = HRS * 24;\n/**\n * @name addTime\n * @summary Add together two Time arrays\n */\n\nfunction addTime(a, b) {\n  return {\n    days: a.days + b.days,\n    hours: a.hours + b.hours,\n    milliseconds: a.milliseconds + b.milliseconds,\n    minutes: a.minutes + b.minutes,\n    seconds: a.seconds + b.seconds\n  };\n}\n\nconst ZERO = {\n  days: 0,\n  hours: 0,\n  milliseconds: 0,\n  minutes: 0,\n  seconds: 0\n};\n\nfunction extractDays(milliseconds, hrs) {\n  const days = Math.floor(hrs / 24);\n  return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n    days\n  }), extractTime(milliseconds - days * DAY * 1000));\n}\n\nfunction extractHrs(milliseconds, mins) {\n  const hrs = mins / 60;\n\n  if (hrs < 24) {\n    const hours = Math.floor(hrs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      hours\n    }), extractTime(milliseconds - hours * HRS * 1000));\n  }\n\n  return extractDays(milliseconds, hrs);\n}\n\nfunction extractMins(milliseconds, secs) {\n  const mins = secs / 60;\n\n  if (mins < 60) {\n    const minutes = Math.floor(mins);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      minutes\n    }), extractTime(milliseconds - minutes * 60 * 1000));\n  }\n\n  return extractHrs(milliseconds, mins);\n}\n\nfunction extractSecs(milliseconds) {\n  const secs = milliseconds / 1000;\n\n  if (secs < 60) {\n    const seconds = Math.floor(secs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      seconds\n    }), extractTime(milliseconds - seconds * 1000));\n  }\n\n  return extractMins(milliseconds, secs);\n}\n/**\n * @name extractTime\n * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}\n * @example\n * <BR>\n *\n * ```javascript\n * import { extractTime } from '@polkadot/util';\n *\n * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0\n * ```\n */\n\n\nexport function extractTime(milliseconds) {\n  if (!milliseconds) {\n    return ZERO;\n  } else if (milliseconds < 1000) {\n    return _objectSpread(_objectSpread({}, ZERO), {}, {\n      milliseconds\n    });\n  }\n\n  return extractSecs(milliseconds);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/extractTime.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","HRS","DAY","addTime","a","b","days","hours","milliseconds","minutes","seconds","ZERO","extractDays","hrs","Math","floor","extractTime","extractHrs","mins","extractMins","secs","extractSecs"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst HRS = 60 * 60;\nconst DAY = HRS * 24;\n/**\n * @name addTime\n * @summary Add together two Time arrays\n */\n\nfunction addTime(a, b) {\n  return {\n    days: a.days + b.days,\n    hours: a.hours + b.hours,\n    milliseconds: a.milliseconds + b.milliseconds,\n    minutes: a.minutes + b.minutes,\n    seconds: a.seconds + b.seconds\n  };\n}\n\nconst ZERO = {\n  days: 0,\n  hours: 0,\n  milliseconds: 0,\n  minutes: 0,\n  seconds: 0\n};\n\nfunction extractDays(milliseconds, hrs) {\n  const days = Math.floor(hrs / 24);\n  return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n    days\n  }), extractTime(milliseconds - days * DAY * 1000));\n}\n\nfunction extractHrs(milliseconds, mins) {\n  const hrs = mins / 60;\n\n  if (hrs < 24) {\n    const hours = Math.floor(hrs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      hours\n    }), extractTime(milliseconds - hours * HRS * 1000));\n  }\n\n  return extractDays(milliseconds, hrs);\n}\n\nfunction extractMins(milliseconds, secs) {\n  const mins = secs / 60;\n\n  if (mins < 60) {\n    const minutes = Math.floor(mins);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      minutes\n    }), extractTime(milliseconds - minutes * 60 * 1000));\n  }\n\n  return extractHrs(milliseconds, mins);\n}\n\nfunction extractSecs(milliseconds) {\n  const secs = milliseconds / 1000;\n\n  if (secs < 60) {\n    const seconds = Math.floor(secs);\n    return addTime(_objectSpread(_objectSpread({}, ZERO), {}, {\n      seconds\n    }), extractTime(milliseconds - seconds * 1000));\n  }\n\n  return extractMins(milliseconds, secs);\n}\n/**\n * @name extractTime\n * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}\n * @example\n * <BR>\n *\n * ```javascript\n * import { extractTime } from '@polkadot/util';\n *\n * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0\n * ```\n */\n\n\nexport function extractTime(milliseconds) {\n  if (!milliseconds) {\n    return ZERO;\n  } else if (milliseconds < 1000) {\n    return _objectSpread(_objectSpread({}, ZERO), {}, {\n      milliseconds\n    });\n  }\n\n  return extractSecs(milliseconds);\n}"]},"metadata":{},"sourceType":"module"}