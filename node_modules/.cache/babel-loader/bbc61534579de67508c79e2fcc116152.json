{"ast":null,"code":"\"use strict\"; // tslint:disable\n\n/**\n * Gaia-Lite for Cosmos\n * A REST interface for state queries, transaction generation and broadcasting.\n *\n * The version of the OpenAPI document: 3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar globalImportUrl = __importStar(require(\"url\"));\n\nvar axios_1 = __importDefault(require(\"axios\")); // Some imports not used depending on template conditions\n// @ts-ignore\n\n\nvar base_1 = require(\"./base\");\n/**\n * AuthApi - axios parameter creator\n * @export\n */\n\n\nexports.AuthApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get the account information on blockchain\n     * @param {string} address Account address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authAccountsAddressGet: function (address, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'address' is not null or undefined\n\n\n      if (address === null || address === undefined) {\n        throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling authAccountsAddressGet.\");\n      }\n\n      var localVarPath = \"/auth/accounts/{address}\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * AuthApi - functional programming interface\n * @export\n */\n\n\nexports.AuthApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get the account information on blockchain\n     * @param {string} address Account address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authAccountsAddressGet: function (address, options) {\n      var localVarAxiosArgs = exports.AuthApiAxiosParamCreator(configuration).authAccountsAddressGet(address, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * AuthApi - factory interface\n * @export\n */\n\n\nexports.AuthApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Get the account information on blockchain\n     * @param {string} address Account address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    authAccountsAddressGet: function (address, options) {\n      return exports.AuthApiFp(configuration).authAccountsAddressGet(address, options)(axios, basePath);\n    }\n  };\n};\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\n\n\nvar AuthApi =\n/** @class */\nfunction (_super) {\n  __extends(AuthApi, _super);\n\n  function AuthApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Get the account information on blockchain\n   * @param {string} address Account address\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof AuthApi\n   */\n\n\n  AuthApi.prototype.authAccountsAddressGet = function (address, options) {\n    return exports.AuthApiFp(this.configuration).authAccountsAddressGet(address, options)(this.axios, this.basePath);\n  };\n\n  return AuthApi;\n}(base_1.BaseAPI);\n\nexports.AuthApi = AuthApi;\n/**\n * BankApi - axios parameter creator\n * @export\n */\n\nexports.BankApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Send coins from one account to another\n     * @param {string} address Account address in bech32 format\n     * @param {SendReq} account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankAccountsAddressTransfersPost: function (address, account, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'address' is not null or undefined\n\n\n      if (address === null || address === undefined) {\n        throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling bankAccountsAddressTransfersPost.\");\n      } // verify required parameter 'account' is not null or undefined\n\n\n      if (account === null || account === undefined) {\n        throw new base_1.RequiredError(\"account\", \"Required parameter account was null or undefined when calling bankAccountsAddressTransfersPost.\");\n      }\n\n      var localVarPath = \"/bank/accounts/{address}/transfers\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof account !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(account !== undefined ? account : {}) : account || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get the account balances\n     * @param {string} address Account address in bech32 format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankBalancesAddressGet: function (address, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'address' is not null or undefined\n\n\n      if (address === null || address === undefined) {\n        throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling bankBalancesAddressGet.\");\n      }\n\n      var localVarPath = \"/bank/balances/{address}\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * BankApi - functional programming interface\n * @export\n */\n\n\nexports.BankApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Send coins from one account to another\n     * @param {string} address Account address in bech32 format\n     * @param {SendReq} account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankAccountsAddressTransfersPost: function (address, account, options) {\n      var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankAccountsAddressTransfersPost(address, account, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get the account balances\n     * @param {string} address Account address in bech32 format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankBalancesAddressGet: function (address, options) {\n      var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankBalancesAddressGet(address, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * BankApi - factory interface\n * @export\n */\n\n\nexports.BankApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Send coins from one account to another\n     * @param {string} address Account address in bech32 format\n     * @param {SendReq} account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankAccountsAddressTransfersPost: function (address, account, options) {\n      return exports.BankApiFp(configuration).bankAccountsAddressTransfersPost(address, account, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get the account balances\n     * @param {string} address Account address in bech32 format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    bankBalancesAddressGet: function (address, options) {\n      return exports.BankApiFp(configuration).bankBalancesAddressGet(address, options)(axios, basePath);\n    }\n  };\n};\n/**\n * BankApi - object-oriented interface\n * @export\n * @class BankApi\n * @extends {BaseAPI}\n */\n\n\nvar BankApi =\n/** @class */\nfunction (_super) {\n  __extends(BankApi, _super);\n\n  function BankApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Send coins from one account to another\n   * @param {string} address Account address in bech32 format\n   * @param {SendReq} account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BankApi\n   */\n\n\n  BankApi.prototype.bankAccountsAddressTransfersPost = function (address, account, options) {\n    return exports.BankApiFp(this.configuration).bankAccountsAddressTransfersPost(address, account, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get the account balances\n   * @param {string} address Account address in bech32 format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof BankApi\n   */\n\n\n  BankApi.prototype.bankBalancesAddressGet = function (address, options) {\n    return exports.BankApiFp(this.configuration).bankBalancesAddressGet(address, options)(this.axios, this.basePath);\n  };\n\n  return BankApi;\n}(base_1.BaseAPI);\n\nexports.BankApi = BankApi;\n/**\n * DistributionApi - axios parameter creator\n * @export\n */\n\nexports.DistributionApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Community pool parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionCommunityPoolGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/distribution/community_pool\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Get the sum of all the rewards earned by delegations by a single delegator\n     * @summary Get the total rewards balance from all delegations\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsGet.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Withdraw all the delegator\\'s delegation rewards\n     * @summary Withdraw all the delegator\\'s delegation rewards\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsPost.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof withdrawRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {}) : withdrawRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query a single delegation reward by a delegator\n     * @summary Query a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.\");\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr))).replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Withdraw a delegator\\'s delegation reward from a single validator\n     * @summary Withdraw a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.\");\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr))).replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof withdrawRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {}) : withdrawRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n     * @summary Get the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressGet.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/withdraw_address\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Replace the delegations\\' rewards withdrawal address for a new one.\n     * @summary Replace the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressPost.\");\n      }\n\n      var localVarPath = \"/distribution/delegators/{delegatorAddr}/withdraw_address\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof withdrawRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {}) : withdrawRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Fee distribution parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionParametersGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/distribution/parameters\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query the distribution information of a single validator\n     * @summary Validator distribution information\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/distribution/validators/{validatorAddr}\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Fee distribution outstanding rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrOutstandingRewardsGet.\");\n      }\n\n      var localVarPath = \"/distribution/validators/{validatorAddr}/outstanding_rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query the commission and self-delegation rewards of validator.\n     * @summary Commission and self-delegation rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsGet.\");\n      }\n\n      var localVarPath = \"/distribution/validators/{validatorAddr}/rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Withdraw the validator\\'s self-delegation and commissions rewards\n     * @summary Withdraw the validator\\'s rewards\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsPost.\");\n      }\n\n      var localVarPath = \"/distribution/validators/{validatorAddr}/rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof withdrawRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {}) : withdrawRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * DistributionApi - functional programming interface\n * @export\n */\n\n\nexports.DistributionApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Community pool parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionCommunityPoolGet: function (options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionCommunityPoolGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Get the sum of all the rewards earned by delegations by a single delegator\n     * @summary Get the total rewards balance from all delegations\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Withdraw all the delegator\\'s delegation rewards\n     * @summary Withdraw all the delegator\\'s delegation rewards\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query a single delegation reward by a delegator\n     * @summary Query a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Withdraw a delegator\\'s delegation reward from a single validator\n     * @summary Withdraw a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n     * @summary Get the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Replace the delegations\\' rewards withdrawal address for a new one.\n     * @summary Replace the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Fee distribution parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionParametersGet: function (options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionParametersGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query the distribution information of a single validator\n     * @summary Validator distribution information\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Fee distribution outstanding rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query the commission and self-delegation rewards of validator.\n     * @summary Commission and self-delegation rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Withdraw the validator\\'s self-delegation and commissions rewards\n     * @summary Withdraw the validator\\'s rewards\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n      var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * DistributionApi - factory interface\n * @export\n */\n\n\nexports.DistributionApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Community pool parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionCommunityPoolGet: function (options) {\n      return exports.DistributionApiFp(configuration).distributionCommunityPoolGet(options)(axios, basePath);\n    },\n\n    /**\n     * Get the sum of all the rewards earned by delegations by a single delegator\n     * @summary Get the total rewards balance from all delegations\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     * Withdraw all the delegator\\'s delegation rewards\n     * @summary Withdraw all the delegator\\'s delegation rewards\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     * Query a single delegation reward by a delegator\n     * @summary Query a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     * Withdraw a delegator\\'s delegation reward from a single validator\n     * @summary Withdraw a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n     * @summary Get the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     * Replace the delegations\\' rewards withdrawal address for a new one.\n     * @summary Replace the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n      return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Fee distribution parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionParametersGet: function (options) {\n      return exports.DistributionApiFp(configuration).distributionParametersGet(options)(axios, basePath);\n    },\n\n    /**\n     * Query the distribution information of a single validator\n     * @summary Validator distribution information\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Fee distribution outstanding rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     * Query the commission and self-delegation rewards of validator.\n     * @summary Commission and self-delegation rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n      return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     * Withdraw the validator\\'s self-delegation and commissions rewards\n     * @summary Withdraw the validator\\'s rewards\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n      return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(axios, basePath);\n    }\n  };\n};\n/**\n * DistributionApi - object-oriented interface\n * @export\n * @class DistributionApi\n * @extends {BaseAPI}\n */\n\n\nvar DistributionApi =\n/** @class */\nfunction (_super) {\n  __extends(DistributionApi, _super);\n\n  function DistributionApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Community pool parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionCommunityPoolGet = function (options) {\n    return exports.DistributionApiFp(this.configuration).distributionCommunityPoolGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Get the sum of all the rewards earned by delegations by a single delegator\n   * @summary Get the total rewards balance from all delegations\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsGet = function (delegatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   * Withdraw all the delegator\\'s delegation rewards\n   * @summary Withdraw all the delegator\\'s delegation rewards\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {WithdrawRewardsReq} [withdrawRequestBody]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsPost = function (delegatorAddr, withdrawRequestBody, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query a single delegation reward by a delegator\n   * @summary Query a delegation reward\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   * Withdraw a delegator\\'s delegation reward from a single validator\n   * @summary Withdraw a delegation reward\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {WithdrawRewardsReq} [withdrawRequestBody]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost = function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n   * @summary Get the rewards withdrawal address\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressGet = function (delegatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   * Replace the delegations\\' rewards withdrawal address for a new one.\n   * @summary Replace the rewards withdrawal address\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressPost = function (delegatorAddr, withdrawRequestBody, options) {\n    return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Fee distribution parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionParametersGet = function (options) {\n    return exports.DistributionApiFp(this.configuration).distributionParametersGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Query the distribution information of a single validator\n   * @summary Validator distribution information\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionValidatorsValidatorAddrGet = function (validatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Fee distribution outstanding rewards of a single validator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionValidatorsValidatorAddrOutstandingRewardsGet = function (validatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query the commission and self-delegation rewards of validator.\n   * @summary Commission and self-delegation rewards of a single validator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsGet = function (validatorAddr, options) {\n    return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   * Withdraw the validator\\'s self-delegation and commissions rewards\n   * @summary Withdraw the validator\\'s rewards\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {WithdrawRewardsReq} [withdrawRequestBody]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DistributionApi\n   */\n\n\n  DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsPost = function (validatorAddr, withdrawRequestBody, options) {\n    return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n  };\n\n  return DistributionApi;\n}(base_1.BaseAPI);\n\nexports.DistributionApi = DistributionApi;\n/**\n * GaiaRESTApi - axios parameter creator\n * @export\n */\n\nexports.GaiaRESTApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Information about the connected node\n     * @summary The properties of the connected node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    nodeInfoGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/node_info\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * GaiaRESTApi - functional programming interface\n * @export\n */\n\n\nexports.GaiaRESTApiFp = function (configuration) {\n  return {\n    /**\n     * Information about the connected node\n     * @summary The properties of the connected node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    nodeInfoGet: function (options) {\n      var localVarAxiosArgs = exports.GaiaRESTApiAxiosParamCreator(configuration).nodeInfoGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * GaiaRESTApi - factory interface\n * @export\n */\n\n\nexports.GaiaRESTApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * Information about the connected node\n     * @summary The properties of the connected node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    nodeInfoGet: function (options) {\n      return exports.GaiaRESTApiFp(configuration).nodeInfoGet(options)(axios, basePath);\n    }\n  };\n};\n/**\n * GaiaRESTApi - object-oriented interface\n * @export\n * @class GaiaRESTApi\n * @extends {BaseAPI}\n */\n\n\nvar GaiaRESTApi =\n/** @class */\nfunction (_super) {\n  __extends(GaiaRESTApi, _super);\n\n  function GaiaRESTApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Information about the connected node\n   * @summary The properties of the connected node\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GaiaRESTApi\n   */\n\n\n  GaiaRESTApi.prototype.nodeInfoGet = function (options) {\n    return exports.GaiaRESTApiFp(this.configuration).nodeInfoGet(options)(this.axios, this.basePath);\n  };\n\n  return GaiaRESTApi;\n}(base_1.BaseAPI);\n\nexports.GaiaRESTApi = GaiaRESTApi;\n/**\n * GovernanceApi - axios parameter creator\n * @export\n */\n\nexports.GovernanceApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n     * @summary Query governance deposit parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersDepositGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/gov/parameters/deposit\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query governance tally parameters\n     * @summary Query governance tally parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersTallyingGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/gov/parameters/tallying\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query governance voting parameters. The voting_period units are in nanoseconds.\n     * @summary Query governance voting parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersVotingGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/gov/parameters/voting\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query proposals information with parameters\n     * @summary Query proposals\n     * @param {string} [voter] voter address\n     * @param {string} [depositor] depositor address\n     * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsGet: function (voter, depositor, status, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/gov/proposals\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (voter !== undefined) {\n        localVarQueryParameter[\"voter\"] = voter;\n      }\n\n      if (depositor !== undefined) {\n        localVarQueryParameter[\"depositor\"] = depositor;\n      }\n\n      if (status !== undefined) {\n        localVarQueryParameter[\"status\"] = status;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Generate a parameter change proposal transaction\n     * @summary Generate a parameter change proposal transaction\n     * @param {ParamChangeProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsParamChangePost: function (postProposalBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'postProposalBody' is not null or undefined\n\n\n      if (postProposalBody === null || postProposalBody === undefined) {\n        throw new base_1.RequiredError(\"postProposalBody\", \"Required parameter postProposalBody was null or undefined when calling govProposalsParamChangePost.\");\n      }\n\n      var localVarPath = \"/gov/proposals/param_change\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof postProposalBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {}) : postProposalBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Send transaction to submit a proposal\n     * @summary Submit a proposal\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsPost: function (postProposalBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'postProposalBody' is not null or undefined\n\n\n      if (postProposalBody === null || postProposalBody === undefined) {\n        throw new base_1.RequiredError(\"postProposalBody\", \"Required parameter postProposalBody was null or undefined when calling govProposalsPost.\");\n      }\n\n      var localVarPath = \"/gov/proposals\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof postProposalBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {}) : postProposalBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query deposit by proposalId and depositor address\n     * @summary Query deposit\n     * @param {string} proposalId proposal id\n     * @param {string} depositor Bech32 depositor address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.\");\n      } // verify required parameter 'depositor' is not null or undefined\n\n\n      if (depositor === null || depositor === undefined) {\n        throw new base_1.RequiredError(\"depositor\", \"Required parameter depositor was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/deposits/{depositor}\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId))).replace(\"{\" + \"depositor\" + \"}\", encodeURIComponent(String(depositor)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query deposits by proposalId\n     * @summary Query deposits\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsGet: function (proposalId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/deposits\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Send transaction to deposit tokens to a proposal\n     * @summary Deposit tokens to a proposal\n     * @param {string} proposalId proposal id\n     * @param {DepositReq} postDepositBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsPost.\");\n      } // verify required parameter 'postDepositBody' is not null or undefined\n\n\n      if (postDepositBody === null || postDepositBody === undefined) {\n        throw new base_1.RequiredError(\"postDepositBody\", \"Required parameter postDepositBody was null or undefined when calling govProposalsProposalIdDepositsPost.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/deposits\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof postDepositBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postDepositBody !== undefined ? postDepositBody : {}) : postDepositBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query a proposal by id\n     * @summary Query a proposal\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdGet: function (proposalId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query for the proposer for a proposal\n     * @summary Query proposer\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdProposerGet: function (proposalId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdProposerGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/proposer\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n     * @summary Get a proposal\\'s tally result at the current time\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdTallyGet: function (proposalId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdTallyGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/tally\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query voters information by proposalId\n     * @summary Query voters\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesGet: function (proposalId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/votes\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Send transaction to vote a proposal\n     * @summary Vote a proposal\n     * @param {string} proposalId proposal id\n     * @param {VoteReq} postVoteBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesPost.\");\n      } // verify required parameter 'postVoteBody' is not null or undefined\n\n\n      if (postVoteBody === null || postVoteBody === undefined) {\n        throw new base_1.RequiredError(\"postVoteBody\", \"Required parameter postVoteBody was null or undefined when calling govProposalsProposalIdVotesPost.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/votes\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof postVoteBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(postVoteBody !== undefined ? postVoteBody : {}) : postVoteBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Query vote information by proposal Id and voter address\n     * @summary Query vote\n     * @param {string} proposalId proposal id\n     * @param {string} voter Bech32 voter address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'proposalId' is not null or undefined\n\n\n      if (proposalId === null || proposalId === undefined) {\n        throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesVoterGet.\");\n      } // verify required parameter 'voter' is not null or undefined\n\n\n      if (voter === null || voter === undefined) {\n        throw new base_1.RequiredError(\"voter\", \"Required parameter voter was null or undefined when calling govProposalsProposalIdVotesVoterGet.\");\n      }\n\n      var localVarPath = \"/gov/proposals/{proposalId}/votes/{voter}\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId))).replace(\"{\" + \"voter\" + \"}\", encodeURIComponent(String(voter)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * GovernanceApi - functional programming interface\n * @export\n */\n\n\nexports.GovernanceApiFp = function (configuration) {\n  return {\n    /**\n     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n     * @summary Query governance deposit parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersDepositGet: function (options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersDepositGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query governance tally parameters\n     * @summary Query governance tally parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersTallyingGet: function (options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersTallyingGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query governance voting parameters. The voting_period units are in nanoseconds.\n     * @summary Query governance voting parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersVotingGet: function (options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersVotingGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query proposals information with parameters\n     * @summary Query proposals\n     * @param {string} [voter] voter address\n     * @param {string} [depositor] depositor address\n     * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsGet: function (voter, depositor, status, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsGet(voter, depositor, status, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Generate a parameter change proposal transaction\n     * @summary Generate a parameter change proposal transaction\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsParamChangePost: function (postProposalBody, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsParamChangePost(postProposalBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Send transaction to submit a proposal\n     * @summary Submit a proposal\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsPost: function (postProposalBody, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsPost(postProposalBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query deposit by proposalId and depositor address\n     * @summary Query deposit\n     * @param {string} proposalId proposal id\n     * @param {string} depositor Bech32 depositor address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query deposits by proposalId\n     * @summary Query deposits\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsGet: function (proposalId, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsGet(proposalId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Send transaction to deposit tokens to a proposal\n     * @summary Deposit tokens to a proposal\n     * @param {string} proposalId proposal id\n     * @param {DepositReq} postDepositBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query a proposal by id\n     * @summary Query a proposal\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdGet: function (proposalId, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdGet(proposalId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query for the proposer for a proposal\n     * @summary Query proposer\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdProposerGet: function (proposalId, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdProposerGet(proposalId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n     * @summary Get a proposal\\'s tally result at the current time\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdTallyGet: function (proposalId, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdTallyGet(proposalId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query voters information by proposalId\n     * @summary Query voters\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesGet: function (proposalId, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesGet(proposalId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Send transaction to vote a proposal\n     * @summary Vote a proposal\n     * @param {string} proposalId proposal id\n     * @param {VoteReq} postVoteBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Query vote information by proposal Id and voter address\n     * @summary Query vote\n     * @param {string} proposalId proposal id\n     * @param {string} voter Bech32 voter address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n      var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * GovernanceApi - factory interface\n * @export\n */\n\n\nexports.GovernanceApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n     * @summary Query governance deposit parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersDepositGet: function (options) {\n      return exports.GovernanceApiFp(configuration).govParametersDepositGet(options)(axios, basePath);\n    },\n\n    /**\n     * Query governance tally parameters\n     * @summary Query governance tally parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersTallyingGet: function (options) {\n      return exports.GovernanceApiFp(configuration).govParametersTallyingGet(options)(axios, basePath);\n    },\n\n    /**\n     * Query governance voting parameters. The voting_period units are in nanoseconds.\n     * @summary Query governance voting parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govParametersVotingGet: function (options) {\n      return exports.GovernanceApiFp(configuration).govParametersVotingGet(options)(axios, basePath);\n    },\n\n    /**\n     * Query proposals information with parameters\n     * @summary Query proposals\n     * @param {string} [voter] voter address\n     * @param {string} [depositor] depositor address\n     * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsGet: function (voter, depositor, status, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsGet(voter, depositor, status, options)(axios, basePath);\n    },\n\n    /**\n     * Generate a parameter change proposal transaction\n     * @summary Generate a parameter change proposal transaction\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsParamChangePost: function (postProposalBody, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsParamChangePost(postProposalBody, options)(axios, basePath);\n    },\n\n    /**\n     * Send transaction to submit a proposal\n     * @summary Submit a proposal\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsPost: function (postProposalBody, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsPost(postProposalBody, options)(axios, basePath);\n    },\n\n    /**\n     * Query deposit by proposalId and depositor address\n     * @summary Query deposit\n     * @param {string} proposalId proposal id\n     * @param {string} depositor Bech32 depositor address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(axios, basePath);\n    },\n\n    /**\n     * Query deposits by proposalId\n     * @summary Query deposits\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsGet: function (proposalId, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsGet(proposalId, options)(axios, basePath);\n    },\n\n    /**\n     * Send transaction to deposit tokens to a proposal\n     * @summary Deposit tokens to a proposal\n     * @param {string} proposalId proposal id\n     * @param {DepositReq} postDepositBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(axios, basePath);\n    },\n\n    /**\n     * Query a proposal by id\n     * @summary Query a proposal\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdGet: function (proposalId, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdGet(proposalId, options)(axios, basePath);\n    },\n\n    /**\n     * Query for the proposer for a proposal\n     * @summary Query proposer\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdProposerGet: function (proposalId, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdProposerGet(proposalId, options)(axios, basePath);\n    },\n\n    /**\n     * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n     * @summary Get a proposal\\'s tally result at the current time\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdTallyGet: function (proposalId, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdTallyGet(proposalId, options)(axios, basePath);\n    },\n\n    /**\n     * Query voters information by proposalId\n     * @summary Query voters\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesGet: function (proposalId, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesGet(proposalId, options)(axios, basePath);\n    },\n\n    /**\n     * Send transaction to vote a proposal\n     * @summary Vote a proposal\n     * @param {string} proposalId proposal id\n     * @param {VoteReq} postVoteBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(axios, basePath);\n    },\n\n    /**\n     * Query vote information by proposal Id and voter address\n     * @summary Query vote\n     * @param {string} proposalId proposal id\n     * @param {string} voter Bech32 voter address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n      return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(axios, basePath);\n    }\n  };\n};\n/**\n * GovernanceApi - object-oriented interface\n * @export\n * @class GovernanceApi\n * @extends {BaseAPI}\n */\n\n\nvar GovernanceApi =\n/** @class */\nfunction (_super) {\n  __extends(GovernanceApi, _super);\n\n  function GovernanceApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n   * @summary Query governance deposit parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govParametersDepositGet = function (options) {\n    return exports.GovernanceApiFp(this.configuration).govParametersDepositGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Query governance tally parameters\n   * @summary Query governance tally parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govParametersTallyingGet = function (options) {\n    return exports.GovernanceApiFp(this.configuration).govParametersTallyingGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Query governance voting parameters. The voting_period units are in nanoseconds.\n   * @summary Query governance voting parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govParametersVotingGet = function (options) {\n    return exports.GovernanceApiFp(this.configuration).govParametersVotingGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Query proposals information with parameters\n   * @summary Query proposals\n   * @param {string} [voter] voter address\n   * @param {string} [depositor] depositor address\n   * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsGet = function (voter, depositor, status, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsGet(voter, depositor, status, options)(this.axios, this.basePath);\n  };\n  /**\n   * Generate a parameter change proposal transaction\n   * @summary Generate a parameter change proposal transaction\n   * @param {ParamChangeProposalReq} postProposalBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsParamChangePost = function (postProposalBody, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsParamChangePost(postProposalBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Send transaction to submit a proposal\n   * @summary Submit a proposal\n   * @param {PostProposalReq} postProposalBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsPost = function (postProposalBody, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsPost(postProposalBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query deposit by proposalId and depositor address\n   * @summary Query deposit\n   * @param {string} proposalId proposal id\n   * @param {string} depositor Bech32 depositor address\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdDepositsDepositorGet = function (proposalId, depositor, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query deposits by proposalId\n   * @summary Query deposits\n   * @param {string} proposalId\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdDepositsGet = function (proposalId, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsGet(proposalId, options)(this.axios, this.basePath);\n  };\n  /**\n   * Send transaction to deposit tokens to a proposal\n   * @summary Deposit tokens to a proposal\n   * @param {string} proposalId proposal id\n   * @param {DepositReq} postDepositBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdDepositsPost = function (proposalId, postDepositBody, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query a proposal by id\n   * @summary Query a proposal\n   * @param {string} proposalId\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdGet = function (proposalId, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdGet(proposalId, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query for the proposer for a proposal\n   * @summary Query proposer\n   * @param {string} proposalId\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdProposerGet = function (proposalId, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdProposerGet(proposalId, options)(this.axios, this.basePath);\n  };\n  /**\n   * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n   * @summary Get a proposal\\'s tally result at the current time\n   * @param {string} proposalId proposal id\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdTallyGet = function (proposalId, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdTallyGet(proposalId, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query voters information by proposalId\n   * @summary Query voters\n   * @param {string} proposalId proposal id\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdVotesGet = function (proposalId, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesGet(proposalId, options)(this.axios, this.basePath);\n  };\n  /**\n   * Send transaction to vote a proposal\n   * @summary Vote a proposal\n   * @param {string} proposalId proposal id\n   * @param {VoteReq} postVoteBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdVotesPost = function (proposalId, postVoteBody, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(this.axios, this.basePath);\n  };\n  /**\n   * Query vote information by proposal Id and voter address\n   * @summary Query vote\n   * @param {string} proposalId proposal id\n   * @param {string} voter Bech32 voter address\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof GovernanceApi\n   */\n\n\n  GovernanceApi.prototype.govProposalsProposalIdVotesVoterGet = function (proposalId, voter, options) {\n    return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(this.axios, this.basePath);\n  };\n\n  return GovernanceApi;\n}(base_1.BaseAPI);\n\nexports.GovernanceApi = GovernanceApi;\n/**\n * IBCApi - axios parameter creator\n * @export\n */\n\nexports.IBCApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Channel open-init\n     * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'channelOpenInitRequestBody' is not null or undefined\n\n\n      if (channelOpenInitRequestBody === null || channelOpenInitRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelOpenInitRequestBody\", \"Required parameter channelOpenInitRequestBody was null or undefined when calling ibcChannelsOpenInitPost.\");\n      }\n\n      var localVarPath = \"/ibc/channels/open-init\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelOpenInitRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelOpenInitRequestBody !== undefined ? channelOpenInitRequestBody : {}) : channelOpenInitRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-try\n     * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'channelOpenTryRequestBody' is not null or undefined\n\n\n      if (channelOpenTryRequestBody === null || channelOpenTryRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelOpenTryRequestBody\", \"Required parameter channelOpenTryRequestBody was null or undefined when calling ibcChannelsOpenTryPost.\");\n      }\n\n      var localVarPath = \"/ibc/channels/open-try\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelOpenTryRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelOpenTryRequestBody !== undefined ? channelOpenTryRequestBody : {}) : channelOpenTryRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query client state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdClientStateGet.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/client-state\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query connections of a client\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdConnectionsGet.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/connections\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query cliet consensus-state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdConsensusStateGet.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/consensus-state\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Submit misbehaviour\n     * @param {string} clientId Client ID\n     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdMisbehaviourPost.\");\n      } // verify required parameter 'submitMisbehaviourRequestBody' is not null or undefined\n\n\n      if (submitMisbehaviourRequestBody === null || submitMisbehaviourRequestBody === undefined) {\n        throw new base_1.RequiredError(\"submitMisbehaviourRequestBody\", \"Required parameter submitMisbehaviourRequestBody was null or undefined when calling ibcClientsClientIdMisbehaviourPost.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/misbehaviour\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof submitMisbehaviourRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(submitMisbehaviourRequestBody !== undefined ? submitMisbehaviourRequestBody : {}) : submitMisbehaviourRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query client root\n     * @param {string} clientId Client ID\n     * @param {number} height Root height\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdRootsHeightGet.\");\n      } // verify required parameter 'height' is not null or undefined\n\n\n      if (height === null || height === undefined) {\n        throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling ibcClientsClientIdRootsHeightGet.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/roots/{height}\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId))).replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Update client\n     * @param {string} clientId Client ID\n     * @param {UpdateClientReq} updateClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'clientId' is not null or undefined\n\n\n      if (clientId === null || clientId === undefined) {\n        throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdUpdatePost.\");\n      } // verify required parameter 'updateClientRequestBody' is not null or undefined\n\n\n      if (updateClientRequestBody === null || updateClientRequestBody === undefined) {\n        throw new base_1.RequiredError(\"updateClientRequestBody\", \"Required parameter updateClientRequestBody was null or undefined when calling ibcClientsClientIdUpdatePost.\");\n      }\n\n      var localVarPath = \"/ibc/clients/{client-id}/update\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof updateClientRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateClientRequestBody !== undefined ? updateClientRequestBody : {}) : updateClientRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Create client\n     * @param {CreateClientReq} createClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsPost: function (createClientRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'createClientRequestBody' is not null or undefined\n\n\n      if (createClientRequestBody === null || createClientRequestBody === undefined) {\n        throw new base_1.RequiredError(\"createClientRequestBody\", \"Required parameter createClientRequestBody was null or undefined when calling ibcClientsPost.\");\n      }\n\n      var localVarPath = \"/ibc/clients\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof createClientRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(createClientRequestBody !== undefined ? createClientRequestBody : {}) : createClientRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query connection\n     * @param {string} connectionId Connection ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'connectionId' is not null or undefined\n\n\n      if (connectionId === null || connectionId === undefined) {\n        throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdGet.\");\n      }\n\n      var localVarPath = \"/ibc/connections/{connection-id}\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-ack\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'connectionId' is not null or undefined\n\n\n      if (connectionId === null || connectionId === undefined) {\n        throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.\");\n      } // verify required parameter 'connectionOpenAckRequestBody' is not null or undefined\n\n\n      if (connectionOpenAckRequestBody === null || connectionOpenAckRequestBody === undefined) {\n        throw new base_1.RequiredError(\"connectionOpenAckRequestBody\", \"Required parameter connectionOpenAckRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.\");\n      }\n\n      var localVarPath = \"/ibc/connections/{connection-id}/open-ack\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof connectionOpenAckRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(connectionOpenAckRequestBody !== undefined ? connectionOpenAckRequestBody : {}) : connectionOpenAckRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-confirm\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'connectionId' is not null or undefined\n\n\n      if (connectionId === null || connectionId === undefined) {\n        throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.\");\n      } // verify required parameter 'connectionOpenConfirmRequestBody' is not null or undefined\n\n\n      if (connectionOpenConfirmRequestBody === null || connectionOpenConfirmRequestBody === undefined) {\n        throw new base_1.RequiredError(\"connectionOpenConfirmRequestBody\", \"Required parameter connectionOpenConfirmRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.\");\n      }\n\n      var localVarPath = \"/ibc/connections/{connection-id}/open-confirm\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof connectionOpenConfirmRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(connectionOpenConfirmRequestBody !== undefined ? connectionOpenConfirmRequestBody : {}) : connectionOpenConfirmRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-init\n     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'connectionOpenInitRequestBody' is not null or undefined\n\n\n      if (connectionOpenInitRequestBody === null || connectionOpenInitRequestBody === undefined) {\n        throw new base_1.RequiredError(\"connectionOpenInitRequestBody\", \"Required parameter connectionOpenInitRequestBody was null or undefined when calling ibcConnectionsOpenInitPost.\");\n      }\n\n      var localVarPath = \"/ibc/connections/open-init\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof connectionOpenInitRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(connectionOpenInitRequestBody !== undefined ? connectionOpenInitRequestBody : {}) : connectionOpenInitRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-try\n     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'connectionOpenTryRequestBody' is not null or undefined\n\n\n      if (connectionOpenTryRequestBody === null || connectionOpenTryRequestBody === undefined) {\n        throw new base_1.RequiredError(\"connectionOpenTryRequestBody\", \"Required parameter connectionOpenTryRequestBody was null or undefined when calling ibcConnectionsOpenTryPost.\");\n      }\n\n      var localVarPath = \"/ibc/connections/open-try\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof connectionOpenTryRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(connectionOpenTryRequestBody !== undefined ? connectionOpenTryRequestBody : {}) : connectionOpenTryRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query header\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcHeaderGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/ibc/header\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query node consensus-state\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcNodeStateGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/ibc/node-state\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Receive packet\n     * @param {ReceivedPacketReq} receivePacketRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'receivePacketRequestBody' is not null or undefined\n\n\n      if (receivePacketRequestBody === null || receivePacketRequestBody === undefined) {\n        throw new base_1.RequiredError(\"receivePacketRequestBody\", \"Required parameter receivePacketRequestBody was null or undefined when calling ibcPacketsReceivePost.\");\n      }\n\n      var localVarPath = \"/ibc/packets/receive\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof receivePacketRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(receivePacketRequestBody !== undefined ? receivePacketRequestBody : {}) : receivePacketRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query IBC path\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPathGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/ibc/path\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Channel close-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n      } // verify required parameter 'channelCloseConfirmRequestBody' is not null or undefined\n\n\n      if (channelCloseConfirmRequestBody === null || channelCloseConfirmRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelCloseConfirmRequestBody\", \"Required parameter channelCloseConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/close-confirm\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelCloseConfirmRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelCloseConfirmRequestBody !== undefined ? channelCloseConfirmRequestBody : {}) : channelCloseConfirmRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Channel close-init\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n      } // verify required parameter 'channelCloseInitRequestBody' is not null or undefined\n\n\n      if (channelCloseInitRequestBody === null || channelCloseInitRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelCloseInitRequestBody\", \"Required parameter channelCloseInitRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/close-init\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelCloseInitRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelCloseInitRequestBody !== undefined ? channelCloseInitRequestBody : {}) : channelCloseInitRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query channel\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (prove !== undefined) {\n        localVarQueryParameter[\"prove\"] = prove;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query next sequence receive\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/next-sequence-recv\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-ack\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n      } // verify required parameter 'channelOpenAckRequestBody' is not null or undefined\n\n\n      if (channelOpenAckRequestBody === null || channelOpenAckRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelOpenAckRequestBody\", \"Required parameter channelOpenAckRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/open-ack\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelOpenAckRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelOpenAckRequestBody !== undefined ? channelOpenAckRequestBody : {}) : channelOpenAckRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n      } // verify required parameter 'channelOpenConfirmRequestBody' is not null or undefined\n\n\n      if (channelOpenConfirmRequestBody === null || channelOpenConfirmRequestBody === undefined) {\n        throw new base_1.RequiredError(\"channelOpenConfirmRequestBody\", \"Required parameter channelOpenConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/open-confirm\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof channelOpenConfirmRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(channelOpenConfirmRequestBody !== undefined ? channelOpenConfirmRequestBody : {}) : channelOpenConfirmRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Transfer token\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {TransferTokenReq} transferTokenRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'portId' is not null or undefined\n\n\n      if (portId === null || portId === undefined) {\n        throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n      } // verify required parameter 'channelId' is not null or undefined\n\n\n      if (channelId === null || channelId === undefined) {\n        throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n      } // verify required parameter 'transferTokenRequestBody' is not null or undefined\n\n\n      if (transferTokenRequestBody === null || transferTokenRequestBody === undefined) {\n        throw new base_1.RequiredError(\"transferTokenRequestBody\", \"Required parameter transferTokenRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n      }\n\n      var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/transfer\".replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId))).replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof transferTokenRequestBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(transferTokenRequestBody !== undefined ? transferTokenRequestBody : {}) : transferTokenRequestBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * IBCApi - functional programming interface\n * @export\n */\n\n\nexports.IBCApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Channel open-init\n     * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-try\n     * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query client state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query connections of a client\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query cliet consensus-state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Submit misbehaviour\n     * @param {string} clientId Client ID\n     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query client root\n     * @param {string} clientId Client ID\n     * @param {number} height Root height\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Update client\n     * @param {string} clientId Client ID\n     * @param {UpdateClientReq} updateClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Create client\n     * @param {CreateClientReq} createClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsPost: function (createClientRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsPost(createClientRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query connection\n     * @param {string} connectionId Connection ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-ack\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-confirm\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-init\n     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Connection open-try\n     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query header\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcHeaderGet: function (options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcHeaderGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query node consensus-state\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcNodeStateGet: function (options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcNodeStateGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Receive packet\n     * @param {ReceivedPacketReq} receivePacketRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query IBC path\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPathGet: function (options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPathGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Channel close-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Channel close-init\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query channel\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query next sequence receive\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-ack\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Channel open-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Transfer token\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {TransferTokenReq} transferTokenRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n      var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * IBCApi - factory interface\n * @export\n */\n\n\nexports.IBCApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Channel open-init\n     * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Channel open-try\n     * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query client state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query connections of a client\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query cliet consensus-state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Submit misbehaviour\n     * @param {string} clientId Client ID\n     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query client root\n     * @param {string} clientId Client ID\n     * @param {number} height Root height\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Update client\n     * @param {string} clientId Client ID\n     * @param {UpdateClientReq} updateClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Create client\n     * @param {CreateClientReq} createClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcClientsPost: function (createClientRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcClientsPost(createClientRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query connection\n     * @param {string} connectionId Connection ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n      return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Connection open-ack\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Connection open-confirm\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Connection open-init\n     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Connection open-try\n     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query header\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcHeaderGet: function (options) {\n      return exports.IBCApiFp(configuration).ibcHeaderGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query node consensus-state\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcNodeStateGet: function (options) {\n      return exports.IBCApiFp(configuration).ibcNodeStateGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Receive packet\n     * @param {ReceivedPacketReq} receivePacketRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query IBC path\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPathGet: function (options) {\n      return exports.IBCApiFp(configuration).ibcPathGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Channel close-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Channel close-init\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query channel\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query next sequence receive\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Channel open-ack\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Channel open-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Transfer token\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {TransferTokenReq} transferTokenRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n      return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(axios, basePath);\n    }\n  };\n};\n/**\n * IBCApi - object-oriented interface\n * @export\n * @class IBCApi\n * @extends {BaseAPI}\n */\n\n\nvar IBCApi =\n/** @class */\nfunction (_super) {\n  __extends(IBCApi, _super);\n\n  function IBCApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Channel open-init\n   * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcChannelsOpenInitPost = function (channelOpenInitRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Channel open-try\n   * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcChannelsOpenTryPost = function (channelOpenTryRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query client state\n   * @param {string} clientId Client ID\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdClientStateGet = function (clientId, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query connections of a client\n   * @param {string} clientId Client ID\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdConnectionsGet = function (clientId, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query cliet consensus-state\n   * @param {string} clientId Client ID\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdConsensusStateGet = function (clientId, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Submit misbehaviour\n   * @param {string} clientId Client ID\n   * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdMisbehaviourPost = function (clientId, submitMisbehaviourRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query client root\n   * @param {string} clientId Client ID\n   * @param {number} height Root height\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdRootsHeightGet = function (clientId, height, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Update client\n   * @param {string} clientId Client ID\n   * @param {UpdateClientReq} updateClientRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsClientIdUpdatePost = function (clientId, updateClientRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Create client\n   * @param {CreateClientReq} createClientRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcClientsPost = function (createClientRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcClientsPost(createClientRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query connection\n   * @param {string} connectionId Connection ID\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcConnectionsConnectionIdGet = function (connectionId, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Connection open-ack\n   * @param {string} connectionId Connection ID\n   * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcConnectionsConnectionIdOpenAckPost = function (connectionId, connectionOpenAckRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Connection open-confirm\n   * @param {string} connectionId Connection ID\n   * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcConnectionsConnectionIdOpenConfirmPost = function (connectionId, connectionOpenConfirmRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Connection open-init\n   * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcConnectionsOpenInitPost = function (connectionOpenInitRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Connection open-try\n   * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcConnectionsOpenTryPost = function (connectionOpenTryRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query header\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcHeaderGet = function (options) {\n    return exports.IBCApiFp(this.configuration).ibcHeaderGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query node consensus-state\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcNodeStateGet = function (options) {\n    return exports.IBCApiFp(this.configuration).ibcNodeStateGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Receive packet\n   * @param {ReceivedPacketReq} receivePacketRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPacketsReceivePost = function (receivePacketRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query IBC path\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPathGet = function (options) {\n    return exports.IBCApiFp(this.configuration).ibcPathGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Channel close-confirm\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseConfirmPost = function (portId, channelId, channelCloseConfirmRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Channel close-init\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseInitPost = function (portId, channelId, channelCloseInitRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query channel\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {boolean} [prove] Proof of result\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdGet = function (portId, channelId, prove, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query next sequence receive\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet = function (portId, channelId, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Channel open-ack\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenAckPost = function (portId, channelId, channelOpenAckRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Channel open-confirm\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenConfirmPost = function (portId, channelId, channelOpenConfirmRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Transfer token\n   * @param {string} portId Port ID\n   * @param {string} channelId Channel ID\n   * @param {TransferTokenReq} transferTokenRequestBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof IBCApi\n   */\n\n\n  IBCApi.prototype.ibcPortsPortIdChannelsChannelIdTransferPost = function (portId, channelId, transferTokenRequestBody, options) {\n    return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(this.axios, this.basePath);\n  };\n\n  return IBCApi;\n}(base_1.BaseAPI);\n\nexports.IBCApi = IBCApi;\n/**\n * MintApi - axios parameter creator\n * @export\n */\n\nexports.MintApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Current minting annual provisions value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingAnnualProvisionsGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/minting/annual-provisions\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Current minting inflation value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingInflationGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/minting/inflation\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Minting module parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingParametersGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/minting/parameters\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * MintApi - functional programming interface\n * @export\n */\n\n\nexports.MintApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Current minting annual provisions value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingAnnualProvisionsGet: function (options) {\n      var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingAnnualProvisionsGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Current minting inflation value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingInflationGet: function (options) {\n      var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingInflationGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Minting module parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingParametersGet: function (options) {\n      var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingParametersGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * MintApi - factory interface\n * @export\n */\n\n\nexports.MintApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Current minting annual provisions value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingAnnualProvisionsGet: function (options) {\n      return exports.MintApiFp(configuration).mintingAnnualProvisionsGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Current minting inflation value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingInflationGet: function (options) {\n      return exports.MintApiFp(configuration).mintingInflationGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Minting module parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    mintingParametersGet: function (options) {\n      return exports.MintApiFp(configuration).mintingParametersGet(options)(axios, basePath);\n    }\n  };\n};\n/**\n * MintApi - object-oriented interface\n * @export\n * @class MintApi\n * @extends {BaseAPI}\n */\n\n\nvar MintApi =\n/** @class */\nfunction (_super) {\n  __extends(MintApi, _super);\n\n  function MintApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Current minting annual provisions value\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MintApi\n   */\n\n\n  MintApi.prototype.mintingAnnualProvisionsGet = function (options) {\n    return exports.MintApiFp(this.configuration).mintingAnnualProvisionsGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Current minting inflation value\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MintApi\n   */\n\n\n  MintApi.prototype.mintingInflationGet = function (options) {\n    return exports.MintApiFp(this.configuration).mintingInflationGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Minting module parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof MintApi\n   */\n\n\n  MintApi.prototype.mintingParametersGet = function (options) {\n    return exports.MintApiFp(this.configuration).mintingParametersGet(options)(this.axios, this.basePath);\n  };\n\n  return MintApi;\n}(base_1.BaseAPI);\n\nexports.MintApi = MintApi;\n/**\n * SlashingApi - axios parameter creator\n * @export\n */\n\nexports.SlashingApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get the current slashing parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingParametersGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/slashing/parameters\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Get sign info of all validators\n     * @summary Get sign info of given all validators\n     * @param {number} page Page number\n     * @param {number} limit Maximum number of items per page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingSigningInfosGet: function (page, limit, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'page' is not null or undefined\n\n\n      if (page === null || page === undefined) {\n        throw new base_1.RequiredError(\"page\", \"Required parameter page was null or undefined when calling slashingSigningInfosGet.\");\n      } // verify required parameter 'limit' is not null or undefined\n\n\n      if (limit === null || limit === undefined) {\n        throw new base_1.RequiredError(\"limit\", \"Required parameter limit was null or undefined when calling slashingSigningInfosGet.\");\n      }\n\n      var localVarPath = \"/slashing/signing_infos\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (limit !== undefined) {\n        localVarQueryParameter[\"limit\"] = limit;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Send transaction to unjail a jailed validator\n     * @summary Unjail a jailed validator\n     * @param {string} validatorAddr Bech32 validator address\n     * @param {UnjailReq} unjailBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.\");\n      } // verify required parameter 'unjailBody' is not null or undefined\n\n\n      if (unjailBody === null || unjailBody === undefined) {\n        throw new base_1.RequiredError(\"unjailBody\", \"Required parameter unjailBody was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.\");\n      }\n\n      var localVarPath = \"/slashing/validators/{validatorAddr}/unjail\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof unjailBody !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(unjailBody !== undefined ? unjailBody : {}) : unjailBody || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * SlashingApi - functional programming interface\n * @export\n */\n\n\nexports.SlashingApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get the current slashing parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingParametersGet: function (options) {\n      var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingParametersGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Get sign info of all validators\n     * @summary Get sign info of given all validators\n     * @param {number} page Page number\n     * @param {number} limit Maximum number of items per page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingSigningInfosGet: function (page, limit, options) {\n      var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingSigningInfosGet(page, limit, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Send transaction to unjail a jailed validator\n     * @summary Unjail a jailed validator\n     * @param {string} validatorAddr Bech32 validator address\n     * @param {UnjailReq} unjailBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n      var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * SlashingApi - factory interface\n * @export\n */\n\n\nexports.SlashingApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Get the current slashing parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingParametersGet: function (options) {\n      return exports.SlashingApiFp(configuration).slashingParametersGet(options)(axios, basePath);\n    },\n\n    /**\n     * Get sign info of all validators\n     * @summary Get sign info of given all validators\n     * @param {number} page Page number\n     * @param {number} limit Maximum number of items per page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingSigningInfosGet: function (page, limit, options) {\n      return exports.SlashingApiFp(configuration).slashingSigningInfosGet(page, limit, options)(axios, basePath);\n    },\n\n    /**\n     * Send transaction to unjail a jailed validator\n     * @summary Unjail a jailed validator\n     * @param {string} validatorAddr Bech32 validator address\n     * @param {UnjailReq} unjailBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n      return exports.SlashingApiFp(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(axios, basePath);\n    }\n  };\n};\n/**\n * SlashingApi - object-oriented interface\n * @export\n * @class SlashingApi\n * @extends {BaseAPI}\n */\n\n\nvar SlashingApi =\n/** @class */\nfunction (_super) {\n  __extends(SlashingApi, _super);\n\n  function SlashingApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Get the current slashing parameters\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SlashingApi\n   */\n\n\n  SlashingApi.prototype.slashingParametersGet = function (options) {\n    return exports.SlashingApiFp(this.configuration).slashingParametersGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Get sign info of all validators\n   * @summary Get sign info of given all validators\n   * @param {number} page Page number\n   * @param {number} limit Maximum number of items per page\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SlashingApi\n   */\n\n\n  SlashingApi.prototype.slashingSigningInfosGet = function (page, limit, options) {\n    return exports.SlashingApiFp(this.configuration).slashingSigningInfosGet(page, limit, options)(this.axios, this.basePath);\n  };\n  /**\n   * Send transaction to unjail a jailed validator\n   * @summary Unjail a jailed validator\n   * @param {string} validatorAddr Bech32 validator address\n   * @param {UnjailReq} unjailBody\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SlashingApi\n   */\n\n\n  SlashingApi.prototype.slashingValidatorsValidatorAddrUnjailPost = function (validatorAddr, unjailBody, options) {\n    return exports.SlashingApiFp(this.configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(this.axios, this.basePath);\n  };\n\n  return SlashingApi;\n}(base_1.BaseAPI);\n\nexports.SlashingApi = SlashingApi;\n/**\n * StakingApi - axios parameter creator\n * @export\n */\n\nexports.StakingApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get all delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Submit delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {DelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsPost.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof delegation !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(delegation !== undefined ? delegation : {}) : delegation || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query the current delegation between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.\");\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr))).replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Submit a redelegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {RedelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrRedelegationsPost.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/redelegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof delegation !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(delegation !== undefined ? delegation : {}) : delegation || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Submit an unbonding delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {UndelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsPost.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof delegation !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(delegation !== undefined ? delegation : {}) : delegation || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query all unbonding delegations between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.\");\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr))).replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query all validators that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/validators\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query a validator that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 ValAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'delegatorAddr' is not null or undefined\n\n\n      if (delegatorAddr === null || delegatorAddr === undefined) {\n        throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.\");\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/staking/delegators/{delegatorAddr}/validators/{validatorAddr}\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr))).replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get the current staking parameter values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingParametersGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/staking/parameters\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get the current state of the staking pool\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingPoolGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/staking/pool\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get all redelegations (filter by query params)\n     * @param {string} [delegator] Bech32 AccAddress of Delegator\n     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/staking/redelegations\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (delegator !== undefined) {\n        localVarQueryParameter[\"delegator\"] = delegator;\n      }\n\n      if (validatorFrom !== undefined) {\n        localVarQueryParameter[\"validator_from\"] = validatorFrom;\n      }\n\n      if (validatorTo !== undefined) {\n        localVarQueryParameter[\"validator_to\"] = validatorTo;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get all validator candidates. By default it returns only the bonded validators.\n     * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n     * @param {number} [page] The page number.\n     * @param {number} [limit] The maximum number of items per page.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsGet: function (status, page, limit, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/staking/validators\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (status !== undefined) {\n        localVarQueryParameter[\"status\"] = status;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (limit !== undefined) {\n        localVarQueryParameter[\"limit\"] = limit;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get all delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrDelegationsGet.\");\n      }\n\n      var localVarPath = \"/staking/validators/{validatorAddr}/delegations\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Query the information from a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrGet.\");\n      }\n\n      var localVarPath = \"/staking/validators/{validatorAddr}\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'validatorAddr' is not null or undefined\n\n\n      if (validatorAddr === null || validatorAddr === undefined) {\n        throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrUnbondingDelegationsGet.\");\n      }\n\n      var localVarPath = \"/staking/validators/{validatorAddr}/unbonding_delegations\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * StakingApi - functional programming interface\n * @export\n */\n\n\nexports.StakingApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get all delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Submit delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {DelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query the current delegation between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Submit a redelegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {RedelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Submit an unbonding delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {UndelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query all unbonding delegations between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query all validators that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query a validator that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 ValAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get the current staking parameter values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingParametersGet: function (options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingParametersGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get the current state of the staking pool\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingPoolGet: function (options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingPoolGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get all redelegations (filter by query params)\n     * @param {string} [delegator] Bech32 AccAddress of Delegator\n     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get all validator candidates. By default it returns only the bonded validators.\n     * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n     * @param {number} [page] The page number.\n     * @param {number} [limit] The maximum number of items per page.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsGet: function (status, page, limit, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsGet(status, page, limit, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get all delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Query the information from a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n      var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * StakingApi - factory interface\n * @export\n */\n\n\nexports.StakingApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Get all delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Submit delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {DelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query the current delegation between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Submit a redelegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {RedelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Submit an unbonding delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {UndelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query all unbonding delegations between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query all validators that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query a validator that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 ValAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get the current staking parameter values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingParametersGet: function (options) {\n      return exports.StakingApiFp(configuration).stakingParametersGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get the current state of the staking pool\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingPoolGet: function (options) {\n      return exports.StakingApiFp(configuration).stakingPoolGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get all redelegations (filter by query params)\n     * @param {string} [delegator] Bech32 AccAddress of Delegator\n     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n      return exports.StakingApiFp(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get all validator candidates. By default it returns only the bonded validators.\n     * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n     * @param {number} [page] The page number.\n     * @param {number} [limit] The maximum number of items per page.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsGet: function (status, page, limit, options) {\n      return exports.StakingApiFp(configuration).stakingValidatorsGet(status, page, limit, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get all delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Query the information from a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get all unbonding delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n      return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(axios, basePath);\n    }\n  };\n};\n/**\n * StakingApi - object-oriented interface\n * @export\n * @class StakingApi\n * @extends {BaseAPI}\n */\n\n\nvar StakingApi =\n/** @class */\nfunction (_super) {\n  __extends(StakingApi, _super);\n\n  function StakingApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Get all delegations from a delegator\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsGet = function (delegatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Submit delegation\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {DelegateReq} [delegation]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsPost = function (delegatorAddr, delegation, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query the current delegation between a delegator and a validator\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Submit a redelegation\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {RedelegationReq} [delegation]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrRedelegationsPost = function (delegatorAddr, delegation, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get all unbonding delegations from a delegator\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet = function (delegatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Submit an unbonding delegation\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {UndelegateReq} [delegation]\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost = function (delegatorAddr, delegation, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query all unbonding delegations between a delegator and a validator\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query all validators that a delegator is bonded to\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsGet = function (delegatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query a validator that a delegator is bonded to\n   * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n   * @param {string} validatorAddr Bech32 ValAddress of Delegator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get the current staking parameter values\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingParametersGet = function (options) {\n    return exports.StakingApiFp(this.configuration).stakingParametersGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get the current state of the staking pool\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingPoolGet = function (options) {\n    return exports.StakingApiFp(this.configuration).stakingPoolGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get all redelegations (filter by query params)\n   * @param {string} [delegator] Bech32 AccAddress of Delegator\n   * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n   * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingRedelegationsGet = function (delegator, validatorFrom, validatorTo, options) {\n    return exports.StakingApiFp(this.configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get all validator candidates. By default it returns only the bonded validators.\n   * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n   * @param {number} [page] The page number.\n   * @param {number} [limit] The maximum number of items per page.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingValidatorsGet = function (status, page, limit, options) {\n    return exports.StakingApiFp(this.configuration).stakingValidatorsGet(status, page, limit, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get all delegations from a validator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingValidatorsValidatorAddrDelegationsGet = function (validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Query the information from a single validator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingValidatorsValidatorAddrGet = function (validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get all unbonding delegations from a validator\n   * @param {string} validatorAddr Bech32 OperatorAddress of validator\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof StakingApi\n   */\n\n\n  StakingApi.prototype.stakingValidatorsValidatorAddrUnbondingDelegationsGet = function (validatorAddr, options) {\n    return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(this.axios, this.basePath);\n  };\n\n  return StakingApi;\n}(base_1.BaseAPI);\n\nexports.StakingApi = StakingApi;\n/**\n * SupplyApi - axios parameter creator\n * @export\n */\n\nexports.SupplyApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Total supply of a single coin denomination\n     * @param {string} denomination Coin denomination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalDenominationGet: function (denomination, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'denomination' is not null or undefined\n\n\n      if (denomination === null || denomination === undefined) {\n        throw new base_1.RequiredError(\"denomination\", \"Required parameter denomination was null or undefined when calling supplyTotalDenominationGet.\");\n      }\n\n      var localVarPath = \"/supply/total/{denomination}\".replace(\"{\" + \"denomination\" + \"}\", encodeURIComponent(String(denomination)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Total supply of coins in the chain\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/supply/total\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * SupplyApi - functional programming interface\n * @export\n */\n\n\nexports.SupplyApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Total supply of a single coin denomination\n     * @param {string} denomination Coin denomination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalDenominationGet: function (denomination, options) {\n      var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalDenominationGet(denomination, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Total supply of coins in the chain\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalGet: function (options) {\n      var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * SupplyApi - factory interface\n * @export\n */\n\n\nexports.SupplyApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Total supply of a single coin denomination\n     * @param {string} denomination Coin denomination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalDenominationGet: function (denomination, options) {\n      return exports.SupplyApiFp(configuration).supplyTotalDenominationGet(denomination, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Total supply of coins in the chain\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    supplyTotalGet: function (options) {\n      return exports.SupplyApiFp(configuration).supplyTotalGet(options)(axios, basePath);\n    }\n  };\n};\n/**\n * SupplyApi - object-oriented interface\n * @export\n * @class SupplyApi\n * @extends {BaseAPI}\n */\n\n\nvar SupplyApi =\n/** @class */\nfunction (_super) {\n  __extends(SupplyApi, _super);\n\n  function SupplyApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Total supply of a single coin denomination\n   * @param {string} denomination Coin denomination\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupplyApi\n   */\n\n\n  SupplyApi.prototype.supplyTotalDenominationGet = function (denomination, options) {\n    return exports.SupplyApiFp(this.configuration).supplyTotalDenominationGet(denomination, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Total supply of coins in the chain\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SupplyApi\n   */\n\n\n  SupplyApi.prototype.supplyTotalGet = function (options) {\n    return exports.SupplyApiFp(this.configuration).supplyTotalGet(options)(this.axios, this.basePath);\n  };\n\n  return SupplyApi;\n}(base_1.BaseAPI);\n\nexports.SupplyApi = SupplyApi;\n/**\n * TendermintRPCApi - axios parameter creator\n * @export\n */\n\nexports.TendermintRPCApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get a block at a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksHeightGet: function (height, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'height' is not null or undefined\n\n\n      if (height === null || height === undefined) {\n        throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling blocksHeightGet.\");\n      }\n\n      var localVarPath = \"/blocks/{height}\".replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get the latest block\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksLatestGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/blocks/latest\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Get if the node is currently syning with other nodes\n     * @summary Syncing state of node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    syncingGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/syncing\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get a validator set a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsHeightGet: function (height, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'height' is not null or undefined\n\n\n      if (height === null || height === undefined) {\n        throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling validatorsetsHeightGet.\");\n      }\n\n      var localVarPath = \"/validatorsets/{height}\".replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     *\n     * @summary Get the latest validator set\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsLatestGet: function (options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/validatorsets/latest\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * TendermintRPCApi - functional programming interface\n * @export\n */\n\n\nexports.TendermintRPCApiFp = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Get a block at a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksHeightGet: function (height, options) {\n      var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksHeightGet(height, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get the latest block\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksLatestGet: function (options) {\n      var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksLatestGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Get if the node is currently syning with other nodes\n     * @summary Syncing state of node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    syncingGet: function (options) {\n      var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).syncingGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get a validator set a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsHeightGet: function (height, options) {\n      var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsHeightGet(height, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     *\n     * @summary Get the latest validator set\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsLatestGet: function (options) {\n      var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsLatestGet(options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * TendermintRPCApi - factory interface\n * @export\n */\n\n\nexports.TendermintRPCApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     *\n     * @summary Get a block at a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksHeightGet: function (height, options) {\n      return exports.TendermintRPCApiFp(configuration).blocksHeightGet(height, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get the latest block\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    blocksLatestGet: function (options) {\n      return exports.TendermintRPCApiFp(configuration).blocksLatestGet(options)(axios, basePath);\n    },\n\n    /**\n     * Get if the node is currently syning with other nodes\n     * @summary Syncing state of node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    syncingGet: function (options) {\n      return exports.TendermintRPCApiFp(configuration).syncingGet(options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get a validator set a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsHeightGet: function (height, options) {\n      return exports.TendermintRPCApiFp(configuration).validatorsetsHeightGet(height, options)(axios, basePath);\n    },\n\n    /**\n     *\n     * @summary Get the latest validator set\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    validatorsetsLatestGet: function (options) {\n      return exports.TendermintRPCApiFp(configuration).validatorsetsLatestGet(options)(axios, basePath);\n    }\n  };\n};\n/**\n * TendermintRPCApi - object-oriented interface\n * @export\n * @class TendermintRPCApi\n * @extends {BaseAPI}\n */\n\n\nvar TendermintRPCApi =\n/** @class */\nfunction (_super) {\n  __extends(TendermintRPCApi, _super);\n\n  function TendermintRPCApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   *\n   * @summary Get a block at a certain height\n   * @param {number} height Block height\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TendermintRPCApi\n   */\n\n\n  TendermintRPCApi.prototype.blocksHeightGet = function (height, options) {\n    return exports.TendermintRPCApiFp(this.configuration).blocksHeightGet(height, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get the latest block\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TendermintRPCApi\n   */\n\n\n  TendermintRPCApi.prototype.blocksLatestGet = function (options) {\n    return exports.TendermintRPCApiFp(this.configuration).blocksLatestGet(options)(this.axios, this.basePath);\n  };\n  /**\n   * Get if the node is currently syning with other nodes\n   * @summary Syncing state of node\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TendermintRPCApi\n   */\n\n\n  TendermintRPCApi.prototype.syncingGet = function (options) {\n    return exports.TendermintRPCApiFp(this.configuration).syncingGet(options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get a validator set a certain height\n   * @param {number} height Block height\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TendermintRPCApi\n   */\n\n\n  TendermintRPCApi.prototype.validatorsetsHeightGet = function (height, options) {\n    return exports.TendermintRPCApiFp(this.configuration).validatorsetsHeightGet(height, options)(this.axios, this.basePath);\n  };\n  /**\n   *\n   * @summary Get the latest validator set\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TendermintRPCApi\n   */\n\n\n  TendermintRPCApi.prototype.validatorsetsLatestGet = function (options) {\n    return exports.TendermintRPCApiFp(this.configuration).validatorsetsLatestGet(options)(this.axios, this.basePath);\n  };\n\n  return TendermintRPCApi;\n}(base_1.BaseAPI);\n\nexports.TendermintRPCApi = TendermintRPCApi;\n/**\n * TransactionsApi - axios parameter creator\n * @export\n */\n\nexports.TransactionsApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n     * @summary Decode a transaction from the Amino wire format\n     * @param {DecodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsDecodePost: function (tx, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'tx' is not null or undefined\n\n\n      if (tx === null || tx === undefined) {\n        throw new base_1.RequiredError(\"tx\", \"Required parameter tx was null or undefined when calling txsDecodePost.\");\n      }\n\n      var localVarPath = \"/txs/decode\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof tx !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(tx !== undefined ? tx : {}) : tx || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n     * @summary Encode a transaction to the Amino wire format\n     * @param {EncodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsEncodePost: function (tx, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'tx' is not null or undefined\n\n\n      if (tx === null || tx === undefined) {\n        throw new base_1.RequiredError(\"tx\", \"Required parameter tx was null or undefined when calling txsEncodePost.\");\n      }\n\n      var localVarPath = \"/txs/encode\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof tx !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(tx !== undefined ? tx : {}) : tx || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Search transactions by events.\n     * @summary Search transactions\n     * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n     * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n     * @param {number} [page] Page number\n     * @param {number} [limit] Maximum number of items per page\n     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      var localVarPath = \"/txs\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n\n      if (messageAction !== undefined) {\n        localVarQueryParameter[\"message.action\"] = messageAction;\n      }\n\n      if (messageSender !== undefined) {\n        localVarQueryParameter[\"message.sender\"] = messageSender;\n      }\n\n      if (page !== undefined) {\n        localVarQueryParameter[\"page\"] = page;\n      }\n\n      if (limit !== undefined) {\n        localVarQueryParameter[\"limit\"] = limit;\n      }\n\n      if (txMinheight !== undefined) {\n        localVarQueryParameter[\"tx.minheight\"] = txMinheight;\n      }\n\n      if (txMaxheight !== undefined) {\n        localVarQueryParameter[\"tx.maxheight\"] = txMaxheight;\n      }\n\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Retrieve a transaction using its hash.\n     * @summary Get a Tx by hash\n     * @param {string} hash Tx hash\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsHashGet: function (hash, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'hash' is not null or undefined\n\n\n      if (hash === null || hash === undefined) {\n        throw new base_1.RequiredError(\"hash\", \"Required parameter hash was null or undefined when calling txsHashGet.\");\n      }\n\n      var localVarPath = \"/txs/{hash}\".replace(\"{\" + \"hash\" + \"}\", encodeURIComponent(String(hash)));\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"GET\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    },\n\n    /**\n     * Broadcast a signed tx to a full node\n     * @summary Broadcast a signed tx\n     * @param {BroadcastReq} txBroadcast\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsPost: function (txBroadcast, options) {\n      if (options === void 0) {\n        options = {};\n      } // verify required parameter 'txBroadcast' is not null or undefined\n\n\n      if (txBroadcast === null || txBroadcast === undefined) {\n        throw new base_1.RequiredError(\"txBroadcast\", \"Required parameter txBroadcast was null or undefined when calling txsPost.\");\n      }\n\n      var localVarPath = \"/txs\";\n      var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n      var baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      var localVarRequestOptions = __assign(__assign({\n        method: \"POST\"\n      }, baseOptions), options);\n\n      var localVarHeaderParameter = {};\n      var localVarQueryParameter = {};\n      localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n      localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query); // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n\n      delete localVarUrlObj.search;\n      var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      var needsSerialization = typeof txBroadcast !== \"string\" || localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n      localVarRequestOptions.data = needsSerialization ? JSON.stringify(txBroadcast !== undefined ? txBroadcast : {}) : txBroadcast || \"\";\n      return {\n        url: globalImportUrl.format(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }\n  };\n};\n/**\n * TransactionsApi - functional programming interface\n * @export\n */\n\n\nexports.TransactionsApiFp = function (configuration) {\n  return {\n    /**\n     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n     * @summary Decode a transaction from the Amino wire format\n     * @param {DecodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsDecodePost: function (tx, options) {\n      var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsDecodePost(tx, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n     * @summary Encode a transaction to the Amino wire format\n     * @param {EncodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsEncodePost: function (tx, options) {\n      var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsEncodePost(tx, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Search transactions by events.\n     * @summary Search transactions\n     * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n     * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n     * @param {number} [page] Page number\n     * @param {number} [limit] Maximum number of items per page\n     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n      var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Retrieve a transaction using its hash.\n     * @summary Get a Tx by hash\n     * @param {string} hash Tx hash\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsHashGet: function (hash, options) {\n      var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsHashGet(hash, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    },\n\n    /**\n     * Broadcast a signed tx to a full node\n     * @summary Broadcast a signed tx\n     * @param {BroadcastReq} txBroadcast\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsPost: function (txBroadcast, options) {\n      var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsPost(txBroadcast, options);\n      return function (axios, basePath) {\n        if (axios === void 0) {\n          axios = axios_1.default;\n        }\n\n        if (basePath === void 0) {\n          basePath = base_1.BASE_PATH;\n        }\n\n        var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), {\n          url: basePath + localVarAxiosArgs.url\n        });\n\n        return axios.request(axiosRequestArgs);\n      };\n    }\n  };\n};\n/**\n * TransactionsApi - factory interface\n * @export\n */\n\n\nexports.TransactionsApiFactory = function (configuration, basePath, axios) {\n  return {\n    /**\n     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n     * @summary Decode a transaction from the Amino wire format\n     * @param {DecodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsDecodePost: function (tx, options) {\n      return exports.TransactionsApiFp(configuration).txsDecodePost(tx, options)(axios, basePath);\n    },\n\n    /**\n     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n     * @summary Encode a transaction to the Amino wire format\n     * @param {EncodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsEncodePost: function (tx, options) {\n      return exports.TransactionsApiFp(configuration).txsEncodePost(tx, options)(axios, basePath);\n    },\n\n    /**\n     * Search transactions by events.\n     * @summary Search transactions\n     * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n     * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n     * @param {number} [page] Page number\n     * @param {number} [limit] Maximum number of items per page\n     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n      return exports.TransactionsApiFp(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(axios, basePath);\n    },\n\n    /**\n     * Retrieve a transaction using its hash.\n     * @summary Get a Tx by hash\n     * @param {string} hash Tx hash\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsHashGet: function (hash, options) {\n      return exports.TransactionsApiFp(configuration).txsHashGet(hash, options)(axios, basePath);\n    },\n\n    /**\n     * Broadcast a signed tx to a full node\n     * @summary Broadcast a signed tx\n     * @param {BroadcastReq} txBroadcast\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    txsPost: function (txBroadcast, options) {\n      return exports.TransactionsApiFp(configuration).txsPost(txBroadcast, options)(axios, basePath);\n    }\n  };\n};\n/**\n * TransactionsApi - object-oriented interface\n * @export\n * @class TransactionsApi\n * @extends {BaseAPI}\n */\n\n\nvar TransactionsApi =\n/** @class */\nfunction (_super) {\n  __extends(TransactionsApi, _super);\n\n  function TransactionsApi() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n   * @summary Decode a transaction from the Amino wire format\n   * @param {DecodeReq} tx\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n\n\n  TransactionsApi.prototype.txsDecodePost = function (tx, options) {\n    return exports.TransactionsApiFp(this.configuration).txsDecodePost(tx, options)(this.axios, this.basePath);\n  };\n  /**\n   * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n   * @summary Encode a transaction to the Amino wire format\n   * @param {EncodeReq} tx\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n\n\n  TransactionsApi.prototype.txsEncodePost = function (tx, options) {\n    return exports.TransactionsApiFp(this.configuration).txsEncodePost(tx, options)(this.axios, this.basePath);\n  };\n  /**\n   * Search transactions by events.\n   * @summary Search transactions\n   * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n   * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n   * @param {number} [page] Page number\n   * @param {number} [limit] Maximum number of items per page\n   * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n   * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n\n\n  TransactionsApi.prototype.txsGet = function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n    return exports.TransactionsApiFp(this.configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(this.axios, this.basePath);\n  };\n  /**\n   * Retrieve a transaction using its hash.\n   * @summary Get a Tx by hash\n   * @param {string} hash Tx hash\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n\n\n  TransactionsApi.prototype.txsHashGet = function (hash, options) {\n    return exports.TransactionsApiFp(this.configuration).txsHashGet(hash, options)(this.axios, this.basePath);\n  };\n  /**\n   * Broadcast a signed tx to a full node\n   * @summary Broadcast a signed tx\n   * @param {BroadcastReq} txBroadcast\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TransactionsApi\n   */\n\n\n  TransactionsApi.prototype.txsPost = function (txBroadcast, options) {\n    return exports.TransactionsApiFp(this.configuration).txsPost(txBroadcast, options)(this.axios, this.basePath);\n  };\n\n  return TransactionsApi;\n}(base_1.BaseAPI);\n\nexports.TransactionsApi = TransactionsApi;","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/cosmos-client/api.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__importStar","mod","__esModule","result","k","__importDefault","defineProperty","exports","value","globalImportUrl","require","axios_1","base_1","AuthApiAxiosParamCreator","configuration","authAccountsAddressGet","address","options","undefined","RequiredError","localVarPath","replace","encodeURIComponent","String","localVarUrlObj","parse","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","search","headersFromBaseOptions","headers","url","format","AuthApiFp","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","AuthApiFactory","AuthApi","_super","BaseAPI","BankApiAxiosParamCreator","bankAccountsAddressTransfersPost","account","needsSerialization","data","JSON","stringify","bankBalancesAddressGet","BankApiFp","BankApiFactory","BankApi","DistributionApiAxiosParamCreator","distributionCommunityPoolGet","distributionDelegatorsDelegatorAddrRewardsGet","delegatorAddr","distributionDelegatorsDelegatorAddrRewardsPost","withdrawRequestBody","distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet","validatorAddr","distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost","distributionDelegatorsDelegatorAddrWithdrawAddressGet","distributionDelegatorsDelegatorAddrWithdrawAddressPost","distributionParametersGet","distributionValidatorsValidatorAddrGet","distributionValidatorsValidatorAddrOutstandingRewardsGet","distributionValidatorsValidatorAddrRewardsGet","distributionValidatorsValidatorAddrRewardsPost","DistributionApiFp","DistributionApiFactory","DistributionApi","GaiaRESTApiAxiosParamCreator","nodeInfoGet","GaiaRESTApiFp","GaiaRESTApiFactory","GaiaRESTApi","GovernanceApiAxiosParamCreator","govParametersDepositGet","govParametersTallyingGet","govParametersVotingGet","govProposalsGet","voter","depositor","status","govProposalsParamChangePost","postProposalBody","govProposalsPost","govProposalsProposalIdDepositsDepositorGet","proposalId","govProposalsProposalIdDepositsGet","govProposalsProposalIdDepositsPost","postDepositBody","govProposalsProposalIdGet","govProposalsProposalIdProposerGet","govProposalsProposalIdTallyGet","govProposalsProposalIdVotesGet","govProposalsProposalIdVotesPost","postVoteBody","govProposalsProposalIdVotesVoterGet","GovernanceApiFp","GovernanceApiFactory","GovernanceApi","IBCApiAxiosParamCreator","ibcChannelsOpenInitPost","channelOpenInitRequestBody","ibcChannelsOpenTryPost","channelOpenTryRequestBody","ibcClientsClientIdClientStateGet","clientId","prove","ibcClientsClientIdConnectionsGet","ibcClientsClientIdConsensusStateGet","ibcClientsClientIdMisbehaviourPost","submitMisbehaviourRequestBody","ibcClientsClientIdRootsHeightGet","height","ibcClientsClientIdUpdatePost","updateClientRequestBody","ibcClientsPost","createClientRequestBody","ibcConnectionsConnectionIdGet","connectionId","ibcConnectionsConnectionIdOpenAckPost","connectionOpenAckRequestBody","ibcConnectionsConnectionIdOpenConfirmPost","connectionOpenConfirmRequestBody","ibcConnectionsOpenInitPost","connectionOpenInitRequestBody","ibcConnectionsOpenTryPost","connectionOpenTryRequestBody","ibcHeaderGet","ibcNodeStateGet","ibcPacketsReceivePost","receivePacketRequestBody","ibcPathGet","ibcPortsPortIdChannelsChannelIdCloseConfirmPost","portId","channelId","channelCloseConfirmRequestBody","ibcPortsPortIdChannelsChannelIdCloseInitPost","channelCloseInitRequestBody","ibcPortsPortIdChannelsChannelIdGet","ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet","ibcPortsPortIdChannelsChannelIdOpenAckPost","channelOpenAckRequestBody","ibcPortsPortIdChannelsChannelIdOpenConfirmPost","channelOpenConfirmRequestBody","ibcPortsPortIdChannelsChannelIdTransferPost","transferTokenRequestBody","IBCApiFp","IBCApiFactory","IBCApi","MintApiAxiosParamCreator","mintingAnnualProvisionsGet","mintingInflationGet","mintingParametersGet","MintApiFp","MintApiFactory","MintApi","SlashingApiAxiosParamCreator","slashingParametersGet","slashingSigningInfosGet","page","limit","slashingValidatorsValidatorAddrUnjailPost","unjailBody","SlashingApiFp","SlashingApiFactory","SlashingApi","StakingApiAxiosParamCreator","stakingDelegatorsDelegatorAddrDelegationsGet","stakingDelegatorsDelegatorAddrDelegationsPost","delegation","stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet","stakingDelegatorsDelegatorAddrRedelegationsPost","stakingDelegatorsDelegatorAddrUnbondingDelegationsGet","stakingDelegatorsDelegatorAddrUnbondingDelegationsPost","stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet","stakingDelegatorsDelegatorAddrValidatorsGet","stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet","stakingParametersGet","stakingPoolGet","stakingRedelegationsGet","delegator","validatorFrom","validatorTo","stakingValidatorsGet","stakingValidatorsValidatorAddrDelegationsGet","stakingValidatorsValidatorAddrGet","stakingValidatorsValidatorAddrUnbondingDelegationsGet","StakingApiFp","StakingApiFactory","StakingApi","SupplyApiAxiosParamCreator","supplyTotalDenominationGet","denomination","supplyTotalGet","SupplyApiFp","SupplyApiFactory","SupplyApi","TendermintRPCApiAxiosParamCreator","blocksHeightGet","blocksLatestGet","syncingGet","validatorsetsHeightGet","validatorsetsLatestGet","TendermintRPCApiFp","TendermintRPCApiFactory","TendermintRPCApi","TransactionsApiAxiosParamCreator","txsDecodePost","tx","txsEncodePost","txsGet","messageAction","messageSender","txMinheight","txMaxheight","txsHashGet","hash","txsPost","txBroadcast","TransactionsApiFp","TransactionsApiFactory","TransactionsApi"],"mappings":"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","sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Gaia-Lite for Cosmos\n * A REST interface for state queries, transaction generation and broadcasting.\n *\n * The version of the OpenAPI document: 3.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar globalImportUrl = __importStar(require(\"url\"));\nvar axios_1 = __importDefault(require(\"axios\"));\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexports.AuthApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get the account information on blockchain\n         * @param {string} address Account address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authAccountsAddressGet: function (address, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'address' is not null or undefined\n            if (address === null || address === undefined) {\n                throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling authAccountsAddressGet.\");\n            }\n            var localVarPath = \"/auth/accounts/{address}\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexports.AuthApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get the account information on blockchain\n         * @param {string} address Account address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authAccountsAddressGet: function (address, options) {\n            var localVarAxiosArgs = exports.AuthApiAxiosParamCreator(configuration).authAccountsAddressGet(address, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * AuthApi - factory interface\n * @export\n */\nexports.AuthApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Get the account information on blockchain\n         * @param {string} address Account address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authAccountsAddressGet: function (address, options) {\n            return exports.AuthApiFp(configuration).authAccountsAddressGet(address, options)(axios, basePath);\n        },\n    };\n};\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nvar AuthApi = /** @class */ (function (_super) {\n    __extends(AuthApi, _super);\n    function AuthApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Get the account information on blockchain\n     * @param {string} address Account address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    AuthApi.prototype.authAccountsAddressGet = function (address, options) {\n        return exports.AuthApiFp(this.configuration).authAccountsAddressGet(address, options)(this.axios, this.basePath);\n    };\n    return AuthApi;\n}(base_1.BaseAPI));\nexports.AuthApi = AuthApi;\n/**\n * BankApi - axios parameter creator\n * @export\n */\nexports.BankApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Send coins from one account to another\n         * @param {string} address Account address in bech32 format\n         * @param {SendReq} account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankAccountsAddressTransfersPost: function (address, account, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'address' is not null or undefined\n            if (address === null || address === undefined) {\n                throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling bankAccountsAddressTransfersPost.\");\n            }\n            // verify required parameter 'account' is not null or undefined\n            if (account === null || account === undefined) {\n                throw new base_1.RequiredError(\"account\", \"Required parameter account was null or undefined when calling bankAccountsAddressTransfersPost.\");\n            }\n            var localVarPath = \"/bank/accounts/{address}/transfers\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof account !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(account !== undefined ? account : {})\n                : account || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get the account balances\n         * @param {string} address Account address in bech32 format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankBalancesAddressGet: function (address, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'address' is not null or undefined\n            if (address === null || address === undefined) {\n                throw new base_1.RequiredError(\"address\", \"Required parameter address was null or undefined when calling bankBalancesAddressGet.\");\n            }\n            var localVarPath = \"/bank/balances/{address}\".replace(\"{\" + \"address\" + \"}\", encodeURIComponent(String(address)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * BankApi - functional programming interface\n * @export\n */\nexports.BankApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Send coins from one account to another\n         * @param {string} address Account address in bech32 format\n         * @param {SendReq} account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankAccountsAddressTransfersPost: function (address, account, options) {\n            var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankAccountsAddressTransfersPost(address, account, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get the account balances\n         * @param {string} address Account address in bech32 format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankBalancesAddressGet: function (address, options) {\n            var localVarAxiosArgs = exports.BankApiAxiosParamCreator(configuration).bankBalancesAddressGet(address, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * BankApi - factory interface\n * @export\n */\nexports.BankApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Send coins from one account to another\n         * @param {string} address Account address in bech32 format\n         * @param {SendReq} account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankAccountsAddressTransfersPost: function (address, account, options) {\n            return exports.BankApiFp(configuration).bankAccountsAddressTransfersPost(address, account, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get the account balances\n         * @param {string} address Account address in bech32 format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        bankBalancesAddressGet: function (address, options) {\n            return exports.BankApiFp(configuration).bankBalancesAddressGet(address, options)(axios, basePath);\n        },\n    };\n};\n/**\n * BankApi - object-oriented interface\n * @export\n * @class BankApi\n * @extends {BaseAPI}\n */\nvar BankApi = /** @class */ (function (_super) {\n    __extends(BankApi, _super);\n    function BankApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Send coins from one account to another\n     * @param {string} address Account address in bech32 format\n     * @param {SendReq} account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BankApi\n     */\n    BankApi.prototype.bankAccountsAddressTransfersPost = function (address, account, options) {\n        return exports.BankApiFp(this.configuration).bankAccountsAddressTransfersPost(address, account, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get the account balances\n     * @param {string} address Account address in bech32 format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BankApi\n     */\n    BankApi.prototype.bankBalancesAddressGet = function (address, options) {\n        return exports.BankApiFp(this.configuration).bankBalancesAddressGet(address, options)(this.axios, this.basePath);\n    };\n    return BankApi;\n}(base_1.BaseAPI));\nexports.BankApi = BankApi;\n/**\n * DistributionApi - axios parameter creator\n * @export\n */\nexports.DistributionApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Community pool parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionCommunityPoolGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/distribution/community_pool\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the sum of all the rewards earned by delegations by a single delegator\n         * @summary Get the total rewards balance from all delegations\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsGet.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Withdraw all the delegator\\'s delegation rewards\n         * @summary Withdraw all the delegator\\'s delegation rewards\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsPost.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof withdrawRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})\n                : withdrawRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query a single delegation reward by a delegator\n         * @summary Query a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.\");\n            }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}\"\n                .replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)))\n                .replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Withdraw a delegator\\'s delegation reward from a single validator\n         * @summary Withdraw a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.\");\n            }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}\"\n                .replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)))\n                .replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof withdrawRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})\n                : withdrawRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n         * @summary Get the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressGet.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/withdraw_address\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Replace the delegations\\' rewards withdrawal address for a new one.\n         * @summary Replace the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling distributionDelegatorsDelegatorAddrWithdrawAddressPost.\");\n            }\n            var localVarPath = \"/distribution/delegators/{delegatorAddr}/withdraw_address\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof withdrawRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})\n                : withdrawRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Fee distribution parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionParametersGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/distribution/parameters\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query the distribution information of a single validator\n         * @summary Validator distribution information\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/distribution/validators/{validatorAddr}\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Fee distribution outstanding rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrOutstandingRewardsGet.\");\n            }\n            var localVarPath = \"/distribution/validators/{validatorAddr}/outstanding_rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query the commission and self-delegation rewards of validator.\n         * @summary Commission and self-delegation rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsGet.\");\n            }\n            var localVarPath = \"/distribution/validators/{validatorAddr}/rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Withdraw the validator\\'s self-delegation and commissions rewards\n         * @summary Withdraw the validator\\'s rewards\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling distributionValidatorsValidatorAddrRewardsPost.\");\n            }\n            var localVarPath = \"/distribution/validators/{validatorAddr}/rewards\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof withdrawRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(withdrawRequestBody !== undefined ? withdrawRequestBody : {})\n                : withdrawRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * DistributionApi - functional programming interface\n * @export\n */\nexports.DistributionApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Community pool parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionCommunityPoolGet: function (options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionCommunityPoolGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the sum of all the rewards earned by delegations by a single delegator\n         * @summary Get the total rewards balance from all delegations\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Withdraw all the delegator\\'s delegation rewards\n         * @summary Withdraw all the delegator\\'s delegation rewards\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query a single delegation reward by a delegator\n         * @summary Query a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Withdraw a delegator\\'s delegation reward from a single validator\n         * @summary Withdraw a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n         * @summary Get the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Replace the delegations\\' rewards withdrawal address for a new one.\n         * @summary Replace the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Fee distribution parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionParametersGet: function (options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionParametersGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query the distribution information of a single validator\n         * @summary Validator distribution information\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Fee distribution outstanding rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query the commission and self-delegation rewards of validator.\n         * @summary Commission and self-delegation rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Withdraw the validator\\'s self-delegation and commissions rewards\n         * @summary Withdraw the validator\\'s rewards\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n            var localVarAxiosArgs = exports.DistributionApiAxiosParamCreator(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * DistributionApi - factory interface\n * @export\n */\nexports.DistributionApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Community pool parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionCommunityPoolGet: function (options) {\n            return exports.DistributionApiFp(configuration).distributionCommunityPoolGet(options)(axios, basePath);\n        },\n        /**\n         * Get the sum of all the rewards earned by delegations by a single delegator\n         * @summary Get the total rewards balance from all delegations\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(axios, basePath);\n        },\n        /**\n         * Withdraw all the delegator\\'s delegation rewards\n         * @summary Withdraw all the delegator\\'s delegation rewards\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);\n        },\n        /**\n         * Query a single delegation reward by a delegator\n         * @summary Query a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n        },\n        /**\n         * Withdraw a delegator\\'s delegation reward from a single validator\n         * @summary Withdraw a delegation reward\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(axios, basePath);\n        },\n        /**\n         * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n         * @summary Get the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(axios, basePath);\n        },\n        /**\n         * Replace the delegations\\' rewards withdrawal address for a new one.\n         * @summary Replace the rewards withdrawal address\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {\n            return exports.DistributionApiFp(configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Fee distribution parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionParametersGet: function (options) {\n            return exports.DistributionApiFp(configuration).distributionParametersGet(options)(axios, basePath);\n        },\n        /**\n         * Query the distribution information of a single validator\n         * @summary Validator distribution information\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Fee distribution outstanding rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(axios, basePath);\n        },\n        /**\n         * Query the commission and self-delegation rewards of validator.\n         * @summary Commission and self-delegation rewards of a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {\n            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(axios, basePath);\n        },\n        /**\n         * Withdraw the validator\\'s self-delegation and commissions rewards\n         * @summary Withdraw the validator\\'s rewards\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {WithdrawRewardsReq} [withdrawRequestBody]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {\n            return exports.DistributionApiFp(configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(axios, basePath);\n        },\n    };\n};\n/**\n * DistributionApi - object-oriented interface\n * @export\n * @class DistributionApi\n * @extends {BaseAPI}\n */\nvar DistributionApi = /** @class */ (function (_super) {\n    __extends(DistributionApi, _super);\n    function DistributionApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Community pool parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionCommunityPoolGet = function (options) {\n        return exports.DistributionApiFp(this.configuration).distributionCommunityPoolGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the sum of all the rewards earned by delegations by a single delegator\n     * @summary Get the total rewards balance from all delegations\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsGet = function (delegatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     * Withdraw all the delegator\\'s delegation rewards\n     * @summary Withdraw all the delegator\\'s delegation rewards\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsPost = function (delegatorAddr, withdrawRequestBody, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query a single delegation reward by a delegator\n     * @summary Query a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     * Withdraw a delegator\\'s delegation reward from a single validator\n     * @summary Withdraw a delegation reward\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost = function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Get the delegations\\' rewards withdrawal address. This is the address in which the user will receive the reward funds\n     * @summary Get the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressGet = function (delegatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     * Replace the delegations\\' rewards withdrawal address for a new one.\n     * @summary Replace the rewards withdrawal address\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {SetWithdrawAddressReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressPost = function (delegatorAddr, withdrawRequestBody, options) {\n        return exports.DistributionApiFp(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Fee distribution parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionParametersGet = function (options) {\n        return exports.DistributionApiFp(this.configuration).distributionParametersGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Query the distribution information of a single validator\n     * @summary Validator distribution information\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionValidatorsValidatorAddrGet = function (validatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Fee distribution outstanding rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionValidatorsValidatorAddrOutstandingRewardsGet = function (validatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query the commission and self-delegation rewards of validator.\n     * @summary Commission and self-delegation rewards of a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsGet = function (validatorAddr, options) {\n        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     * Withdraw the validator\\'s self-delegation and commissions rewards\n     * @summary Withdraw the validator\\'s rewards\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {WithdrawRewardsReq} [withdrawRequestBody]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DistributionApi\n     */\n    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsPost = function (validatorAddr, withdrawRequestBody, options) {\n        return exports.DistributionApiFp(this.configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)(this.axios, this.basePath);\n    };\n    return DistributionApi;\n}(base_1.BaseAPI));\nexports.DistributionApi = DistributionApi;\n/**\n * GaiaRESTApi - axios parameter creator\n * @export\n */\nexports.GaiaRESTApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Information about the connected node\n         * @summary The properties of the connected node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        nodeInfoGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/node_info\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * GaiaRESTApi - functional programming interface\n * @export\n */\nexports.GaiaRESTApiFp = function (configuration) {\n    return {\n        /**\n         * Information about the connected node\n         * @summary The properties of the connected node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        nodeInfoGet: function (options) {\n            var localVarAxiosArgs = exports.GaiaRESTApiAxiosParamCreator(configuration).nodeInfoGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * GaiaRESTApi - factory interface\n * @export\n */\nexports.GaiaRESTApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Information about the connected node\n         * @summary The properties of the connected node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        nodeInfoGet: function (options) {\n            return exports.GaiaRESTApiFp(configuration).nodeInfoGet(options)(axios, basePath);\n        },\n    };\n};\n/**\n * GaiaRESTApi - object-oriented interface\n * @export\n * @class GaiaRESTApi\n * @extends {BaseAPI}\n */\nvar GaiaRESTApi = /** @class */ (function (_super) {\n    __extends(GaiaRESTApi, _super);\n    function GaiaRESTApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Information about the connected node\n     * @summary The properties of the connected node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GaiaRESTApi\n     */\n    GaiaRESTApi.prototype.nodeInfoGet = function (options) {\n        return exports.GaiaRESTApiFp(this.configuration).nodeInfoGet(options)(this.axios, this.basePath);\n    };\n    return GaiaRESTApi;\n}(base_1.BaseAPI));\nexports.GaiaRESTApi = GaiaRESTApi;\n/**\n * GovernanceApi - axios parameter creator\n * @export\n */\nexports.GovernanceApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n         * @summary Query governance deposit parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersDepositGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/gov/parameters/deposit\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query governance tally parameters\n         * @summary Query governance tally parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersTallyingGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/gov/parameters/tallying\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query governance voting parameters. The voting_period units are in nanoseconds.\n         * @summary Query governance voting parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersVotingGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/gov/parameters/voting\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query proposals information with parameters\n         * @summary Query proposals\n         * @param {string} [voter] voter address\n         * @param {string} [depositor] depositor address\n         * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsGet: function (voter, depositor, status, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/gov/proposals\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (voter !== undefined) {\n                localVarQueryParameter[\"voter\"] = voter;\n            }\n            if (depositor !== undefined) {\n                localVarQueryParameter[\"depositor\"] = depositor;\n            }\n            if (status !== undefined) {\n                localVarQueryParameter[\"status\"] = status;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Generate a parameter change proposal transaction\n         * @summary Generate a parameter change proposal transaction\n         * @param {ParamChangeProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsParamChangePost: function (postProposalBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'postProposalBody' is not null or undefined\n            if (postProposalBody === null || postProposalBody === undefined) {\n                throw new base_1.RequiredError(\"postProposalBody\", \"Required parameter postProposalBody was null or undefined when calling govProposalsParamChangePost.\");\n            }\n            var localVarPath = \"/gov/proposals/param_change\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof postProposalBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})\n                : postProposalBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send transaction to submit a proposal\n         * @summary Submit a proposal\n         * @param {PostProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsPost: function (postProposalBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'postProposalBody' is not null or undefined\n            if (postProposalBody === null || postProposalBody === undefined) {\n                throw new base_1.RequiredError(\"postProposalBody\", \"Required parameter postProposalBody was null or undefined when calling govProposalsPost.\");\n            }\n            var localVarPath = \"/gov/proposals\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof postProposalBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(postProposalBody !== undefined ? postProposalBody : {})\n                : postProposalBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query deposit by proposalId and depositor address\n         * @summary Query deposit\n         * @param {string} proposalId proposal id\n         * @param {string} depositor Bech32 depositor address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.\");\n            }\n            // verify required parameter 'depositor' is not null or undefined\n            if (depositor === null || depositor === undefined) {\n                throw new base_1.RequiredError(\"depositor\", \"Required parameter depositor was null or undefined when calling govProposalsProposalIdDepositsDepositorGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/deposits/{depositor}\"\n                .replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)))\n                .replace(\"{\" + \"depositor\" + \"}\", encodeURIComponent(String(depositor)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query deposits by proposalId\n         * @summary Query deposits\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsGet: function (proposalId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/deposits\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send transaction to deposit tokens to a proposal\n         * @summary Deposit tokens to a proposal\n         * @param {string} proposalId proposal id\n         * @param {DepositReq} postDepositBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdDepositsPost.\");\n            }\n            // verify required parameter 'postDepositBody' is not null or undefined\n            if (postDepositBody === null || postDepositBody === undefined) {\n                throw new base_1.RequiredError(\"postDepositBody\", \"Required parameter postDepositBody was null or undefined when calling govProposalsProposalIdDepositsPost.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/deposits\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof postDepositBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(postDepositBody !== undefined ? postDepositBody : {})\n                : postDepositBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query a proposal by id\n         * @summary Query a proposal\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdGet: function (proposalId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query for the proposer for a proposal\n         * @summary Query proposer\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdProposerGet: function (proposalId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdProposerGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/proposer\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n         * @summary Get a proposal\\'s tally result at the current time\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdTallyGet: function (proposalId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdTallyGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/tally\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query voters information by proposalId\n         * @summary Query voters\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesGet: function (proposalId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/votes\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send transaction to vote a proposal\n         * @summary Vote a proposal\n         * @param {string} proposalId proposal id\n         * @param {VoteReq} postVoteBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesPost.\");\n            }\n            // verify required parameter 'postVoteBody' is not null or undefined\n            if (postVoteBody === null || postVoteBody === undefined) {\n                throw new base_1.RequiredError(\"postVoteBody\", \"Required parameter postVoteBody was null or undefined when calling govProposalsProposalIdVotesPost.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/votes\".replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof postVoteBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(postVoteBody !== undefined ? postVoteBody : {})\n                : postVoteBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Query vote information by proposal Id and voter address\n         * @summary Query vote\n         * @param {string} proposalId proposal id\n         * @param {string} voter Bech32 voter address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'proposalId' is not null or undefined\n            if (proposalId === null || proposalId === undefined) {\n                throw new base_1.RequiredError(\"proposalId\", \"Required parameter proposalId was null or undefined when calling govProposalsProposalIdVotesVoterGet.\");\n            }\n            // verify required parameter 'voter' is not null or undefined\n            if (voter === null || voter === undefined) {\n                throw new base_1.RequiredError(\"voter\", \"Required parameter voter was null or undefined when calling govProposalsProposalIdVotesVoterGet.\");\n            }\n            var localVarPath = \"/gov/proposals/{proposalId}/votes/{voter}\"\n                .replace(\"{\" + \"proposalId\" + \"}\", encodeURIComponent(String(proposalId)))\n                .replace(\"{\" + \"voter\" + \"}\", encodeURIComponent(String(voter)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * GovernanceApi - functional programming interface\n * @export\n */\nexports.GovernanceApiFp = function (configuration) {\n    return {\n        /**\n         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n         * @summary Query governance deposit parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersDepositGet: function (options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersDepositGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query governance tally parameters\n         * @summary Query governance tally parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersTallyingGet: function (options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersTallyingGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query governance voting parameters. The voting_period units are in nanoseconds.\n         * @summary Query governance voting parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersVotingGet: function (options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govParametersVotingGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query proposals information with parameters\n         * @summary Query proposals\n         * @param {string} [voter] voter address\n         * @param {string} [depositor] depositor address\n         * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsGet: function (voter, depositor, status, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsGet(voter, depositor, status, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Generate a parameter change proposal transaction\n         * @summary Generate a parameter change proposal transaction\n         * @param {PostProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsParamChangePost: function (postProposalBody, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsParamChangePost(postProposalBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Send transaction to submit a proposal\n         * @summary Submit a proposal\n         * @param {PostProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsPost: function (postProposalBody, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsPost(postProposalBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query deposit by proposalId and depositor address\n         * @summary Query deposit\n         * @param {string} proposalId proposal id\n         * @param {string} depositor Bech32 depositor address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query deposits by proposalId\n         * @summary Query deposits\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsGet: function (proposalId, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsGet(proposalId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Send transaction to deposit tokens to a proposal\n         * @summary Deposit tokens to a proposal\n         * @param {string} proposalId proposal id\n         * @param {DepositReq} postDepositBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query a proposal by id\n         * @summary Query a proposal\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdGet: function (proposalId, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdGet(proposalId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query for the proposer for a proposal\n         * @summary Query proposer\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdProposerGet: function (proposalId, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdProposerGet(proposalId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n         * @summary Get a proposal\\'s tally result at the current time\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdTallyGet: function (proposalId, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdTallyGet(proposalId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query voters information by proposalId\n         * @summary Query voters\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesGet: function (proposalId, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesGet(proposalId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Send transaction to vote a proposal\n         * @summary Vote a proposal\n         * @param {string} proposalId proposal id\n         * @param {VoteReq} postVoteBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Query vote information by proposal Id and voter address\n         * @summary Query vote\n         * @param {string} proposalId proposal id\n         * @param {string} voter Bech32 voter address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n            var localVarAxiosArgs = exports.GovernanceApiAxiosParamCreator(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * GovernanceApi - factory interface\n * @export\n */\nexports.GovernanceApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n         * @summary Query governance deposit parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersDepositGet: function (options) {\n            return exports.GovernanceApiFp(configuration).govParametersDepositGet(options)(axios, basePath);\n        },\n        /**\n         * Query governance tally parameters\n         * @summary Query governance tally parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersTallyingGet: function (options) {\n            return exports.GovernanceApiFp(configuration).govParametersTallyingGet(options)(axios, basePath);\n        },\n        /**\n         * Query governance voting parameters. The voting_period units are in nanoseconds.\n         * @summary Query governance voting parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govParametersVotingGet: function (options) {\n            return exports.GovernanceApiFp(configuration).govParametersVotingGet(options)(axios, basePath);\n        },\n        /**\n         * Query proposals information with parameters\n         * @summary Query proposals\n         * @param {string} [voter] voter address\n         * @param {string} [depositor] depositor address\n         * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsGet: function (voter, depositor, status, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsGet(voter, depositor, status, options)(axios, basePath);\n        },\n        /**\n         * Generate a parameter change proposal transaction\n         * @summary Generate a parameter change proposal transaction\n         * @param {PostProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsParamChangePost: function (postProposalBody, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsParamChangePost(postProposalBody, options)(axios, basePath);\n        },\n        /**\n         * Send transaction to submit a proposal\n         * @summary Submit a proposal\n         * @param {PostProposalReq} postProposalBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsPost: function (postProposalBody, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsPost(postProposalBody, options)(axios, basePath);\n        },\n        /**\n         * Query deposit by proposalId and depositor address\n         * @summary Query deposit\n         * @param {string} proposalId proposal id\n         * @param {string} depositor Bech32 depositor address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(axios, basePath);\n        },\n        /**\n         * Query deposits by proposalId\n         * @summary Query deposits\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsGet: function (proposalId, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsGet(proposalId, options)(axios, basePath);\n        },\n        /**\n         * Send transaction to deposit tokens to a proposal\n         * @summary Deposit tokens to a proposal\n         * @param {string} proposalId proposal id\n         * @param {DepositReq} postDepositBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(axios, basePath);\n        },\n        /**\n         * Query a proposal by id\n         * @summary Query a proposal\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdGet: function (proposalId, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdGet(proposalId, options)(axios, basePath);\n        },\n        /**\n         * Query for the proposer for a proposal\n         * @summary Query proposer\n         * @param {string} proposalId\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdProposerGet: function (proposalId, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdProposerGet(proposalId, options)(axios, basePath);\n        },\n        /**\n         * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n         * @summary Get a proposal\\'s tally result at the current time\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdTallyGet: function (proposalId, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdTallyGet(proposalId, options)(axios, basePath);\n        },\n        /**\n         * Query voters information by proposalId\n         * @summary Query voters\n         * @param {string} proposalId proposal id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesGet: function (proposalId, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesGet(proposalId, options)(axios, basePath);\n        },\n        /**\n         * Send transaction to vote a proposal\n         * @summary Vote a proposal\n         * @param {string} proposalId proposal id\n         * @param {VoteReq} postVoteBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(axios, basePath);\n        },\n        /**\n         * Query vote information by proposal Id and voter address\n         * @summary Query vote\n         * @param {string} proposalId proposal id\n         * @param {string} voter Bech32 voter address\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {\n            return exports.GovernanceApiFp(configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(axios, basePath);\n        },\n    };\n};\n/**\n * GovernanceApi - object-oriented interface\n * @export\n * @class GovernanceApi\n * @extends {BaseAPI}\n */\nvar GovernanceApi = /** @class */ (function (_super) {\n    __extends(GovernanceApi, _super);\n    function GovernanceApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.\n     * @summary Query governance deposit parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govParametersDepositGet = function (options) {\n        return exports.GovernanceApiFp(this.configuration).govParametersDepositGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Query governance tally parameters\n     * @summary Query governance tally parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govParametersTallyingGet = function (options) {\n        return exports.GovernanceApiFp(this.configuration).govParametersTallyingGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Query governance voting parameters. The voting_period units are in nanoseconds.\n     * @summary Query governance voting parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govParametersVotingGet = function (options) {\n        return exports.GovernanceApiFp(this.configuration).govParametersVotingGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Query proposals information with parameters\n     * @summary Query proposals\n     * @param {string} [voter] voter address\n     * @param {string} [depositor] depositor address\n     * @param {string} [status] proposal status, valid values can be &#x60;\\&quot;deposit_period\\&quot;&#x60;, &#x60;\\&quot;voting_period\\&quot;&#x60;, &#x60;\\&quot;passed\\&quot;&#x60;, &#x60;\\&quot;rejected\\&quot;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsGet = function (voter, depositor, status, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsGet(voter, depositor, status, options)(this.axios, this.basePath);\n    };\n    /**\n     * Generate a parameter change proposal transaction\n     * @summary Generate a parameter change proposal transaction\n     * @param {ParamChangeProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsParamChangePost = function (postProposalBody, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsParamChangePost(postProposalBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Send transaction to submit a proposal\n     * @summary Submit a proposal\n     * @param {PostProposalReq} postProposalBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsPost = function (postProposalBody, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsPost(postProposalBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query deposit by proposalId and depositor address\n     * @summary Query deposit\n     * @param {string} proposalId proposal id\n     * @param {string} depositor Bech32 depositor address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdDepositsDepositorGet = function (proposalId, depositor, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query deposits by proposalId\n     * @summary Query deposits\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdDepositsGet = function (proposalId, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsGet(proposalId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Send transaction to deposit tokens to a proposal\n     * @summary Deposit tokens to a proposal\n     * @param {string} proposalId proposal id\n     * @param {DepositReq} postDepositBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdDepositsPost = function (proposalId, postDepositBody, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query a proposal by id\n     * @summary Query a proposal\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdGet = function (proposalId, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdGet(proposalId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query for the proposer for a proposal\n     * @summary Query proposer\n     * @param {string} proposalId\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdProposerGet = function (proposalId, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdProposerGet(proposalId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Gets a proposal\\'s tally result at the current time. If the proposal is pending deposits (i.e status \\'DepositPeriod\\') it returns an empty tally result.\n     * @summary Get a proposal\\'s tally result at the current time\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdTallyGet = function (proposalId, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdTallyGet(proposalId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query voters information by proposalId\n     * @summary Query voters\n     * @param {string} proposalId proposal id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdVotesGet = function (proposalId, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesGet(proposalId, options)(this.axios, this.basePath);\n    };\n    /**\n     * Send transaction to vote a proposal\n     * @summary Vote a proposal\n     * @param {string} proposalId proposal id\n     * @param {VoteReq} postVoteBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdVotesPost = function (proposalId, postVoteBody, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)(this.axios, this.basePath);\n    };\n    /**\n     * Query vote information by proposal Id and voter address\n     * @summary Query vote\n     * @param {string} proposalId proposal id\n     * @param {string} voter Bech32 voter address\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GovernanceApi\n     */\n    GovernanceApi.prototype.govProposalsProposalIdVotesVoterGet = function (proposalId, voter, options) {\n        return exports.GovernanceApiFp(this.configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options)(this.axios, this.basePath);\n    };\n    return GovernanceApi;\n}(base_1.BaseAPI));\nexports.GovernanceApi = GovernanceApi;\n/**\n * IBCApi - axios parameter creator\n * @export\n */\nexports.IBCApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Channel open-init\n         * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'channelOpenInitRequestBody' is not null or undefined\n            if (channelOpenInitRequestBody === null ||\n                channelOpenInitRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelOpenInitRequestBody\", \"Required parameter channelOpenInitRequestBody was null or undefined when calling ibcChannelsOpenInitPost.\");\n            }\n            var localVarPath = \"/ibc/channels/open-init\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelOpenInitRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelOpenInitRequestBody !== undefined\n                    ? channelOpenInitRequestBody\n                    : {})\n                : channelOpenInitRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Channel open-try\n         * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'channelOpenTryRequestBody' is not null or undefined\n            if (channelOpenTryRequestBody === null ||\n                channelOpenTryRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelOpenTryRequestBody\", \"Required parameter channelOpenTryRequestBody was null or undefined when calling ibcChannelsOpenTryPost.\");\n            }\n            var localVarPath = \"/ibc/channels/open-try\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelOpenTryRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelOpenTryRequestBody !== undefined\n                    ? channelOpenTryRequestBody\n                    : {})\n                : channelOpenTryRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query client state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdClientStateGet.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/client-state\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query connections of a client\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdConnectionsGet.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/connections\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query cliet consensus-state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdConsensusStateGet.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/consensus-state\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Submit misbehaviour\n         * @param {string} clientId Client ID\n         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdMisbehaviourPost.\");\n            }\n            // verify required parameter 'submitMisbehaviourRequestBody' is not null or undefined\n            if (submitMisbehaviourRequestBody === null ||\n                submitMisbehaviourRequestBody === undefined) {\n                throw new base_1.RequiredError(\"submitMisbehaviourRequestBody\", \"Required parameter submitMisbehaviourRequestBody was null or undefined when calling ibcClientsClientIdMisbehaviourPost.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/misbehaviour\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof submitMisbehaviourRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(submitMisbehaviourRequestBody !== undefined\n                    ? submitMisbehaviourRequestBody\n                    : {})\n                : submitMisbehaviourRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query client root\n         * @param {string} clientId Client ID\n         * @param {number} height Root height\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdRootsHeightGet.\");\n            }\n            // verify required parameter 'height' is not null or undefined\n            if (height === null || height === undefined) {\n                throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling ibcClientsClientIdRootsHeightGet.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/roots/{height}\"\n                .replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)))\n                .replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Update client\n         * @param {string} clientId Client ID\n         * @param {UpdateClientReq} updateClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'clientId' is not null or undefined\n            if (clientId === null || clientId === undefined) {\n                throw new base_1.RequiredError(\"clientId\", \"Required parameter clientId was null or undefined when calling ibcClientsClientIdUpdatePost.\");\n            }\n            // verify required parameter 'updateClientRequestBody' is not null or undefined\n            if (updateClientRequestBody === null ||\n                updateClientRequestBody === undefined) {\n                throw new base_1.RequiredError(\"updateClientRequestBody\", \"Required parameter updateClientRequestBody was null or undefined when calling ibcClientsClientIdUpdatePost.\");\n            }\n            var localVarPath = \"/ibc/clients/{client-id}/update\".replace(\"{\" + \"client-id\" + \"}\", encodeURIComponent(String(clientId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof updateClientRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(updateClientRequestBody !== undefined\n                    ? updateClientRequestBody\n                    : {})\n                : updateClientRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Create client\n         * @param {CreateClientReq} createClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsPost: function (createClientRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'createClientRequestBody' is not null or undefined\n            if (createClientRequestBody === null ||\n                createClientRequestBody === undefined) {\n                throw new base_1.RequiredError(\"createClientRequestBody\", \"Required parameter createClientRequestBody was null or undefined when calling ibcClientsPost.\");\n            }\n            var localVarPath = \"/ibc/clients\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof createClientRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(createClientRequestBody !== undefined\n                    ? createClientRequestBody\n                    : {})\n                : createClientRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query connection\n         * @param {string} connectionId Connection ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'connectionId' is not null or undefined\n            if (connectionId === null || connectionId === undefined) {\n                throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdGet.\");\n            }\n            var localVarPath = \"/ibc/connections/{connection-id}\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Connection open-ack\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'connectionId' is not null or undefined\n            if (connectionId === null || connectionId === undefined) {\n                throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.\");\n            }\n            // verify required parameter 'connectionOpenAckRequestBody' is not null or undefined\n            if (connectionOpenAckRequestBody === null ||\n                connectionOpenAckRequestBody === undefined) {\n                throw new base_1.RequiredError(\"connectionOpenAckRequestBody\", \"Required parameter connectionOpenAckRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenAckPost.\");\n            }\n            var localVarPath = \"/ibc/connections/{connection-id}/open-ack\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof connectionOpenAckRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(connectionOpenAckRequestBody !== undefined\n                    ? connectionOpenAckRequestBody\n                    : {})\n                : connectionOpenAckRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Connection open-confirm\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'connectionId' is not null or undefined\n            if (connectionId === null || connectionId === undefined) {\n                throw new base_1.RequiredError(\"connectionId\", \"Required parameter connectionId was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.\");\n            }\n            // verify required parameter 'connectionOpenConfirmRequestBody' is not null or undefined\n            if (connectionOpenConfirmRequestBody === null ||\n                connectionOpenConfirmRequestBody === undefined) {\n                throw new base_1.RequiredError(\"connectionOpenConfirmRequestBody\", \"Required parameter connectionOpenConfirmRequestBody was null or undefined when calling ibcConnectionsConnectionIdOpenConfirmPost.\");\n            }\n            var localVarPath = \"/ibc/connections/{connection-id}/open-confirm\".replace(\"{\" + \"connection-id\" + \"}\", encodeURIComponent(String(connectionId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof connectionOpenConfirmRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(connectionOpenConfirmRequestBody !== undefined\n                    ? connectionOpenConfirmRequestBody\n                    : {})\n                : connectionOpenConfirmRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Connection open-init\n         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'connectionOpenInitRequestBody' is not null or undefined\n            if (connectionOpenInitRequestBody === null ||\n                connectionOpenInitRequestBody === undefined) {\n                throw new base_1.RequiredError(\"connectionOpenInitRequestBody\", \"Required parameter connectionOpenInitRequestBody was null or undefined when calling ibcConnectionsOpenInitPost.\");\n            }\n            var localVarPath = \"/ibc/connections/open-init\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof connectionOpenInitRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(connectionOpenInitRequestBody !== undefined\n                    ? connectionOpenInitRequestBody\n                    : {})\n                : connectionOpenInitRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Connection open-try\n         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'connectionOpenTryRequestBody' is not null or undefined\n            if (connectionOpenTryRequestBody === null ||\n                connectionOpenTryRequestBody === undefined) {\n                throw new base_1.RequiredError(\"connectionOpenTryRequestBody\", \"Required parameter connectionOpenTryRequestBody was null or undefined when calling ibcConnectionsOpenTryPost.\");\n            }\n            var localVarPath = \"/ibc/connections/open-try\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof connectionOpenTryRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(connectionOpenTryRequestBody !== undefined\n                    ? connectionOpenTryRequestBody\n                    : {})\n                : connectionOpenTryRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query header\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcHeaderGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/ibc/header\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query node consensus-state\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcNodeStateGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/ibc/node-state\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Receive packet\n         * @param {ReceivedPacketReq} receivePacketRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'receivePacketRequestBody' is not null or undefined\n            if (receivePacketRequestBody === null ||\n                receivePacketRequestBody === undefined) {\n                throw new base_1.RequiredError(\"receivePacketRequestBody\", \"Required parameter receivePacketRequestBody was null or undefined when calling ibcPacketsReceivePost.\");\n            }\n            var localVarPath = \"/ibc/packets/receive\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof receivePacketRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(receivePacketRequestBody !== undefined\n                    ? receivePacketRequestBody\n                    : {})\n                : receivePacketRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query IBC path\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPathGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/ibc/path\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Channel close-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n            }\n            // verify required parameter 'channelCloseConfirmRequestBody' is not null or undefined\n            if (channelCloseConfirmRequestBody === null ||\n                channelCloseConfirmRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelCloseConfirmRequestBody\", \"Required parameter channelCloseConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseConfirmPost.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/close-confirm\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelCloseConfirmRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelCloseConfirmRequestBody !== undefined\n                    ? channelCloseConfirmRequestBody\n                    : {})\n                : channelCloseConfirmRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Channel close-init\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n            }\n            // verify required parameter 'channelCloseInitRequestBody' is not null or undefined\n            if (channelCloseInitRequestBody === null ||\n                channelCloseInitRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelCloseInitRequestBody\", \"Required parameter channelCloseInitRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdCloseInitPost.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/close-init\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelCloseInitRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelCloseInitRequestBody !== undefined\n                    ? channelCloseInitRequestBody\n                    : {})\n                : channelCloseInitRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query channel\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdGet.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (prove !== undefined) {\n                localVarQueryParameter[\"prove\"] = prove;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query next sequence receive\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/next-sequence-recv\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Channel open-ack\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n            }\n            // verify required parameter 'channelOpenAckRequestBody' is not null or undefined\n            if (channelOpenAckRequestBody === null ||\n                channelOpenAckRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelOpenAckRequestBody\", \"Required parameter channelOpenAckRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenAckPost.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/open-ack\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelOpenAckRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelOpenAckRequestBody !== undefined\n                    ? channelOpenAckRequestBody\n                    : {})\n                : channelOpenAckRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Channel open-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n            }\n            // verify required parameter 'channelOpenConfirmRequestBody' is not null or undefined\n            if (channelOpenConfirmRequestBody === null ||\n                channelOpenConfirmRequestBody === undefined) {\n                throw new base_1.RequiredError(\"channelOpenConfirmRequestBody\", \"Required parameter channelOpenConfirmRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdOpenConfirmPost.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/open-confirm\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof channelOpenConfirmRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(channelOpenConfirmRequestBody !== undefined\n                    ? channelOpenConfirmRequestBody\n                    : {})\n                : channelOpenConfirmRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Transfer token\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {TransferTokenReq} transferTokenRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'portId' is not null or undefined\n            if (portId === null || portId === undefined) {\n                throw new base_1.RequiredError(\"portId\", \"Required parameter portId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n            }\n            // verify required parameter 'channelId' is not null or undefined\n            if (channelId === null || channelId === undefined) {\n                throw new base_1.RequiredError(\"channelId\", \"Required parameter channelId was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n            }\n            // verify required parameter 'transferTokenRequestBody' is not null or undefined\n            if (transferTokenRequestBody === null ||\n                transferTokenRequestBody === undefined) {\n                throw new base_1.RequiredError(\"transferTokenRequestBody\", \"Required parameter transferTokenRequestBody was null or undefined when calling ibcPortsPortIdChannelsChannelIdTransferPost.\");\n            }\n            var localVarPath = \"/ibc/ports/{port-id}/channels/{channel-id}/transfer\"\n                .replace(\"{\" + \"port-id\" + \"}\", encodeURIComponent(String(portId)))\n                .replace(\"{\" + \"channel-id\" + \"}\", encodeURIComponent(String(channelId)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof transferTokenRequestBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(transferTokenRequestBody !== undefined\n                    ? transferTokenRequestBody\n                    : {})\n                : transferTokenRequestBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * IBCApi - functional programming interface\n * @export\n */\nexports.IBCApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Channel open-init\n         * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Channel open-try\n         * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query client state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query connections of a client\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query cliet consensus-state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Submit misbehaviour\n         * @param {string} clientId Client ID\n         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query client root\n         * @param {string} clientId Client ID\n         * @param {number} height Root height\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Update client\n         * @param {string} clientId Client ID\n         * @param {UpdateClientReq} updateClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Create client\n         * @param {CreateClientReq} createClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsPost: function (createClientRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcClientsPost(createClientRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query connection\n         * @param {string} connectionId Connection ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Connection open-ack\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Connection open-confirm\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Connection open-init\n         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Connection open-try\n         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query header\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcHeaderGet: function (options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcHeaderGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query node consensus-state\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcNodeStateGet: function (options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcNodeStateGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Receive packet\n         * @param {ReceivedPacketReq} receivePacketRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query IBC path\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPathGet: function (options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPathGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Channel close-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Channel close-init\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query channel\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query next sequence receive\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Channel open-ack\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Channel open-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Transfer token\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {TransferTokenReq} transferTokenRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n            var localVarAxiosArgs = exports.IBCApiAxiosParamCreator(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * IBCApi - factory interface\n * @export\n */\nexports.IBCApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Channel open-init\n         * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenInitPost: function (channelOpenInitRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Channel open-try\n         * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcChannelsOpenTryPost: function (channelOpenTryRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query client state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdClientStateGet: function (clientId, prove, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query connections of a client\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConnectionsGet: function (clientId, prove, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query cliet consensus-state\n         * @param {string} clientId Client ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdConsensusStateGet: function (clientId, prove, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Submit misbehaviour\n         * @param {string} clientId Client ID\n         * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdMisbehaviourPost: function (clientId, submitMisbehaviourRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query client root\n         * @param {string} clientId Client ID\n         * @param {number} height Root height\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdRootsHeightGet: function (clientId, height, prove, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Update client\n         * @param {string} clientId Client ID\n         * @param {UpdateClientReq} updateClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsClientIdUpdatePost: function (clientId, updateClientRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Create client\n         * @param {CreateClientReq} createClientRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcClientsPost: function (createClientRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcClientsPost(createClientRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query connection\n         * @param {string} connectionId Connection ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdGet: function (connectionId, prove, options) {\n            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Connection open-ack\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenAckPost: function (connectionId, connectionOpenAckRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Connection open-confirm\n         * @param {string} connectionId Connection ID\n         * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsConnectionIdOpenConfirmPost: function (connectionId, connectionOpenConfirmRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Connection open-init\n         * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenInitPost: function (connectionOpenInitRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Connection open-try\n         * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcConnectionsOpenTryPost: function (connectionOpenTryRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query header\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcHeaderGet: function (options) {\n            return exports.IBCApiFp(configuration).ibcHeaderGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query node consensus-state\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcNodeStateGet: function (options) {\n            return exports.IBCApiFp(configuration).ibcNodeStateGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Receive packet\n         * @param {ReceivedPacketReq} receivePacketRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPacketsReceivePost: function (receivePacketRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query IBC path\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPathGet: function (options) {\n            return exports.IBCApiFp(configuration).ibcPathGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Channel close-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseConfirmPost: function (portId, channelId, channelCloseConfirmRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Channel close-init\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdCloseInitPost: function (portId, channelId, channelCloseInitRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query channel\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {boolean} [prove] Proof of result\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdGet: function (portId, channelId, prove, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query next sequence receive\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet: function (portId, channelId, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Channel open-ack\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenAckPost: function (portId, channelId, channelOpenAckRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Channel open-confirm\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdOpenConfirmPost: function (portId, channelId, channelOpenConfirmRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Transfer token\n         * @param {string} portId Port ID\n         * @param {string} channelId Channel ID\n         * @param {TransferTokenReq} transferTokenRequestBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        ibcPortsPortIdChannelsChannelIdTransferPost: function (portId, channelId, transferTokenRequestBody, options) {\n            return exports.IBCApiFp(configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(axios, basePath);\n        },\n    };\n};\n/**\n * IBCApi - object-oriented interface\n * @export\n * @class IBCApi\n * @extends {BaseAPI}\n */\nvar IBCApi = /** @class */ (function (_super) {\n    __extends(IBCApi, _super);\n    function IBCApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Channel open-init\n     * @param {ChannelOpenInitReq} channelOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcChannelsOpenInitPost = function (channelOpenInitRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcChannelsOpenInitPost(channelOpenInitRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Channel open-try\n     * @param {ChannelOpenTryReq} channelOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcChannelsOpenTryPost = function (channelOpenTryRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcChannelsOpenTryPost(channelOpenTryRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query client state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdClientStateGet = function (clientId, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdClientStateGet(clientId, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query connections of a client\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdConnectionsGet = function (clientId, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdConnectionsGet(clientId, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query cliet consensus-state\n     * @param {string} clientId Client ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdConsensusStateGet = function (clientId, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdConsensusStateGet(clientId, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Submit misbehaviour\n     * @param {string} clientId Client ID\n     * @param {SubmitMisbehaviourReq} submitMisbehaviourRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdMisbehaviourPost = function (clientId, submitMisbehaviourRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdMisbehaviourPost(clientId, submitMisbehaviourRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query client root\n     * @param {string} clientId Client ID\n     * @param {number} height Root height\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdRootsHeightGet = function (clientId, height, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdRootsHeightGet(clientId, height, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Update client\n     * @param {string} clientId Client ID\n     * @param {UpdateClientReq} updateClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsClientIdUpdatePost = function (clientId, updateClientRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsClientIdUpdatePost(clientId, updateClientRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Create client\n     * @param {CreateClientReq} createClientRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcClientsPost = function (createClientRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcClientsPost(createClientRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query connection\n     * @param {string} connectionId Connection ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcConnectionsConnectionIdGet = function (connectionId, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdGet(connectionId, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Connection open-ack\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenAckReq} connectionOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcConnectionsConnectionIdOpenAckPost = function (connectionId, connectionOpenAckRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenAckPost(connectionId, connectionOpenAckRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Connection open-confirm\n     * @param {string} connectionId Connection ID\n     * @param {ConnectionOpenConfirmReq} connectionOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcConnectionsConnectionIdOpenConfirmPost = function (connectionId, connectionOpenConfirmRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcConnectionsConnectionIdOpenConfirmPost(connectionId, connectionOpenConfirmRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Connection open-init\n     * @param {ConnectionOpenInitReq} connectionOpenInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcConnectionsOpenInitPost = function (connectionOpenInitRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcConnectionsOpenInitPost(connectionOpenInitRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Connection open-try\n     * @param {ConnectionOpenTryReq} connectionOpenTryRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcConnectionsOpenTryPost = function (connectionOpenTryRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcConnectionsOpenTryPost(connectionOpenTryRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query header\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcHeaderGet = function (options) {\n        return exports.IBCApiFp(this.configuration).ibcHeaderGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query node consensus-state\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcNodeStateGet = function (options) {\n        return exports.IBCApiFp(this.configuration).ibcNodeStateGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Receive packet\n     * @param {ReceivedPacketReq} receivePacketRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPacketsReceivePost = function (receivePacketRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPacketsReceivePost(receivePacketRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query IBC path\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPathGet = function (options) {\n        return exports.IBCApiFp(this.configuration).ibcPathGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Channel close-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseConfirmReq} channelCloseConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseConfirmPost = function (portId, channelId, channelCloseConfirmRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseConfirmPost(portId, channelId, channelCloseConfirmRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Channel close-init\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelCloseInitReq} channelCloseInitRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdCloseInitPost = function (portId, channelId, channelCloseInitRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdCloseInitPost(portId, channelId, channelCloseInitRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query channel\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {boolean} [prove] Proof of result\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdGet = function (portId, channelId, prove, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdGet(portId, channelId, prove, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query next sequence receive\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet = function (portId, channelId, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdNextSequenceRecvGet(portId, channelId, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Channel open-ack\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenAckReq} channelOpenAckRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenAckPost = function (portId, channelId, channelOpenAckRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenAckPost(portId, channelId, channelOpenAckRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Channel open-confirm\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {ChannelOpenConfirmReq} channelOpenConfirmRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdOpenConfirmPost = function (portId, channelId, channelOpenConfirmRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdOpenConfirmPost(portId, channelId, channelOpenConfirmRequestBody, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Transfer token\n     * @param {string} portId Port ID\n     * @param {string} channelId Channel ID\n     * @param {TransferTokenReq} transferTokenRequestBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IBCApi\n     */\n    IBCApi.prototype.ibcPortsPortIdChannelsChannelIdTransferPost = function (portId, channelId, transferTokenRequestBody, options) {\n        return exports.IBCApiFp(this.configuration).ibcPortsPortIdChannelsChannelIdTransferPost(portId, channelId, transferTokenRequestBody, options)(this.axios, this.basePath);\n    };\n    return IBCApi;\n}(base_1.BaseAPI));\nexports.IBCApi = IBCApi;\n/**\n * MintApi - axios parameter creator\n * @export\n */\nexports.MintApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Current minting annual provisions value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingAnnualProvisionsGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/minting/annual-provisions\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Current minting inflation value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingInflationGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/minting/inflation\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Minting module parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingParametersGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/minting/parameters\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * MintApi - functional programming interface\n * @export\n */\nexports.MintApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Current minting annual provisions value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingAnnualProvisionsGet: function (options) {\n            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingAnnualProvisionsGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Current minting inflation value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingInflationGet: function (options) {\n            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingInflationGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Minting module parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingParametersGet: function (options) {\n            var localVarAxiosArgs = exports.MintApiAxiosParamCreator(configuration).mintingParametersGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * MintApi - factory interface\n * @export\n */\nexports.MintApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Current minting annual provisions value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingAnnualProvisionsGet: function (options) {\n            return exports.MintApiFp(configuration).mintingAnnualProvisionsGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Current minting inflation value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingInflationGet: function (options) {\n            return exports.MintApiFp(configuration).mintingInflationGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Minting module parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        mintingParametersGet: function (options) {\n            return exports.MintApiFp(configuration).mintingParametersGet(options)(axios, basePath);\n        },\n    };\n};\n/**\n * MintApi - object-oriented interface\n * @export\n * @class MintApi\n * @extends {BaseAPI}\n */\nvar MintApi = /** @class */ (function (_super) {\n    __extends(MintApi, _super);\n    function MintApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Current minting annual provisions value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MintApi\n     */\n    MintApi.prototype.mintingAnnualProvisionsGet = function (options) {\n        return exports.MintApiFp(this.configuration).mintingAnnualProvisionsGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Current minting inflation value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MintApi\n     */\n    MintApi.prototype.mintingInflationGet = function (options) {\n        return exports.MintApiFp(this.configuration).mintingInflationGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Minting module parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof MintApi\n     */\n    MintApi.prototype.mintingParametersGet = function (options) {\n        return exports.MintApiFp(this.configuration).mintingParametersGet(options)(this.axios, this.basePath);\n    };\n    return MintApi;\n}(base_1.BaseAPI));\nexports.MintApi = MintApi;\n/**\n * SlashingApi - axios parameter creator\n * @export\n */\nexports.SlashingApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get the current slashing parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingParametersGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/slashing/parameters\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get sign info of all validators\n         * @summary Get sign info of given all validators\n         * @param {number} page Page number\n         * @param {number} limit Maximum number of items per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingSigningInfosGet: function (page, limit, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'page' is not null or undefined\n            if (page === null || page === undefined) {\n                throw new base_1.RequiredError(\"page\", \"Required parameter page was null or undefined when calling slashingSigningInfosGet.\");\n            }\n            // verify required parameter 'limit' is not null or undefined\n            if (limit === null || limit === undefined) {\n                throw new base_1.RequiredError(\"limit\", \"Required parameter limit was null or undefined when calling slashingSigningInfosGet.\");\n            }\n            var localVarPath = \"/slashing/signing_infos\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (page !== undefined) {\n                localVarQueryParameter[\"page\"] = page;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Send transaction to unjail a jailed validator\n         * @summary Unjail a jailed validator\n         * @param {string} validatorAddr Bech32 validator address\n         * @param {UnjailReq} unjailBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.\");\n            }\n            // verify required parameter 'unjailBody' is not null or undefined\n            if (unjailBody === null || unjailBody === undefined) {\n                throw new base_1.RequiredError(\"unjailBody\", \"Required parameter unjailBody was null or undefined when calling slashingValidatorsValidatorAddrUnjailPost.\");\n            }\n            var localVarPath = \"/slashing/validators/{validatorAddr}/unjail\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof unjailBody !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(unjailBody !== undefined ? unjailBody : {})\n                : unjailBody || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SlashingApi - functional programming interface\n * @export\n */\nexports.SlashingApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get the current slashing parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingParametersGet: function (options) {\n            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingParametersGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get sign info of all validators\n         * @summary Get sign info of given all validators\n         * @param {number} page Page number\n         * @param {number} limit Maximum number of items per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingSigningInfosGet: function (page, limit, options) {\n            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingSigningInfosGet(page, limit, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Send transaction to unjail a jailed validator\n         * @summary Unjail a jailed validator\n         * @param {string} validatorAddr Bech32 validator address\n         * @param {UnjailReq} unjailBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n            var localVarAxiosArgs = exports.SlashingApiAxiosParamCreator(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SlashingApi - factory interface\n * @export\n */\nexports.SlashingApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Get the current slashing parameters\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingParametersGet: function (options) {\n            return exports.SlashingApiFp(configuration).slashingParametersGet(options)(axios, basePath);\n        },\n        /**\n         * Get sign info of all validators\n         * @summary Get sign info of given all validators\n         * @param {number} page Page number\n         * @param {number} limit Maximum number of items per page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingSigningInfosGet: function (page, limit, options) {\n            return exports.SlashingApiFp(configuration).slashingSigningInfosGet(page, limit, options)(axios, basePath);\n        },\n        /**\n         * Send transaction to unjail a jailed validator\n         * @summary Unjail a jailed validator\n         * @param {string} validatorAddr Bech32 validator address\n         * @param {UnjailReq} unjailBody\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {\n            return exports.SlashingApiFp(configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(axios, basePath);\n        },\n    };\n};\n/**\n * SlashingApi - object-oriented interface\n * @export\n * @class SlashingApi\n * @extends {BaseAPI}\n */\nvar SlashingApi = /** @class */ (function (_super) {\n    __extends(SlashingApi, _super);\n    function SlashingApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Get the current slashing parameters\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SlashingApi\n     */\n    SlashingApi.prototype.slashingParametersGet = function (options) {\n        return exports.SlashingApiFp(this.configuration).slashingParametersGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get sign info of all validators\n     * @summary Get sign info of given all validators\n     * @param {number} page Page number\n     * @param {number} limit Maximum number of items per page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SlashingApi\n     */\n    SlashingApi.prototype.slashingSigningInfosGet = function (page, limit, options) {\n        return exports.SlashingApiFp(this.configuration).slashingSigningInfosGet(page, limit, options)(this.axios, this.basePath);\n    };\n    /**\n     * Send transaction to unjail a jailed validator\n     * @summary Unjail a jailed validator\n     * @param {string} validatorAddr Bech32 validator address\n     * @param {UnjailReq} unjailBody\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SlashingApi\n     */\n    SlashingApi.prototype.slashingValidatorsValidatorAddrUnjailPost = function (validatorAddr, unjailBody, options) {\n        return exports.SlashingApiFp(this.configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)(this.axios, this.basePath);\n    };\n    return SlashingApi;\n}(base_1.BaseAPI));\nexports.SlashingApi = SlashingApi;\n/**\n * StakingApi - axios parameter creator\n * @export\n */\nexports.StakingApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get all delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Submit delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {DelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsPost.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof delegation !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(delegation !== undefined ? delegation : {})\n                : delegation || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query the current delegation between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.\");\n            }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}\"\n                .replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)))\n                .replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Submit a redelegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {RedelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrRedelegationsPost.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/redelegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof delegation !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(delegation !== undefined ? delegation : {})\n                : delegation || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Submit an unbonding delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {UndelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsPost.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof delegation !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(delegation !== undefined ? delegation : {})\n                : delegation || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query all unbonding delegations between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.\");\n            }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}\"\n                .replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)))\n                .replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query all validators that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/validators\".replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query a validator that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 ValAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'delegatorAddr' is not null or undefined\n            if (delegatorAddr === null || delegatorAddr === undefined) {\n                throw new base_1.RequiredError(\"delegatorAddr\", \"Required parameter delegatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.\");\n            }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/staking/delegators/{delegatorAddr}/validators/{validatorAddr}\"\n                .replace(\"{\" + \"delegatorAddr\" + \"}\", encodeURIComponent(String(delegatorAddr)))\n                .replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get the current staking parameter values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingParametersGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/staking/parameters\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get the current state of the staking pool\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingPoolGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/staking/pool\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get all redelegations (filter by query params)\n         * @param {string} [delegator] Bech32 AccAddress of Delegator\n         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/staking/redelegations\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (delegator !== undefined) {\n                localVarQueryParameter[\"delegator\"] = delegator;\n            }\n            if (validatorFrom !== undefined) {\n                localVarQueryParameter[\"validator_from\"] = validatorFrom;\n            }\n            if (validatorTo !== undefined) {\n                localVarQueryParameter[\"validator_to\"] = validatorTo;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get all validator candidates. By default it returns only the bonded validators.\n         * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n         * @param {number} [page] The page number.\n         * @param {number} [limit] The maximum number of items per page.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsGet: function (status, page, limit, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/staking/validators\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (status !== undefined) {\n                localVarQueryParameter[\"status\"] = status;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter[\"page\"] = page;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get all delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrDelegationsGet.\");\n            }\n            var localVarPath = \"/staking/validators/{validatorAddr}/delegations\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Query the information from a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrGet.\");\n            }\n            var localVarPath = \"/staking/validators/{validatorAddr}\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'validatorAddr' is not null or undefined\n            if (validatorAddr === null || validatorAddr === undefined) {\n                throw new base_1.RequiredError(\"validatorAddr\", \"Required parameter validatorAddr was null or undefined when calling stakingValidatorsValidatorAddrUnbondingDelegationsGet.\");\n            }\n            var localVarPath = \"/staking/validators/{validatorAddr}/unbonding_delegations\".replace(\"{\" + \"validatorAddr\" + \"}\", encodeURIComponent(String(validatorAddr)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * StakingApi - functional programming interface\n * @export\n */\nexports.StakingApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get all delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Submit delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {DelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query the current delegation between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Submit a redelegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {RedelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Submit an unbonding delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {UndelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query all unbonding delegations between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query all validators that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query a validator that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 ValAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get the current staking parameter values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingParametersGet: function (options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingParametersGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get the current state of the staking pool\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingPoolGet: function (options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingPoolGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get all redelegations (filter by query params)\n         * @param {string} [delegator] Bech32 AccAddress of Delegator\n         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get all validator candidates. By default it returns only the bonded validators.\n         * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n         * @param {number} [page] The page number.\n         * @param {number} [limit] The maximum number of items per page.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsGet: function (status, page, limit, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsGet(status, page, limit, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get all delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Query the information from a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n            var localVarAxiosArgs = exports.StakingApiAxiosParamCreator(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * StakingApi - factory interface\n * @export\n */\nexports.StakingApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Get all delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Submit delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {DelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query the current delegation between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Submit a redelegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {RedelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a delegator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Submit an unbonding delegation\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {UndelegateReq} [delegation]\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query all unbonding delegations between a delegator and a validator\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query all validators that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query a validator that a delegator is bonded to\n         * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n         * @param {string} validatorAddr Bech32 ValAddress of Delegator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get the current staking parameter values\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingParametersGet: function (options) {\n            return exports.StakingApiFp(configuration).stakingParametersGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get the current state of the staking pool\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingPoolGet: function (options) {\n            return exports.StakingApiFp(configuration).stakingPoolGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get all redelegations (filter by query params)\n         * @param {string} [delegator] Bech32 AccAddress of Delegator\n         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {\n            return exports.StakingApiFp(configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get all validator candidates. By default it returns only the bonded validators.\n         * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n         * @param {number} [page] The page number.\n         * @param {number} [limit] The maximum number of items per page.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsGet: function (status, page, limit, options) {\n            return exports.StakingApiFp(configuration).stakingValidatorsGet(status, page, limit, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get all delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Query the information from a single validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get all unbonding delegations from a validator\n         * @param {string} validatorAddr Bech32 OperatorAddress of validator\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {\n            return exports.StakingApiFp(configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(axios, basePath);\n        },\n    };\n};\n/**\n * StakingApi - object-oriented interface\n * @export\n * @class StakingApi\n * @extends {BaseAPI}\n */\nvar StakingApi = /** @class */ (function (_super) {\n    __extends(StakingApi, _super);\n    function StakingApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Get all delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsGet = function (delegatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Submit delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {DelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsPost = function (delegatorAddr, delegation, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query the current delegation between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Submit a redelegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {RedelegationReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrRedelegationsPost = function (delegatorAddr, delegation, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get all unbonding delegations from a delegator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet = function (delegatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Submit an unbonding delegation\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {UndelegateReq} [delegation]\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost = function (delegatorAddr, delegation, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query all unbonding delegations between a delegator and a validator\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query all validators that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsGet = function (delegatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query a validator that a delegator is bonded to\n     * @param {string} delegatorAddr Bech32 AccAddress of Delegator\n     * @param {string} validatorAddr Bech32 ValAddress of Delegator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get the current staking parameter values\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingParametersGet = function (options) {\n        return exports.StakingApiFp(this.configuration).stakingParametersGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get the current state of the staking pool\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingPoolGet = function (options) {\n        return exports.StakingApiFp(this.configuration).stakingPoolGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get all redelegations (filter by query params)\n     * @param {string} [delegator] Bech32 AccAddress of Delegator\n     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator\n     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingRedelegationsGet = function (delegator, validatorFrom, validatorTo, options) {\n        return exports.StakingApiFp(this.configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get all validator candidates. By default it returns only the bonded validators.\n     * @param {string} [status] The validator bond status. Must be either \\&#39;bonded\\&#39;, \\&#39;unbonded\\&#39;, or \\&#39;unbonding\\&#39;.\n     * @param {number} [page] The page number.\n     * @param {number} [limit] The maximum number of items per page.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingValidatorsGet = function (status, page, limit, options) {\n        return exports.StakingApiFp(this.configuration).stakingValidatorsGet(status, page, limit, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get all delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingValidatorsValidatorAddrDelegationsGet = function (validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Query the information from a single validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingValidatorsValidatorAddrGet = function (validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get all unbonding delegations from a validator\n     * @param {string} validatorAddr Bech32 OperatorAddress of validator\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StakingApi\n     */\n    StakingApi.prototype.stakingValidatorsValidatorAddrUnbondingDelegationsGet = function (validatorAddr, options) {\n        return exports.StakingApiFp(this.configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)(this.axios, this.basePath);\n    };\n    return StakingApi;\n}(base_1.BaseAPI));\nexports.StakingApi = StakingApi;\n/**\n * SupplyApi - axios parameter creator\n * @export\n */\nexports.SupplyApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Total supply of a single coin denomination\n         * @param {string} denomination Coin denomination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalDenominationGet: function (denomination, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'denomination' is not null or undefined\n            if (denomination === null || denomination === undefined) {\n                throw new base_1.RequiredError(\"denomination\", \"Required parameter denomination was null or undefined when calling supplyTotalDenominationGet.\");\n            }\n            var localVarPath = \"/supply/total/{denomination}\".replace(\"{\" + \"denomination\" + \"}\", encodeURIComponent(String(denomination)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Total supply of coins in the chain\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/supply/total\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * SupplyApi - functional programming interface\n * @export\n */\nexports.SupplyApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Total supply of a single coin denomination\n         * @param {string} denomination Coin denomination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalDenominationGet: function (denomination, options) {\n            var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalDenominationGet(denomination, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Total supply of coins in the chain\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalGet: function (options) {\n            var localVarAxiosArgs = exports.SupplyApiAxiosParamCreator(configuration).supplyTotalGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * SupplyApi - factory interface\n * @export\n */\nexports.SupplyApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Total supply of a single coin denomination\n         * @param {string} denomination Coin denomination\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalDenominationGet: function (denomination, options) {\n            return exports.SupplyApiFp(configuration).supplyTotalDenominationGet(denomination, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Total supply of coins in the chain\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        supplyTotalGet: function (options) {\n            return exports.SupplyApiFp(configuration).supplyTotalGet(options)(axios, basePath);\n        },\n    };\n};\n/**\n * SupplyApi - object-oriented interface\n * @export\n * @class SupplyApi\n * @extends {BaseAPI}\n */\nvar SupplyApi = /** @class */ (function (_super) {\n    __extends(SupplyApi, _super);\n    function SupplyApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Total supply of a single coin denomination\n     * @param {string} denomination Coin denomination\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SupplyApi\n     */\n    SupplyApi.prototype.supplyTotalDenominationGet = function (denomination, options) {\n        return exports.SupplyApiFp(this.configuration).supplyTotalDenominationGet(denomination, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Total supply of coins in the chain\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SupplyApi\n     */\n    SupplyApi.prototype.supplyTotalGet = function (options) {\n        return exports.SupplyApiFp(this.configuration).supplyTotalGet(options)(this.axios, this.basePath);\n    };\n    return SupplyApi;\n}(base_1.BaseAPI));\nexports.SupplyApi = SupplyApi;\n/**\n * TendermintRPCApi - axios parameter creator\n * @export\n */\nexports.TendermintRPCApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get a block at a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksHeightGet: function (height, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'height' is not null or undefined\n            if (height === null || height === undefined) {\n                throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling blocksHeightGet.\");\n            }\n            var localVarPath = \"/blocks/{height}\".replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get the latest block\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksLatestGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/blocks/latest\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Get if the node is currently syning with other nodes\n         * @summary Syncing state of node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        syncingGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/syncing\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get a validator set a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsHeightGet: function (height, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'height' is not null or undefined\n            if (height === null || height === undefined) {\n                throw new base_1.RequiredError(\"height\", \"Required parameter height was null or undefined when calling validatorsetsHeightGet.\");\n            }\n            var localVarPath = \"/validatorsets/{height}\".replace(\"{\" + \"height\" + \"}\", encodeURIComponent(String(height)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         *\n         * @summary Get the latest validator set\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsLatestGet: function (options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/validatorsets/latest\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TendermintRPCApi - functional programming interface\n * @export\n */\nexports.TendermintRPCApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Get a block at a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksHeightGet: function (height, options) {\n            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksHeightGet(height, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get the latest block\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksLatestGet: function (options) {\n            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).blocksLatestGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Get if the node is currently syning with other nodes\n         * @summary Syncing state of node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        syncingGet: function (options) {\n            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).syncingGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get a validator set a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsHeightGet: function (height, options) {\n            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsHeightGet(height, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         *\n         * @summary Get the latest validator set\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsLatestGet: function (options) {\n            var localVarAxiosArgs = exports.TendermintRPCApiAxiosParamCreator(configuration).validatorsetsLatestGet(options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TendermintRPCApi - factory interface\n * @export\n */\nexports.TendermintRPCApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Get a block at a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksHeightGet: function (height, options) {\n            return exports.TendermintRPCApiFp(configuration).blocksHeightGet(height, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get the latest block\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        blocksLatestGet: function (options) {\n            return exports.TendermintRPCApiFp(configuration).blocksLatestGet(options)(axios, basePath);\n        },\n        /**\n         * Get if the node is currently syning with other nodes\n         * @summary Syncing state of node\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        syncingGet: function (options) {\n            return exports.TendermintRPCApiFp(configuration).syncingGet(options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get a validator set a certain height\n         * @param {number} height Block height\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsHeightGet: function (height, options) {\n            return exports.TendermintRPCApiFp(configuration).validatorsetsHeightGet(height, options)(axios, basePath);\n        },\n        /**\n         *\n         * @summary Get the latest validator set\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        validatorsetsLatestGet: function (options) {\n            return exports.TendermintRPCApiFp(configuration).validatorsetsLatestGet(options)(axios, basePath);\n        },\n    };\n};\n/**\n * TendermintRPCApi - object-oriented interface\n * @export\n * @class TendermintRPCApi\n * @extends {BaseAPI}\n */\nvar TendermintRPCApi = /** @class */ (function (_super) {\n    __extends(TendermintRPCApi, _super);\n    function TendermintRPCApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Get a block at a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TendermintRPCApi\n     */\n    TendermintRPCApi.prototype.blocksHeightGet = function (height, options) {\n        return exports.TendermintRPCApiFp(this.configuration).blocksHeightGet(height, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get the latest block\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TendermintRPCApi\n     */\n    TendermintRPCApi.prototype.blocksLatestGet = function (options) {\n        return exports.TendermintRPCApiFp(this.configuration).blocksLatestGet(options)(this.axios, this.basePath);\n    };\n    /**\n     * Get if the node is currently syning with other nodes\n     * @summary Syncing state of node\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TendermintRPCApi\n     */\n    TendermintRPCApi.prototype.syncingGet = function (options) {\n        return exports.TendermintRPCApiFp(this.configuration).syncingGet(options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get a validator set a certain height\n     * @param {number} height Block height\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TendermintRPCApi\n     */\n    TendermintRPCApi.prototype.validatorsetsHeightGet = function (height, options) {\n        return exports.TendermintRPCApiFp(this.configuration).validatorsetsHeightGet(height, options)(this.axios, this.basePath);\n    };\n    /**\n     *\n     * @summary Get the latest validator set\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TendermintRPCApi\n     */\n    TendermintRPCApi.prototype.validatorsetsLatestGet = function (options) {\n        return exports.TendermintRPCApiFp(this.configuration).validatorsetsLatestGet(options)(this.axios, this.basePath);\n    };\n    return TendermintRPCApi;\n}(base_1.BaseAPI));\nexports.TendermintRPCApi = TendermintRPCApi;\n/**\n * TransactionsApi - axios parameter creator\n * @export\n */\nexports.TransactionsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n         * @summary Decode a transaction from the Amino wire format\n         * @param {DecodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsDecodePost: function (tx, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tx' is not null or undefined\n            if (tx === null || tx === undefined) {\n                throw new base_1.RequiredError(\"tx\", \"Required parameter tx was null or undefined when calling txsDecodePost.\");\n            }\n            var localVarPath = \"/txs/decode\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof tx !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(tx !== undefined ? tx : {})\n                : tx || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n         * @summary Encode a transaction to the Amino wire format\n         * @param {EncodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsEncodePost: function (tx, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'tx' is not null or undefined\n            if (tx === null || tx === undefined) {\n                throw new base_1.RequiredError(\"tx\", \"Required parameter tx was null or undefined when calling txsEncodePost.\");\n            }\n            var localVarPath = \"/txs/encode\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof tx !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(tx !== undefined ? tx : {})\n                : tx || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Search transactions by events.\n         * @summary Search transactions\n         * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n         * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n         * @param {number} [page] Page number\n         * @param {number} [limit] Maximum number of items per page\n         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n            if (options === void 0) { options = {}; }\n            var localVarPath = \"/txs\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            if (messageAction !== undefined) {\n                localVarQueryParameter[\"message.action\"] = messageAction;\n            }\n            if (messageSender !== undefined) {\n                localVarQueryParameter[\"message.sender\"] = messageSender;\n            }\n            if (page !== undefined) {\n                localVarQueryParameter[\"page\"] = page;\n            }\n            if (limit !== undefined) {\n                localVarQueryParameter[\"limit\"] = limit;\n            }\n            if (txMinheight !== undefined) {\n                localVarQueryParameter[\"tx.minheight\"] = txMinheight;\n            }\n            if (txMaxheight !== undefined) {\n                localVarQueryParameter[\"tx.maxheight\"] = txMaxheight;\n            }\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Retrieve a transaction using its hash.\n         * @summary Get a Tx by hash\n         * @param {string} hash Tx hash\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsHashGet: function (hash, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'hash' is not null or undefined\n            if (hash === null || hash === undefined) {\n                throw new base_1.RequiredError(\"hash\", \"Required parameter hash was null or undefined when calling txsHashGet.\");\n            }\n            var localVarPath = \"/txs/{hash}\".replace(\"{\" + \"hash\" + \"}\", encodeURIComponent(String(hash)));\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"GET\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Broadcast a signed tx to a full node\n         * @summary Broadcast a signed tx\n         * @param {BroadcastReq} txBroadcast\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsPost: function (txBroadcast, options) {\n            if (options === void 0) { options = {}; }\n            // verify required parameter 'txBroadcast' is not null or undefined\n            if (txBroadcast === null || txBroadcast === undefined) {\n                throw new base_1.RequiredError(\"txBroadcast\", \"Required parameter txBroadcast was null or undefined when calling txsPost.\");\n            }\n            var localVarPath = \"/txs\";\n            var localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            var baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            var localVarRequestOptions = __assign(__assign({ method: \"POST\" }, baseOptions), options);\n            var localVarHeaderParameter = {};\n            var localVarQueryParameter = {};\n            localVarHeaderParameter[\"Content-Type\"] = \"application/json\";\n            localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            var headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            var needsSerialization = typeof txBroadcast !== \"string\" ||\n                localVarRequestOptions.headers[\"Content-Type\"] === \"application/json\";\n            localVarRequestOptions.data = needsSerialization\n                ? JSON.stringify(txBroadcast !== undefined ? txBroadcast : {})\n                : txBroadcast || \"\";\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    };\n};\n/**\n * TransactionsApi - functional programming interface\n * @export\n */\nexports.TransactionsApiFp = function (configuration) {\n    return {\n        /**\n         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n         * @summary Decode a transaction from the Amino wire format\n         * @param {DecodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsDecodePost: function (tx, options) {\n            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsDecodePost(tx, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n         * @summary Encode a transaction to the Amino wire format\n         * @param {EncodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsEncodePost: function (tx, options) {\n            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsEncodePost(tx, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Search transactions by events.\n         * @summary Search transactions\n         * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n         * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n         * @param {number} [page] Page number\n         * @param {number} [limit] Maximum number of items per page\n         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Retrieve a transaction using its hash.\n         * @summary Get a Tx by hash\n         * @param {string} hash Tx hash\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsHashGet: function (hash, options) {\n            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsHashGet(hash, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Broadcast a signed tx to a full node\n         * @summary Broadcast a signed tx\n         * @param {BroadcastReq} txBroadcast\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsPost: function (txBroadcast, options) {\n            var localVarAxiosArgs = exports.TransactionsApiAxiosParamCreator(configuration).txsPost(txBroadcast, options);\n            return function (axios, basePath) {\n                if (axios === void 0) { axios = axios_1.default; }\n                if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    };\n};\n/**\n * TransactionsApi - factory interface\n * @export\n */\nexports.TransactionsApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n         * @summary Decode a transaction from the Amino wire format\n         * @param {DecodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsDecodePost: function (tx, options) {\n            return exports.TransactionsApiFp(configuration).txsDecodePost(tx, options)(axios, basePath);\n        },\n        /**\n         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n         * @summary Encode a transaction to the Amino wire format\n         * @param {EncodeReq} tx\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsEncodePost: function (tx, options) {\n            return exports.TransactionsApiFp(configuration).txsEncodePost(tx, options)(axios, basePath);\n        },\n        /**\n         * Search transactions by events.\n         * @summary Search transactions\n         * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n         * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n         * @param {number} [page] Page number\n         * @param {number} [limit] Maximum number of items per page\n         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n            return exports.TransactionsApiFp(configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(axios, basePath);\n        },\n        /**\n         * Retrieve a transaction using its hash.\n         * @summary Get a Tx by hash\n         * @param {string} hash Tx hash\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsHashGet: function (hash, options) {\n            return exports.TransactionsApiFp(configuration).txsHashGet(hash, options)(axios, basePath);\n        },\n        /**\n         * Broadcast a signed tx to a full node\n         * @summary Broadcast a signed tx\n         * @param {BroadcastReq} txBroadcast\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        txsPost: function (txBroadcast, options) {\n            return exports.TransactionsApiFp(configuration).txsPost(txBroadcast, options)(axios, basePath);\n        },\n    };\n};\n/**\n * TransactionsApi - object-oriented interface\n * @export\n * @class TransactionsApi\n * @extends {BaseAPI}\n */\nvar TransactionsApi = /** @class */ (function (_super) {\n    __extends(TransactionsApi, _super);\n    function TransactionsApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON\n     * @summary Decode a transaction from the Amino wire format\n     * @param {DecodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionsApi\n     */\n    TransactionsApi.prototype.txsDecodePost = function (tx, options) {\n        return exports.TransactionsApiFp(this.configuration).txsDecodePost(tx, options)(this.axios, this.basePath);\n    };\n    /**\n     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes\n     * @summary Encode a transaction to the Amino wire format\n     * @param {EncodeReq} tx\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionsApi\n     */\n    TransactionsApi.prototype.txsEncodePost = function (tx, options) {\n        return exports.TransactionsApiFp(this.configuration).txsEncodePost(tx, options)(this.axios, this.basePath);\n    };\n    /**\n     * Search transactions by events.\n     * @summary Search transactions\n     * @param {string} [messageAction] transaction events such as \\&#39;message.action&#x3D;send\\&#39; which results in the following endpoint: \\&#39;GET /txs?message.action&#x3D;send\\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory\n     * @param {string} [messageSender] transaction tags with sender: \\&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\\&#39;\n     * @param {number} [page] Page number\n     * @param {number} [limit] Maximum number of items per page\n     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value\n     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionsApi\n     */\n    TransactionsApi.prototype.txsGet = function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {\n        return exports.TransactionsApiFp(this.configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)(this.axios, this.basePath);\n    };\n    /**\n     * Retrieve a transaction using its hash.\n     * @summary Get a Tx by hash\n     * @param {string} hash Tx hash\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionsApi\n     */\n    TransactionsApi.prototype.txsHashGet = function (hash, options) {\n        return exports.TransactionsApiFp(this.configuration).txsHashGet(hash, options)(this.axios, this.basePath);\n    };\n    /**\n     * Broadcast a signed tx to a full node\n     * @summary Broadcast a signed tx\n     * @param {BroadcastReq} txBroadcast\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TransactionsApi\n     */\n    TransactionsApi.prototype.txsPost = function (txBroadcast, options) {\n        return exports.TransactionsApiFp(this.configuration).txsPost(txBroadcast, options)(this.axios, this.basePath);\n    };\n    return TransactionsApi;\n}(base_1.BaseAPI));\nexports.TransactionsApi = TransactionsApi;\n"]},"metadata":{},"sourceType":"script"}