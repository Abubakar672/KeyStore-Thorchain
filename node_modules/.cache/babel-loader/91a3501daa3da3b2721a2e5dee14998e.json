{"ast":null,"code":"import BigNumber from 'bignumber.js';\n/**\r\n * Helper to delay anything within an `async` function\r\n *\r\n * @param ms delay in milliseconds\r\n *\r\n * @example\r\n *\r\n * ```\r\n * const anyAsyncFunc = async () => {\r\n *  // do something\r\n *  console.log('before delay')\r\n *  // wait for 200ms\r\n *  await delay(200)\r\n *  // and do other things\r\n *  console.log('after delay')\r\n * }\r\n * ```\r\n */\n\nvar delay = function (ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n/**\r\n * Shortcut to create a BigNumber\r\n *\r\n * @param {string | number | BigNumber.Instance} value\r\n * @returns {BigNumber} The BigNumber interface from the given value.\r\n */\n\n\nvar bn = function (value) {\n  return new BigNumber(value);\n};\n/**\r\n * Helper to check whether a BigNumber is valid or not\r\n *\r\n * @param {BigNumber} value\r\n * @returns {boolean} `true` or `false`.\r\n * */\n\n\nvar isValidBN = function (value) {\n  return !value.isNaN();\n};\n/**\r\n * Helper to create a big number from string or number\r\n * If it fails to create a big number, a big number with value 0 will be returned instead\r\n *\r\n * @param {string|number|undefined} value\r\n * @returns {BigNumber} The BigNumber interface from the given value. If invalid one is provided, will return `0`.\r\n * */\n\n\nvar bnOrZero = function (value) {\n  var b = value ? bn(value) : bn(0);\n  return isValidBN(b) ? b : bn(0);\n};\n/**\r\n * Helper to validate a possible BigNumber\r\n * If the given valie is invalid or undefined, 0 is returned as a BigNumber\r\n *\r\n * @param {BigNumber|undefined} value\r\n * @returns {boolean} `true` or `false`.\r\n */\n\n\nvar validBNOrZero = function (value) {\n  return value && isValidBN(value) ? value : bn(0);\n};\n/**\r\n * Format a BaseNumber to a string depending on given decimal places\r\n *\r\n * @param {BigNumber} value\r\n * @param {number} decimal The decimal place. (optional)\r\n * @returns {string} The formatted string from the given BigNumber and decimal place.\r\n * */\n\n\nvar formatBN = function (value, decimal) {\n  if (decimal === void 0) {\n    decimal = 2;\n  }\n\n  return value.toFormat(decimal);\n};\n/**\r\n * The enumuration for symbol position.\r\n * `before` or `after`\r\n */\n\n\nvar SymbolPosition;\n\n(function (SymbolPosition) {\n  SymbolPosition[\"BEFORE\"] = \"before\";\n  SymbolPosition[\"AFTER\"] = \"after\";\n})(SymbolPosition || (SymbolPosition = {}));\n/**\r\n * Formats a big number value by prefixing it with `$`\r\n *\r\n * @param {BigNumber} n\r\n * @param {number} decimalPlaces The decimal place. (optional)\r\n * @param {string} symbol The currency symbol. (optional)\r\n * @param {position} position The symbol position. (optional)\r\n * @returns {string} The formatted string from the given BigNumber, decimal places, symbol and position.\r\n */\n\n\nvar formatBNCurrency = function (n, decimalPlaces, symbol, position) {\n  if (decimalPlaces === void 0) {\n    decimalPlaces = 2;\n  }\n\n  if (symbol === void 0) {\n    symbol = '$';\n  }\n\n  if (position === void 0) {\n    position = SymbolPosition.BEFORE;\n  }\n\n  var value = formatBN(n, decimalPlaces);\n\n  if (position === SymbolPosition.BEFORE) {\n    return \"\" + symbol + value;\n  }\n\n  return \"\" + value + symbol;\n};\n/**\r\n * Helper to get a fixed `BigNumber`\r\n * Returns zero `BigNumber` if `value` is invalid\r\n *\r\n * @param {number|string|BigNumber|undefined} value\r\n * @param {number} decimalPlaces The decimal place. (optional)\r\n * @returns {BigNumber} The BigNumber interface from the given value and decimal.\r\n * */\n\n\nvar fixedBN = function (value, decimalPlaces) {\n  if (decimalPlaces === void 0) {\n    decimalPlaces = 2;\n  }\n\n  var n = bn(value || 0);\n  var fixedBN = isValidBN(n) ? n.toFixed(decimalPlaces) : bn(0).toFixed(decimalPlaces);\n  return bn(fixedBN);\n};\n\nvar _a;\n\nvar Chain;\n\n(function (Chain) {\n  Chain[\"Binance\"] = \"BNB\";\n  Chain[\"Bitcoin\"] = \"BTC\";\n  Chain[\"Ethereum\"] = \"ETH\";\n  Chain[\"THORChain\"] = \"THOR\";\n  Chain[\"Cosmos\"] = \"GAIA\";\n  Chain[\"Polkadot\"] = \"POLKA\";\n  Chain[\"BitcoinCash\"] = \"BCH\";\n  Chain[\"Litecoin\"] = \"LTC\";\n})(Chain || (Chain = {}));\n\nvar BNBChain = Chain.Binance;\nvar BTCChain = Chain.Bitcoin;\nvar ETHChain = Chain.Ethereum;\nvar THORChain = Chain.THORChain;\nvar CosmosChain = Chain.Cosmos;\nvar PolkadotChain = Chain.Polkadot;\nvar BCHChain = Chain.BitcoinCash;\nvar LTCChain = Chain.Litecoin;\n/**\r\n * Type guard to check whether string  is based on type `Chain`\r\n *\r\n * @param {string} c The chain string.\r\n * @returns {boolean} `true` or `false`\r\n */\n\nvar isChain = function (c) {\n  return Object.values(Chain).includes(c);\n};\n/**\r\n * Convert chain to string.\r\n *\r\n * @param {Chain} chainId.\r\n * @returns {string} The string based on the given chain type.\r\n */\n\n\nvar chainToString = Object.assign(function (chainId) {\n  if (!(chainId in chainToString)) return 'unknown chain';\n  return chainToString[chainId];\n}, (_a = {}, _a[Chain.THORChain] = 'Thorchain', _a[Chain.Bitcoin] = 'Bitcoin', _a[Chain.BitcoinCash] = 'Bitcoin Cash', _a[Chain.Litecoin] = 'Litecoin', _a[Chain.Ethereum] = 'Ethereum', _a[Chain.Binance] = 'Binance Chain', _a[Chain.Cosmos] = 'Cosmos', _a[Chain.Polkadot] = 'Polkadot', _a));\n/**\r\n * Removes leading / trailing zeros from a string of numbers\r\n * (1) Regex to remove trailing zeros https://stackoverflow.com/a/53397618/2032698\r\n * (2) Regex to remove leading zeros https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch06s06.html\r\n *\r\n * @param {string} value\r\n * @returns {string} The result after removing trailing zeros.\r\n */\n\nvar trimZeros = function (value) {\n  return value // (1) remove trailing zeros\n  .replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1') // (2) remove leading zeros\n  .replace(/\\b0*([1-9][0-9]*|0)\\b/, '$1');\n};\n\nvar Denomination;\n\n(function (Denomination) {\n  /**\r\n   * values for asset amounts in base units (no decimal)\r\n   */\n  Denomination[\"Base\"] = \"BASE\";\n  /**\r\n   * values of asset amounts (w/ decimal)\r\n   */\n\n  Denomination[\"Asset\"] = \"ASSET\";\n})(Denomination || (Denomination = {}));\n/**\r\n * Guard to check whether value is a BigNumber.Value or not\r\n *\r\n * @param {unknown} v\r\n * @returns {boolean} `true` or `false`.\r\n * */\n\n\nvar isBigNumberValue = function (v) {\n  return typeof v === 'string' || typeof v === 'number' || v instanceof BigNumber;\n};\n/**\r\n * Default number of asset decimals\r\n * For history reason and by starting the project on Binance chain assets, it's 8 decimal.\r\n *\r\n * For example:\r\n * ```\r\n * RUNE has a maximum of 8 digits of decimal\r\n * 0.00000001 RUNE == 1 รฐ (tor)\r\n * ```\r\n * */\n\n\nvar ASSET_DECIMAL = 8;\n/**\r\n * Factory to create values of assets (e.g. RUNE)\r\n *\r\n * @param {string|number|BigNumber|undefined} value - The asset amount, If the value is undefined, AssetAmount with value `0` will be returned.\r\n * @param {number} decimal The decimal places. (optional)\r\n * @returns {AssetAmount} The asset amount from the given value and decimal.\r\n *\r\n **/\n\nvar assetAmount = function (value, decimal) {\n  if (decimal === void 0) {\n    decimal = ASSET_DECIMAL;\n  }\n\n  var amount = fixedBN(value, decimal);\n  return {\n    type: Denomination.Asset,\n    amount: function () {\n      return amount;\n    },\n    plus: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return assetAmount(amount.plus(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    minus: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return assetAmount(amount.minus(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    times: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return assetAmount(amount.times(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    div: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return assetAmount(amount.div(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    lt: function (v) {\n      return amount.lt(isBigNumberValue(v) ? v : v.amount());\n    },\n    lte: function (v) {\n      return amount.lte(isBigNumberValue(v) ? v : v.amount());\n    },\n    gt: function (v) {\n      return amount.gt(isBigNumberValue(v) ? v : v.amount());\n    },\n    gte: function (v) {\n      return amount.gte(isBigNumberValue(v) ? v : v.amount());\n    },\n    eq: function (v) {\n      return amount.eq(isBigNumberValue(v) ? v : v.amount());\n    },\n    decimal: decimal\n  };\n};\n/**\r\n * Factory to create base amounts (e.g. tor)\r\n *\r\n * @param {string|number|BigNumber|undefined} value - The base amount, If the value is undefined, BaseAmount with value `0` will be returned.\r\n * @param {number} decimal The decimal places of its associated AssetAmount. (optional)\r\n * @returns {BaseAmount} The base amount from the given value and decimal.\r\n **/\n\n\nvar baseAmount = function (value, decimal) {\n  if (decimal === void 0) {\n    decimal = ASSET_DECIMAL;\n  }\n\n  var amount = fixedBN(value, 0);\n  return {\n    type: Denomination.Base,\n    amount: function () {\n      return amount;\n    },\n    plus: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return baseAmount(amount.plus(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    minus: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return baseAmount(amount.minus(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    times: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return baseAmount(amount.times(isBigNumberValue(v) ? v : v.amount()), d);\n    },\n    div: function (v, d) {\n      if (d === void 0) {\n        d = decimal;\n      }\n\n      return baseAmount(amount.div(isBigNumberValue(v) ? v : v.amount()).decimalPlaces(0, BigNumber.ROUND_DOWN), d);\n    },\n    lt: function (v) {\n      return amount.lt(isBigNumberValue(v) ? v : v.amount());\n    },\n    lte: function (v) {\n      return amount.lte(isBigNumberValue(v) ? v : v.amount());\n    },\n    gt: function (v) {\n      return amount.gt(isBigNumberValue(v) ? v : v.amount());\n    },\n    gte: function (v) {\n      return amount.gte(isBigNumberValue(v) ? v : v.amount());\n    },\n    eq: function (v) {\n      return amount.eq(isBigNumberValue(v) ? v : v.amount());\n    },\n    decimal: decimal\n  };\n};\n/**\r\n * Helper to convert values for a asset from base values (e.g. RUNE from tor)\r\n *\r\n * @param {BaseAmount} base\r\n * @returns {AssetAmount} The asset amount from the given base amount.\r\n * */\n\n\nvar baseToAsset = function (base) {\n  var decimal = base.decimal;\n  var value = base.amount().div(Math.pow(10, decimal)).decimalPlaces(decimal);\n  return assetAmount(value, decimal);\n};\n/**\r\n * Helper to convert asset to base values (e.g. tor -> RUNE)\r\n *\r\n * @param {AssetAmount} asset\r\n * @returns {BaseAmount} The base amount from the given AssetAmount.\r\n * */\n\n\nvar assetToBase = function (asset) {\n  var value = asset.amount().multipliedBy(Math.pow(10, asset.decimal)).integerValue();\n  return baseAmount(value, asset.decimal);\n};\n/**\r\n * Guard to check whether value is an amount of asset or not\r\n *\r\n * @param {Amount<Denomination>} v\r\n * @returns {boolean} `true` or `false`.\r\n * */\n\n\nvar isAssetAmount = function (v) {\n  return v.type === Denomination.Asset;\n};\n/**\r\n * Guard to check whether value is an amount of a base value or not\r\n *\r\n * @param {Amount<Denomination>} v\r\n * @returns {boolean} `true` or `false`.\r\n * */\n\n\nvar isBaseAmount = function (v) {\n  return v.type === Denomination.Base;\n};\n/**\r\n * Formats an `AssetAmount` into `string` based on decimal places\r\n *\r\n * If `decimal` is not set, `amount.decimal` is used\r\n * Note: `trimZeros` wins over `decimal`\r\n *\r\n * @param {Params} param The asset amount format options.\r\n * @returns {string} The formatted asset amount string from the given options.\r\n */\n\n\nvar formatAssetAmount = function (_a) {\n  var amount = _a.amount,\n      decimal = _a.decimal,\n      _b = _a.trimZeros,\n      trimZeros$1 = _b === void 0 ? false : _b; // strict check for `undefined` value as negate of 0 will return true and passed decimal value will be ignored\n\n  var formatted = formatBN(amount.amount(), decimal === undefined ? amount.decimal : decimal); // Note: `trimZeros` wins over `decimal`\n\n  return trimZeros$1 ? trimZeros(formatted) : formatted;\n};\n/**\r\n * Formats a `BaseAmount` value into a `string`\r\n *\r\n * @param {BaseAmount} amount\r\n * @returns {string} The formatted base amount string from the given base amount.\r\n */\n\n\nvar formatBaseAmount = function (amount) {\n  return formatBN(amount.amount(), 0);\n};\n/**\r\n * Base \"chain\" asset of Binance chain.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\n\nvar AssetBNB = {\n  chain: Chain.Binance,\n  symbol: 'BNB',\n  ticker: 'BNB'\n};\n/**\r\n * Base \"chain\" asset on bitcoin main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetBTC = {\n  chain: Chain.Bitcoin,\n  symbol: 'BTC',\n  ticker: 'BTC'\n};\n/**\r\n * Base \"chain\" asset on bitcoin cash main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetBCH = {\n  chain: Chain.BitcoinCash,\n  symbol: 'BCH',\n  ticker: 'BCH'\n};\n/**\r\n * Base \"chain\" asset on litecoin main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetLTC = {\n  chain: Chain.Litecoin,\n  symbol: 'LTC',\n  ticker: 'LTC'\n};\n/**\r\n * Base \"chain\" asset on ethereum main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetETH = {\n  chain: Chain.Ethereum,\n  symbol: 'ETH',\n  ticker: 'ETH'\n};\nvar RUNE_TICKER = 'RUNE';\n/**\r\n * Base \"chain\" asset for RUNE-67C on Binance test net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetRune67C = {\n  chain: Chain.Binance,\n  symbol: 'RUNE-67C',\n  ticker: RUNE_TICKER\n};\n/**\r\n * Base \"chain\" asset for RUNE-B1A on Binance main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetRuneB1A = {\n  chain: Chain.Binance,\n  symbol: 'RUNE-B1A',\n  ticker: RUNE_TICKER\n};\n/**\r\n * Base \"chain\" asset on thorchain main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetRuneNative = {\n  chain: Chain.THORChain,\n  symbol: RUNE_TICKER,\n  ticker: RUNE_TICKER\n};\n/**\r\n * Base \"chain\" asset for RUNE on ethereum main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetRuneERC20 = {\n  chain: Chain.Ethereum,\n  symbol: RUNE_TICKER + \"-0x3155ba85d5f96b2d030a4966af206230e46849cb\",\n  ticker: RUNE_TICKER\n};\n/**\r\n * Base \"chain\" asset for RUNE on ethereum main net.\r\n *\r\n * Based on definition in Thorchain `common`\r\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\r\n */\n\nvar AssetRuneERC20Testnet = {\n  chain: Chain.Ethereum,\n  symbol: RUNE_TICKER + \"-0xd601c6A3a36721320573885A8d8420746dA3d7A0\",\n  ticker: RUNE_TICKER\n};\n/**\r\n * Helper to check whether asset is valid\r\n *\r\n * @param {Asset} asset\r\n * @returns {boolean} `true` or `false`\r\n */\n\nvar isValidAsset = function (asset) {\n  return !!asset.chain && !!asset.ticker && !!asset.symbol;\n};\n/**\r\n * Creates an `Asset` by a given string\r\n *\r\n * This helper function expects a string with following naming convention:\r\n * `AAA.BBB-CCC`\r\n * where\r\n * chain: `AAA`\r\n * ticker (optional): `BBB`\r\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\r\n *\r\n * @see  https://docs.thorchain.org/developers/transaction-memos#asset-notation\r\n *\r\n * If the naming convention fails, it returns null\r\n *\r\n * @param {string} s The given string.\r\n * @returns {Asset|null} The asset from the given string.\r\n */\n\n\nvar assetFromString = function (s) {\n  var _a;\n\n  var data = s.split('.');\n\n  if (data.length <= 1 || ((_a = data[1]) === null || _a === void 0 ? void 0 : _a.length) < 1) {\n    return null;\n  }\n\n  var chain = data[0]; // filter out not supported string of chains\n\n  if (!chain || !isChain(chain)) return null;\n  var symbol = data[1];\n  var ticker = symbol.split('-')[0];\n  return {\n    chain: chain,\n    symbol: symbol,\n    ticker: ticker\n  };\n};\n/**\r\n * Returns an `Asset` as a string using following naming convention:\r\n *\r\n * `AAA.BBB-CCC`\r\n * where\r\n * chain: `AAA`\r\n * ticker (optional): `BBB`\r\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\r\n *\r\n * @see https://docs.thorchain.org/developers/transaction-memos#asset-notation\r\n *\r\n * @param {Asset} asset The given asset.\r\n * @returns {string} The string from the given asset.\r\n */\n\n\nvar assetToString = function (_a) {\n  var chain = _a.chain,\n      symbol = _a.symbol;\n  return chain + \".\" + symbol;\n};\n/**\r\n * Currency symbols currently supported\r\n */\n\n\nvar AssetCurrencySymbol;\n\n(function (AssetCurrencySymbol) {\n  AssetCurrencySymbol[\"RUNE\"] = \"\\u16B1\";\n  AssetCurrencySymbol[\"BTC\"] = \"\\u20BF\";\n  AssetCurrencySymbol[\"SATOSHI\"] = \"\\u26A1\";\n  AssetCurrencySymbol[\"ETH\"] = \"\\u039E\";\n  AssetCurrencySymbol[\"USD\"] = \"$\";\n})(AssetCurrencySymbol || (AssetCurrencySymbol = {}));\n/**\r\n * Returns currency symbols by given `Asset`\r\n *\r\n * @param {Asset} asset The given asset.\r\n * @returns {string} The currency symbol from the given asset.\r\n */\n\n\nvar currencySymbolByAsset = function (_a) {\n  var ticker = _a.ticker;\n\n  switch (true) {\n    case ticker === RUNE_TICKER:\n      return AssetCurrencySymbol.RUNE;\n\n    case ticker === AssetBTC.ticker:\n      return AssetCurrencySymbol.BTC;\n\n    case ticker === AssetETH.ticker:\n      return AssetCurrencySymbol.ETH;\n\n    case ticker.includes('USD'):\n      return AssetCurrencySymbol.USD;\n\n    default:\n      return ticker;\n  }\n};\n/**\r\n * Formats an asset amount using its currency symbol\r\n *\r\n * If `decimal` is not set, `amount.decimal` is used\r\n * If `asset` is not set, `$` will be used as currency symbol by default\r\n * `trimZeros` is `false` by default\r\n * Note: `trimZeros` wins over `decimal`\r\n *\r\n * @param {Params} params The asset amount currency format options.\r\n * @return {string} The formatted asset amount string using its currency format.\r\n */\n\n\nvar formatAssetAmountCurrency = function (_a) {\n  var _b;\n\n  var amount = _a.amount,\n      asset = _a.asset,\n      decimal = _a.decimal,\n      _c = _a.trimZeros,\n      shouldTrimZeros = _c === void 0 ? false : _c;\n  var amountFormatted = formatAssetAmount({\n    amount: amount,\n    // strict check for `undefined` value as negate of 0 will return true and passed decimal value will be ignored\n    decimal: decimal === undefined ? amount.decimal : decimal,\n    trimZeros: shouldTrimZeros\n  });\n  var ticker = (_b = asset === null || asset === void 0 ? void 0 : asset.ticker) !== null && _b !== void 0 ? _b : '';\n\n  if (ticker) {\n    // RUNE\n    if (ticker === RUNE_TICKER) return AssetCurrencySymbol.RUNE + \" \" + amountFormatted; // BTC\n\n    var regex = new RegExp(AssetBTC.ticker, 'i');\n\n    if (ticker.match(new RegExp(AssetBTC.ticker, 'i'))) {\n      var base = assetToBase(amount); // format all < โฟ 0.01 in statoshi\n\n      if (base.amount().isLessThanOrEqualTo('1000000')) {\n        return AssetCurrencySymbol.SATOSHI + \" \" + formatBaseAmount(base);\n      }\n\n      return AssetCurrencySymbol.BTC + \" \" + amountFormatted;\n    } // ETH\n\n\n    regex = new RegExp(AssetETH.ticker, 'i');\n    if (ticker.match(regex)) return AssetCurrencySymbol.ETH + \" \" + amountFormatted; // USD\n\n    regex = new RegExp('USD', 'i');\n    if (ticker.match('USD')) return AssetCurrencySymbol.USD + \" \" + amountFormatted;\n    return amountFormatted + \" \" + ticker;\n  }\n\n  return \"$ \" + amountFormatted;\n};\n/**\r\n * Formats a `BaseAmount` into a string of an `AssetAmount`\r\n *\r\n * If `decimal` is not set, `amount.decimal` is used\r\n * Note: `trimZeros` wins over `decimal`\r\n *\r\n * @param {Params} params The base amount currency format options.\r\n * @return {string} The formatted base amount string using its currency format.\r\n */\n\n\nvar formatBaseAsAssetAmount = function (_a) {\n  var amount = _a.amount,\n      decimal = _a.decimal,\n      _b = _a.trimZeros,\n      trimZeros = _b === void 0 ? false : _b;\n  return formatAssetAmount({\n    amount: baseToAsset(amount),\n    decimal: decimal,\n    trimZeros: trimZeros\n  });\n};\n\nexport { AssetBCH, AssetBNB, AssetBTC, AssetCurrencySymbol, AssetETH, AssetLTC, AssetRune67C, AssetRuneB1A, AssetRuneERC20, AssetRuneERC20Testnet, AssetRuneNative, BCHChain, BNBChain, BTCChain, Chain, CosmosChain, Denomination, ETHChain, LTCChain, PolkadotChain, RUNE_TICKER, THORChain, assetAmount, assetFromString, assetToBase, assetToString, baseAmount, baseToAsset, bn, bnOrZero, chainToString, currencySymbolByAsset, delay, fixedBN, formatAssetAmount, formatAssetAmountCurrency, formatBN, formatBNCurrency, formatBaseAmount, formatBaseAsAssetAmount, isAssetAmount, isBaseAmount, isBigNumberValue, isChain, isValidAsset, isValidBN, trimZeros, validBNOrZero };","map":{"version":3,"sources":["../src/async.ts","../src/bn.ts","../src/chain.ts","../src/string.ts","../src/types/amount.ts","../src/asset.ts"],"names":["trimZeros","trimZerosHelper"],"mappings":"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","sourcesContent":["/**\n * Helper to delay anything within an `async` function\n *\n * @param ms delay in milliseconds\n *\n * @example\n *\n * ```\n * const anyAsyncFunc = async () => {\n *  // do something\n *  console.log('before delay')\n *  // wait for 200ms\n *  await delay(200)\n *  // and do other things\n *  console.log('after delay')\n * }\n * ```\n */\nexport const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n","import BigNumber from 'bignumber.js'\n\n/**\n * Shortcut to create a BigNumber\n *\n * @param {string | number | BigNumber.Instance} value\n * @returns {BigNumber} The BigNumber interface from the given value.\n */\nconst bn = (value: BigNumber.Value) => new BigNumber(value)\n\n/**\n * Helper to check whether a BigNumber is valid or not\n *\n * @param {BigNumber} value\n * @returns {boolean} `true` or `false`.\n * */\nexport const isValidBN = (value: BigNumber) => !value.isNaN()\n\n/**\n * Helper to create a big number from string or number\n * If it fails to create a big number, a big number with value 0 will be returned instead\n *\n * @param {string|number|undefined} value\n * @returns {BigNumber} The BigNumber interface from the given value. If invalid one is provided, will return `0`.\n * */\nexport const bnOrZero = (value: string | number | undefined) => {\n  const b = value ? bn(value) : bn(0)\n  return isValidBN(b) ? b : bn(0)\n}\n\n/**\n * Helper to validate a possible BigNumber\n * If the given valie is invalid or undefined, 0 is returned as a BigNumber\n *\n * @param {BigNumber|undefined} value\n * @returns {boolean} `true` or `false`.\n */\nexport const validBNOrZero = (value: BigNumber | undefined) => (value && isValidBN(value) ? value : bn(0))\n\n/**\n * Format a BaseNumber to a string depending on given decimal places\n *\n * @param {BigNumber} value\n * @param {number} decimal The decimal place. (optional)\n * @returns {string} The formatted string from the given BigNumber and decimal place.\n * */\nexport const formatBN = (value: BigNumber, decimal = 2) => value.toFormat(decimal)\n\n/**\n * The enumuration for symbol position.\n * `before` or `after`\n */\nexport enum SymbolPosition {\n  BEFORE = 'before',\n  AFTER = 'after',\n}\n/**\n * Formats a big number value by prefixing it with `$`\n *\n * @param {BigNumber} n\n * @param {number} decimalPlaces The decimal place. (optional)\n * @param {string} symbol The currency symbol. (optional)\n * @param {position} position The symbol position. (optional)\n * @returns {string} The formatted string from the given BigNumber, decimal places, symbol and position.\n */\nexport const formatBNCurrency = (\n  n: BigNumber,\n  decimalPlaces = 2,\n  symbol = '$',\n  position: SymbolPosition = SymbolPosition.BEFORE,\n) => {\n  const value = formatBN(n, decimalPlaces)\n  if (position === SymbolPosition.BEFORE) {\n    return `${symbol}${value}`\n  }\n  return `${value}${symbol}`\n}\n\n/**\n * Helper to get a fixed `BigNumber`\n * Returns zero `BigNumber` if `value` is invalid\n *\n * @param {number|string|BigNumber|undefined} value\n * @param {number} decimalPlaces The decimal place. (optional)\n * @returns {BigNumber} The BigNumber interface from the given value and decimal.\n * */\nexport const fixedBN = (value: BigNumber.Value | undefined, decimalPlaces = 2): BigNumber => {\n  const n = bn(value || 0)\n  const fixedBN = isValidBN(n) ? n.toFixed(decimalPlaces) : bn(0).toFixed(decimalPlaces)\n  return bn(fixedBN)\n}\n\nexport default bn\n","export enum Chain {\n  Binance = 'BNB',\n  Bitcoin = 'BTC',\n  Ethereum = 'ETH',\n  THORChain = 'THOR',\n  Cosmos = 'GAIA',\n  Polkadot = 'POLKA',\n  BitcoinCash = 'BCH',\n  Litecoin = 'LTC',\n}\n\nexport const BNBChain = Chain.Binance\nexport const BTCChain = Chain.Bitcoin\nexport const ETHChain = Chain.Ethereum\nexport const THORChain = Chain.THORChain\nexport const CosmosChain = Chain.Cosmos\nexport const PolkadotChain = Chain.Polkadot\nexport const BCHChain = Chain.BitcoinCash\nexport const LTCChain = Chain.Litecoin\n\n/**\n * Type guard to check whether string  is based on type `Chain`\n *\n * @param {string} c The chain string.\n * @returns {boolean} `true` or `false`\n */\nexport const isChain = (c: string): c is Chain => (Object.values(Chain) as string[]).includes(c)\n\n/**\n * Convert chain to string.\n *\n * @param {Chain} chainId.\n * @returns {string} The string based on the given chain type.\n */\nexport const chainToString: ((chainId: Chain) => string) & Record<Chain, string> = Object.assign(\n  (chainId: Chain) => {\n    if (!(chainId in chainToString)) return 'unknown chain'\n    return chainToString[chainId]\n  },\n  {\n    [Chain.THORChain]: 'Thorchain',\n    [Chain.Bitcoin]: 'Bitcoin',\n    [Chain.BitcoinCash]: 'Bitcoin Cash',\n    [Chain.Litecoin]: 'Litecoin',\n    [Chain.Ethereum]: 'Ethereum',\n    [Chain.Binance]: 'Binance Chain',\n    [Chain.Cosmos]: 'Cosmos',\n    [Chain.Polkadot]: 'Polkadot',\n  },\n)\n","/**\n * Removes leading / trailing zeros from a string of numbers\n * (1) Regex to remove trailing zeros https://stackoverflow.com/a/53397618/2032698\n * (2) Regex to remove leading zeros https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch06s06.html\n *\n * @param {string} value\n * @returns {string} The result after removing trailing zeros.\n */\nexport const trimZeros = (value: string) =>\n  value\n    // (1) remove trailing zeros\n    .replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1')\n    // (2) remove leading zeros\n    .replace(/\\b0*([1-9][0-9]*|0)\\b/, '$1')\n","import BigNumber from 'bignumber.js'\n\nexport enum Denomination {\n  /**\n   * values for asset amounts in base units (no decimal)\n   */\n  Base = 'BASE',\n  /**\n   * values of asset amounts (w/ decimal)\n   */\n  Asset = 'ASSET',\n}\n\nexport type Amount<T> = T extends Denomination\n  ? {\n      type: T\n      amount: () => BigNumber\n      plus: (value: BigNumber.Value | Amount<T>, decimal?: number) => Amount<T>\n      minus: (value: BigNumber.Value | Amount<T>, decimal?: number) => Amount<T>\n      times: (value: BigNumber.Value | Amount<T>, decimal?: number) => Amount<T>\n      div: (value: BigNumber.Value | Amount<T>, decimal?: number) => Amount<T>\n      gt: (value: BigNumber.Value | Amount<T>) => boolean\n      gte: (value: BigNumber.Value | Amount<T>) => boolean\n      lt: (value: BigNumber.Value | Amount<T>) => boolean\n      lte: (value: BigNumber.Value | Amount<T>) => boolean\n      eq: (value: BigNumber.Value | Amount<T>) => boolean\n      decimal: number\n    }\n  : never\n\nexport type BaseAmount = Amount<Denomination.Base>\nexport type AssetAmount = Amount<Denomination.Asset>\n","import BigNumber from 'bignumber.js'\n\nimport { fixedBN, formatBN } from './bn'\nimport { Chain, isChain } from './chain'\nimport { trimZeros as trimZerosHelper } from './string'\nimport { Amount, Asset, AssetAmount, BaseAmount, Denomination } from './types'\n\n/**\n * Guard to check whether value is a BigNumber.Value or not\n *\n * @param {unknown} v\n * @returns {boolean} `true` or `false`.\n * */\nexport const isBigNumberValue = (v: unknown): v is BigNumber.Value =>\n  typeof v === 'string' || typeof v === 'number' || v instanceof BigNumber\n\n/**\n * Default number of asset decimals\n * For history reason and by starting the project on Binance chain assets, it's 8 decimal.\n *\n * For example:\n * ```\n * RUNE has a maximum of 8 digits of decimal\n * 0.00000001 RUNE == 1 รฐ (tor)\n * ```\n * */\nconst ASSET_DECIMAL = 8\n\n/**\n * Factory to create values of assets (e.g. RUNE)\n *\n * @param {string|number|BigNumber|undefined} value - The asset amount, If the value is undefined, AssetAmount with value `0` will be returned.\n * @param {number} decimal The decimal places. (optional)\n * @returns {AssetAmount} The asset amount from the given value and decimal.\n *\n **/\nexport const assetAmount = (value: BigNumber.Value | undefined, decimal: number = ASSET_DECIMAL): AssetAmount => {\n  const amount = fixedBN(value, decimal)\n  return {\n    type: Denomination.Asset,\n    amount: () => amount,\n    plus: (v: BigNumber.Value | AssetAmount, d: number = decimal) =>\n      assetAmount(amount.plus(isBigNumberValue(v) ? v : v.amount()), d),\n    minus: (v: BigNumber.Value | AssetAmount, d: number = decimal) =>\n      assetAmount(amount.minus(isBigNumberValue(v) ? v : v.amount()), d),\n    times: (v: BigNumber.Value | AssetAmount, d: number = decimal) =>\n      assetAmount(amount.times(isBigNumberValue(v) ? v : v.amount()), d),\n    div: (v: BigNumber.Value | AssetAmount, d: number = decimal) =>\n      assetAmount(amount.div(isBigNumberValue(v) ? v : v.amount()), d),\n    lt: (v: BigNumber.Value | AssetAmount) => amount.lt(isBigNumberValue(v) ? v : v.amount()),\n    lte: (v: BigNumber.Value | AssetAmount) => amount.lte(isBigNumberValue(v) ? v : v.amount()),\n    gt: (v: BigNumber.Value | AssetAmount) => amount.gt(isBigNumberValue(v) ? v : v.amount()),\n    gte: (v: BigNumber.Value | AssetAmount) => amount.gte(isBigNumberValue(v) ? v : v.amount()),\n    eq: (v: BigNumber.Value | AssetAmount) => amount.eq(isBigNumberValue(v) ? v : v.amount()),\n    decimal,\n  }\n}\n\n/**\n * Factory to create base amounts (e.g. tor)\n *\n * @param {string|number|BigNumber|undefined} value - The base amount, If the value is undefined, BaseAmount with value `0` will be returned.\n * @param {number} decimal The decimal places of its associated AssetAmount. (optional)\n * @returns {BaseAmount} The base amount from the given value and decimal.\n **/\nexport const baseAmount = (value: BigNumber.Value | undefined, decimal: number = ASSET_DECIMAL): BaseAmount => {\n  const amount = fixedBN(value, 0)\n  return {\n    type: Denomination.Base,\n    amount: () => amount,\n    plus: (v: BigNumber.Value | BaseAmount, d: number = decimal) =>\n      baseAmount(amount.plus(isBigNumberValue(v) ? v : v.amount()), d),\n    minus: (v: BigNumber.Value | BaseAmount, d: number = decimal) =>\n      baseAmount(amount.minus(isBigNumberValue(v) ? v : v.amount()), d),\n    times: (v: BigNumber.Value | BaseAmount, d: number = decimal) =>\n      baseAmount(amount.times(isBigNumberValue(v) ? v : v.amount()), d),\n    div: (v: BigNumber.Value | BaseAmount, d: number = decimal) =>\n      baseAmount(amount.div(isBigNumberValue(v) ? v : v.amount()).decimalPlaces(0, BigNumber.ROUND_DOWN), d),\n    lt: (v: BigNumber.Value | BaseAmount) => amount.lt(isBigNumberValue(v) ? v : v.amount()),\n    lte: (v: BigNumber.Value | BaseAmount) => amount.lte(isBigNumberValue(v) ? v : v.amount()),\n    gt: (v: BigNumber.Value | BaseAmount) => amount.gt(isBigNumberValue(v) ? v : v.amount()),\n    gte: (v: BigNumber.Value | BaseAmount) => amount.gte(isBigNumberValue(v) ? v : v.amount()),\n    eq: (v: BigNumber.Value | BaseAmount) => amount.eq(isBigNumberValue(v) ? v : v.amount()),\n    decimal,\n  }\n}\n\n/**\n * Helper to convert values for a asset from base values (e.g. RUNE from tor)\n *\n * @param {BaseAmount} base\n * @returns {AssetAmount} The asset amount from the given base amount.\n * */\nexport const baseToAsset = (base: BaseAmount): AssetAmount => {\n  const decimal = base.decimal\n  const value = base\n    .amount()\n    .div(10 ** decimal)\n    .decimalPlaces(decimal)\n  return assetAmount(value, decimal)\n}\n\n/**\n * Helper to convert asset to base values (e.g. tor -> RUNE)\n *\n * @param {AssetAmount} asset\n * @returns {BaseAmount} The base amount from the given AssetAmount.\n * */\nexport const assetToBase = (asset: AssetAmount): BaseAmount => {\n  const value = asset\n    .amount()\n    .multipliedBy(10 ** asset.decimal)\n    .integerValue()\n  return baseAmount(value, asset.decimal)\n}\n\n/**\n * Guard to check whether value is an amount of asset or not\n *\n * @param {Amount<Denomination>} v\n * @returns {boolean} `true` or `false`.\n * */\nexport const isAssetAmount = (v: Amount<Denomination>): v is AssetAmount => v.type === Denomination.Asset\n\n/**\n * Guard to check whether value is an amount of a base value or not\n *\n * @param {Amount<Denomination>} v\n * @returns {boolean} `true` or `false`.\n * */\nexport const isBaseAmount = (v: Amount<Denomination>): v is BaseAmount => v.type === Denomination.Base\n\n/**\n * Formats an `AssetAmount` into `string` based on decimal places\n *\n * If `decimal` is not set, `amount.decimal` is used\n * Note: `trimZeros` wins over `decimal`\n *\n * @param {Params} param The asset amount format options.\n * @returns {string} The formatted asset amount string from the given options.\n */\nexport const formatAssetAmount = ({\n  amount,\n  decimal,\n  trimZeros = false,\n}: {\n  amount: AssetAmount\n  decimal?: number\n  trimZeros?: boolean\n}) => {\n  // strict check for `undefined` value as negate of 0 will return true and passed decimal value will be ignored\n  const formatted = formatBN(amount.amount(), decimal === undefined ? amount.decimal : decimal)\n  // Note: `trimZeros` wins over `decimal`\n  return trimZeros ? trimZerosHelper(formatted) : formatted\n}\n\n/**\n * Formats a `BaseAmount` value into a `string`\n *\n * @param {BaseAmount} amount\n * @returns {string} The formatted base amount string from the given base amount.\n */\nexport const formatBaseAmount = (amount: BaseAmount) => formatBN(amount.amount(), 0)\n\n/**\n * Base \"chain\" asset of Binance chain.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetBNB: Asset = { chain: Chain.Binance, symbol: 'BNB', ticker: 'BNB' }\n\n/**\n * Base \"chain\" asset on bitcoin main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetBTC: Asset = { chain: Chain.Bitcoin, symbol: 'BTC', ticker: 'BTC' }\n\n/**\n * Base \"chain\" asset on bitcoin cash main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetBCH: Asset = { chain: Chain.BitcoinCash, symbol: 'BCH', ticker: 'BCH' }\n\n/**\n * Base \"chain\" asset on litecoin main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetLTC: Asset = { chain: Chain.Litecoin, symbol: 'LTC', ticker: 'LTC' }\n\n/**\n * Base \"chain\" asset on ethereum main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetETH: Asset = { chain: Chain.Ethereum, symbol: 'ETH', ticker: 'ETH' }\n\nexport const RUNE_TICKER = 'RUNE'\n\n/**\n * Base \"chain\" asset for RUNE-67C on Binance test net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetRune67C: Asset = { chain: Chain.Binance, symbol: 'RUNE-67C', ticker: RUNE_TICKER }\n\n/**\n * Base \"chain\" asset for RUNE-B1A on Binance main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetRuneB1A: Asset = { chain: Chain.Binance, symbol: 'RUNE-B1A', ticker: RUNE_TICKER }\n\n/**\n * Base \"chain\" asset on thorchain main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetRuneNative: Asset = { chain: Chain.THORChain, symbol: RUNE_TICKER, ticker: RUNE_TICKER }\n\n/**\n * Base \"chain\" asset for RUNE on ethereum main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetRuneERC20: Asset = {\n  chain: Chain.Ethereum,\n  symbol: `${RUNE_TICKER}-0x3155ba85d5f96b2d030a4966af206230e46849cb`,\n  ticker: RUNE_TICKER,\n}\n\n/**\n * Base \"chain\" asset for RUNE on ethereum main net.\n *\n * Based on definition in Thorchain `common`\n * @see https://gitlab.com/thorchain/thornode/-/blob/master/common/asset.go#L12-24\n */\nexport const AssetRuneERC20Testnet: Asset = {\n  chain: Chain.Ethereum,\n  symbol: `${RUNE_TICKER}-0xd601c6A3a36721320573885A8d8420746dA3d7A0`,\n  ticker: RUNE_TICKER,\n}\n\n/**\n * Helper to check whether asset is valid\n *\n * @param {Asset} asset\n * @returns {boolean} `true` or `false`\n */\nexport const isValidAsset = (asset: Asset): boolean => !!asset.chain && !!asset.ticker && !!asset.symbol\n\n/**\n * Creates an `Asset` by a given string\n *\n * This helper function expects a string with following naming convention:\n * `AAA.BBB-CCC`\n * where\n * chain: `AAA`\n * ticker (optional): `BBB`\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\n *\n * @see  https://docs.thorchain.org/developers/transaction-memos#asset-notation\n *\n * If the naming convention fails, it returns null\n *\n * @param {string} s The given string.\n * @returns {Asset|null} The asset from the given string.\n */\nexport const assetFromString = (s: string): Asset | null => {\n  const data = s.split('.')\n  if (data.length <= 1 || data[1]?.length < 1) {\n    return null\n  }\n\n  const chain = data[0]\n  // filter out not supported string of chains\n  if (!chain || !isChain(chain)) return null\n\n  const symbol = data[1]\n  const ticker = symbol.split('-')[0]\n\n  return { chain, symbol, ticker }\n}\n\n/**\n * Returns an `Asset` as a string using following naming convention:\n *\n * `AAA.BBB-CCC`\n * where\n * chain: `AAA`\n * ticker (optional): `BBB`\n * symbol: `BBB-CCC` or `CCC` (if no ticker available)\n *\n * @see https://docs.thorchain.org/developers/transaction-memos#asset-notation\n *\n * @param {Asset} asset The given asset.\n * @returns {string} The string from the given asset.\n */\nexport const assetToString = ({ chain, symbol }: Asset) => `${chain}.${symbol}`\n\n/**\n * Currency symbols currently supported\n */\nexport enum AssetCurrencySymbol {\n  RUNE = 'แฑ',\n  BTC = 'โฟ',\n  SATOSHI = 'โก',\n  ETH = 'ฮ',\n  USD = '$',\n}\n\n/**\n * Returns currency symbols by given `Asset`\n *\n * @param {Asset} asset The given asset.\n * @returns {string} The currency symbol from the given asset.\n */\nexport const currencySymbolByAsset = ({ ticker }: Asset) => {\n  switch (true) {\n    case ticker === RUNE_TICKER:\n      return AssetCurrencySymbol.RUNE\n    case ticker === AssetBTC.ticker:\n      return AssetCurrencySymbol.BTC\n    case ticker === AssetETH.ticker:\n      return AssetCurrencySymbol.ETH\n    case ticker.includes('USD'):\n      return AssetCurrencySymbol.USD\n    default:\n      return ticker\n  }\n}\n\n/**\n * Formats an asset amount using its currency symbol\n *\n * If `decimal` is not set, `amount.decimal` is used\n * If `asset` is not set, `$` will be used as currency symbol by default\n * `trimZeros` is `false` by default\n * Note: `trimZeros` wins over `decimal`\n *\n * @param {Params} params The asset amount currency format options.\n * @return {string} The formatted asset amount string using its currency format.\n */\nexport const formatAssetAmountCurrency = ({\n  amount,\n  asset,\n  decimal,\n  trimZeros: shouldTrimZeros = false,\n}: {\n  amount: AssetAmount\n  asset?: Asset\n  decimal?: number\n  trimZeros?: boolean\n}) => {\n  const amountFormatted = formatAssetAmount({\n    amount,\n    // strict check for `undefined` value as negate of 0 will return true and passed decimal value will be ignored\n    decimal: decimal === undefined ? amount.decimal : decimal,\n    trimZeros: shouldTrimZeros,\n  })\n  const ticker = asset?.ticker ?? ''\n\n  if (ticker) {\n    // RUNE\n    if (ticker === RUNE_TICKER) return `${AssetCurrencySymbol.RUNE} ${amountFormatted}`\n    // BTC\n    let regex = new RegExp(AssetBTC.ticker, 'i')\n    if (ticker.match(new RegExp(AssetBTC.ticker, 'i'))) {\n      const base = assetToBase(amount)\n      // format all < โฟ 0.01 in statoshi\n      if (base.amount().isLessThanOrEqualTo('1000000')) {\n        return `${AssetCurrencySymbol.SATOSHI} ${formatBaseAmount(base)}`\n      }\n      return `${AssetCurrencySymbol.BTC} ${amountFormatted}`\n    }\n    // ETH\n    regex = new RegExp(AssetETH.ticker, 'i')\n    if (ticker.match(regex)) return `${AssetCurrencySymbol.ETH} ${amountFormatted}`\n    // USD\n    regex = new RegExp('USD', 'i')\n    if (ticker.match('USD')) return `${AssetCurrencySymbol.USD} ${amountFormatted}`\n\n    return `${amountFormatted} ${ticker}`\n  }\n\n  return `$ ${amountFormatted}`\n}\n\n/**\n * Formats a `BaseAmount` into a string of an `AssetAmount`\n *\n * If `decimal` is not set, `amount.decimal` is used\n * Note: `trimZeros` wins over `decimal`\n *\n * @param {Params} params The base amount currency format options.\n * @return {string} The formatted base amount string using its currency format.\n */\nexport const formatBaseAsAssetAmount = ({\n  amount,\n  decimal,\n  trimZeros = false,\n}: {\n  amount: BaseAmount\n  decimal?: number\n  trimZeros?: boolean\n}) => formatAssetAmount({ amount: baseToAsset(amount), decimal, trimZeros })\n"]},"metadata":{},"sourceType":"module"}