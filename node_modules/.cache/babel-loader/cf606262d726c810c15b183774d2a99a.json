{"ast":null,"code":"/**\n\tC-like unsigned 32 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;\n\n(function (root) {\n  // Local cache for typical radices\n  var radixPowerCache = {\n    36: UINT32(Math.pow(36, 5)),\n    16: UINT32(Math.pow(16, 7)),\n    10: UINT32(Math.pow(10, 9)),\n    2: UINT32(Math.pow(2, 30))\n  };\n  var radixCache = {\n    36: UINT32(36),\n    16: UINT32(16),\n    10: UINT32(10),\n    2: UINT32(2)\n  };\n  /**\n   *\tRepresents an unsigned 32 bits integer\n   * @constructor\n   * @param {Number|String|Number} low bits     | integer as a string \t\t | integer as a number\n   * @param {Number|Number|Undefined} high bits | radix (optional, default=10)\n   * @return \n   */\n\n  function UINT32(l, h) {\n    if (!(this instanceof UINT32)) return new UINT32(l, h);\n    this._low = 0;\n    this._high = 0;\n    this.remainder = null;\n    if (typeof h == 'undefined') return fromNumber.call(this, l);\n    if (typeof l == 'string') return fromString.call(this, l, h);\n    fromBits.call(this, l, h);\n  }\n  /**\n   * Set the current _UINT32_ object with its low and high bits\n   * @method fromBits\n   * @param {Number} low bits\n   * @param {Number} high bits\n   * @return ThisExpression\n   */\n\n\n  function fromBits(l, h) {\n    this._low = l | 0;\n    this._high = h | 0;\n    return this;\n  }\n\n  UINT32.prototype.fromBits = fromBits;\n  /**\n   * Set the current _UINT32_ object from a number\n   * @method fromNumber\n   * @param {Number} number\n   * @return ThisExpression\n   */\n\n  function fromNumber(value) {\n    this._low = value & 0xFFFF;\n    this._high = value >>> 16;\n    return this;\n  }\n\n  UINT32.prototype.fromNumber = fromNumber;\n  /**\n   * Set the current _UINT32_ object from a string\n   * @method fromString\n   * @param {String} integer as a string\n   * @param {Number} radix (optional, default=10)\n   * @return ThisExpression\n   */\n\n  function fromString(s, radix) {\n    var value = parseInt(s, radix || 10);\n    this._low = value & 0xFFFF;\n    this._high = value >>> 16;\n    return this;\n  }\n\n  UINT32.prototype.fromString = fromString;\n  /**\n   * Convert this _UINT32_ to a number\n   * @method toNumber\n   * @return {Number} the converted UINT32\n   */\n\n  UINT32.prototype.toNumber = function () {\n    return this._high * 65536 + this._low;\n  };\n  /**\n   * Convert this _UINT32_ to a string\n   * @method toString\n   * @param {Number} radix (optional, default=10)\n   * @return {String} the converted UINT32\n   */\n\n\n  UINT32.prototype.toString = function (radix) {\n    return this.toNumber().toString(radix || 10);\n  };\n  /**\n   * Add two _UINT32_. The current _UINT32_ stores the result\n   * @method add\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.add = function (other) {\n    var a00 = this._low + other._low;\n    var a16 = a00 >>> 16;\n    a16 += this._high + other._high;\n    this._low = a00 & 0xFFFF;\n    this._high = a16 & 0xFFFF;\n    return this;\n  };\n  /**\n   * Subtract two _UINT32_. The current _UINT32_ stores the result\n   * @method subtract\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.subtract = function (other) {\n    //TODO inline\n    return this.add(other.clone().negate());\n  };\n  /**\n   * Multiply two _UINT32_. The current _UINT32_ stores the result\n   * @method multiply\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.multiply = function (other) {\n    /*\n    \ta = a00 + a16\n    \tb = b00 + b16\n    \ta*b = (a00 + a16)(b00 + b16)\n    \t\t= a00b00 + a00b16 + a16b00 + a16b16\n    \t\ta16b16 overflows the 32bits\n     */\n    var a16 = this._high;\n    var a00 = this._low;\n    var b16 = other._high;\n    var b00 = other._low;\n    /* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)\n    \t\t// this == 0 or other == 1: nothing to do\n    \t\tif ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this\n    \n    \t\t// other == 0 or this == 1: this = other\n    \t\tif ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {\n    \t\t\tthis._low = other._low\n    \t\t\tthis._high = other._high\n    \t\t\treturn this\n    \t\t}\n    */\n\n    var c16, c00;\n    c00 = a00 * b00;\n    c16 = c00 >>> 16;\n    c16 += a16 * b00;\n    c16 &= 0xFFFF; // Not required but improves performance\n\n    c16 += a00 * b16;\n    this._low = c00 & 0xFFFF;\n    this._high = c16 & 0xFFFF;\n    return this;\n  };\n  /**\n   * Divide two _UINT32_. The current _UINT32_ stores the result.\n   * The remainder is made available as the _remainder_ property on\n   * the _UINT32_ object. It can be null, meaning there are no remainder.\n   * @method div\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.div = function (other) {\n    if (other._low == 0 && other._high == 0) throw Error('division by zero'); // other == 1\n\n    if (other._high == 0 && other._low == 1) {\n      this.remainder = new UINT32(0);\n      return this;\n    } // other > this: 0\n\n\n    if (other.gt(this)) {\n      this.remainder = this.clone();\n      this._low = 0;\n      this._high = 0;\n      return this;\n    } // other == this: 1\n\n\n    if (this.eq(other)) {\n      this.remainder = new UINT32(0);\n      this._low = 1;\n      this._high = 0;\n      return this;\n    } // Shift the divisor left until it is higher than the dividend\n\n\n    var _other = other.clone();\n\n    var i = -1;\n\n    while (!this.lt(_other)) {\n      // High bit can overflow the default 16bits\n      // Its ok since we right shift after this loop\n      // The overflown bit must be kept though\n      _other.shiftLeft(1, true);\n\n      i++;\n    } // Set the remainder\n\n\n    this.remainder = this.clone(); // Initialize the current result to 0\n\n    this._low = 0;\n    this._high = 0;\n\n    for (; i >= 0; i--) {\n      _other.shiftRight(1); // If shifted divisor is smaller than the dividend\n      // then subtract it from the dividend\n\n\n      if (!this.remainder.lt(_other)) {\n        this.remainder.subtract(_other); // Update the current result\n\n        if (i >= 16) {\n          this._high |= 1 << i - 16;\n        } else {\n          this._low |= 1 << i;\n        }\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Negate the current _UINT32_\n   * @method negate\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.negate = function () {\n    var v = (~this._low & 0xFFFF) + 1;\n    this._low = v & 0xFFFF;\n    this._high = ~this._high + (v >>> 16) & 0xFFFF;\n    return this;\n  };\n  /**\n   * Equals\n   * @method eq\n   * @param {Object} other UINT32\n   * @return {Boolean}\n   */\n\n\n  UINT32.prototype.equals = UINT32.prototype.eq = function (other) {\n    return this._low == other._low && this._high == other._high;\n  };\n  /**\n   * Greater than (strict)\n   * @method gt\n   * @param {Object} other UINT32\n   * @return {Boolean}\n   */\n\n\n  UINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {\n    if (this._high > other._high) return true;\n    if (this._high < other._high) return false;\n    return this._low > other._low;\n  };\n  /**\n   * Less than (strict)\n   * @method lt\n   * @param {Object} other UINT32\n   * @return {Boolean}\n   */\n\n\n  UINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {\n    if (this._high < other._high) return true;\n    if (this._high > other._high) return false;\n    return this._low < other._low;\n  };\n  /**\n   * Bitwise OR\n   * @method or\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.or = function (other) {\n    this._low |= other._low;\n    this._high |= other._high;\n    return this;\n  };\n  /**\n   * Bitwise AND\n   * @method and\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.and = function (other) {\n    this._low &= other._low;\n    this._high &= other._high;\n    return this;\n  };\n  /**\n   * Bitwise NOT\n   * @method not\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.not = function () {\n    this._low = ~this._low & 0xFFFF;\n    this._high = ~this._high & 0xFFFF;\n    return this;\n  };\n  /**\n   * Bitwise XOR\n   * @method xor\n   * @param {Object} other UINT32\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.xor = function (other) {\n    this._low ^= other._low;\n    this._high ^= other._high;\n    return this;\n  };\n  /**\n   * Bitwise shift right\n   * @method shiftRight\n   * @param {Number} number of bits to shift\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {\n    if (n > 16) {\n      this._low = this._high >> n - 16;\n      this._high = 0;\n    } else if (n == 16) {\n      this._low = this._high;\n      this._high = 0;\n    } else {\n      this._low = this._low >> n | this._high << 16 - n & 0xFFFF;\n      this._high >>= n;\n    }\n\n    return this;\n  };\n  /**\n   * Bitwise shift left\n   * @method shiftLeft\n   * @param {Number} number of bits to shift\n   * @param {Boolean} allow overflow\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {\n    if (n > 16) {\n      this._high = this._low << n - 16;\n      this._low = 0;\n\n      if (!allowOverflow) {\n        this._high &= 0xFFFF;\n      }\n    } else if (n == 16) {\n      this._high = this._low;\n      this._low = 0;\n    } else {\n      this._high = this._high << n | this._low >> 16 - n;\n      this._low = this._low << n & 0xFFFF;\n\n      if (!allowOverflow) {\n        // Overflow only allowed on the high bits...\n        this._high &= 0xFFFF;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Bitwise rotate left\n   * @method rotl\n   * @param {Number} number of bits to rotate\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {\n    var v = this._high << 16 | this._low;\n    v = v << n | v >>> 32 - n;\n    this._low = v & 0xFFFF;\n    this._high = v >>> 16;\n    return this;\n  };\n  /**\n   * Bitwise rotate right\n   * @method rotr\n   * @param {Number} number of bits to rotate\n   * @return ThisExpression\n   */\n\n\n  UINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {\n    var v = this._high << 16 | this._low;\n    v = v >>> n | v << 32 - n;\n    this._low = v & 0xFFFF;\n    this._high = v >>> 16;\n    return this;\n  };\n  /**\n   * Clone the current _UINT32_\n   * @method clone\n   * @return {Object} cloned UINT32\n   */\n\n\n  UINT32.prototype.clone = function () {\n    return new UINT32(this._low, this._high);\n  };\n\n  if (typeof define != 'undefined' && define.amd) {\n    // AMD / RequireJS\n    define([], function () {\n      return UINT32;\n    });\n  } else if (typeof module != 'undefined' && module.exports) {\n    // Node.js\n    module.exports = UINT32;\n  } else {\n    // Browser\n    root['UINT32'] = UINT32;\n  }\n})(this);","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/cuint/lib/uint32.js"],"names":["root","radixPowerCache","UINT32","Math","pow","radixCache","l","h","_low","_high","remainder","fromNumber","call","fromString","fromBits","prototype","value","s","radix","parseInt","toNumber","toString","add","other","a00","a16","subtract","clone","negate","multiply","b16","b00","c16","c00","div","Error","gt","eq","_other","i","lt","shiftLeft","shiftRight","v","equals","greaterThan","lessThan","or","and","not","xor","shiftr","n","shiftl","allowOverflow","rotateLeft","rotl","rotateRight","rotr","define","amd","module","exports"],"mappings":"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","sourcesContent":["/**\n\tC-like unsigned 32 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t36: UINT32( Math.pow(36, 5) )\n\t,\t16: UINT32( Math.pow(16, 7) )\n\t,\t10: UINT32( Math.pow(10, 9) )\n\t,\t2:  UINT32( Math.pow(2, 30) )\n\t}\n\tvar radixCache = {\n\t\t36: UINT32(36)\n\t,\t16: UINT32(16)\n\t,\t10: UINT32(10)\n\t,\t2:  UINT32(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 32 bits integer\n\t * @constructor\n\t * @param {Number|String|Number} low bits     | integer as a string \t\t | integer as a number\n\t * @param {Number|Number|Undefined} high bits | radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT32 (l, h) {\n\t\tif ( !(this instanceof UINT32) )\n\t\t\treturn new UINT32(l, h)\n\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tthis.remainder = null\n\t\tif (typeof h == 'undefined')\n\t\t\treturn fromNumber.call(this, l)\n\n\t\tif (typeof l == 'string')\n\t\t\treturn fromString.call(this, l, h)\n\n\t\tfromBits.call(this, l, h)\n\t}\n\n\t/**\n\t * Set the current _UINT32_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} low bits\n\t * @param {Number} high bits\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (l, h) {\n\t\tthis._low = l | 0\n\t\tthis._high = h | 0\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT32_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT32_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tvar value = parseInt(s, radix || 10)\n\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT32_ to a number\n\t * @method toNumber\n\t * @return {Number} the converted UINT32\n\t */\n\tUINT32.prototype.toNumber = function () {\n\t\treturn (this._high * 65536) + this._low\n\t}\n\n\t/**\n\t * Convert this _UINT32_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT32\n\t */\n\tUINT32.prototype.toString = function (radix) {\n\t\treturn this.toNumber().toString(radix || 10)\n\t}\n\n\t/**\n\t * Add two _UINT32_. The current _UINT32_ stores the result\n\t * @method add\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.add = function (other) {\n\t\tvar a00 = this._low + other._low\n\t\tvar a16 = a00 >>> 16\n\n\t\ta16 += this._high + other._high\n\n\t\tthis._low = a00 & 0xFFFF\n\t\tthis._high = a16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT32_. The current _UINT32_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.subtract = function (other) {\n\t\t//TODO inline\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT32_. The current _UINT32_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16\n\t\t\tb = b00 + b16\n\t\t\ta*b = (a00 + a16)(b00 + b16)\n\t\t\t\t= a00b00 + a00b16 + a16b00 + a16b16\n\n\t\t\ta16b16 overflows the 32bits\n\t\t */\n\t\tvar a16 = this._high\n\t\tvar a00 = this._low\n\t\tvar b16 = other._high\n\t\tvar b00 = other._low\n\n/* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)\n\t\t// this == 0 or other == 1: nothing to do\n\t\tif ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this\n\n\t\t// other == 0 or this == 1: this = other\n\t\tif ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {\n\t\t\tthis._low = other._low\n\t\t\tthis._high = other._high\n\t\t\treturn this\n\t\t}\n*/\n\n\t\tvar c16, c00\n\t\tc00 = a00 * b00\n\t\tc16 = c00 >>> 16\n\n\t\tc16 += a16 * b00\n\t\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\t\tc16 += a00 * b16\n\n\t\tthis._low = c00 & 0xFFFF\n\t\tthis._high = c16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT32_. The current _UINT32_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT32_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.div = function (other) {\n\t\tif ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')\n\n\t\t// other == 1\n\t\tif (other._high == 0 && other._low == 1) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\treturn this\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._low = 0\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\tthis._low = 1\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 16) {\n\t\t\t\t\tthis._high |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._low |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT32_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.negate = function () {\n\t\tvar v = ( ~this._low & 0xFFFF ) + 1\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = (~this._high + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Equals\n\t * @method eq\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.equals = UINT32.prototype.eq = function (other) {\n\t\treturn (this._low == other._low) && (this._high == other._high)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {\n\t\tif (this._high > other._high) return true\n\t\tif (this._high < other._high) return false\n\t\treturn this._low > other._low\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {\n\t\tif (this._high < other._high) return true\n\t\tif (this._high > other._high) return false\n\t\treturn this._low < other._low\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.or = function (other) {\n\t\tthis._low |= other._low\n\t\tthis._high |= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.and = function (other) {\n\t\tthis._low &= other._low\n\t\tthis._high &= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.not = function() {\n\t\tthis._low = ~this._low & 0xFFFF\n\t\tthis._high = ~this._high & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.xor = function (other) {\n\t\tthis._low ^= other._low\n\t\tthis._high ^= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {\n\t\tif (n > 16) {\n\t\t\tthis._low = this._high >> (n - 16)\n\t\t\tthis._high = 0\n\t\t} else if (n == 16) {\n\t\t\tthis._low = this._high\n\t\t\tthis._high = 0\n\t\t} else {\n\t\t\tthis._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF )\n\t\t\tthis._high >>= n\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {\n\t\tif (n > 16) {\n\t\t\tthis._high = this._low << (n - 16)\n\t\t\tthis._low = 0\n\t\t\tif (!allowOverflow) {\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t} else if (n == 16) {\n\t\t\tthis._high = this._low\n\t\t\tthis._low = 0\n\t\t} else {\n\t\t\tthis._high = (this._high << n) | (this._low >> (16-n))\n\t\t\tthis._low = (this._low << n) & 0xFFFF\n\t\t\tif (!allowOverflow) {\n\t\t\t\t// Overflow only allowed on the high bits...\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v << n) | (v >>> (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v >>> n) | (v << (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT32_\n\t * @method clone\n\t * @return {Object} cloned UINT32\n\t */\n\tUINT32.prototype.clone = function () {\n\t\treturn new UINT32(this._low, this._high)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT32\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT32\n\t} else {\n\t\t// Browser\n\t\troot['UINT32'] = UINT32\n\t}\n\n})(this)\n"]},"metadata":{},"sourceType":"script"}