{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\nimport { u8aToU8a } from '@polkadot/util';\nimport { BASE32_ALPHABET, BITS_PER_CHAR } from \"./bs32.js\";\nconst MASK = (1 << BITS_PER_CHAR) - 1;\n/**\n * @name base32Encode\n * @summary Creates a base32 value.\n * @description\n * From the provided input, create the base32 and return the result as a string.\n */\n\nexport function base32Encode(value, ipfsCompat = false) {\n  const u8a = u8aToU8a(value);\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < u8a.length; ++i) {\n    buffer = buffer << 8 | u8a[i];\n    bits += 8;\n\n    while (bits > BITS_PER_CHAR) {\n      bits -= BITS_PER_CHAR;\n      out += BASE32_ALPHABET[MASK & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += BASE32_ALPHABET[MASK & buffer << BITS_PER_CHAR - bits];\n  }\n\n  return ipfsCompat ? `b${out}` : out;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/base32/encode.js"],"names":["u8aToU8a","BASE32_ALPHABET","BITS_PER_CHAR","MASK","base32Encode","value","ipfsCompat","u8a","out","bits","buffer","i","length"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,WAA/C;AACA,MAAMC,IAAI,GAAG,CAAC,KAAKD,aAAN,IAAuB,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,YAAT,CAAsBC,KAAtB,EAA6BC,UAAU,GAAG,KAA1C,EAAiD;AACtD,QAAMC,GAAG,GAAGP,QAAQ,CAACK,KAAD,CAApB;AACA,MAAIG,GAAG,GAAG,EAAV;AACA,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgC,EAAED,CAAlC,EAAqC;AACnCD,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAV,GAAcH,GAAG,CAACI,CAAD,CAA1B;AACAF,IAAAA,IAAI,IAAI,CAAR;;AAEA,WAAOA,IAAI,GAAGP,aAAd,EAA6B;AAC3BO,MAAAA,IAAI,IAAIP,aAAR;AACAM,MAAAA,GAAG,IAAIP,eAAe,CAACE,IAAI,GAAGO,MAAM,IAAID,IAAlB,CAAtB;AACD;AACF;;AAED,MAAIA,IAAJ,EAAU;AACRD,IAAAA,GAAG,IAAIP,eAAe,CAACE,IAAI,GAAGO,MAAM,IAAIR,aAAa,GAAGO,IAAlC,CAAtB;AACD;;AAED,SAAOH,UAAU,GAAI,IAAGE,GAAI,EAAX,GAAeA,GAAhC;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\nimport { u8aToU8a } from '@polkadot/util';\nimport { BASE32_ALPHABET, BITS_PER_CHAR } from \"./bs32.js\";\nconst MASK = (1 << BITS_PER_CHAR) - 1;\n/**\n * @name base32Encode\n * @summary Creates a base32 value.\n * @description\n * From the provided input, create the base32 and return the result as a string.\n */\n\nexport function base32Encode(value, ipfsCompat = false) {\n  const u8a = u8aToU8a(value);\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < u8a.length; ++i) {\n    buffer = buffer << 8 | u8a[i];\n    bits += 8;\n\n    while (bits > BITS_PER_CHAR) {\n      bits -= BITS_PER_CHAR;\n      out += BASE32_ALPHABET[MASK & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += BASE32_ALPHABET[MASK & buffer << BITS_PER_CHAR - bits];\n  }\n\n  return ipfsCompat ? `b${out}` : out;\n}"]},"metadata":{},"sourceType":"module"}