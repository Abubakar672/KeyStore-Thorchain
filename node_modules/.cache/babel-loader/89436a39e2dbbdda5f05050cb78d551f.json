{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, BN_FOUR } from \"../bn/index.js\";\nimport { u8aToBn, u8aToU8a } from \"../u8a/index.js\";\n/**\n * @name compactFromU8a\n * @description Retrievs the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@polkadot/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\n\nexport function compactFromU8a(_input) {\n  const input = u8aToU8a(_input);\n  const flag = input[0] & 0b11;\n\n  if (flag === 0b00) {\n    return [1, new BN(input[0]).ishrn(2)];\n  } else if (flag === 0b01) {\n    return [2, u8aToBn(input.slice(0, 2), true).ishrn(2)];\n  } else if (flag === 0b10) {\n    return [4, u8aToBn(input.slice(0, 4), true).ishrn(2)];\n  }\n\n  const offset = 1 + new BN(input[0]).ishrn(2) // clear flag\n  .iadd(BN_FOUR) // add 4 for base length\n  .toNumber();\n  return [offset, u8aToBn(input.subarray(1, offset), true)];\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/compact/fromU8a.js"],"names":["BN","BN_FOUR","u8aToBn","u8aToU8a","compactFromU8a","_input","input","flag","ishrn","slice","offset","iadd","toNumber","subarray"],"mappings":"AAAA;AACA;AACA,SAASA,EAAT,EAAaC,OAAb,QAA4B,gBAA5B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,iBAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AACrC,QAAMC,KAAK,GAAGH,QAAQ,CAACE,MAAD,CAAtB;AACA,QAAME,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAL,GAAW,IAAxB;;AAEA,MAAIC,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO,CAAC,CAAD,EAAI,IAAIP,EAAJ,CAAOM,KAAK,CAAC,CAAD,CAAZ,EAAiBE,KAAjB,CAAuB,CAAvB,CAAJ,CAAP;AACD,GAFD,MAEO,IAAID,IAAI,KAAK,IAAb,EAAmB;AACxB,WAAO,CAAC,CAAD,EAAIL,OAAO,CAACI,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,IAApB,CAAP,CAAiCD,KAAjC,CAAuC,CAAvC,CAAJ,CAAP;AACD,GAFM,MAEA,IAAID,IAAI,KAAK,IAAb,EAAmB;AACxB,WAAO,CAAC,CAAD,EAAIL,OAAO,CAACI,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAD,EAAoB,IAApB,CAAP,CAAiCD,KAAjC,CAAuC,CAAvC,CAAJ,CAAP;AACD;;AAED,QAAME,MAAM,GAAG,IAAI,IAAIV,EAAJ,CAAOM,KAAK,CAAC,CAAD,CAAZ,EAAiBE,KAAjB,CAAuB,CAAvB,EAA0B;AAA1B,GAClBG,IADkB,CACbV,OADa,EACJ;AADI,GAElBW,QAFkB,EAAnB;AAGA,SAAO,CAACF,MAAD,EAASR,OAAO,CAACI,KAAK,CAACO,QAAN,CAAe,CAAf,EAAkBH,MAAlB,CAAD,EAA4B,IAA5B,CAAhB,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, BN_FOUR } from \"../bn/index.js\";\nimport { u8aToBn, u8aToU8a } from \"../u8a/index.js\";\n/**\n * @name compactFromU8a\n * @description Retrievs the offset and encoded length from a compact-prefixed value\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactFromU8a } from '@polkadot/util';\n *\n * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));\n *\n * console.log('value offset=', offset, 'length=', length); // 4, 0xffff\n * ```\n */\n\nexport function compactFromU8a(_input) {\n  const input = u8aToU8a(_input);\n  const flag = input[0] & 0b11;\n\n  if (flag === 0b00) {\n    return [1, new BN(input[0]).ishrn(2)];\n  } else if (flag === 0b01) {\n    return [2, u8aToBn(input.slice(0, 2), true).ishrn(2)];\n  } else if (flag === 0b10) {\n    return [4, u8aToBn(input.slice(0, 4), true).ishrn(2)];\n  }\n\n  const offset = 1 + new BN(input[0]).ishrn(2) // clear flag\n  .iadd(BN_FOUR) // add 4 for base length\n  .toNumber();\n  return [offset, u8aToBn(input.subarray(1, offset), true)];\n}"]},"metadata":{},"sourceType":"module"}