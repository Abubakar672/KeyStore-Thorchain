{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bnToBn } from \"../bn/toBn.js\";\nimport { isBoolean } from \"../is/boolean.js\";\nimport { isUndefined } from \"../is/undefined.js\";\nimport { formatDecimal } from \"./formatDecimal.js\";\nimport { calcSi, findSi, SI, SI_MID } from \"./si.js\";\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation\n\nfunction _formatBalance(input, options = true, optDecimals = defaultDecimals) {\n  let text = bnToBn(input).toString();\n\n  if (text.length === 0 || text === '0') {\n    return '0';\n  } // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n\n\n  const isNegative = text[0].startsWith('-');\n\n  if (isNegative) {\n    text = text.substr(1);\n  } // extract options - the boolean case is for backwards-compat\n\n\n  const {\n    decimals = optDecimals,\n    forceUnit = undefined,\n    withSi = true,\n    withSiFull = false,\n    withUnit = true\n  } = isBoolean(options) ? {\n    withSi: options\n  } : options; // NOTE We start at midpoint (8) minus 1 - this means that values display as\n  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil\n  // so there are at most 3 decimal before the decimal separator\n\n  const si = calcSi(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const prefix = text.substr(0, mid);\n  const padding = mid < 0 ? 0 - mid : 0;\n  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}0000`.substr(0, 4);\n  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${isBoolean(withUnit) ? si.text : withUnit}` : '' : ` ${withSiFull ? si.text : si.value}${withUnit ? `${withSiFull ? ' ' : ''}${isBoolean(withUnit) ? SI[SI_MID].text : withUnit}` : ''}` : '';\n  return `${isNegative ? '-' : ''}${formatDecimal(prefix || '0')}.${postfix}${units}`;\n}\n\nconst formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n}; // get allowable options to display in a dropdown\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n  return SI.filter(({\n    power\n  }) => power < 0 ? decimals + power >= 0 : true);\n}; // Sets the default decimals to use for formatting (ui-wide)\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.setDefaults = ({\n  decimals,\n  unit\n}) => {\n  defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;\n  defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;\n  SI[SI_MID].text = defaultUnit;\n};\n\nexport { formatBalance };","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/format/formatBalance.js"],"names":["bnToBn","isBoolean","isUndefined","formatDecimal","calcSi","findSi","SI","SI_MID","DEFAULT_DECIMALS","DEFAULT_UNIT","text","defaultDecimals","defaultUnit","_formatBalance","input","options","optDecimals","toString","length","isNegative","startsWith","substr","decimals","forceUnit","undefined","withSi","withSiFull","withUnit","si","mid","power","prefix","padding","postfix","Array","join","units","value","formatBalance","getDefaults","unit","getOptions","filter","setDefaults","isArray"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { bnToBn } from \"../bn/toBn.js\";\nimport { isBoolean } from \"../is/boolean.js\";\nimport { isUndefined } from \"../is/undefined.js\";\nimport { formatDecimal } from \"./formatDecimal.js\";\nimport { calcSi, findSi, SI, SI_MID } from \"./si.js\";\nconst DEFAULT_DECIMALS = 0;\nconst DEFAULT_UNIT = SI[SI_MID].text;\nlet defaultDecimals = DEFAULT_DECIMALS;\nlet defaultUnit = DEFAULT_UNIT; // Formats a string/number with <prefix>.<postfix><type> notation\n\nfunction _formatBalance(input, options = true, optDecimals = defaultDecimals) {\n  let text = bnToBn(input).toString();\n\n  if (text.length === 0 || text === '0') {\n    return '0';\n  } // strip the negative sign so we can work with clean groupings, re-add this in the\n  // end when we return the result (from here on we work with positive numbers)\n\n\n  const isNegative = text[0].startsWith('-');\n\n  if (isNegative) {\n    text = text.substr(1);\n  } // extract options - the boolean case is for backwards-compat\n\n\n  const {\n    decimals = optDecimals,\n    forceUnit = undefined,\n    withSi = true,\n    withSiFull = false,\n    withUnit = true\n  } = isBoolean(options) ? {\n    withSi: options\n  } : options; // NOTE We start at midpoint (8) minus 1 - this means that values display as\n  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil\n  // so there are at most 3 decimal before the decimal separator\n\n  const si = calcSi(text, decimals, forceUnit);\n  const mid = text.length - (decimals + si.power);\n  const prefix = text.substr(0, mid);\n  const padding = mid < 0 ? 0 - mid : 0;\n  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substr(mid < 0 ? 0 : mid)}0000`.substr(0, 4);\n  const units = withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${isBoolean(withUnit) ? si.text : withUnit}` : '' : ` ${withSiFull ? si.text : si.value}${withUnit ? `${withSiFull ? ' ' : ''}${isBoolean(withUnit) ? SI[SI_MID].text : withUnit}` : ''}` : '';\n  return `${isNegative ? '-' : ''}${formatDecimal(prefix || '0')}.${postfix}${units}`;\n}\n\nconst formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method\n\nformatBalance.getDefaults = () => {\n  return {\n    decimals: defaultDecimals,\n    unit: defaultUnit\n  };\n}; // get allowable options to display in a dropdown\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.getOptions = (decimals = defaultDecimals) => {\n  return SI.filter(({\n    power\n  }) => power < 0 ? decimals + power >= 0 : true);\n}; // Sets the default decimals to use for formatting (ui-wide)\n// eslint-disable-next-line @typescript-eslint/unbound-method\n\n\nformatBalance.setDefaults = ({\n  decimals,\n  unit\n}) => {\n  defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;\n  defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;\n  SI[SI_MID].text = defaultUnit;\n};\n\nexport { formatBalance };"]},"metadata":{},"sourceType":"module"}