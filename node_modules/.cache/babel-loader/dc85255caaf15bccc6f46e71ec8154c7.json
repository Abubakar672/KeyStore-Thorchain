{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\"; // Voter is current tuple is 2.x-era\n\nfunction isVoter(value) {\n  return !Array.isArray(value);\n}\n\nfunction retrieveStakeOf(elections) {\n  return elections.stakeOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, stake]) => [accountId, stake])));\n}\n\nfunction retrieveVoteOf(elections) {\n  return elections.votesOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, votes]) => [accountId, votes])));\n}\n\nfunction retrievePrev(api, elections) {\n  return combineLatest([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(elections) {\n  return elections.voting.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, value]) => [accountId, isVoter(value) ? {\n    stake: value.stake,\n    votes: value.votes\n  } : {\n    stake: value[0],\n    votes: value[1]\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;\n  return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/council/votes.js"],"names":["combineLatest","map","of","memo","isVoter","value","Array","isArray","retrieveStakeOf","elections","stakeOf","entries","pipe","args","accountId","stake","retrieveVoteOf","votesOf","votes","retrievePrev","api","stakes","result","forEach","voter","push","registry","createType","staker","entry","find","eq","retrieveCurrent","voting","instanceId","query","phragmenElection","electionsPhragmen"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of } from 'rxjs';\nimport { memo } from \"../util/index.js\"; // Voter is current tuple is 2.x-era\n\nfunction isVoter(value) {\n  return !Array.isArray(value);\n}\n\nfunction retrieveStakeOf(elections) {\n  return elections.stakeOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, stake]) => [accountId, stake])));\n}\n\nfunction retrieveVoteOf(elections) {\n  return elections.votesOf.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, votes]) => [accountId, votes])));\n}\n\nfunction retrievePrev(api, elections) {\n  return combineLatest([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe(map(([stakes, votes]) => {\n    const result = [];\n    votes.forEach(([voter, votes]) => {\n      result.push([voter, {\n        stake: api.registry.createType('Balance'),\n        votes\n      }]);\n    });\n    stakes.forEach(([staker, stake]) => {\n      const entry = result.find(([voter]) => voter.eq(staker));\n\n      if (entry) {\n        entry[1].stake = stake;\n      } else {\n        result.push([staker, {\n          stake,\n          votes: []\n        }]);\n      }\n    });\n    return result;\n  }));\n}\n\nfunction retrieveCurrent(elections) {\n  return elections.voting.entries().pipe(map(entries => entries.map(([{\n    args: [accountId]\n  }, value]) => [accountId, isVoter(value) ? {\n    stake: value.stake,\n    votes: value.votes\n  } : {\n    stake: value[0],\n    votes: value[1]\n  }])));\n}\n\nexport function votes(instanceId, api) {\n  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;\n  return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));\n}"]},"metadata":{},"sourceType":"module"}