{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { hexToU8a } from \"../hex/toU8a.js\";\nimport { isBuffer } from \"../is/buffer.js\";\nimport { isHex } from \"../is/hex.js\";\nimport { isString } from \"../is/string.js\";\nimport { isU8a } from \"../is/u8a.js\";\nimport { stringToU8a } from \"../string/toU8a.js\";\n/**\n * @name u8aToU8a\n * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.\n * @description\n * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToU8a } from '@polkadot/util';\n *\n * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])\n * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])\n * ```\n */\n\nexport function u8aToU8a(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isHex(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return stringToU8a(value);\n  } else if (Array.isArray(value) || isBuffer(value)) {\n    return new Uint8Array(value);\n  }\n\n  assert(isU8a(value), () => `Unable to convert ${value.toString()} (typeof ${typeof value}) to a Uint8Array`);\n  return value;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/u8a/toU8a.js"],"names":["assert","hexToU8a","isBuffer","isHex","isString","isU8a","stringToU8a","u8aToU8a","value","Uint8Array","Array","isArray","toString"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAIC,UAAJ,EAAP;AACD,GAFD,MAEO,IAAIN,KAAK,CAACK,KAAD,CAAT,EAAkB;AACvB,WAAOP,QAAQ,CAACO,KAAD,CAAf;AACD,GAFM,MAEA,IAAIJ,QAAQ,CAACI,KAAD,CAAZ,EAAqB;AAC1B,WAAOF,WAAW,CAACE,KAAD,CAAlB;AACD,GAFM,MAEA,IAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,KAAwBN,QAAQ,CAACM,KAAD,CAApC,EAA6C;AAClD,WAAO,IAAIC,UAAJ,CAAeD,KAAf,CAAP;AACD;;AAEDR,EAAAA,MAAM,CAACK,KAAK,CAACG,KAAD,CAAN,EAAe,MAAO,qBAAoBA,KAAK,CAACI,QAAN,EAAiB,YAAW,OAAOJ,KAAM,mBAAnF,CAAN;AACA,SAAOA,KAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\nimport { hexToU8a } from \"../hex/toU8a.js\";\nimport { isBuffer } from \"../is/buffer.js\";\nimport { isHex } from \"../is/hex.js\";\nimport { isString } from \"../is/string.js\";\nimport { isU8a } from \"../is/u8a.js\";\nimport { stringToU8a } from \"../string/toU8a.js\";\n/**\n * @name u8aToU8a\n * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.\n * @description\n * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToU8a } from '@polkadot/util';\n *\n * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])\n * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])\n * ```\n */\n\nexport function u8aToU8a(value) {\n  if (!value) {\n    return new Uint8Array();\n  } else if (isHex(value)) {\n    return hexToU8a(value);\n  } else if (isString(value)) {\n    return stringToU8a(value);\n  } else if (Array.isArray(value) || isBuffer(value)) {\n    return new Uint8Array(value);\n  }\n\n  assert(isU8a(value), () => `Unable to convert ${value.toString()} (typeof ${typeof value}) to a Uint8Array`);\n  return value;\n}"]},"metadata":{},"sourceType":"module"}