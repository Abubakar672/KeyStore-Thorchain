{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/Thorchain-KeyStore-/keystore/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore } from '@xchainjs/xchain-crypto';\nimport logo from \"./logo.svg\";\nimport React, { useState, useEffect } from \"react\";\nimport './App.css'; // Crypto Constants for xchain\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cipher = 'aes-128-ctr';\nconst kdf = 'pbkdf2';\nconst prf = 'hmac-sha256';\nconst dklen = 32;\nconst c = 262144;\nconst hashFunction = 'sha256';\nconst meta = 'xchain-keystore'; // const phraseDecrypted = async()=>{\n// await decryptFromKeystore(keystore, password)\n// }\n// console.log(decryptFromKeystore)\n\nfunction App() {\n  _s();\n\n  useEffect(async () => {\n    const phrase = generatePhrase();\n    console.log(phrase); // const isCorrect = validatePhrase(phrase)\n\n    const password = 'thorchain';\n    console.log(password);\n\n    const keystore = async () => {\n      try {\n        let key = await encryptToKeyStore(phrase, password);\n        console.log('key========>', key);\n        return key;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const res = await keystore();\n    console.log('========>', res);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 2\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 2\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 2\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 2\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/Thorchain-KeyStore-/keystore/src/App.js"],"names":["generatePhrase","encryptToKeyStore","React","useState","useEffect","cipher","kdf","prf","dklen","c","hashFunction","meta","App","phrase","console","log","password","keystore","key","error","res","logo"],"mappings":";;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,yBAAlD;;AAEA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAO,WAAP,C,CAEA;;;AACA,MAAMC,MAAM,GAAG,aAAf;AACA,MAAMC,GAAG,GAAG,QAAZ;AACA,MAAMC,GAAG,GAAG,aAAZ;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,CAAC,GAAG,MAAV;AACA,MAAMC,YAAY,GAAG,QAArB;AACA,MAAMC,IAAI,GAAG,iBAAb,C,CAEA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbR,EAAAA,SAAS,CAAE,YAAY;AAErB,UAAMS,MAAM,GAAGb,cAAc,EAA7B;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAHqB,CAIrB;;AACA,UAAMG,QAAQ,GAAG,WAAjB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;;AAGA,UAAMC,QAAQ,GAAG,YAAU;AACzB,UAAI;AACF,YAAIC,GAAG,GAAG,MAAMjB,iBAAiB,CAACY,MAAD,EAASG,QAAT,CAAjC;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BG,GAA3B;AACA,eAAOA,GAAP;AAED,OALD,CAKE,OAAOC,KAAP,EAAc;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AAGD;AAGF,KAbD;;AAcA,UAAMC,GAAG,GAAG,MAAMH,QAAQ,EAA1B;AAEAH,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBK,GAAxB;AAKE,GA9BK,EA+BL,EA/BK,CAAT;AAiCF,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACA;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACA;AAAK,QAAA,GAAG,EAAEC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,yCACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADL;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAKA;AACA,QAAA,SAAS,EAAC,UADV;AAEA,QAAA,IAAI,EAAC,qBAFL;AAGA,QAAA,MAAM,EAAC,QAHP;AAIA,QAAA,GAAG,EAAC,qBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADD;AAiBE;;GAnDOT,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import { generatePhrase, encryptToKeyStore } from '@xchainjs/xchain-crypto'\nimport logo from './logo.svg';\nimport React, { useState, useEffect } from \"react\";\n \nimport './App.css';\n \n// Crypto Constants for xchain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'xchain-keystore'\n \n// const phraseDecrypted = async()=>{\n// await decryptFromKeystore(keystore, password)\n// }\n// console.log(decryptFromKeystore)\n \nfunction App() {\n  useEffect( async () => {\n    \n    const phrase = generatePhrase()\n    console.log(phrase);\n    // const isCorrect = validatePhrase(phrase)\n    const password = 'thorchain'\n    console.log(password);\n \n     \n    const keystore = async ()=>{\n      try {\n        let key = await encryptToKeyStore(phrase, password);\n        console.log('key========>',key)\n        return key;\n        \n      } catch (error) {\n        console.log(error);\n \n        \n      }\n     \n    \n    }\n    const res = await keystore();\n \n    console.log('========>',res)\n     \n    \n    \n \n     }\n    , []\n    );\nreturn(\n <div className=\"App\">\n <header className=\"App-header\">\n <img src={logo} className=\"App-logo\" alt=\"logo\" />\n <p>\n Edit <code>src/App.js</code> and save to reload.\n </p>\n <a\n className=\"App-link\"\n href=\"https://reactjs.org\"\n target=\"_blank\"\n rel=\"noopener noreferrer\"\n >\n Learn React\n </a>\n </header>\n </div>\n)}\n \nexport default App;"]},"metadata":{},"sourceType":"module"}