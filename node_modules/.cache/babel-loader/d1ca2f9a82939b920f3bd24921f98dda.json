{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { logger } from '@polkadot/util';\nconst l = logger('api/augment');\n\nfunction logLength(type, values, and = []) {\n  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';\n}\n\nfunction logValues(type, values) {\n  return values.length ? `\\n\\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';\n} // log details to console\n\n\nfunction warn(prefix, type, [added, removed]) {\n  if (added.length || removed.length) {\n    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);\n  }\n}\n\nfunction extractKeys(src, dst) {\n  return [Object.keys(src), Object.keys(dst)];\n}\n\nfunction findSectionExcludes(a, b) {\n  return a.filter(section => !b.includes(section));\n}\n\nfunction extractSections(src, dst) {\n  const [srcSections, dstSections] = extractKeys(src, dst);\n  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];\n}\n\nfunction findMethodExcludes(src, dst) {\n  const srcSections = Object.keys(src);\n  const dstSections = Object.keys(dst);\n  return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {\n    const srcMethods = Object.keys(src[section]);\n    return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));\n  }, []);\n}\n\nfunction extractMethods(src, dst) {\n  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];\n}\n/**\n * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is\n * already available, but rather just adds new missing ites into the result object.\n * @internal\n */\n\n\nexport function augmentObject(prefix, src, dst, fromEmpty = false) {\n  if (fromEmpty) {\n    Object.keys(dst).forEach(key => {\n      delete dst[key];\n    });\n  }\n\n  if (prefix && Object.keys(dst).length) {\n    warn(prefix, 'modules', extractSections(src, dst));\n    warn(prefix, 'calls', extractMethods(src, dst));\n  }\n\n  return Object.keys(src).reduce((newSection, sectionName) => {\n    const section = src[sectionName];\n    newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {\n      // TODO When it does match, check the actual details and warn when there are differences\n      if (!result[methodName]) {\n        result[methodName] = section[methodName];\n      }\n\n      return result;\n    }, dst[sectionName] || {});\n    return newSection;\n  }, dst);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api/util/augmentObject.js"],"names":["logger","l","logLength","type","values","and","length","logValues","padStart","sort","join","warn","prefix","added","removed","extractKeys","src","dst","Object","keys","findSectionExcludes","a","b","filter","section","includes","extractSections","srcSections","dstSections","findMethodExcludes","reduce","rmMethods","srcMethods","concat","method","map","extractMethods","augmentObject","fromEmpty","forEach","key","newSection","sectionName","result","methodName"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { logger } from '@polkadot/util';\nconst l = logger('api/augment');\n\nfunction logLength(type, values, and = []) {\n  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';\n}\n\nfunction logValues(type, values) {\n  return values.length ? `\\n\\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';\n} // log details to console\n\n\nfunction warn(prefix, type, [added, removed]) {\n  if (added.length || removed.length) {\n    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);\n  }\n}\n\nfunction extractKeys(src, dst) {\n  return [Object.keys(src), Object.keys(dst)];\n}\n\nfunction findSectionExcludes(a, b) {\n  return a.filter(section => !b.includes(section));\n}\n\nfunction extractSections(src, dst) {\n  const [srcSections, dstSections] = extractKeys(src, dst);\n  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];\n}\n\nfunction findMethodExcludes(src, dst) {\n  const srcSections = Object.keys(src);\n  const dstSections = Object.keys(dst);\n  return dstSections.filter(section => srcSections.includes(section)).reduce((rmMethods, section) => {\n    const srcMethods = Object.keys(src[section]);\n    return rmMethods.concat(...Object.keys(dst[section]).filter(method => !srcMethods.includes(method)).map(method => `${section}.${method}`));\n  }, []);\n}\n\nfunction extractMethods(src, dst) {\n  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];\n}\n/**\n * Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is\n * already available, but rather just adds new missing ites into the result object.\n * @internal\n */\n\n\nexport function augmentObject(prefix, src, dst, fromEmpty = false) {\n  if (fromEmpty) {\n    Object.keys(dst).forEach(key => {\n      delete dst[key];\n    });\n  }\n\n  if (prefix && Object.keys(dst).length) {\n    warn(prefix, 'modules', extractSections(src, dst));\n    warn(prefix, 'calls', extractMethods(src, dst));\n  }\n\n  return Object.keys(src).reduce((newSection, sectionName) => {\n    const section = src[sectionName];\n    newSection[sectionName] = Object.keys(section).reduce((result, methodName) => {\n      // TODO When it does match, check the actual details and warn when there are differences\n      if (!result[methodName]) {\n        result[methodName] = section[methodName];\n      }\n\n      return result;\n    }, dst[sectionName] || {});\n    return newSection;\n  }, dst);\n}"]},"metadata":{},"sourceType":"module"}