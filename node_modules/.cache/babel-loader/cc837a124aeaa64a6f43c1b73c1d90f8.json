{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { getModuleTypes, knownOrigins } from '@polkadot/types-known';\nimport { stringCamelCase } from '@polkadot/util';\nconst BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];\n/**\n * Creates a compatible type mapping\n * @internal\n **/\n\nfunction compatType(compatTypes, _type) {\n  const type = _type.toString();\n\n  const index = compatTypes.findIndex(({\n    def\n  }) => def.HistoricMetaCompat === type);\n\n  if (index !== -1) {\n    return index;\n  }\n\n  return compatTypes.push({\n    def: {\n      HistoricMetaCompat: type\n    }\n  }) - 1;\n}\n\nfunction makeTupleType(compatTypes, entries) {\n  return compatTypes.push({\n    def: {\n      Tuple: entries\n    }\n  }) - 1;\n}\n\nfunction makeVariantType(modName, variantType, compatTypes, variants) {\n  return compatTypes.push({\n    def: {\n      Variant: {\n        variants\n      }\n    },\n    path: [`pallet_${modName.toString()}`, 'pallet', variantType]\n  }) - 1;\n}\n/**\n * @internal\n * generate & register the OriginCaller type\n **/\n\n\nfunction registerOriginCaller(registry, modules, metaVersion) {\n  registry.register({\n    OriginCaller: {\n      _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {\n        for (let i = Object.keys(result).length; i < index; i++) {\n          result[`Empty${i}`] = 'Null';\n        }\n\n        result[name] = knownOrigins[name] || 'Null';\n        return result;\n      }, {})\n    }\n  });\n}\n/**\n * Find and apply the correct type override\n * @internal\n **/\n\n\nfunction setTypeOverride(sectionTypes, types) {\n  types.forEach(type => {\n    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));\n\n    if (override) {\n      type.setOverride(sectionTypes[override]);\n    } else {\n      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)\n      const orig = type.toString();\n      const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);\n\n      if (orig !== alias) {\n        type.setOverride(alias);\n      }\n    }\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n **/\n\n\nfunction convertCalls(compatTypes, registry, modName, calls, sectionTypes) {\n  const variants = calls.map(({\n    args,\n    docs,\n    name\n  }, index) => {\n    setTypeOverride(sectionTypes, args.map(({\n      type\n    }) => type));\n    return registry.createType('SiVariant', {\n      docs,\n      fields: args.map(({\n        name,\n        type\n      }) => registry.createType('SiField', {\n        name,\n        type: compatType(compatTypes, type)\n      })),\n      index,\n      name\n    });\n  });\n  return registry.createType('PalletCallMetadataV14', {\n    type: makeVariantType(modName, 'Call', compatTypes, variants)\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n */\n\n\nfunction convertConstants(compatTypes, registry, constants, sectionTypes) {\n  return constants.map(({\n    docs,\n    name,\n    type,\n    value\n  }) => {\n    setTypeOverride(sectionTypes, [type]);\n    return registry.createType('PalletConstantMetadataV14', {\n      docs,\n      name,\n      type: compatType(compatTypes, type),\n      value\n    });\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction convertErrors(compatTypes, registry, modName, errors, _sectionTypes) {\n  const variants = errors.map(({\n    docs,\n    name\n  }, index) => registry.createType('SiVariant', {\n    docs,\n    fields: [],\n    index,\n    name\n  }));\n  return registry.createType('PalletErrorMetadataV14', {\n    type: makeVariantType(modName, 'Error', compatTypes, variants)\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n **/\n\n\nfunction convertEvents(compatTypes, registry, modName, events, sectionTypes) {\n  const variants = events.map(({\n    args,\n    docs,\n    name\n  }, index) => {\n    setTypeOverride(sectionTypes, args);\n    return registry.createType('SiVariant', {\n      docs,\n      fields: args.map(t => registry.createType('SiField', {\n        type: compatType(compatTypes, t)\n      })),\n      index,\n      name\n    });\n  });\n  return registry.createType('PalletEventMetadataV14', {\n    type: makeVariantType(modName, 'Event', compatTypes, variants)\n  });\n}\n\nfunction createMapEntry(compatTypes, registry, sectionTypes, {\n  hashers,\n  keys,\n  value\n}) {\n  setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);\n  return registry.createType('StorageEntryTypeV14', {\n    Map: {\n      hashers,\n      key: hashers.length === 1 ? compatType(compatTypes, keys[0]) : makeTupleType(compatTypes, keys.map(t => compatType(compatTypes, t))),\n      value: compatType(compatTypes, value)\n    }\n  });\n}\n/**\n * Apply module-specific storage type overrides (always part of toV14)\n * @internal\n **/\n\n\nfunction convertStorage(compatTypes, registry, {\n  items,\n  prefix\n}, sectionTypes) {\n  return registry.createType('PalletStorageMetadataV14', {\n    items: items.map(({\n      docs,\n      fallback,\n      modifier,\n      name,\n      type\n    }) => {\n      let entryType;\n\n      if (type.isPlain) {\n        const plain = type.asPlain;\n        setTypeOverride(sectionTypes, [plain]);\n        entryType = registry.createType('StorageEntryTypeV14', {\n          Plain: compatType(compatTypes, plain)\n        });\n      } else if (type.isMap) {\n        const map = type.asMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: [map.hasher],\n          keys: [map.key],\n          value: map.value\n        });\n      } else if (type.isDoubleMap) {\n        const dm = type.asDoubleMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: [dm.hasher, dm.key2Hasher],\n          keys: [dm.key1, dm.key2],\n          value: dm.value\n        });\n      } else {\n        const nm = type.asNMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: nm.hashers,\n          keys: nm.keyVec,\n          value: nm.value\n        });\n      }\n\n      return registry.createType('StorageEntryMetadataV14', {\n        docs,\n        fallback,\n        modifier,\n        name,\n        type: entryType\n      });\n    }),\n    prefix\n  });\n}\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction convertExtrinsic(registry, {\n  signedExtensions,\n  version\n}) {\n  return registry.createType('ExtrinsicMetadataV14', {\n    signedExtensions: signedExtensions.map(identifier => ({\n      identifier,\n      type: 0 // we don't map the fields at all\n\n    })),\n    type: 0,\n    // Map to extrinsic like in v14?\n    version: version\n  });\n}\n/** @internal */\n\n\nfunction createPallet(compatTypes, registry, mod, {\n  calls,\n  constants,\n  errors,\n  events,\n  storage\n}) {\n  const sectionTypes = getModuleTypes(registry, stringCamelCase(mod.name));\n  return registry.createType('PalletMetadataV14', {\n    calls: calls && convertCalls(compatTypes, registry, mod.name, calls, sectionTypes),\n    constants: convertConstants(compatTypes, registry, constants, sectionTypes),\n    errors: errors && convertErrors(compatTypes, registry, mod.name, errors, sectionTypes),\n    events: events && convertEvents(compatTypes, registry, mod.name, events, sectionTypes),\n    index: mod.index,\n    name: mod.name,\n    storage: storage && convertStorage(compatTypes, registry, storage, sectionTypes)\n  });\n}\n/**\n * Convert the Metadata to v14\n * @internal\n **/\n\n\nexport function toV14(registry, v13, metaVersion) {\n  const compatTypes = [];\n  compatType(compatTypes, 'Null'); // position 0 always has Null\n\n  registerOriginCaller(registry, v13.modules, metaVersion);\n  const extrinsic = convertExtrinsic(registry, v13.extrinsic);\n  const pallets = v13.modules.map(mod => createPallet(compatTypes, registry, mod, {\n    calls: mod.calls.unwrapOr(null),\n    constants: mod.constants,\n    errors: mod.errors.length ? mod.errors : null,\n    events: mod.events.unwrapOr(null),\n    storage: mod.storage.unwrapOr(null)\n  }));\n  return registry.createType('MetadataV14', {\n    extrinsic,\n    lookup: {\n      types: compatTypes.map((type, id) => registry.createType('PortableType', {\n        id,\n        type\n      }))\n    },\n    pallets\n  });\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/metadata/v13/toV14.js"],"names":["getModuleTypes","knownOrigins","stringCamelCase","BOXES","compatType","compatTypes","_type","type","toString","index","findIndex","def","HistoricMetaCompat","push","makeTupleType","entries","Tuple","makeVariantType","modName","variantType","variants","Variant","path","registerOriginCaller","registry","modules","metaVersion","register","OriginCaller","_enum","map","mod","name","toNumber","sort","a","b","reduce","result","i","Object","keys","length","setTypeOverride","sectionTypes","types","forEach","override","find","aliased","eq","setOverride","orig","alias","src","dst","z","replace","convertCalls","calls","args","docs","createType","fields","convertConstants","constants","value","convertErrors","errors","_sectionTypes","convertEvents","events","t","createMapEntry","hashers","Array","isArray","Map","key","convertStorage","items","prefix","fallback","modifier","entryType","isPlain","plain","asPlain","Plain","isMap","asMap","hasher","isDoubleMap","dm","asDoubleMap","key2Hasher","key1","key2","nm","asNMap","keyVec","convertExtrinsic","signedExtensions","version","identifier","createPallet","storage","toV14","v13","extrinsic","pallets","unwrapOr","lookup","id"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { getModuleTypes, knownOrigins } from '@polkadot/types-known';\nimport { stringCamelCase } from '@polkadot/util';\nconst BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];\n/**\n * Creates a compatible type mapping\n * @internal\n **/\n\nfunction compatType(compatTypes, _type) {\n  const type = _type.toString();\n\n  const index = compatTypes.findIndex(({\n    def\n  }) => def.HistoricMetaCompat === type);\n\n  if (index !== -1) {\n    return index;\n  }\n\n  return compatTypes.push({\n    def: {\n      HistoricMetaCompat: type\n    }\n  }) - 1;\n}\n\nfunction makeTupleType(compatTypes, entries) {\n  return compatTypes.push({\n    def: {\n      Tuple: entries\n    }\n  }) - 1;\n}\n\nfunction makeVariantType(modName, variantType, compatTypes, variants) {\n  return compatTypes.push({\n    def: {\n      Variant: {\n        variants\n      }\n    },\n    path: [`pallet_${modName.toString()}`, 'pallet', variantType]\n  }) - 1;\n}\n/**\n * @internal\n * generate & register the OriginCaller type\n **/\n\n\nfunction registerOriginCaller(registry, modules, metaVersion) {\n  registry.register({\n    OriginCaller: {\n      _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {\n        for (let i = Object.keys(result).length; i < index; i++) {\n          result[`Empty${i}`] = 'Null';\n        }\n\n        result[name] = knownOrigins[name] || 'Null';\n        return result;\n      }, {})\n    }\n  });\n}\n/**\n * Find and apply the correct type override\n * @internal\n **/\n\n\nfunction setTypeOverride(sectionTypes, types) {\n  types.forEach(type => {\n    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));\n\n    if (override) {\n      type.setOverride(sectionTypes[override]);\n    } else {\n      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)\n      const orig = type.toString();\n      const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);\n\n      if (orig !== alias) {\n        type.setOverride(alias);\n      }\n    }\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n **/\n\n\nfunction convertCalls(compatTypes, registry, modName, calls, sectionTypes) {\n  const variants = calls.map(({\n    args,\n    docs,\n    name\n  }, index) => {\n    setTypeOverride(sectionTypes, args.map(({\n      type\n    }) => type));\n    return registry.createType('SiVariant', {\n      docs,\n      fields: args.map(({\n        name,\n        type\n      }) => registry.createType('SiField', {\n        name,\n        type: compatType(compatTypes, type)\n      })),\n      index,\n      name\n    });\n  });\n  return registry.createType('PalletCallMetadataV14', {\n    type: makeVariantType(modName, 'Call', compatTypes, variants)\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n */\n\n\nfunction convertConstants(compatTypes, registry, constants, sectionTypes) {\n  return constants.map(({\n    docs,\n    name,\n    type,\n    value\n  }) => {\n    setTypeOverride(sectionTypes, [type]);\n    return registry.createType('PalletConstantMetadataV14', {\n      docs,\n      name,\n      type: compatType(compatTypes, type),\n      value\n    });\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction convertErrors(compatTypes, registry, modName, errors, _sectionTypes) {\n  const variants = errors.map(({\n    docs,\n    name\n  }, index) => registry.createType('SiVariant', {\n    docs,\n    fields: [],\n    index,\n    name\n  }));\n  return registry.createType('PalletErrorMetadataV14', {\n    type: makeVariantType(modName, 'Error', compatTypes, variants)\n  });\n}\n/**\n * Apply module-specific type overrides (always be done as part of toV14)\n * @internal\n **/\n\n\nfunction convertEvents(compatTypes, registry, modName, events, sectionTypes) {\n  const variants = events.map(({\n    args,\n    docs,\n    name\n  }, index) => {\n    setTypeOverride(sectionTypes, args);\n    return registry.createType('SiVariant', {\n      docs,\n      fields: args.map(t => registry.createType('SiField', {\n        type: compatType(compatTypes, t)\n      })),\n      index,\n      name\n    });\n  });\n  return registry.createType('PalletEventMetadataV14', {\n    type: makeVariantType(modName, 'Event', compatTypes, variants)\n  });\n}\n\nfunction createMapEntry(compatTypes, registry, sectionTypes, {\n  hashers,\n  keys,\n  value\n}) {\n  setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);\n  return registry.createType('StorageEntryTypeV14', {\n    Map: {\n      hashers,\n      key: hashers.length === 1 ? compatType(compatTypes, keys[0]) : makeTupleType(compatTypes, keys.map(t => compatType(compatTypes, t))),\n      value: compatType(compatTypes, value)\n    }\n  });\n}\n/**\n * Apply module-specific storage type overrides (always part of toV14)\n * @internal\n **/\n\n\nfunction convertStorage(compatTypes, registry, {\n  items,\n  prefix\n}, sectionTypes) {\n  return registry.createType('PalletStorageMetadataV14', {\n    items: items.map(({\n      docs,\n      fallback,\n      modifier,\n      name,\n      type\n    }) => {\n      let entryType;\n\n      if (type.isPlain) {\n        const plain = type.asPlain;\n        setTypeOverride(sectionTypes, [plain]);\n        entryType = registry.createType('StorageEntryTypeV14', {\n          Plain: compatType(compatTypes, plain)\n        });\n      } else if (type.isMap) {\n        const map = type.asMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: [map.hasher],\n          keys: [map.key],\n          value: map.value\n        });\n      } else if (type.isDoubleMap) {\n        const dm = type.asDoubleMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: [dm.hasher, dm.key2Hasher],\n          keys: [dm.key1, dm.key2],\n          value: dm.value\n        });\n      } else {\n        const nm = type.asNMap;\n        entryType = createMapEntry(compatTypes, registry, sectionTypes, {\n          hashers: nm.hashers,\n          keys: nm.keyVec,\n          value: nm.value\n        });\n      }\n\n      return registry.createType('StorageEntryMetadataV14', {\n        docs,\n        fallback,\n        modifier,\n        name,\n        type: entryType\n      });\n    }),\n    prefix\n  });\n}\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction convertExtrinsic(registry, {\n  signedExtensions,\n  version\n}) {\n  return registry.createType('ExtrinsicMetadataV14', {\n    signedExtensions: signedExtensions.map(identifier => ({\n      identifier,\n      type: 0 // we don't map the fields at all\n\n    })),\n    type: 0,\n    // Map to extrinsic like in v14?\n    version: version\n  });\n}\n/** @internal */\n\n\nfunction createPallet(compatTypes, registry, mod, {\n  calls,\n  constants,\n  errors,\n  events,\n  storage\n}) {\n  const sectionTypes = getModuleTypes(registry, stringCamelCase(mod.name));\n  return registry.createType('PalletMetadataV14', {\n    calls: calls && convertCalls(compatTypes, registry, mod.name, calls, sectionTypes),\n    constants: convertConstants(compatTypes, registry, constants, sectionTypes),\n    errors: errors && convertErrors(compatTypes, registry, mod.name, errors, sectionTypes),\n    events: events && convertEvents(compatTypes, registry, mod.name, events, sectionTypes),\n    index: mod.index,\n    name: mod.name,\n    storage: storage && convertStorage(compatTypes, registry, storage, sectionTypes)\n  });\n}\n/**\n * Convert the Metadata to v14\n * @internal\n **/\n\n\nexport function toV14(registry, v13, metaVersion) {\n  const compatTypes = [];\n  compatType(compatTypes, 'Null'); // position 0 always has Null\n\n  registerOriginCaller(registry, v13.modules, metaVersion);\n  const extrinsic = convertExtrinsic(registry, v13.extrinsic);\n  const pallets = v13.modules.map(mod => createPallet(compatTypes, registry, mod, {\n    calls: mod.calls.unwrapOr(null),\n    constants: mod.constants,\n    errors: mod.errors.length ? mod.errors : null,\n    events: mod.events.unwrapOr(null),\n    storage: mod.storage.unwrapOr(null)\n  }));\n  return registry.createType('MetadataV14', {\n    extrinsic,\n    lookup: {\n      types: compatTypes.map((type, id) => registry.createType('PortableType', {\n        id,\n        type\n      }))\n    },\n    pallets\n  });\n}"]},"metadata":{},"sourceType":"module"}