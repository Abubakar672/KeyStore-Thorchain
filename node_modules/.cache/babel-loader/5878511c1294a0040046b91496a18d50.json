{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = filterEras(eras, cached);\n\n    if (!remaining.length) {\n      return of(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\nexport function erasRewards(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasRewards(eras, withActive))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/erasRewards.js"],"names":["map","of","switchMap","deriveCache","memo","filterEras","CACHE_KEY","mapRewards","eras","optRewards","era","index","eraReward","unwrapOrDefault","_erasRewards","instanceId","api","withActive","length","cached","get","toString","filter","value","remaining","query","staking","erasValidatorReward","multi","pipe","forEach","q","set","find","eq","erasRewards","derive","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,EAAd,EAAkBC,SAAlB,QAAmC,MAAnC;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,kBAAlC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,MAAMC,SAAS,GAAG,YAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,UAA1B,EAAsC;AACpC,SAAOD,IAAI,CAACR,GAAL,CAAS,CAACU,GAAD,EAAMC,KAAN,MAAiB;AAC/BD,IAAAA,GAD+B;AAE/BE,IAAAA,SAAS,EAAEH,UAAU,CAACE,KAAD,CAAV,CAAkBE,eAAlB;AAFoB,GAAjB,CAAT,CAAP;AAID;;AAED,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,GAAlC,EAAuC;AAC5C,SAAOZ,IAAI,CAACW,UAAD,EAAa,CAACP,IAAD,EAAOS,UAAP,KAAsB;AAC5C,QAAI,CAACT,IAAI,CAACU,MAAV,EAAkB;AAChB,aAAOjB,EAAE,CAAC,EAAD,CAAT;AACD;;AAED,UAAMkB,MAAM,GAAGF,UAAU,GAAG,EAAH,GAAQT,IAAI,CAACR,GAAL,CAASU,GAAG,IAAIP,WAAW,CAACiB,GAAZ,CAAiB,GAAEd,SAAU,IAAGI,GAAG,CAACW,QAAJ,EAAe,EAA/C,CAAhB,EAAmEC,MAAnE,CAA0EC,KAAK,IAAI,CAAC,CAACA,KAArF,CAAjC;AACA,UAAMC,SAAS,GAAGnB,UAAU,CAACG,IAAD,EAAOW,MAAP,CAA5B;;AAEA,QAAI,CAACK,SAAS,CAACN,MAAf,EAAuB;AACrB,aAAOjB,EAAE,CAACkB,MAAD,CAAT;AACD;;AAED,WAAOH,GAAG,CAACS,KAAJ,CAAUC,OAAV,CAAkBC,mBAAlB,CAAsCC,KAAtC,CAA4CJ,SAA5C,EAAuDK,IAAvD,CAA4D7B,GAAG,CAACS,UAAU,IAAI;AACnF,YAAMgB,KAAK,GAAGlB,UAAU,CAACiB,SAAD,EAAYf,UAAZ,CAAxB;AACA,OAACQ,UAAD,IAAeQ,KAAK,CAACK,OAAN,CAAcC,CAAC,IAAI5B,WAAW,CAAC6B,GAAZ,CAAiB,GAAE1B,SAAU,IAAGyB,CAAC,CAACrB,GAAF,CAAMW,QAAN,EAAiB,EAAjD,EAAoDU,CAApD,CAAnB,CAAf;AACA,aAAOvB,IAAI,CAACR,GAAL,CAASU,GAAG,IAAIS,MAAM,CAACc,IAAP,CAAYd,MAAM,IAAIT,GAAG,CAACwB,EAAJ,CAAOf,MAAM,CAACT,GAAd,CAAtB,KAA6Ce,KAAK,CAACQ,IAAN,CAAWR,KAAK,IAAIf,GAAG,CAACwB,EAAJ,CAAOT,KAAK,CAACf,GAAb,CAApB,CAA7D,CAAP;AACD,KAJqE,CAA/D,CAAP;AAKD,GAjBU,CAAX;AAkBD;AACD,OAAO,SAASyB,WAAT,CAAqBpB,UAArB,EAAiCC,GAAjC,EAAsC;AAC3C,SAAOZ,IAAI,CAACW,UAAD,EAAa,CAACE,UAAU,GAAG,KAAd,KAAwBD,GAAG,CAACoB,MAAJ,CAAWV,OAAX,CAAmBW,YAAnB,CAAgCpB,UAAhC,EAA4CY,IAA5C,CAAiD3B,SAAS,CAACM,IAAI,IAAIQ,GAAG,CAACoB,MAAJ,CAAWV,OAAX,CAAmBZ,YAAnB,CAAgCN,IAAhC,EAAsCS,UAAtC,CAAT,CAA1D,CAArC,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, of, switchMap } from 'rxjs';\nimport { deriveCache, memo } from \"../util/index.js\";\nimport { filterEras } from \"./util.js\";\nconst CACHE_KEY = 'eraRewards';\n\nfunction mapRewards(eras, optRewards) {\n  return eras.map((era, index) => ({\n    era,\n    eraReward: optRewards[index].unwrapOrDefault()\n  }));\n}\n\nexport function _erasRewards(instanceId, api) {\n  return memo(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return of([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = filterEras(eras, cached);\n\n    if (!remaining.length) {\n      return of(cached);\n    }\n\n    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(optRewards => {\n      const query = mapRewards(remaining, optRewards);\n      !withActive && query.forEach(q => deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\nexport function erasRewards(instanceId, api) {\n  return memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._erasRewards(eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}