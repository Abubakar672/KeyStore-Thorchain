{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore, decryptFromKeystore } from '@xchainjs/xchain-crypto';\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\nimport { Network } from '@xchainjs/xchain-client';\nimport { Client as binanceClient } from '@xchainjs/xchain-binance';\nimport { Client as bitcoinClient } from '@xchainjs/xchain-bitcoin';\nimport { Client as thorchainClient } from '@xchainjs/xchain-thorchain';\nimport { Client as ethereumClient } from '@xchainjs/xchain-ethereum/lib';\nimport { Client as litecoinClient } from '@xchainjs/xchain-litecoin';\nimport { Client as bitcoinCashClient } from '@xchainjs/xchain-bitcoincash';\nimport { AssetRuneNative, BaseAmount, assetAmount, assetToBase, baseAmount, AssetETH, AssetBNB, assetFromString } from '@xchainjs/xchain-util';\nimport * as types from '@xchainjs/xchain-util';\nimport { environment } from './environments';\nimport { Client as PolkadotClient } from '@xchainjs/xchain-polkadot';\nimport * as asset from '@xchainjs/xchain-util';\nimport BigNumber from 'bignumber.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  const [fileKeyStore, setfileKeyStore] = React.useState(\"\");\n  let test = types;\n  console.log(\"Chamak Chalo\", test.AssetETH);\n  let key;\n  let fileReader;\n  let res;\n  let phrase; // let userThorchainClient\n  //Generation of Random Phrase and Encryption is going on here \n\n  const keystore = async () => {\n    try {\n      phrase = generatePhrase();\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input); // console.log('key========>', key)\n\n      /*File Downloading function is called here to download the Text File*/\n\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /*File creation and saving here*/\n\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\", key);\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thor_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }; //File Decryption is going here\n\n\n  const decryptKeyStore = async () => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n  }; //send Transaction\n\n\n  const sendTransaction = async () => {\n    const userEthereumClient = new ethereumClient({\n      network: 'testnet',\n      phrase: res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: {\n        projectId: environment.infuraProjectId\n      }\n    }); //Ethereum Transaction is doing here\n\n    console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n    const to_address = '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n    const send_amount = baseAmount(100000000000, 6);\n    const memo = 'transfer';\n    const result = await userEthereumClient.transfer({\n      asset: AssetETH,\n      recipient: to_address,\n      amount: send_amount,\n      memo\n    });\n    console.log(result);\n  }; // const swapTransaction = async ()=>{\n  //   const userEthereumClient = new ethereumClient({\n  //     network:'testnet',\n  //     phrase:res,\n  //     etherscanApiKey: environment.etherscanKey,\n  //     infuraCreds: { projectId: environment.infuraProjectId },\n  //   });\n  //   console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n  //   const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n  //   const send_amount = baseAmount(10000, 6);\n  //   const memo = 'swap:ETH.BNB:tbnb1ftzhmpzr4t8ta3etu4x7nwujf9jqckp3th2lh0'\n  //   const result = await userEthereumClient.deposit({\n  //   asset: AssetBNB,\n  //   amount: send_amount,\n  //   memo,\n  //   })\n  //   console.log(result)\n  //   }\n  //File handiling is done here and getting the menomics after the decryption of the file data is done here\n\n\n  const handleFileRead = async e => {\n    const content = JSON.parse(fileReader.result);\n    console.log(\"content\", content);\n    res = await decryptFromKeystore(content, input);\n    console.log(\"decryption=====>\", res); //Network is defined here for all the general networks \n\n    const network = environment.network === 'testnet' ? Network.Testnet : Network.Mainnet;\n    console.log(\"Enabled Network: ---------------> \", network); //Binance Address is getting from here\n\n    const userBinanceClient = new binanceClient({\n      network,\n      phrase: res\n    });\n    let BinanceClientAddress = userBinanceClient.getAddress();\n    console.log(\"User Binance Client address: ---------------> \", BinanceClientAddress); //Transactions history of Binance Client getting here \n\n    const transationResultOfBinanceClient = await userBinanceClient.getTransactions({\n      address: BinanceClientAddress\n    });\n    console.log(\"Transaction Data of Binance CLient\", transationResultOfBinanceClient); //Bitcoin Client is set here \n\n    const userBtcClient = new bitcoinClient({\n      network,\n      phrase: res,\n      sochainUrl: 'https://sochain.com/api/v2',\n      blockstreamUrl: 'https://blockstream.info'\n    }); //Bitcoin Client is Address generating from here\n\n    console.log(\"User Btc Client: ---------------> \", userBtcClient.getAddress());\n    let addressBtc = userBtcClient.getAddress();\n    console.log(\"BTC Address: ---------------> \", addressBtc); //Balance of Bitcoin is getting from here\n\n    const balanceBtc = await userBtcClient.getBalance(addressBtc);\n    console.log(\"balance: ---------------> \", balanceBtc); //Transactions history of BTC Client getting here \n\n    const transationResultOfBTCClient = await userBtcClient.getTransactions({\n      address: addressBtc\n    });\n    console.log(\"Transaction Data of BTC CLient\", transationResultOfBTCClient); //Thorchain Client is set here \n\n    const userThorchainClient = new thorchainClient({\n      network,\n      phrase: res\n    });\n    console.log(\"User Thorchain Client: ---------------> \", userThorchainClient); //Thorchain Address is generation from here \n\n    const thorAddress = await userThorchainClient.getAddress();\n    console.log(\"THORChain Address: ---------------> \", thorAddress); //Balance of THORChain is getting from here \"transfer\"\n\n    const balanceThor = await userThorchainClient.getBalance(thorAddress);\n    console.log('THORChain Balance: ---------------> ', balanceThor); //Transactions history of Thorchain Client getting here \n\n    const transationResultOfTHORChain = await userThorchainClient.getTransactions({\n      address: thorAddress\n    });\n    console.log(\"Transaction Data of THORChain CLient\", transationResultOfTHORChain); // Ethereum CLinet is set here  \n\n    const userEthereumClient = new ethereumClient({\n      network: 'testnet',\n      phrase: res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: {\n        projectId: environment.infuraProjectId\n      }\n    }); // //Ethereum Client Address is generation from here\n    // console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n    //Ethereum CLient Provider is printing here\n\n    const provider = userEthereumClient.getProvider();\n    console.log(\"Ethereum Provider: ---------------> \", provider); // //Ethereum Balance is getting from here\n    // const ethBalance = await provider.getBalance(addressEth);\n    // console.log(\"Ethereum Balance: ---------------> \", ethBalance.toString());\n\n    let addressEth = userEthereumClient.getAddress();\n    console.log(\"Ethereum Address: ---------------> \", addressEth); //Ethereum Client Balance is getting from here \n\n    const balance1eth = await userEthereumClient.getBalance(addressEth);\n    console.log(\"Ethereum Client Balance: ---------------> \", balance1eth); //Transactions import { Amount, Asset, AssetAmount, Denomination } from '@xchainjs/xchain-util/lib/types';\n    //LTC Client is setup here \n\n    const userLtcClient = new litecoinClient({\n      network,\n      phrase: res\n    }); // LTC Client Address generation is done here\n\n    let addressLTC = userLtcClient.getAddress();\n    console.log(\"User LTC Client: ---------------> \", addressLTC); //LTC Client Balance is getting from here \n\n    const balanceLTC = await userLtcClient.getBalance(addressLTC);\n    console.log(\"LTC Client Balance: ---------------> \", balanceLTC); //Transactions history of LTC Client getting here \n\n    const transationResultOfLTC = await userLtcClient.getTransactions({\n      address: addressLTC\n    });\n    console.log(\"Transaction Data of LTC CLient\", transationResultOfLTC); //BCH Client is setup here \n\n    const userbchClient = new bitcoinCashClient({\n      network,\n      phrase: res\n    }); //BCH Client Address generation is done here\n\n    let addressBCH = userbchClient.getAddress();\n    console.log(\"User BCH Client: ---------------> \", addressBCH); //BCH Client Balance getting is done here\n\n    const balanceBCH = await userbchClient.getBalance(addressBCH);\n    console.log(\"LTC Client Balance: ---------------> \", balanceBCH); //Transaction History of BCH Client getting here\n\n    const transationResultOfBCH = await userbchClient.getTransactions({\n      address: addressBCH\n    });\n    console.log(\"Transaction Data of LTC CLient\", transationResultOfBCH); //PolkaDot Client is setup here\n\n    const userPolkaDotClient = new PolkadotClient({\n      network: 'testnet',\n      phrase: res\n    });\n    console.log(\"User PolkaDot Client: ---------------> \", userPolkaDotClient.getAddress()); //Assets getting work from xchain done here \n    // const getChainAsset = (chain) => {\n    //   console.log(\"=====> I AMM HERE \", chain)\n    //   switch (chain) {\n    //     case 'BTC':\n    //       return new asset('BTC.BTC');\n    //     case 'LTC':\n    //       return new asset('LTC.LTC');\n    //     case 'BCH':\n    //       return new asset('BCH.BCH');\n    //     case 'ETH':\n    //       return new asset('ETH.ETH');\n    //     case 'BNB':\n    //       return new asset('BNB.BNB');\n    //     case 'THOR':\n    //       return new asset('THOR.RUNE');\n    //     default:\n    //       return null;\n    //   }\n    // }\n    // const assetIsChainAsset = (asset)=> {\n    //   return assetFromString(getChainAsset(asset))===assetFromString(asset);\n    // }\n    // console.log(\"==================>>>>>>>>\",assetIsChainAsset('ETH'));\n  }; //Submit button to trigger the things \n\n\n  const SubmitAll = async () => {\n    console.log(\"password====>\", typeof input);\n    console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n    decryptKeyStore();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Thorchain Custom Keystore Maker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Enter your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"input\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: keystore,\n            children: \"Create KeyStore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" Thorchain KeyStore Decryption \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Enter your password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: e => {\n              setfileKeyStore(e.target.files[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: SubmitAll,\n            children: \"Upload!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendTransaction,\n          children: \"send Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendTransaction,\n          children: \"Swap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"CF5PG0BXkx+BorRLMid1uAXVZrA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js"],"names":["generatePhrase","encryptToKeyStore","decryptFromKeystore","React","Component","useEffect","Button","Container","Header","Segment","Grid","Network","Client","binanceClient","bitcoinClient","thorchainClient","ethereumClient","litecoinClient","bitcoinCashClient","AssetRuneNative","BaseAmount","assetAmount","assetToBase","baseAmount","AssetETH","AssetBNB","assetFromString","types","environment","PolkadotClient","asset","BigNumber","App","response","setResponse","useState","input","setInput","fileKeyStore","setfileKeyStore","test","console","log","key","fileReader","res","phrase","keystore","downloadTextFile","error","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","decryptKeyStore","FileReader","onloadend","handleFileRead","readAsText","sendTransaction","userEthereumClient","network","etherscanApiKey","etherscanKey","infuraCreds","projectId","infuraProjectId","getAddress","to_address","send_amount","memo","result","transfer","recipient","amount","e","content","parse","Testnet","Mainnet","userBinanceClient","BinanceClientAddress","transationResultOfBinanceClient","getTransactions","address","userBtcClient","sochainUrl","blockstreamUrl","addressBtc","balanceBtc","getBalance","transationResultOfBTCClient","userThorchainClient","thorAddress","balanceThor","transationResultOfTHORChain","provider","getProvider","addressEth","balance1eth","userLtcClient","addressLTC","balanceLTC","transationResultOfLTC","userbchClient","addressBCH","balanceBCH","transationResultOfBCH","userPolkaDotClient","SubmitAll","target","value","files"],"mappings":"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","sourcesContent":["import { generatePhrase, encryptToKeyStore ,decryptFromKeystore} from '@xchainjs/xchain-crypto'\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\nimport {Network} from '@xchainjs/xchain-client';\nimport { Client as binanceClient } from '@xchainjs/xchain-binance';\nimport { Client as bitcoinClient } from '@xchainjs/xchain-bitcoin';\nimport { Client as thorchainClient } from '@xchainjs/xchain-thorchain';\nimport { Client as ethereumClient } from '@xchainjs/xchain-ethereum/lib';\nimport { Client as litecoinClient } from '@xchainjs/xchain-litecoin';\nimport { Client as bitcoinCashClient } from '@xchainjs/xchain-bitcoincash';\nimport { AssetRuneNative, BaseAmount, assetAmount, assetToBase, baseAmount, AssetETH, AssetBNB ,assetFromString} from '@xchainjs/xchain-util'\nimport * as types from '@xchainjs/xchain-util'\nimport {environment} from './environments';\nimport {Client as PolkadotClient} from '@xchainjs/xchain-polkadot';\nimport * as asset  from '@xchainjs/xchain-util';\nimport BigNumber from 'bignumber.js';\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  const [fileKeyStore , setfileKeyStore] = React.useState(\"\")\n\nlet test = types;\nconsole.log(\"Chamak Chalo\", test.AssetETH);\n  let key\n  let fileReader\n  let res\n  let phrase\n  // let userThorchainClient\n\n  //Generation of Random Phrase and Encryption is going on here \n  const keystore = async () => {\n    try {\n     phrase = generatePhrase()\n      console.log(phrase);\n      key = await encryptToKeyStore(phrase, input);\n      // console.log('key========>', key)\n      \n      /*File Downloading function is called here to download the Text File*/\n      downloadTextFile();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /*File creation and saving here*/ \n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    console.log(\"keyy=====>>\",key)\n    const file = new Blob([JSON.stringify(key)], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thor_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n  \n  //File Decryption is going here\n  const decryptKeyStore = async () => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(fileKeyStore);\n    };\n\n    //send Transaction\n    const sendTransaction = async ()=>{\n    const userEthereumClient = new ethereumClient({\n      network:'testnet',\n      phrase:res,\n      etherscanApiKey: environment.etherscanKey,\n      infuraCreds: { projectId: environment.infuraProjectId },\n    });\n    \n    //Ethereum Transaction is doing here\n    console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n    const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n    const send_amount = baseAmount(100000000000, 6);\n    const memo = 'transfer'\n\n    const result = await userEthereumClient.transfer({\n      asset: AssetETH,\n      recipient: to_address,\n      amount: send_amount,\n      memo,\n    })\n    console.log(result)\n   \n  }\n\n  // const swapTransaction = async ()=>{\n  //   const userEthereumClient = new ethereumClient({\n  //     network:'testnet',\n  //     phrase:res,\n  //     etherscanApiKey: environment.etherscanKey,\n  //     infuraCreds: { projectId: environment.infuraProjectId },\n  //   });\n  //   console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n  //   const to_address= '0xf50dc8f6670b1c4f85565fc6dc8c316578a4fadd';\n  //   const send_amount = baseAmount(10000, 6);\n  //   const memo = 'swap:ETH.BNB:tbnb1ftzhmpzr4t8ta3etu4x7nwujf9jqckp3th2lh0'\n    \n  //   const result = await userEthereumClient.deposit({\n  //   asset: AssetBNB,\n  //   amount: send_amount,\n  //   memo,\n  //   })\n  //   console.log(result)\n  //   }\n\n    //File handiling is done here and getting the menomics after the decryption of the file data is done here\n    const handleFileRead = async (e) => {\n      const content = JSON.parse(fileReader.result);\n      console.log(\"content\", content);\n      res = await decryptFromKeystore(content, input);\n      console.log(\"decryption=====>\", res);\n\n\n      //Network is defined here for all the general networks \n      const network = environment.network === 'testnet' ? Network.Testnet : Network.Mainnet;\n      console.log(\"Enabled Network: ---------------> \", network)\n      //Binance Address is getting from here\n      const userBinanceClient = new binanceClient({ network, phrase:res });\n      let BinanceClientAddress= userBinanceClient.getAddress();\n      console.log(\"User Binance Client address: ---------------> \",BinanceClientAddress);\n      //Transactions history of Binance Client getting here \n      const transationResultOfBinanceClient= await userBinanceClient.getTransactions({address: BinanceClientAddress})\n      console.log(\"Transaction Data of Binance CLient\", transationResultOfBinanceClient);\n      \n\n\n      //Bitcoin Client is set here \n      const userBtcClient = new bitcoinClient({\n        network,\n        phrase:res,\n        sochainUrl: 'https://sochain.com/api/v2',\n        blockstreamUrl: 'https://blockstream.info',\n      });\n      //Bitcoin Client is Address generating from here\n      console.log(\"User Btc Client: ---------------> \", userBtcClient.getAddress())\n      let addressBtc = userBtcClient.getAddress();\n      console.log(\"BTC Address: ---------------> \",addressBtc);\n      //Balance of Bitcoin is getting from here\n      const balanceBtc = await userBtcClient.getBalance(addressBtc);\n      console.log(\"balance: ---------------> \", balanceBtc);\n      //Transactions history of BTC Client getting here \n      const transationResultOfBTCClient= await userBtcClient.getTransactions({address: addressBtc})\n      console.log(\"Transaction Data of BTC CLient\", transationResultOfBTCClient);\n\n\n\n\n      //Thorchain Client is set here \n      const userThorchainClient = new thorchainClient({ network, phrase :res });\n      console.log(\"User Thorchain Client: ---------------> \",userThorchainClient);\n      //Thorchain Address is generation from here \n      const thorAddress = await userThorchainClient.getAddress();\n      console.log(\"THORChain Address: ---------------> \", thorAddress);      \n      //Balance of THORChain is getting from here \"transfer\"\n      const balanceThor = await userThorchainClient.getBalance(thorAddress);\n      console.log('THORChain Balance: ---------------> ', balanceThor);\n      //Transactions history of Thorchain Client getting here \n      const transationResultOfTHORChain= await userThorchainClient.getTransactions({address: thorAddress})\n      console.log(\"Transaction Data of THORChain CLient\", transationResultOfTHORChain);\n      \n\n\n      // Ethereum CLinet is set here  \n      const userEthereumClient = new ethereumClient({\n        network:'testnet',\n        phrase:res,\n        etherscanApiKey: environment.etherscanKey,\n        infuraCreds: { projectId: environment.infuraProjectId },\n      });\n      // //Ethereum Client Address is generation from here\n      // console.log(\"User Ethereum Client: ---------------> \", userEthereumClient.getAddress());\n      //Ethereum CLient Provider is printing here\n      const provider = userEthereumClient.getProvider();\n      console.log(\"Ethereum Provider: ---------------> \",provider);\n      // //Ethereum Balance is getting from here\n      // const ethBalance = await provider.getBalance(addressEth);\n      // console.log(\"Ethereum Balance: ---------------> \", ethBalance.toString());\n      let addressEth = userEthereumClient.getAddress();\n      console.log(\"Ethereum Address: ---------------> \", addressEth)\n      //Ethereum Client Balance is getting from here \n      const balance1eth = await userEthereumClient.getBalance(addressEth);\n      console.log(\"Ethereum Client Balance: ---------------> \",balance1eth);\n      //Transactions import { Amount, Asset, AssetAmount, Denomination } from '@xchainjs/xchain-util/lib/types';\n\n\n     \n      //LTC Client is setup here \n      const userLtcClient = new litecoinClient({\n         network, \n         phrase:res \n        });\n      // LTC Client Address generation is done here\n      let addressLTC = userLtcClient.getAddress();\n      console.log(\"User LTC Client: ---------------> \",addressLTC);\n      //LTC Client Balance is getting from here \n      const balanceLTC = await userLtcClient.getBalance(addressLTC);\n      console.log(\"LTC Client Balance: ---------------> \",balanceLTC);\n      //Transactions history of LTC Client getting here \n      const transationResultOfLTC= await userLtcClient.getTransactions({address: addressLTC})\n      console.log(\"Transaction Data of LTC CLient\", transationResultOfLTC);\n\n\n\n      //BCH Client is setup here \n      const userbchClient = new bitcoinCashClient({ network,\n        phrase:res \n      });\n      //BCH Client Address generation is done here\n      let addressBCH =userbchClient.getAddress();\n      console.log(\"User BCH Client: ---------------> \",addressBCH);\n      //BCH Client Balance getting is done here\n      const balanceBCH = await userbchClient.getBalance(addressBCH);\n      console.log(\"LTC Client Balance: ---------------> \",balanceBCH);\n      //Transaction History of BCH Client getting here\n      const transationResultOfBCH= await userbchClient.getTransactions({address: addressBCH})\n      console.log(\"Transaction Data of LTC CLient\", transationResultOfBCH);\n\n      //PolkaDot Client is setup here\n      const userPolkaDotClient = new PolkadotClient({\n        network:'testnet',\n        phrase:res\n      });\n      console.log(\"User PolkaDot Client: ---------------> \", userPolkaDotClient.getAddress());\n\n\n//Assets getting work from xchain done here \n\n// const getChainAsset = (chain) => {\n//   console.log(\"=====> I AMM HERE \", chain)\n//   switch (chain) {\n//     case 'BTC':\n//       return new asset('BTC.BTC');\n\n//     case 'LTC':\n//       return new asset('LTC.LTC');\n\n//     case 'BCH':\n//       return new asset('BCH.BCH');\n\n//     case 'ETH':\n\n//       return new asset('ETH.ETH');\n\n//     case 'BNB':\n//       return new asset('BNB.BNB');\n\n//     case 'THOR':\n//       return new asset('THOR.RUNE');\n\n//     default:\n//       return null;\n//   }\n// }\n\n\n\n// const assetIsChainAsset = (asset)=> {\n//   return assetFromString(getChainAsset(asset))===assetFromString(asset);\n// }\n// console.log(\"==================>>>>>>>>\",assetIsChainAsset('ETH'));\n     };\n  \n  //Submit button to trigger the things \n  const SubmitAll=async()=>{\n  console.log(\"password====>\", typeof input);\n  console.log(\"fileKeyStroe====>\", typeof fileKeyStore);\n  decryptKeyStore()\n}\nreturn <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={keystore}>Create KeyStore</Button>\n        </div>\n        <h1> Thorchain KeyStore Decryption </h1>\n        <div>\n          <h1>Enter your password</h1>\n       {/* // <input id=\"password\" value={input} onchange ={e=> setInput(e.target.value)}/> */}\n        </div>\n        \n        <div>\n        <input type=\"file\"onChange={((e)=>{\n          setfileKeyStore(e.target.files[0]);\n\n        })}/>\n                <button onClick={SubmitAll} >\n                  Upload!\n                </button>\n        </div>\n        \n        <button\n         onClick={sendTransaction}>\n         send Transaction\n        </button>\n\n        <button\n         onClick={sendTransaction}>\n         Swap\n        </button>\n\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}