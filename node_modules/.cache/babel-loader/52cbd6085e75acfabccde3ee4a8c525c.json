{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a } from \"./fromU8a.js\";\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\n\nexport function compactStripLength(input) {\n  const [offset, length] = compactFromU8a(input);\n  const total = offset + length.toNumber();\n  return [total, input.subarray(offset, total)];\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/compact/stripLength.js"],"names":["compactFromU8a","compactStripLength","input","offset","length","total","toNumber","subarray"],"mappings":"AAAA;AACA;AACA,SAASA,cAAT,QAA+B,cAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,QAAM,CAACC,MAAD,EAASC,MAAT,IAAmBJ,cAAc,CAACE,KAAD,CAAvC;AACA,QAAMG,KAAK,GAAGF,MAAM,GAAGC,MAAM,CAACE,QAAP,EAAvB;AACA,SAAO,CAACD,KAAD,EAAQH,KAAK,CAACK,QAAN,CAAeJ,MAAf,EAAuBE,KAAvB,CAAR,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { compactFromU8a } from \"./fromU8a.js\";\n/**\n * @name compactStripLength\n * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length\n * @example\n * <BR>\n *\n * ```javascript\n * import { compactStripLength } from '@polkadot/util';\n *\n * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]\n * ```\n */\n\nexport function compactStripLength(input) {\n  const [offset, length] = compactFromU8a(input);\n  const total = offset + length.toNumber();\n  return [total, input.subarray(offset, total)];\n}"]},"metadata":{},"sourceType":"module"}