{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { formatDate } from \"./format/formatDate.js\";\nimport { isBn } from \"./is/bn.js\";\nimport { isBuffer } from \"./is/buffer.js\";\nimport { isFunction } from \"./is/function.js\";\nimport { isObject } from \"./is/object.js\";\nimport { isU8a } from \"./is/u8a.js\";\nimport { u8aToHex } from \"./u8a/toHex.js\";\nimport { u8aToU8a } from \"./u8a/toU8a.js\";\nconst logTo = {\n  debug: 'log',\n  error: 'error',\n  log: 'log',\n  warn: 'warn'\n};\n\nfunction formatOther(value) {\n  if (value && isObject(value) && value.constructor === Object) {\n    return Object.keys(value).reduce((result, key) => {\n      result[key] = loggerFormat(value[key]);\n      return result;\n    }, {});\n  }\n\n  return value;\n}\n\nexport function loggerFormat(value) {\n  if (Array.isArray(value)) {\n    return value.map(loggerFormat);\n  } else if (isBn(value)) {\n    return value.toString();\n  } else if (isU8a(value) || isBuffer(value)) {\n    return u8aToHex(u8aToU8a(value));\n  }\n\n  return formatOther(value);\n}\n\nfunction apply(log, type, values, maxSize = -1) {\n  if (values.length === 1 && isFunction(values[0])) {\n    const fnResult = values[0]();\n    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n  }\n\n  console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(v => {\n    if (maxSize <= 0) {\n      return v;\n    }\n\n    const r = `${v}`;\n    return r.length < maxSize ? v : `${r.substr(0, maxSize)} ...`;\n  }));\n}\n\nfunction noop() {// noop\n}\n\nfunction parseEnv(type) {\n  const env = (typeof process === 'object' ? process : {}).env || {};\n  const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);\n  let isDebugOn = false;\n  (env.DEBUG || '').toLowerCase().split(',').forEach(e => {\n    if (!!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)))) {\n      isDebugOn = true;\n    }\n\n    if (!!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)))) {\n      isDebugOn = false;\n    }\n  });\n  return [isDebugOn, isNaN(maxSize) ? -1 : maxSize];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot';\n *\n * const l = logger('test');\n * ```\n */\n\n\nexport function logger(_type) {\n  const type = `${_type.toUpperCase()}:`.padStart(16);\n  const [isDebug, maxSize] = parseEnv(_type.toLowerCase());\n  return {\n    debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop,\n    error: (...values) => apply('error', type, values),\n    log: (...values) => apply('log', type, values),\n    noop,\n    warn: (...values) => apply('warn', type, values)\n  };\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/logger.js"],"names":["formatDate","isBn","isBuffer","isFunction","isObject","isU8a","u8aToHex","u8aToU8a","logTo","debug","error","log","warn","formatOther","value","constructor","Object","keys","reduce","result","key","loggerFormat","Array","isArray","map","toString","apply","type","values","maxSize","length","fnResult","console","Date","v","r","substr","noop","parseEnv","env","process","parseInt","DEBUG_MAX","isDebugOn","DEBUG","toLowerCase","split","forEach","e","endsWith","startsWith","slice","isNaN","logger","_type","toUpperCase","padStart","isDebug"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { formatDate } from \"./format/formatDate.js\";\nimport { isBn } from \"./is/bn.js\";\nimport { isBuffer } from \"./is/buffer.js\";\nimport { isFunction } from \"./is/function.js\";\nimport { isObject } from \"./is/object.js\";\nimport { isU8a } from \"./is/u8a.js\";\nimport { u8aToHex } from \"./u8a/toHex.js\";\nimport { u8aToU8a } from \"./u8a/toU8a.js\";\nconst logTo = {\n  debug: 'log',\n  error: 'error',\n  log: 'log',\n  warn: 'warn'\n};\n\nfunction formatOther(value) {\n  if (value && isObject(value) && value.constructor === Object) {\n    return Object.keys(value).reduce((result, key) => {\n      result[key] = loggerFormat(value[key]);\n      return result;\n    }, {});\n  }\n\n  return value;\n}\n\nexport function loggerFormat(value) {\n  if (Array.isArray(value)) {\n    return value.map(loggerFormat);\n  } else if (isBn(value)) {\n    return value.toString();\n  } else if (isU8a(value) || isBuffer(value)) {\n    return u8aToHex(u8aToU8a(value));\n  }\n\n  return formatOther(value);\n}\n\nfunction apply(log, type, values, maxSize = -1) {\n  if (values.length === 1 && isFunction(values[0])) {\n    const fnResult = values[0]();\n    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);\n  }\n\n  console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(v => {\n    if (maxSize <= 0) {\n      return v;\n    }\n\n    const r = `${v}`;\n    return r.length < maxSize ? v : `${r.substr(0, maxSize)} ...`;\n  }));\n}\n\nfunction noop() {// noop\n}\n\nfunction parseEnv(type) {\n  const env = (typeof process === 'object' ? process : {}).env || {};\n  const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);\n  let isDebugOn = false;\n  (env.DEBUG || '').toLowerCase().split(',').forEach(e => {\n    if (!!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)))) {\n      isDebugOn = true;\n    }\n\n    if (!!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)))) {\n      isDebugOn = false;\n    }\n  });\n  return [isDebugOn, isNaN(maxSize) ? -1 : maxSize];\n}\n/**\n * @name Logger\n * @summary Creates a consistent log interface for messages\n * @description\n * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.\n * @example\n * <BR>\n *\n * ```javascript\n * import { logger } from '@polkadot';\n *\n * const l = logger('test');\n * ```\n */\n\n\nexport function logger(_type) {\n  const type = `${_type.toUpperCase()}:`.padStart(16);\n  const [isDebug, maxSize] = parseEnv(_type.toLowerCase());\n  return {\n    debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop,\n    error: (...values) => apply('error', type, values),\n    log: (...values) => apply('log', type, values),\n    noop,\n    warn: (...values) => apply('warn', type, values)\n  };\n}"]},"metadata":{},"sourceType":"module"}