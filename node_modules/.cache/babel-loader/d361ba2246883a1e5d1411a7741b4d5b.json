{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// As per frontier\n// We use aliasSection here to override since these are in another namespace\n\n\nconst netRpc = {\n  listening: {\n    aliasSection: 'net',\n    description: 'Returns true if client is actively listening for network connections. Otherwise false.',\n    params: [],\n    type: 'bool'\n  },\n  peerCount: {\n    aliasSection: 'net',\n    description: 'Returns number of peers connected to node.',\n    params: [],\n    type: 'String'\n  },\n  version: {\n    aliasSection: 'net',\n    description: 'Returns protocol version.',\n    params: [],\n    type: 'String'\n  }\n};\nconst web3Rpc = {\n  clientVersion: {\n    aliasSection: 'web3',\n    description: 'Returns current client version.',\n    params: [],\n    type: 'String'\n  },\n  sha3: {\n    aliasSection: 'web3',\n    description: 'Returns sha3 of the given data',\n    params: [{\n      name: 'data',\n      type: 'Bytes'\n    }],\n    type: 'H256'\n  }\n};\nexport const rpc = _objectSpread(_objectSpread(_objectSpread({}, netRpc), web3Rpc), {}, {\n  accounts: {\n    description: 'Returns accounts list.',\n    params: [],\n    type: 'Vec<H160>'\n  },\n  blockNumber: {\n    description: 'Returns the blockNumber',\n    params: [],\n    type: 'U256'\n  },\n  call: {\n    description: 'Call contract, returning the output data.',\n    params: [{\n      name: 'request',\n      type: 'EthCallRequest'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'Bytes'\n  },\n  chainId: {\n    description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',\n    params: [],\n    type: 'U64'\n  },\n  coinbase: {\n    description: 'Returns block author.',\n    params: [],\n    type: 'H160'\n  },\n  estimateGas: {\n    description: 'Estimate gas needed for execution of given contract.',\n    params: [{\n      name: 'request',\n      type: 'EthCallRequest'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  gasPrice: {\n    description: 'Returns current gas price.',\n    params: [],\n    type: 'U256'\n  },\n  getBalance: {\n    description: 'Returns balance of the given account.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getBlockByHash: {\n    description: 'Returns block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'full',\n      type: 'bool'\n    }],\n    type: 'Option<EthRichBlock>'\n  },\n  getBlockByNumber: {\n    description: 'Returns block with given number.',\n    params: [{\n      name: 'block',\n      type: 'BlockNumber'\n    }, {\n      name: 'full',\n      type: 'bool'\n    }],\n    type: 'Option<EthRichBlock>'\n  },\n  getBlockTransactionCountByHash: {\n    description: 'Returns the number of transactions in a block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'U256'\n  },\n  getBlockTransactionCountByNumber: {\n    description: 'Returns the number of transactions in a block with given block number.',\n    params: [{\n      name: 'block',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getCode: {\n    description: 'Returns the code at given address at given time (block number).',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'Bytes'\n  },\n  getFilterChanges: {\n    description: 'Returns filter changes since last poll.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthFilterChanges'\n  },\n  getFilterLogs: {\n    description: 'Returns all logs matching given filter (in a range \\'from\\' - \\'to\\').',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'Vec<EthLog>'\n  },\n  getLogs: {\n    description: 'Returns logs matching given filter object.',\n    params: [{\n      name: 'filter',\n      type: 'EthFilter'\n    }],\n    type: 'Vec<EthLog>'\n  },\n  getProof: {\n    description: 'Returns proof for account and storage.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      name: 'storageKeys',\n      type: 'Vec<H256>'\n    }, {\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'EthAccount'\n  },\n  getStorageAt: {\n    description: 'Returns content of the storage at given address.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'H256'\n  },\n  getTransactionByBlockHashAndIndex: {\n    description: 'Returns transaction at given block hash and index.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionByBlockNumberAndIndex: {\n    description: 'Returns transaction by given block number and index.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionByHash: {\n    description: 'Get transaction by its hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionCount: {\n    description: 'Returns the number of transactions sent from given address at given time (block number).',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getTransactionReceipt: {\n    description: 'Returns transaction receipt by transaction hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'EthReceipt'\n  },\n  getUncleByBlockHashAndIndex: {\n    description: 'Returns an uncles at given block and index.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthRichBlock'\n  },\n  getUncleByBlockNumberAndIndex: {\n    description: 'Returns an uncles at given block and index.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthRichBlock'\n  },\n  getUncleCountByBlockHash: {\n    description: 'Returns the number of uncles in a block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'U256'\n  },\n  getUncleCountByBlockNumber: {\n    description: 'Returns the number of uncles in a block with given block number.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getWork: {\n    description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',\n    params: [],\n    type: 'EthWork'\n  },\n  hashrate: {\n    description: 'Returns the number of hashes per second that the node is mining with.',\n    params: [],\n    type: 'U256'\n  },\n  mining: {\n    description: 'Returns true if client is actively mining new blocks.',\n    params: [],\n    type: 'bool'\n  },\n  newBlockFilter: {\n    description: 'Returns id of new block filter.',\n    params: [],\n    type: 'U256'\n  },\n  newFilter: {\n    description: 'Returns id of new filter.',\n    params: [{\n      name: 'filter',\n      type: 'EthFilter'\n    }],\n    type: 'U256'\n  },\n  newPendingTransactionFilter: {\n    description: 'Returns id of new block filter.',\n    params: [],\n    type: 'U256'\n  },\n  protocolVersion: {\n    description: 'Returns protocol version encoded as a string (quotes are necessary).',\n    params: [],\n    type: 'u64'\n  },\n  sendRawTransaction: {\n    description: 'Sends signed transaction, returning its hash.',\n    params: [{\n      name: 'bytes',\n      type: 'Bytes'\n    }],\n    type: 'H256'\n  },\n  sendTransaction: {\n    description: 'Sends transaction; will block waiting for signer to return the transaction hash',\n    params: [{\n      name: 'tx',\n      type: 'EthTransactionRequest'\n    }],\n    type: 'H256'\n  },\n  submitHashrate: {\n    description: 'Used for submitting mining hashrate.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }, {\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'bool'\n  },\n  submitWork: {\n    description: 'Used for submitting a proof-of-work solution.',\n    params: [{\n      name: 'nonce',\n      type: 'H64'\n    }, {\n      name: 'headerHash',\n      type: 'H256'\n    }, {\n      name: 'mixDigest',\n      type: 'H256'\n    }],\n    type: 'bool'\n  },\n  subscribe: {\n    description: 'Subscribe to Eth subscription.',\n    params: [{\n      name: 'kind',\n      type: 'EthSubKind'\n    }, {\n      isOptional: true,\n      name: 'params',\n      type: 'EthSubParams'\n    }],\n    pubsub: ['subscription', 'subscribe', 'unsubscribe'],\n    type: 'Null'\n  },\n  syncing: {\n    description: 'Returns an object with data about the sync status or false.',\n    params: [],\n    type: 'EthSyncStatus'\n  },\n  uninstallFilter: {\n    description: 'Uninstalls filter.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'bool'\n  }\n});","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/interfaces/eth/rpc.js"],"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","netRpc","listening","aliasSection","description","params","type","peerCount","version","web3Rpc","clientVersion","sha3","name","rpc","accounts","blockNumber","call","isOptional","chainId","coinbase","estimateGas","gasPrice","getBalance","getBlockByHash","getBlockByNumber","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getCode","getFilterChanges","getFilterLogs","getLogs","getProof","getStorageAt","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionByHash","getTransactionCount","getTransactionReceipt","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getUncleCountByBlockHash","getUncleCountByBlockNumber","getWork","hashrate","mining","newBlockFilter","newFilter","newPendingTransactionFilter","protocolVersion","sendRawTransaction","sendTransaction","submitHashrate","submitWork","subscribe","pubsub","syncing","uninstallFilter"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// As per frontier\n// We use aliasSection here to override since these are in another namespace\nconst netRpc = {\n  listening: {\n    aliasSection: 'net',\n    description: 'Returns true if client is actively listening for network connections. Otherwise false.',\n    params: [],\n    type: 'bool'\n  },\n  peerCount: {\n    aliasSection: 'net',\n    description: 'Returns number of peers connected to node.',\n    params: [],\n    type: 'String'\n  },\n  version: {\n    aliasSection: 'net',\n    description: 'Returns protocol version.',\n    params: [],\n    type: 'String'\n  }\n};\nconst web3Rpc = {\n  clientVersion: {\n    aliasSection: 'web3',\n    description: 'Returns current client version.',\n    params: [],\n    type: 'String'\n  },\n  sha3: {\n    aliasSection: 'web3',\n    description: 'Returns sha3 of the given data',\n    params: [{\n      name: 'data',\n      type: 'Bytes'\n    }],\n    type: 'H256'\n  }\n};\nexport const rpc = _objectSpread(_objectSpread(_objectSpread({}, netRpc), web3Rpc), {}, {\n  accounts: {\n    description: 'Returns accounts list.',\n    params: [],\n    type: 'Vec<H160>'\n  },\n  blockNumber: {\n    description: 'Returns the blockNumber',\n    params: [],\n    type: 'U256'\n  },\n  call: {\n    description: 'Call contract, returning the output data.',\n    params: [{\n      name: 'request',\n      type: 'EthCallRequest'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'Bytes'\n  },\n  chainId: {\n    description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',\n    params: [],\n    type: 'U64'\n  },\n  coinbase: {\n    description: 'Returns block author.',\n    params: [],\n    type: 'H160'\n  },\n  estimateGas: {\n    description: 'Estimate gas needed for execution of given contract.',\n    params: [{\n      name: 'request',\n      type: 'EthCallRequest'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  gasPrice: {\n    description: 'Returns current gas price.',\n    params: [],\n    type: 'U256'\n  },\n  getBalance: {\n    description: 'Returns balance of the given account.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getBlockByHash: {\n    description: 'Returns block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'full',\n      type: 'bool'\n    }],\n    type: 'Option<EthRichBlock>'\n  },\n  getBlockByNumber: {\n    description: 'Returns block with given number.',\n    params: [{\n      name: 'block',\n      type: 'BlockNumber'\n    }, {\n      name: 'full',\n      type: 'bool'\n    }],\n    type: 'Option<EthRichBlock>'\n  },\n  getBlockTransactionCountByHash: {\n    description: 'Returns the number of transactions in a block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'U256'\n  },\n  getBlockTransactionCountByNumber: {\n    description: 'Returns the number of transactions in a block with given block number.',\n    params: [{\n      name: 'block',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getCode: {\n    description: 'Returns the code at given address at given time (block number).',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'Bytes'\n  },\n  getFilterChanges: {\n    description: 'Returns filter changes since last poll.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthFilterChanges'\n  },\n  getFilterLogs: {\n    description: 'Returns all logs matching given filter (in a range \\'from\\' - \\'to\\').',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'Vec<EthLog>'\n  },\n  getLogs: {\n    description: 'Returns logs matching given filter object.',\n    params: [{\n      name: 'filter',\n      type: 'EthFilter'\n    }],\n    type: 'Vec<EthLog>'\n  },\n  getProof: {\n    description: 'Returns proof for account and storage.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      name: 'storageKeys',\n      type: 'Vec<H256>'\n    }, {\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'EthAccount'\n  },\n  getStorageAt: {\n    description: 'Returns content of the storage at given address.',\n    params: [{\n      name: 'address',\n      type: 'H160'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'H256'\n  },\n  getTransactionByBlockHashAndIndex: {\n    description: 'Returns transaction at given block hash and index.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionByBlockNumberAndIndex: {\n    description: 'Returns transaction by given block number and index.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionByHash: {\n    description: 'Get transaction by its hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'EthTransaction'\n  },\n  getTransactionCount: {\n    description: 'Returns the number of transactions sent from given address at given time (block number).',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      isOptional: true,\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getTransactionReceipt: {\n    description: 'Returns transaction receipt by transaction hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'EthReceipt'\n  },\n  getUncleByBlockHashAndIndex: {\n    description: 'Returns an uncles at given block and index.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthRichBlock'\n  },\n  getUncleByBlockNumberAndIndex: {\n    description: 'Returns an uncles at given block and index.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }, {\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'EthRichBlock'\n  },\n  getUncleCountByBlockHash: {\n    description: 'Returns the number of uncles in a block with given hash.',\n    params: [{\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'U256'\n  },\n  getUncleCountByBlockNumber: {\n    description: 'Returns the number of uncles in a block with given block number.',\n    params: [{\n      name: 'number',\n      type: 'BlockNumber'\n    }],\n    type: 'U256'\n  },\n  getWork: {\n    description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',\n    params: [],\n    type: 'EthWork'\n  },\n  hashrate: {\n    description: 'Returns the number of hashes per second that the node is mining with.',\n    params: [],\n    type: 'U256'\n  },\n  mining: {\n    description: 'Returns true if client is actively mining new blocks.',\n    params: [],\n    type: 'bool'\n  },\n  newBlockFilter: {\n    description: 'Returns id of new block filter.',\n    params: [],\n    type: 'U256'\n  },\n  newFilter: {\n    description: 'Returns id of new filter.',\n    params: [{\n      name: 'filter',\n      type: 'EthFilter'\n    }],\n    type: 'U256'\n  },\n  newPendingTransactionFilter: {\n    description: 'Returns id of new block filter.',\n    params: [],\n    type: 'U256'\n  },\n  protocolVersion: {\n    description: 'Returns protocol version encoded as a string (quotes are necessary).',\n    params: [],\n    type: 'u64'\n  },\n  sendRawTransaction: {\n    description: 'Sends signed transaction, returning its hash.',\n    params: [{\n      name: 'bytes',\n      type: 'Bytes'\n    }],\n    type: 'H256'\n  },\n  sendTransaction: {\n    description: 'Sends transaction; will block waiting for signer to return the transaction hash',\n    params: [{\n      name: 'tx',\n      type: 'EthTransactionRequest'\n    }],\n    type: 'H256'\n  },\n  submitHashrate: {\n    description: 'Used for submitting mining hashrate.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }, {\n      name: 'hash',\n      type: 'H256'\n    }],\n    type: 'bool'\n  },\n  submitWork: {\n    description: 'Used for submitting a proof-of-work solution.',\n    params: [{\n      name: 'nonce',\n      type: 'H64'\n    }, {\n      name: 'headerHash',\n      type: 'H256'\n    }, {\n      name: 'mixDigest',\n      type: 'H256'\n    }],\n    type: 'bool'\n  },\n  subscribe: {\n    description: 'Subscribe to Eth subscription.',\n    params: [{\n      name: 'kind',\n      type: 'EthSubKind'\n    }, {\n      isOptional: true,\n      name: 'params',\n      type: 'EthSubParams'\n    }],\n    pubsub: ['subscription', 'subscribe', 'unsubscribe'],\n    type: 'Null'\n  },\n  syncing: {\n    description: 'Returns an object with data about the sync status or false.',\n    params: [],\n    type: 'EthSyncStatus'\n  },\n  uninstallFilter: {\n    description: 'Uninstalls filter.',\n    params: [{\n      name: 'index',\n      type: 'U256'\n    }],\n    type: 'bool'\n  }\n});"]},"metadata":{},"sourceType":"module"}