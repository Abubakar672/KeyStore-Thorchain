{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nimport { from } from 'rxjs';\nimport { ApiBase } from \"../base/index.js\";\nexport function decorateMethod(method) {\n  return method;\n}\n/**\n * # @polkadot/api/rx\n *\n *  ## Overview\n *\n * @name ApiRx\n *\n * @description\n * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.\n *\n * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.\n *\n * @see [[ApiPromise]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiRx from '@polkadot/api/rx';\n *\n * // initialize via Promise & static create\n * const api = await ApiRx.create().toPromise();\n *\n * // make a call to retrieve the current network head\n * api.rpc.chain.subscribeNewHeads().subscribe((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { combineLatest, pairwise, switchMap } from 'rxjs';\n * import { ApiRx, WsProvider } from '@polkadot/api';\n *\n *\n * // initialize a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialize via isReady & new with specific provider\n * new ApiRx({ provider })\n *   .isReady\n *   .pipe(\n *     switchMap((api) =>\n *       combineLatest([\n *         api.query.timestamp.blockPeriod(),\n *         api.query.timestamp.now().pipe(pairwise())\n *       ])\n *     )\n *   )\n *   .subscribe(([blockPeriod, timestamp]) => {\n *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();\n *      console.log(`timestamp ${timestamp[1]} \\nelapsed ${elapsed} \\n(${blockPeriod}s target)`);\n *   });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import { first, switchMap } from 'rxjs';\n * import ApiRx from '@polkadot/api/rx';\n *\n * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\n * import testingPairs from '@polkadot/keyring/testingPairs';\n * const keyring = testingPairs();\n *\n * // get api via Promise\n * const api = await ApiRx.create().toPromise();\n *\n * // retrieve nonce for the account\n * api.query.system\n *   .account(keyring.alice.address)\n *   .pipe(\n *      first(),\n *      // pipe nonce into transfer\n *      switchMap(([nonce]) =>\n *        api.tx.balances\n *          // create transfer\n *          .transfer(keyring.bob.address, 12345)\n *          // sign the transaction\n *          .sign(keyring.alice, { nonce })\n *          // send the transaction\n *          .send()\n *      )\n *   )\n *   // subscribe to overall result\n *   .subscribe(({ status }) => {\n *     if (status.isInBlock) {\n *       console.log('Completed at block hash', status.asFinalized.toHex());\n *     }\n *   });\n * ```\n */\n\nvar _isReadyRx = /*#__PURE__*/_classPrivateFieldLooseKey(\"isReadyRx\");\n\nexport class ApiRx extends ApiBase {\n  /**\n   * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.\n   * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs';\n   * import Api from '@polkadot/api/rx';\n   *\n   * Api.create()\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n  static create(options) {\n    return new ApiRx(options).isReady;\n  }\n  /**\n   * @description Create an instance of the ApiRx class\n   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs';\n   * import Api from '@polkadot/api/rx';\n   *\n   * new Api().isReady\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n\n\n  constructor(options) {\n    super(options, 'rxjs', decorateMethod);\n    Object.defineProperty(this, _isReadyRx, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _isReadyRx)[_isReadyRx] = from( // You can create an observable from an event, however my mind groks this form better\n    new Promise(resolve => {\n      super.on('ready', () => resolve(this));\n    }));\n  }\n  /**\n   * @description Observable that returns the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return _classPrivateFieldLooseBase(this, _isReadyRx)[_isReadyRx];\n  }\n  /**\n   * @description Returns a clone of this ApiRx instance (new underlying provider connection)\n   */\n\n\n  clone() {\n    return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {\n      source: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api/rx/index.js"],"names":["_defineProperty","_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","from","ApiBase","decorateMethod","method","_isReadyRx","ApiRx","create","options","isReady","constructor","writable","value","Promise","resolve","on","clone","_options"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Copyright 2017-2021 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { from } from 'rxjs';\nimport { ApiBase } from \"../base/index.js\";\nexport function decorateMethod(method) {\n  return method;\n}\n/**\n * # @polkadot/api/rx\n *\n *  ## Overview\n *\n * @name ApiRx\n *\n * @description\n * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.\n *\n * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.\n *\n * @see [[ApiPromise]]\n *\n * ## Usage\n *\n * Making rpc calls -\n * <BR>\n *\n * ```javascript\n * import ApiRx from '@polkadot/api/rx';\n *\n * // initialize via Promise & static create\n * const api = await ApiRx.create().toPromise();\n *\n * // make a call to retrieve the current network head\n * api.rpc.chain.subscribeNewHeads().subscribe((header) => {\n *   console.log(`Chain is at #${header.number}`);\n * });\n * ```\n * <BR>\n *\n * Subscribing to chain state -\n * <BR>\n *\n * ```javascript\n * import { combineLatest, pairwise, switchMap } from 'rxjs';\n * import { ApiRx, WsProvider } from '@polkadot/api';\n *\n *\n * // initialize a provider with a specific endpoint\n * const provider = new WsProvider('wss://example.com:9944')\n *\n * // initialize via isReady & new with specific provider\n * new ApiRx({ provider })\n *   .isReady\n *   .pipe(\n *     switchMap((api) =>\n *       combineLatest([\n *         api.query.timestamp.blockPeriod(),\n *         api.query.timestamp.now().pipe(pairwise())\n *       ])\n *     )\n *   )\n *   .subscribe(([blockPeriod, timestamp]) => {\n *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();\n *      console.log(`timestamp ${timestamp[1]} \\nelapsed ${elapsed} \\n(${blockPeriod}s target)`);\n *   });\n * ```\n * <BR>\n *\n * Submitting a transaction -\n * <BR>\n *\n * ```javascript\n * import { first, switchMap } from 'rxjs';\n * import ApiRx from '@polkadot/api/rx';\n *\n * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)\n * import testingPairs from '@polkadot/keyring/testingPairs';\n * const keyring = testingPairs();\n *\n * // get api via Promise\n * const api = await ApiRx.create().toPromise();\n *\n * // retrieve nonce for the account\n * api.query.system\n *   .account(keyring.alice.address)\n *   .pipe(\n *      first(),\n *      // pipe nonce into transfer\n *      switchMap(([nonce]) =>\n *        api.tx.balances\n *          // create transfer\n *          .transfer(keyring.bob.address, 12345)\n *          // sign the transaction\n *          .sign(keyring.alice, { nonce })\n *          // send the transaction\n *          .send()\n *      )\n *   )\n *   // subscribe to overall result\n *   .subscribe(({ status }) => {\n *     if (status.isInBlock) {\n *       console.log('Completed at block hash', status.asFinalized.toHex());\n *     }\n *   });\n * ```\n */\n\nvar _isReadyRx = /*#__PURE__*/_classPrivateFieldLooseKey(\"isReadyRx\");\n\nexport class ApiRx extends ApiBase {\n  /**\n   * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.\n   * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs';\n   * import Api from '@polkadot/api/rx';\n   *\n   * Api.create()\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n  static create(options) {\n    return new ApiRx(options).isReady;\n  }\n  /**\n   * @description Create an instance of the ApiRx class\n   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]\n   * @example\n   * <BR>\n   *\n   * ```javascript\n   * import { switchMap } from 'rxjs';\n   * import Api from '@polkadot/api/rx';\n   *\n   * new Api().isReady\n   *   .pipe(\n   *     switchMap((api) =>\n   *       api.rpc.chain.subscribeNewHeads()\n   *   ))\n   *   .subscribe((header) => {\n   *     console.log(`new block #${header.number.toNumber()}`);\n   *   });\n   * ```\n   */\n\n\n  constructor(options) {\n    super(options, 'rxjs', decorateMethod);\n    Object.defineProperty(this, _isReadyRx, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _isReadyRx)[_isReadyRx] = from( // You can create an observable from an event, however my mind groks this form better\n    new Promise(resolve => {\n      super.on('ready', () => resolve(this));\n    }));\n  }\n  /**\n   * @description Observable that returns the first time we are connected and loaded\n   */\n\n\n  get isReady() {\n    return _classPrivateFieldLooseBase(this, _isReadyRx)[_isReadyRx];\n  }\n  /**\n   * @description Returns a clone of this ApiRx instance (new underlying provider connection)\n   */\n\n\n  clone() {\n    return new ApiRx(_objectSpread(_objectSpread({}, this._options), {}, {\n      source: this\n    }));\n  }\n\n}"]},"metadata":{},"sourceType":"module"}