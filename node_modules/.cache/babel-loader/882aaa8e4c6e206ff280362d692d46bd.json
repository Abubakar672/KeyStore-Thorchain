{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => {\n    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    }))));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.stakerExposures([accountId, withActive]).pipe(map(([first]) => first)));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/stakerExposure.js"],"names":["map","switchMap","memo","_stakerExposures","instanceId","api","accountIds","eras","withActive","stakerIds","a","registry","createType","toString","derive","staking","_erasExposure","pipe","exposures","stakerId","era","nominators","allNominators","validators","allValidators","isValidator","nominating","forEach","validatorId","isEmpty","Object","keys","length","stakerExposures","erasHistoric","stakerExposure","accountId","first"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,MAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,GAAtC,EAA2C;AAChD,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,UAAD,EAAaC,IAAb,EAAmBC,UAAnB,KAAkC;AACxD,UAAMC,SAAS,GAAGH,UAAU,CAACN,GAAX,CAAeU,CAAC,IAAIL,GAAG,CAACM,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCF,CAArC,EAAwCG,QAAxC,EAApB,CAAlB;AACA,WAAOR,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBC,aAAnB,CAAiCT,IAAjC,EAAuCC,UAAvC,EAAmDS,IAAnD,CAAwDjB,GAAG,CAACkB,SAAS,IAAIT,SAAS,CAACT,GAAV,CAAcmB,QAAQ,IAAID,SAAS,CAAClB,GAAV,CAAc,CAAC;AACvHoB,MAAAA,GADuH;AAEvHC,MAAAA,UAAU,EAAEC,aAF2G;AAGvHC,MAAAA,UAAU,EAAEC;AAH2G,KAAD,KAIlH;AACJ,YAAMC,WAAW,GAAG,CAAC,CAACD,aAAa,CAACL,QAAD,CAAnC;AACA,YAAMI,UAAU,GAAG,EAAnB;AACA,YAAMG,UAAU,GAAGJ,aAAa,CAACH,QAAD,CAAb,IAA2B,EAA9C;;AAEA,UAAIM,WAAJ,EAAiB;AACfF,QAAAA,UAAU,CAACJ,QAAD,CAAV,GAAuBK,aAAa,CAACL,QAAD,CAApC;AACD,OAFD,MAEO,IAAIO,UAAJ,EAAgB;AACrBA,QAAAA,UAAU,CAACC,OAAX,CAAmB,CAAC;AAClBC,UAAAA;AADkB,SAAD,KAEb;AACJL,UAAAA,UAAU,CAACK,WAAD,CAAV,GAA0BJ,aAAa,CAACI,WAAD,CAAvC;AACD,SAJD;AAKD;;AAED,aAAO;AACLR,QAAAA,GADK;AAELS,QAAAA,OAAO,EAAE,CAACC,MAAM,CAACC,IAAP,CAAYR,UAAZ,EAAwBS,MAF7B;AAGLP,QAAAA,WAHK;AAILC,QAAAA,UAJK;AAKLH,QAAAA;AALK,OAAP;AAOD,KA1ByG,CAA1B,CAAd,CAA3D,CAAP;AA2BD,GA7BU,CAAX;AA8BD;AACD,OAAO,SAASU,eAAT,CAAyB7B,UAAzB,EAAqCC,GAArC,EAA0C;AAC/C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,UAAD,EAAaE,UAAU,GAAG,KAA1B,KAAoCH,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBmB,YAAnB,CAAgC1B,UAAhC,EAA4CS,IAA5C,CAAiDhB,SAAS,CAACM,IAAI,IAAIF,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBZ,gBAAnB,CAAoCG,UAApC,EAAgDC,IAAhD,EAAsDC,UAAtD,CAAT,CAA1D,CAAjD,CAAX;AACD;AACD,OAAO,SAAS2B,cAAT,CAAwB/B,UAAxB,EAAoCC,GAApC,EAAyC;AAC9C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACgC,SAAD,EAAY5B,UAAU,GAAG,KAAzB,KAAmCH,GAAG,CAACS,MAAJ,CAAWC,OAAX,CAAmBkB,eAAnB,CAAmC,CAACG,SAAD,EAAY5B,UAAZ,CAAnC,EAA4DS,IAA5D,CAAiEjB,GAAG,CAAC,CAAC,CAACqC,KAAD,CAAD,KAAaA,KAAd,CAApE,CAAhD,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, eras, withActive) => {\n    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());\n    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({\n      era,\n      nominators: allNominators,\n      validators: allValidators\n    }) => {\n      const isValidator = !!allValidators[stakerId];\n      const validators = {};\n      const nominating = allNominators[stakerId] || [];\n\n      if (isValidator) {\n        validators[stakerId] = allValidators[stakerId];\n      } else if (nominating) {\n        nominating.forEach(({\n          validatorId\n        }) => {\n          validators[validatorId] = allValidators[validatorId];\n        });\n      }\n\n      return {\n        era,\n        isEmpty: !Object.keys(validators).length,\n        isValidator,\n        nominating,\n        validators\n      };\n    }))));\n  });\n}\nexport function stakerExposures(instanceId, api) {\n  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));\n}\nexport function stakerExposure(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.stakerExposures([accountId, withActive]).pipe(map(([first]) => first)));\n}"]},"metadata":{},"sourceType":"module"}