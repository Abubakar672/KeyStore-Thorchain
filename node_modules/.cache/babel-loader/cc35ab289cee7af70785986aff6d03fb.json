{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { keccakAsU8a } from \"../keccak/index.js\";\n\nfunction isInvalidChar(char, byte) {\n  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());\n}\n\nexport function isEthereumChecksum(_address) {\n  const address = _address.replace('0x', '');\n\n  const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);\n\n  for (let index = 0; index < 40; index++) {\n    if (isInvalidChar(address[index], parseInt(hash[index], 16))) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js"],"names":["u8aToHex","keccakAsU8a","isInvalidChar","char","byte","toUpperCase","toLowerCase","isEthereumChecksum","_address","address","replace","hash","index","parseInt"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACjC,SAAOD,IAAI,MAAMC,IAAI,GAAG,CAAP,GAAWD,IAAI,CAACE,WAAL,EAAX,GAAgCF,IAAI,CAACG,WAAL,EAAtC,CAAX;AACD;;AAED,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,QAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAhB;;AAEA,QAAMC,IAAI,GAAGX,QAAQ,CAACC,WAAW,CAACQ,OAAO,CAACH,WAAR,EAAD,CAAZ,EAAqC,CAAC,CAAtC,EAAyC,KAAzC,CAArB;;AAEA,OAAK,IAAIM,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,EAA5B,EAAgCA,KAAK,EAArC,EAAyC;AACvC,QAAIV,aAAa,CAACO,OAAO,CAACG,KAAD,CAAR,EAAiBC,QAAQ,CAACF,IAAI,CAACC,KAAD,CAAL,EAAc,EAAd,CAAzB,CAAjB,EAA8D;AAC5D,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToHex } from '@polkadot/util';\nimport { keccakAsU8a } from \"../keccak/index.js\";\n\nfunction isInvalidChar(char, byte) {\n  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());\n}\n\nexport function isEthereumChecksum(_address) {\n  const address = _address.replace('0x', '');\n\n  const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);\n\n  for (let index = 0; index < 40; index++) {\n    if (isInvalidChar(address[index], parseInt(hash[index], 16))) {\n      return false;\n    }\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"module"}