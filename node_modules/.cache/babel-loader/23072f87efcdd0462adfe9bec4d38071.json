{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\n/**\n * @name arrayRange\n * @summary Returns a range of numbers ith the size and the specified offset\n * @description\n * Returns a new array of numbers with the specific size. Optionally, when `startAt`, is provided, it generates the range to start at a specific value.\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayRange } from '@polkadot/util';\n *\n * arrayRange(5); // [0, 1, 2, 3, 4]\n * arrayRange(3, 5); // [5, 6, 7]\n * ```\n */\n\nexport function arrayRange(size, startAt = 0) {\n  assert(size > 0, 'Expected non-zero, positive number as a range size');\n  return new Array(size).fill(0).map((_, i) => i + startAt);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/array/range.js"],"names":["assert","arrayRange","size","startAt","Array","fill","map","_","i"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAAO,GAAG,CAApC,EAAuC;AAC5CH,EAAAA,MAAM,CAACE,IAAI,GAAG,CAAR,EAAW,oDAAX,CAAN;AACA,SAAO,IAAIE,KAAJ,CAAUF,IAAV,EAAgBG,IAAhB,CAAqB,CAArB,EAAwBC,GAAxB,CAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAGL,OAA1C,CAAP;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert } from \"../assert.js\";\n/**\n * @name arrayRange\n * @summary Returns a range of numbers ith the size and the specified offset\n * @description\n * Returns a new array of numbers with the specific size. Optionally, when `startAt`, is provided, it generates the range to start at a specific value.\n * @example\n * <BR>\n *\n * ```javascript\n * import { arrayRange } from '@polkadot/util';\n *\n * arrayRange(5); // [0, 1, 2, 3, 4]\n * arrayRange(3, 5); // [5, 6, 7]\n * ```\n */\n\nexport function arrayRange(size, startAt = 0) {\n  assert(size > 0, 'Expected non-zero, positive number as a range size');\n  return new Array(size).fill(0).map((_, i) => i + startAt);\n}"]},"metadata":{},"sourceType":"module"}