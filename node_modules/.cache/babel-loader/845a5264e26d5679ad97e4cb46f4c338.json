{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aConcat } from '@polkadot/util';\nimport { hmacSha256, hmacSha512 } from \"../../hmac/index.js\";\nimport { mnemonicToSeedSync } from \"../../mnemonic/bip39.js\";\nconst ED25519_CRYPTO = 'ed25519 seed'; // gets an xprv from a mnemonic\n\nexport function ledgerMaster(mnemonic, password) {\n  const seed = mnemonicToSeedSync(mnemonic, password);\n  const chainCode = hmacSha256(ED25519_CRYPTO, new Uint8Array([1, ...seed]));\n  let priv;\n\n  while (!priv || priv[31] & 0b00100000) {\n    priv = hmacSha512(ED25519_CRYPTO, priv || seed);\n  }\n\n  priv[0] &= 0b11111000;\n  priv[31] &= 0b01111111;\n  priv[31] |= 0b01000000;\n  return u8aConcat(priv, chainCode);\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util-crypto/hd/ledger/master.js"],"names":["u8aConcat","hmacSha256","hmacSha512","mnemonicToSeedSync","ED25519_CRYPTO","ledgerMaster","mnemonic","password","seed","chainCode","Uint8Array","priv"],"mappings":"AAAA;AACA;AACA,SAASA,SAAT,QAA0B,gBAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AACA,MAAMC,cAAc,GAAG,cAAvB,C,CAAuC;;AAEvC,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0C;AAC/C,QAAMC,IAAI,GAAGL,kBAAkB,CAACG,QAAD,EAAWC,QAAX,CAA/B;AACA,QAAME,SAAS,GAAGR,UAAU,CAACG,cAAD,EAAiB,IAAIM,UAAJ,CAAe,CAAC,CAAD,EAAI,GAAGF,IAAP,CAAf,CAAjB,CAA5B;AACA,MAAIG,IAAJ;;AAEA,SAAO,CAACA,IAAD,IAASA,IAAI,CAAC,EAAD,CAAJ,GAAW,UAA3B,EAAuC;AACrCA,IAAAA,IAAI,GAAGT,UAAU,CAACE,cAAD,EAAiBO,IAAI,IAAIH,IAAzB,CAAjB;AACD;;AAEDG,EAAAA,IAAI,CAAC,CAAD,CAAJ,IAAW,UAAX;AACAA,EAAAA,IAAI,CAAC,EAAD,CAAJ,IAAY,UAAZ;AACAA,EAAAA,IAAI,CAAC,EAAD,CAAJ,IAAY,UAAZ;AACA,SAAOX,SAAS,CAACW,IAAD,EAAOF,SAAP,CAAhB;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aConcat } from '@polkadot/util';\nimport { hmacSha256, hmacSha512 } from \"../../hmac/index.js\";\nimport { mnemonicToSeedSync } from \"../../mnemonic/bip39.js\";\nconst ED25519_CRYPTO = 'ed25519 seed'; // gets an xprv from a mnemonic\n\nexport function ledgerMaster(mnemonic, password) {\n  const seed = mnemonicToSeedSync(mnemonic, password);\n  const chainCode = hmacSha256(ED25519_CRYPTO, new Uint8Array([1, ...seed]));\n  let priv;\n\n  while (!priv || priv[31] & 0b00100000) {\n    priv = hmacSha512(ED25519_CRYPTO, priv || seed);\n  }\n\n  priv[0] &= 0b11111000;\n  priv[31] &= 0b01111111;\n  priv[31] |= 0b01000000;\n  return u8aConcat(priv, chainCode);\n}"]},"metadata":{},"sourceType":"module"}