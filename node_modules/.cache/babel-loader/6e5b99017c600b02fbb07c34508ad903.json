{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    hasKey: {\n      description: 'Returns true if the keystore has private keys for the given public key and key type.',\n      params: [{\n        name: 'publicKey',\n        type: 'Bytes'\n      }, {\n        name: 'keyType',\n        type: 'Text'\n      }],\n      type: 'bool'\n    },\n    hasSessionKeys: {\n      description: 'Returns true if the keystore has private keys for the given session public keys.',\n      params: [{\n        name: 'sessionKeys',\n        type: 'Bytes'\n      }],\n      type: 'bool'\n    },\n    removeExtrinsic: {\n      description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',\n      params: [{\n        name: 'bytesOrHash',\n        type: 'Vec<ExtrinsicOrHash>'\n      }],\n      type: 'Vec<Hash>'\n    },\n    insertKey: {\n      description: 'Insert a key into the keystore.',\n      params: [{\n        name: 'keyType',\n        type: 'Text'\n      }, {\n        name: 'suri',\n        type: 'Text'\n      }, {\n        name: 'publicKey',\n        type: 'Bytes'\n      }],\n      type: 'Bytes'\n    },\n    rotateKeys: {\n      description: 'Generate new session keys and returns the corresponding public keys',\n      params: [],\n      type: 'Bytes'\n    },\n    pendingExtrinsics: {\n      description: 'Returns all pending extrinsics, potentially grouped by sender',\n      params: [],\n      type: 'Vec<Extrinsic>'\n    },\n    submitExtrinsic: {\n      isSigned: true,\n      description: 'Submit a fully formatted extrinsic for block inclusion',\n      params: [{\n        name: 'extrinsic',\n        type: 'Extrinsic'\n      }],\n      type: 'Hash'\n    },\n    submitAndWatchExtrinsic: {\n      description: 'Submit and subscribe to watch an extrinsic until unsubscribed',\n      isSigned: true,\n      params: [{\n        name: 'extrinsic',\n        type: 'Extrinsic'\n      }],\n      pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],\n      type: 'ExtrinsicStatus'\n    }\n  },\n  types: {\n    ExtrinsicOrHash: {\n      _enum: {\n        Hash: 'Hash',\n        Extrinsic: 'Bytes'\n      }\n    },\n    ExtrinsicStatus: {\n      _enum: {\n        Future: 'Null',\n        Ready: 'Null',\n        Broadcast: 'Vec<Text>',\n        InBlock: 'Hash',\n        Retracted: 'Hash',\n        FinalityTimeout: 'Hash',\n        Finalized: 'Hash',\n        Usurped: 'Hash',\n        Dropped: 'Null',\n        Invalid: 'Null'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/interfaces/author/definitions.js"],"names":["rpc","hasKey","description","params","name","type","hasSessionKeys","removeExtrinsic","insertKey","rotateKeys","pendingExtrinsics","submitExtrinsic","isSigned","submitAndWatchExtrinsic","pubsub","types","ExtrinsicOrHash","_enum","Hash","Extrinsic","ExtrinsicStatus","Future","Ready","Broadcast","InBlock","Retracted","FinalityTimeout","Finalized","Usurped","Dropped","Invalid"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// order important in structs... :)\n\n/* eslint-disable sort-keys */\nexport default {\n  rpc: {\n    hasKey: {\n      description: 'Returns true if the keystore has private keys for the given public key and key type.',\n      params: [{\n        name: 'publicKey',\n        type: 'Bytes'\n      }, {\n        name: 'keyType',\n        type: 'Text'\n      }],\n      type: 'bool'\n    },\n    hasSessionKeys: {\n      description: 'Returns true if the keystore has private keys for the given session public keys.',\n      params: [{\n        name: 'sessionKeys',\n        type: 'Bytes'\n      }],\n      type: 'bool'\n    },\n    removeExtrinsic: {\n      description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',\n      params: [{\n        name: 'bytesOrHash',\n        type: 'Vec<ExtrinsicOrHash>'\n      }],\n      type: 'Vec<Hash>'\n    },\n    insertKey: {\n      description: 'Insert a key into the keystore.',\n      params: [{\n        name: 'keyType',\n        type: 'Text'\n      }, {\n        name: 'suri',\n        type: 'Text'\n      }, {\n        name: 'publicKey',\n        type: 'Bytes'\n      }],\n      type: 'Bytes'\n    },\n    rotateKeys: {\n      description: 'Generate new session keys and returns the corresponding public keys',\n      params: [],\n      type: 'Bytes'\n    },\n    pendingExtrinsics: {\n      description: 'Returns all pending extrinsics, potentially grouped by sender',\n      params: [],\n      type: 'Vec<Extrinsic>'\n    },\n    submitExtrinsic: {\n      isSigned: true,\n      description: 'Submit a fully formatted extrinsic for block inclusion',\n      params: [{\n        name: 'extrinsic',\n        type: 'Extrinsic'\n      }],\n      type: 'Hash'\n    },\n    submitAndWatchExtrinsic: {\n      description: 'Submit and subscribe to watch an extrinsic until unsubscribed',\n      isSigned: true,\n      params: [{\n        name: 'extrinsic',\n        type: 'Extrinsic'\n      }],\n      pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],\n      type: 'ExtrinsicStatus'\n    }\n  },\n  types: {\n    ExtrinsicOrHash: {\n      _enum: {\n        Hash: 'Hash',\n        Extrinsic: 'Bytes'\n      }\n    },\n    ExtrinsicStatus: {\n      _enum: {\n        Future: 'Null',\n        Ready: 'Null',\n        Broadcast: 'Vec<Text>',\n        InBlock: 'Hash',\n        Retracted: 'Hash',\n        FinalityTimeout: 'Hash',\n        Finalized: 'Hash',\n        Usurped: 'Hash',\n        Dropped: 'Null',\n        Invalid: 'Null'\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}