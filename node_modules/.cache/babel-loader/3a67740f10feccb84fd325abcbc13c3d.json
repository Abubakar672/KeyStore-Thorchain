{"ast":null,"code":"// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  lookup\n}, {\n  method,\n  section\n}, args) {\n  return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(registry, creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isPlain) {\n    assert(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);\n  } else {\n    const {\n      hashers,\n      key\n    } = creator.meta.type.asMap;\n    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);\n    assert(args.length === keys.length, () => `${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);\n  } // pass as tuple\n\n\n  return [creator, args];\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api/util/validate.js"],"names":["assert","isUndefined","sig","lookup","method","section","args","map","a","getTypeDef","type","join","extractStorageArgs","registry","creator","_args","filter","arg","meta","isPlain","length","hashers","key","asMap","keys","getSiType","def","asTuple","t"],"mappings":"AAAA;AACA;AACA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,gBAApC;;AAEA,SAASC,GAAT,CAAa;AACXC,EAAAA;AADW,CAAb,EAEG;AACDC,EAAAA,MADC;AAEDC,EAAAA;AAFC,CAFH,EAKGC,IALH,EAKS;AACP,SAAQ,GAAED,OAAQ,IAAGD,MAAO,IAAGE,IAAI,CAACC,GAAL,CAASC,CAAC,IAAIL,MAAM,CAACM,UAAP,CAAkBD,CAAlB,EAAqBE,IAAnC,EAAyCC,IAAzC,CAA8C,IAA9C,CAAoD,GAAnF;AACD,C,CAAC;AACF;;;AAGA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,OAAtC,EAA+CC,KAA/C,EAAsD;AAC3D,QAAMT,IAAI,GAAGS,KAAK,CAACC,MAAN,CAAaC,GAAG,IAAI,CAAChB,WAAW,CAACgB,GAAD,CAAhC,CAAb;;AAEA,MAAIH,OAAO,CAACI,IAAR,CAAaR,IAAb,CAAkBS,OAAtB,EAA+B;AAC7BnB,IAAAA,MAAM,CAACM,IAAI,CAACc,MAAL,KAAgB,CAAjB,EAAoB,MAAO,GAAElB,GAAG,CAACW,QAAD,EAAWC,OAAX,EAAoB,EAApB,CAAwB,iCAAgCR,IAAI,CAACc,MAAO,QAApG,CAAN;AACD,GAFD,MAEO;AACL,UAAM;AACJC,MAAAA,OADI;AAEJC,MAAAA;AAFI,QAGFR,OAAO,CAACI,IAAR,CAAaR,IAAb,CAAkBa,KAHtB;AAIA,UAAMC,IAAI,GAAGH,OAAO,CAACD,MAAR,KAAmB,CAAnB,GAAuB,CAACE,GAAD,CAAvB,GAA+BT,QAAQ,CAACV,MAAT,CAAgBsB,SAAhB,CAA0BH,GAA1B,EAA+BI,GAA/B,CAAmCC,OAAnC,CAA2CpB,GAA3C,CAA+CqB,CAAC,IAAIA,CAApD,CAA5C;AACA5B,IAAAA,MAAM,CAACM,IAAI,CAACc,MAAL,KAAgBI,IAAI,CAACJ,MAAtB,EAA8B,MAAO,GAAElB,GAAG,CAACW,QAAD,EAAWC,OAAX,EAAoBU,IAApB,CAA0B,wBAAuBA,IAAI,CAACJ,MAAO,eAAcd,IAAI,CAACc,MAAO,QAAjI,CAAN;AACD,GAZ0D,CAYzD;;;AAGF,SAAO,CAACN,OAAD,EAAUR,IAAV,CAAP;AACD","sourcesContent":["// Copyright 2017-2019 @polkadot/api authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isUndefined } from '@polkadot/util';\n\nfunction sig({\n  lookup\n}, {\n  method,\n  section\n}, args) {\n  return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;\n} // sets up the arguments in the form of [creator, args] ready to be used in a storage\n// call. Additionally, it verifies that the correct number of arguments have been passed\n\n\nexport function extractStorageArgs(registry, creator, _args) {\n  const args = _args.filter(arg => !isUndefined(arg));\n\n  if (creator.meta.type.isPlain) {\n    assert(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);\n  } else {\n    const {\n      hashers,\n      key\n    } = creator.meta.type.asMap;\n    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);\n    assert(args.length === keys.length, () => `${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);\n  } // pass as tuple\n\n\n  return [creator, args];\n}"]},"metadata":{},"sourceType":"module"}