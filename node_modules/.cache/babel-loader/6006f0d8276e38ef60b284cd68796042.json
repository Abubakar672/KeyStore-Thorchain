{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerSlashes(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({\n      era,\n      nominators,\n      validators\n    }) => ({\n      era,\n      total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')\n    }))));\n  });\n}\nexport function stakerSlashes(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerSlashes(accountId, eras, withActive))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/staking/stakerSlashes.js"],"names":["map","switchMap","memo","_stakerSlashes","instanceId","api","accountId","eras","withActive","stakerId","registry","createType","toString","derive","staking","_erasSlashes","pipe","slashes","era","nominators","validators","total","stakerSlashes","erasHistoric"],"mappings":"AAAA;AACA;AACA,SAASA,GAAT,EAAcC,SAAd,QAA+B,MAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,GAApC,EAAyC;AAC9C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYC,IAAZ,EAAkBC,UAAlB,KAAiC;AACvD,UAAMC,QAAQ,GAAGJ,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,WAAxB,EAAqCL,SAArC,EAAgDM,QAAhD,EAAjB;AACA,WAAOP,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBC,YAAnB,CAAgCR,IAAhC,EAAsCC,UAAtC,EAAkDQ,IAAlD,CAAuDhB,GAAG,CAACiB,OAAO,IAAIA,OAAO,CAACjB,GAAR,CAAY,CAAC;AACxFkB,MAAAA,GADwF;AAExFC,MAAAA,UAFwF;AAGxFC,MAAAA;AAHwF,KAAD,MAIlF;AACLF,MAAAA,GADK;AAELG,MAAAA,KAAK,EAAEF,UAAU,CAACV,QAAD,CAAV,IAAwBW,UAAU,CAACX,QAAD,CAAlC,IAAgDJ,GAAG,CAACK,QAAJ,CAAaC,UAAb,CAAwB,SAAxB;AAFlD,KAJkF,CAAZ,CAAZ,CAA1D,CAAP;AAQD,GAVU,CAAX;AAWD;AACD,OAAO,SAASW,aAAT,CAAuBlB,UAAvB,EAAmCC,GAAnC,EAAwC;AAC7C,SAAOH,IAAI,CAACE,UAAD,EAAa,CAACE,SAAD,EAAYE,UAAU,GAAG,KAAzB,KAAmCH,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBS,YAAnB,CAAgCf,UAAhC,EAA4CQ,IAA5C,CAAiDf,SAAS,CAACM,IAAI,IAAIF,GAAG,CAACQ,MAAJ,CAAWC,OAAX,CAAmBX,cAAnB,CAAkCG,SAAlC,EAA6CC,IAA7C,EAAmDC,UAAnD,CAAT,CAA1D,CAAhD,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { map, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _stakerSlashes(instanceId, api) {\n  return memo(instanceId, (accountId, eras, withActive) => {\n    const stakerId = api.registry.createType('AccountId', accountId).toString();\n    return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({\n      era,\n      nominators,\n      validators\n    }) => ({\n      era,\n      total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')\n    }))));\n  });\n}\nexport function stakerSlashes(instanceId, api) {\n  return memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerSlashes(accountId, eras, withActive))));\n}"]},"metadata":{},"sourceType":"module"}