{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of } from 'rxjs';\nimport { createSignedBlockExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getBlock\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, block } = await api.derive.chain.getBlock('0x123...456');\n *\n * console.log(`block #${block.header.number} was authored by ${author}`);\n * ```\n */\n\nexport function getBlock(instanceId, api) {\n  return memo(instanceId, hash => combineLatest([api.rpc.chain.getBlock(hash), api.query.system.events.at(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([signedBlock, events, validators]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/chain/getBlock.js"],"names":["catchError","combineLatest","map","of","createSignedBlockExtended","memo","getBlock","instanceId","api","hash","rpc","chain","query","system","events","at","session","validators","pipe","signedBlock","registry"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,GAApC,EAAyCC,EAAzC,QAAmD,MAAnD;AACA,SAASC,yBAAT,QAA0C,kBAA1C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,GAA9B,EAAmC;AACxC,SAAOH,IAAI,CAACE,UAAD,EAAaE,IAAI,IAAIR,aAAa,CAAC,CAACO,GAAG,CAACE,GAAJ,CAAQC,KAAR,CAAcL,QAAd,CAAuBG,IAAvB,CAAD,EAA+BD,GAAG,CAACI,KAAJ,CAAUC,MAAV,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2BN,IAA3B,CAA/B,EAAiED,GAAG,CAACI,KAAJ,CAAUI,OAAV,GAAoBR,GAAG,CAACI,KAAJ,CAAUI,OAAV,CAAkBC,UAAlB,CAA6BF,EAA7B,CAAgCN,IAAhC,CAApB,GAA4DN,EAAE,CAAC,EAAD,CAA/H,CAAD,CAAb,CAAoJe,IAApJ,CAAyJhB,GAAG,CAAC,CAAC,CAACiB,WAAD,EAAcL,MAAd,EAAsBG,UAAtB,CAAD,KAAuCb,yBAAyB,CAACI,GAAG,CAACY,QAAL,EAAeD,WAAf,EAA4BL,MAA5B,EAAoCG,UAApC,CAAjE,CAA5J,EAA+QjB,UAAU,CAAC,MAAM;AAChU;AACA;AACAG,EAAAA,EAAE,EAHuT,CAAzR,CAArB,CAAX;AAID","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { catchError, combineLatest, map, of } from 'rxjs';\nimport { createSignedBlockExtended } from \"../type/index.js\";\nimport { memo } from \"../util/index.js\";\n/**\n * @name getBlock\n * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.\n * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author\n * @example\n * <BR>\n *\n * ```javascript\n * const { author, block } = await api.derive.chain.getBlock('0x123...456');\n *\n * console.log(`block #${block.header.number} was authored by ${author}`);\n * ```\n */\n\nexport function getBlock(instanceId, api) {\n  return memo(instanceId, hash => combineLatest([api.rpc.chain.getBlock(hash), api.query.system.events.at(hash), api.query.session ? api.query.session.validators.at(hash) : of([])]).pipe(map(([signedBlock, events, validators]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that\n  // we supplied an invalid hash. (Due to defaults, storage will have an\n  // empty value, so only the RPC is affected). So return undefined\n  of())));\n}"]},"metadata":{},"sourceType":"module"}