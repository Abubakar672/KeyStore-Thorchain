{"ast":null,"code":"// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToU8a } from \"./toU8a.js\";\n\nfunction compare(a, b) {\n  let i = 0;\n\n  while (true) {\n    const overA = i >= a.length;\n    const overB = i >= b.length;\n\n    if (overA && overB) {\n      // both ends reached\n      return 0;\n    } else if (overA) {\n      // a has no more data, b has data\n      return -1;\n    } else if (overB) {\n      // b has no more data, a has data\n      return 1;\n    } else if (a[i] !== b[i]) {\n      // the number in this index doesn't match\n      return a[i] > b[i] ? 1 : -1;\n    }\n\n    i++;\n  }\n}\n/**\n * @name u8aCmp\n * @summary Compares two Uint8Arrays for sorting.\n * @description\n * For `UInt8Array` (or hex string) input values returning -1, 0 or +1\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aCmp } from '@polkadot/util';\n *\n * u8aCmp(new Uint8Array([0x67, 0x65]), new Uint8Array([0x68, 0x65])); // -1\n * u8aCmp(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // 0\n * u8aCmp(new Uint8Array([0x69, 0x65]), new Uint8Array([0x68, 0x65])); // +1\n * ```\n */\n\n\nexport function u8aCmp(a, b) {\n  return compare(u8aToU8a(a), u8aToU8a(b));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/util/u8a/cmp.js"],"names":["u8aToU8a","compare","a","b","i","overA","length","overB","u8aCmp"],"mappings":"AAAA;AACA;AACA,SAASA,QAAT,QAAyB,YAAzB;;AAEA,SAASC,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAO,IAAP,EAAa;AACX,UAAMC,KAAK,GAAGD,CAAC,IAAIF,CAAC,CAACI,MAArB;AACA,UAAMC,KAAK,GAAGH,CAAC,IAAID,CAAC,CAACG,MAArB;;AAEA,QAAID,KAAK,IAAIE,KAAb,EAAoB;AAClB;AACA,aAAO,CAAP;AACD,KAHD,MAGO,IAAIF,KAAJ,EAAW;AAChB;AACA,aAAO,CAAC,CAAR;AACD,KAHM,MAGA,IAAIE,KAAJ,EAAW;AAChB;AACA,aAAO,CAAP;AACD,KAHM,MAGA,IAAIL,CAAC,CAACE,CAAD,CAAD,KAASD,CAAC,CAACC,CAAD,CAAd,EAAmB;AACxB;AACA,aAAOF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR,GAAc,CAAd,GAAkB,CAAC,CAA1B;AACD;;AAEDA,IAAAA,CAAC;AACF;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASI,MAAT,CAAgBN,CAAhB,EAAmBC,CAAnB,EAAsB;AAC3B,SAAOF,OAAO,CAACD,QAAQ,CAACE,CAAD,CAAT,EAAcF,QAAQ,CAACG,CAAD,CAAtB,CAAd;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { u8aToU8a } from \"./toU8a.js\";\n\nfunction compare(a, b) {\n  let i = 0;\n\n  while (true) {\n    const overA = i >= a.length;\n    const overB = i >= b.length;\n\n    if (overA && overB) {\n      // both ends reached\n      return 0;\n    } else if (overA) {\n      // a has no more data, b has data\n      return -1;\n    } else if (overB) {\n      // b has no more data, a has data\n      return 1;\n    } else if (a[i] !== b[i]) {\n      // the number in this index doesn't match\n      return a[i] > b[i] ? 1 : -1;\n    }\n\n    i++;\n  }\n}\n/**\n * @name u8aCmp\n * @summary Compares two Uint8Arrays for sorting.\n * @description\n * For `UInt8Array` (or hex string) input values returning -1, 0 or +1\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aCmp } from '@polkadot/util';\n *\n * u8aCmp(new Uint8Array([0x67, 0x65]), new Uint8Array([0x68, 0x65])); // -1\n * u8aCmp(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // 0\n * u8aCmp(new Uint8Array([0x69, 0x65]), new Uint8Array([0x68, 0x65])); // +1\n * ```\n */\n\n\nexport function u8aCmp(a, b) {\n  return compare(u8aToU8a(a), u8aToU8a(b));\n}"]},"metadata":{},"sourceType":"module"}