{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\"; // Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { assert, compactAddLength, compactFromU8a, hexToU8a, isHex, isString, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { Raw } from \"../codec/Raw.js\";\nconst MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if (isHex(value)) {\n    return u8aToString(hexToU8a(value));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof Raw) {\n      return u8aToString(value);\n    }\n\n    const [offset, length] = compactFromU8a(value);\n    const total = offset + length.toNumber();\n    assert(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);\n    assert(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return u8aToString(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = /*#__PURE__*/_classPrivateFieldLooseKey(\"override\");\n\nexport class Text extends String {\n  constructor(registry, value) {\n    super(decodeText(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return isString(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    _classPrivateFieldLooseBase(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return u8aToHex(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = stringToU8a(super.toString());\n    return isBare ? encoded : compactAddLength(encoded);\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/primitive/Text.js"],"names":["_classPrivateFieldLooseBase","_classPrivateFieldLooseKey","assert","compactAddLength","compactFromU8a","hexToU8a","isHex","isString","stringToU8a","u8aToHex","u8aToString","Raw","MAX_LENGTH","decodeText","value","Uint8Array","length","offset","total","toNumber","lten","toString","subarray","_override","Text","String","constructor","registry","createdAtHash","Object","defineProperty","writable","encodedLength","toU8a","hash","isEmpty","eq","other","setOverride","override","toHex","toHuman","toJSON","toRawType","isBare","encoded"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,uDAAxC;AACA,OAAOC,0BAAP,MAAuC,sDAAvC,C,CACA;AACA;;AACA,SAASC,MAAT,EAAiBC,gBAAjB,EAAmCC,cAAnC,EAAmDC,QAAnD,EAA6DC,KAA7D,EAAoEC,QAApE,EAA8EC,WAA9E,EAA2FC,QAA3F,EAAqGC,WAArG,QAAwH,gBAAxH;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,MAAMC,UAAU,GAAG,MAAM,IAAzB;AACA;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAIR,KAAK,CAACQ,KAAD,CAAT,EAAkB;AAChB,WAAOJ,WAAW,CAACL,QAAQ,CAACS,KAAD,CAAT,CAAlB;AACD,GAFD,MAEO,IAAIA,KAAK,YAAYC,UAArB,EAAiC;AACtC,QAAI,CAACD,KAAK,CAACE,MAAX,EAAmB;AACjB,aAAO,EAAP;AACD,KAHqC,CAGpC;AACF;;;AAGA,QAAIF,KAAK,YAAYH,GAArB,EAA0B;AACxB,aAAOD,WAAW,CAACI,KAAD,CAAlB;AACD;;AAED,UAAM,CAACG,MAAD,EAASD,MAAT,IAAmBZ,cAAc,CAACU,KAAD,CAAvC;AACA,UAAMI,KAAK,GAAGD,MAAM,GAAGD,MAAM,CAACG,QAAP,EAAvB;AACAjB,IAAAA,MAAM,CAACc,MAAM,CAACI,IAAP,CAAYR,UAAZ,CAAD,EAA0B,MAAO,gBAAeI,MAAM,CAACK,QAAP,EAAkB,YAAWT,UAAW,EAAxF,CAAN;AACAV,IAAAA,MAAM,CAACgB,KAAK,IAAIJ,KAAK,CAACE,MAAhB,EAAwB,MAAO,gEAA+DE,KAAM,WAAUJ,KAAK,CAACE,MAAO,EAA3H,CAAN;AACA,WAAON,WAAW,CAACI,KAAK,CAACQ,QAAN,CAAeL,MAAf,EAAuBC,KAAvB,CAAD,CAAlB;AACD;;AAED,SAAOJ,KAAK,GAAGA,KAAK,CAACO,QAAN,EAAH,GAAsB,EAAlC;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,SAAS,GAAG,aAAatB,0BAA0B,CAAC,UAAD,CAAvD;;AAEA,OAAO,MAAMuB,IAAN,SAAmBC,MAAnB,CAA0B;AAC/BC,EAAAA,WAAW,CAACC,QAAD,EAAWb,KAAX,EAAkB;AAC3B,UAAMD,UAAU,CAACC,KAAD,CAAhB;AACA,SAAKa,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKC,aAAL,GAAqB,KAAK,CAA1B;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BP,SAA5B,EAAuC;AACrCQ,MAAAA,QAAQ,EAAE,IAD2B;AAErCjB,MAAAA,KAAK,EAAE;AAF8B,KAAvC;AAIA,SAAKa,QAAL,GAAgBA,QAAhB;AACD;AACD;AACF;AACA;;;AAGmB,MAAbK,aAAa,GAAG;AAClB,WAAO,KAAKC,KAAL,GAAajB,MAApB;AACD;AACD;AACF;AACA;;;AAGU,MAAJkB,IAAI,GAAG;AACT,WAAO,KAAKP,QAAL,CAAcO,IAAd,CAAmB,KAAKD,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;;AAGa,MAAPE,OAAO,GAAG;AACZ,WAAO,KAAKnB,MAAL,KAAgB,CAAvB;AACD;AACD;AACF;AACA;;;AAGY,MAANA,MAAM,GAAG;AACX;AACA,WAAO,MAAMA,MAAb;AACD;AACD;AACF;AACA;;;AAGEoB,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO9B,QAAQ,CAAC8B,KAAD,CAAR,GAAkB,KAAKhB,QAAL,OAAoBgB,KAAK,CAAChB,QAAN,EAAtC,GAAyD,KAAhE;AACD;AACD;AACF;AACA;;;AAGEiB,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpBvC,IAAAA,2BAA2B,CAAC,IAAD,EAAOuB,SAAP,CAA3B,CAA6CA,SAA7C,IAA0DgB,QAA1D;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN;AACA;AACA,WAAO/B,QAAQ,CAAC,KAAKwB,KAAL,CAAW,IAAX,CAAD,CAAf;AACD;AACD;AACF;AACA;;;AAGEQ,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKrB,QAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEsB,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;AACD;AACF;AACA;;;AAGEtB,EAAAA,QAAQ,GAAG;AACT,WAAOrB,2BAA2B,CAAC,IAAD,EAAOuB,SAAP,CAA3B,CAA6CA,SAA7C,KAA2D,MAAMF,QAAN,EAAlE;AACD;AACD;AACF;AACA;AACA;;;AAGEY,EAAAA,KAAK,CAACW,MAAD,EAAS;AACZ;AACA;AACA,UAAMC,OAAO,GAAGrC,WAAW,CAAC,MAAMa,QAAN,EAAD,CAA3B;AACA,WAAOuB,MAAM,GAAGC,OAAH,GAAa1C,gBAAgB,CAAC0C,OAAD,CAA1C;AACD;;AAjH8B","sourcesContent":["import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/esm/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/esm/classPrivateFieldLooseKey\";\n// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, compactAddLength, compactFromU8a, hexToU8a, isHex, isString, stringToU8a, u8aToHex, u8aToString } from '@polkadot/util';\nimport { Raw } from \"../codec/Raw.js\";\nconst MAX_LENGTH = 128 * 1024;\n/** @internal */\n\nfunction decodeText(value) {\n  if (isHex(value)) {\n    return u8aToString(hexToU8a(value));\n  } else if (value instanceof Uint8Array) {\n    if (!value.length) {\n      return '';\n    } // for Raw, the internal buffer does not have an internal length\n    // (the same applies in e.g. Bytes, where length is added at encoding-time)\n\n\n    if (value instanceof Raw) {\n      return u8aToString(value);\n    }\n\n    const [offset, length] = compactFromU8a(value);\n    const total = offset + length.toNumber();\n    assert(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);\n    assert(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);\n    return u8aToString(value.subarray(offset, total));\n  }\n\n  return value ? value.toString() : '';\n}\n/**\n * @name Text\n * @description\n * This is a string wrapper, along with the length. It is used both for strings as well\n * as items such as documentation. It simply extends the standard JS `String` built-in\n * object, inheriting all methods exposed from `String`.\n * @noInheritDoc\n */\n// TODO\n//   - Strings should probably be trimmed (docs do come through with extra padding)\n\n\nvar _override = /*#__PURE__*/_classPrivateFieldLooseKey(\"override\");\n\nexport class Text extends String {\n  constructor(registry, value) {\n    super(decodeText(value));\n    this.registry = void 0;\n    this.createdAtHash = void 0;\n    Object.defineProperty(this, _override, {\n      writable: true,\n      value: null\n    });\n    this.registry = registry;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return this.length === 0;\n  }\n  /**\n   * @description The length of the value\n   */\n\n\n  get length() {\n    // only included here since we ignore inherited docs\n    return super.length;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return isString(other) ? this.toString() === other.toString() : false;\n  }\n  /**\n   * @description Set an override value for this\n   */\n\n\n  setOverride(override) {\n    _classPrivateFieldLooseBase(this, _override)[_override] = override;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    // like with Vec<u8>, when we are encoding to hex, we don't actually add\n    // the length prefix (it is already implied by the actual string length)\n    return u8aToHex(this.toU8a(true));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Text';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return _classPrivateFieldLooseBase(this, _override)[_override] || super.toString();\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    // NOTE Here we use the super toString (we are not taking overrides into account,\n    // rather encoding the original value the string was constructed with)\n    const encoded = stringToU8a(super.toString());\n    return isBare ? encoded : compactAddLength(encoded);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}