{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isNull, isUndefined } from '@polkadot/util';\nimport { Json } from \"../codec/Json.js\";\n\nfunction createValue(registry, type, value, asArray = true) {\n  // We detect codec here as well - when found, generally this is constructed from itself\n  if (value && isFunction(value.unwrapOrDefault)) {\n    return value;\n  }\n\n  return registry.createType(type, asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value);\n}\n\nfunction decodeValue(registry, key, value) {\n  return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;\n}\n\nfunction decode(registry, value) {\n  return ( // allow decoding from a map as well (ourselves)\n  value && isFunction(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {\n    all[key] = decodeValue(registry, key, value);\n    return all;\n  }, {\n    ss58Format: registry.createType('Option<u32>'),\n    tokenDecimals: registry.createType('Option<Vec<u32>>'),\n    tokenSymbol: registry.createType('Option<Vec<Text>>')\n  });\n}\n\nexport class GenericChainProperties extends Json {\n  constructor(registry, value) {\n    super(registry, decode(registry, value));\n  }\n  /**\n   * @description The chain ss58Format\n   */\n\n\n  get ss58Format() {\n    return this.get('ss58Format');\n  }\n  /**\n   * @description The decimals for each of the tokens\n   */\n\n\n  get tokenDecimals() {\n    return this.get('tokenDecimals');\n  }\n  /**\n   * @description The symbols for the tokens\n   */\n\n\n  get tokenSymbol() {\n    return this.get('tokenSymbol');\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/generic/ChainProperties.js"],"names":["isFunction","isNull","isUndefined","Json","createValue","registry","type","value","asArray","unwrapOrDefault","createType","Array","isArray","decodeValue","key","decode","entries","Object","reduce","all","ss58Format","tokenDecimals","tokenSymbol","GenericChainProperties","constructor","get"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,WAA7B,QAAgD,gBAAhD;AACA,SAASC,IAAT,QAAqB,kBAArB;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,IAA/B,EAAqCC,KAArC,EAA4CC,OAAO,GAAG,IAAtD,EAA4D;AAC1D;AACA,MAAID,KAAK,IAAIP,UAAU,CAACO,KAAK,CAACE,eAAP,CAAvB,EAAgD;AAC9C,WAAOF,KAAP;AACD;;AAED,SAAOF,QAAQ,CAACK,UAAT,CAAoBJ,IAApB,EAA0BE,OAAO,GAAGP,MAAM,CAACM,KAAD,CAAN,IAAiBL,WAAW,CAACK,KAAD,CAA5B,GAAsC,IAAtC,GAA6CI,KAAK,CAACC,OAAN,CAAcL,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/E,GAAyFA,KAA1H,CAAP;AACD;;AAED,SAASM,WAAT,CAAqBR,QAArB,EAA+BS,GAA/B,EAAoCP,KAApC,EAA2C;AACzC,SAAOO,GAAG,KAAK,YAAR,GAAuBV,WAAW,CAACC,QAAD,EAAW,aAAX,EAA0BE,KAA1B,EAAiC,KAAjC,CAAlC,GAA4EO,GAAG,KAAK,eAAR,GAA0BV,WAAW,CAACC,QAAD,EAAW,kBAAX,EAA+BE,KAA/B,CAArC,GAA6EO,GAAG,KAAK,aAAR,GAAwBV,WAAW,CAACC,QAAD,EAAW,mBAAX,EAAgCE,KAAhC,CAAnC,GAA4EA,KAA5O;AACD;;AAED,SAASQ,MAAT,CAAgBV,QAAhB,EAA0BE,KAA1B,EAAiC;AAC/B,SAAO,EAAE;AACTA,EAAAA,KAAK,IAAIP,UAAU,CAACO,KAAK,CAACS,OAAP,CAAnB,GAAqC,CAAC,GAAGT,KAAK,CAACS,OAAN,EAAJ,CAArC,GAA4DC,MAAM,CAACD,OAAP,CAAeT,KAAK,IAAI,EAAxB,CADrD,EACkFW,MADlF,CACyF,CAACC,GAAD,EAAM,CAACL,GAAD,EAAMP,KAAN,CAAN,KAAuB;AACrHY,IAAAA,GAAG,CAACL,GAAD,CAAH,GAAWD,WAAW,CAACR,QAAD,EAAWS,GAAX,EAAgBP,KAAhB,CAAtB;AACA,WAAOY,GAAP;AACD,GAJM,EAIJ;AACDC,IAAAA,UAAU,EAAEf,QAAQ,CAACK,UAAT,CAAoB,aAApB,CADX;AAEDW,IAAAA,aAAa,EAAEhB,QAAQ,CAACK,UAAT,CAAoB,kBAApB,CAFd;AAGDY,IAAAA,WAAW,EAAEjB,QAAQ,CAACK,UAAT,CAAoB,mBAApB;AAHZ,GAJI,CAAP;AASD;;AAED,OAAO,MAAMa,sBAAN,SAAqCpB,IAArC,CAA0C;AAC/CqB,EAAAA,WAAW,CAACnB,QAAD,EAAWE,KAAX,EAAkB;AAC3B,UAAMF,QAAN,EAAgBU,MAAM,CAACV,QAAD,EAAWE,KAAX,CAAtB;AACD;AACD;AACF;AACA;;;AAGgB,MAAVa,UAAU,GAAG;AACf,WAAO,KAAKK,GAAL,CAAS,YAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGmB,MAAbJ,aAAa,GAAG;AAClB,WAAO,KAAKI,GAAL,CAAS,eAAT,CAAP;AACD;AACD;AACF;AACA;;;AAGiB,MAAXH,WAAW,GAAG;AAChB,WAAO,KAAKG,GAAL,CAAS,aAAT,CAAP;AACD;;AA3B8C","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { isFunction, isNull, isUndefined } from '@polkadot/util';\nimport { Json } from \"../codec/Json.js\";\n\nfunction createValue(registry, type, value, asArray = true) {\n  // We detect codec here as well - when found, generally this is constructed from itself\n  if (value && isFunction(value.unwrapOrDefault)) {\n    return value;\n  }\n\n  return registry.createType(type, asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value);\n}\n\nfunction decodeValue(registry, key, value) {\n  return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;\n}\n\nfunction decode(registry, value) {\n  return ( // allow decoding from a map as well (ourselves)\n  value && isFunction(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {\n    all[key] = decodeValue(registry, key, value);\n    return all;\n  }, {\n    ss58Format: registry.createType('Option<u32>'),\n    tokenDecimals: registry.createType('Option<Vec<u32>>'),\n    tokenSymbol: registry.createType('Option<Vec<Text>>')\n  });\n}\n\nexport class GenericChainProperties extends Json {\n  constructor(registry, value) {\n    super(registry, decode(registry, value));\n  }\n  /**\n   * @description The chain ss58Format\n   */\n\n\n  get ss58Format() {\n    return this.get('ss58Format');\n  }\n  /**\n   * @description The decimals for each of the tokens\n   */\n\n\n  get tokenDecimals() {\n    return this.get('tokenDecimals');\n  }\n  /**\n   * @description The symbols for the tokens\n   */\n\n\n  get tokenSymbol() {\n    return this.get('tokenSymbol');\n  }\n\n}"]},"metadata":{},"sourceType":"module"}