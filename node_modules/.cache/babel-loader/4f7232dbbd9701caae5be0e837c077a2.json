{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { BTreeMap, BTreeSet, CodecSet, Compact, DoNotConstruct, Enum, HashMap, Int, Option, Range, RangeInclusive, Result, Struct, Tuple, U8aFixed, UInt, Vec, VecFixed } from \"../codec/index.js\";\nimport { Bytes, Null } from \"../primitive/index.js\";\nimport { getTypeDef } from \"./getTypeDef.js\";\nimport { TypeDefInfo } from \"./types.js\";\n\nfunction getSubDefArray(value) {\n  assert(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  assert(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  const result = {};\n  return getSubDefArray(value).reduce((result, sub) => {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(({\n    type\n  }) => type);\n}\n\nfunction createInt({\n  displayName,\n  length\n}, Clazz) {\n  assert(isNumber(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  const [keyType, valueType] = getTypeClassArray(value);\n  return Clazz.with(keyType, valueType);\n}\n\nconst infoMapping = {\n  [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, BTreeMap),\n  [TypeDefInfo.BTreeSet]: (registry, value) => BTreeSet.with(getSubType(value)),\n  [TypeDefInfo.Compact]: (registry, value) => Compact.with(getSubType(value)),\n  [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),\n  [TypeDefInfo.Enum]: (registry, value) => {\n    const subs = getSubDefArray(value);\n    return Enum.with(subs.every(({\n      type\n    }) => type === 'Null') ? subs.reduce((out, {\n      index,\n      name\n    }, count) => {\n      out[name] = index || count;\n      return out;\n    }, {}) : getTypeClassMap(value));\n  },\n  [TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, HashMap),\n  [TypeDefInfo.Int]: (registry, value) => createInt(value, Int),\n  // We have circular deps between Linkage & Struct\n  [TypeDefInfo.Linkage]: (registry, value) => {\n    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys\n\n    const Clazz = Struct.with({\n      previous: type,\n      next: type\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    Clazz.prototype.toRawType = function () {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n      return `Linkage<${this.next.toRawType(true)}>`;\n    };\n\n    return Clazz;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Null]: (registry, _) => Null,\n  [TypeDefInfo.Option]: (registry, value) => Option.with(getSubType(value)),\n  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),\n  [TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? RangeInclusive : Range).with(getSubType(value)),\n  [TypeDefInfo.Result]: (registry, value) => {\n    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return Result.with({\n      Err,\n      Ok\n    });\n  },\n  [TypeDefInfo.Set]: (registry, value) => {\n    const result = {};\n    return CodecSet.with(getSubDefArray(value).reduce((result, {\n      index,\n      name\n    }) => {\n      result[name] = index;\n      return result;\n    }, result), value.length);\n  },\n  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),\n  [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),\n  [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),\n  [TypeDefInfo.UInt]: (registry, value) => createInt(value, UInt),\n  [TypeDefInfo.Vec]: (registry, value) => {\n    const subType = getSubType(value);\n    return subType === 'u8' ? Bytes : Vec.with(subType);\n  },\n  [TypeDefInfo.VecFixed]: (registry, {\n    displayName,\n    length,\n    sub\n  }) => {\n    assert(isNumber(length) && !isUndefined(sub), 'Expected length & type information for fixed vector');\n    const subType = sub.type;\n    return subType === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(subType, length);\n  }\n}; // Returns the type Class for construction\n\nexport function getTypeClass(registry, typeDef) {\n  let Type = registry.get(typeDef.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  try {\n    Type = infoMapping[typeDef.info](registry, typeDef);\n    assert(Type, 'No class created'); // don't clobber any existing\n\n    if (!Type.__fallbackType && typeDef.fallbackType) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore ...this is the only place we we actually assign this...\n      Type.__fallbackType = typeDef.fallbackType;\n    }\n\n    return Type;\n  } catch (error) {\n    throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);\n  }\n}\nexport function createClass(registry, type) {\n  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/create/createClass.js"],"names":["assert","isNumber","isUndefined","stringify","BTreeMap","BTreeSet","CodecSet","Compact","DoNotConstruct","Enum","HashMap","Int","Option","Range","RangeInclusive","Result","Struct","Tuple","U8aFixed","UInt","Vec","VecFixed","Bytes","Null","getTypeDef","TypeDefInfo","getSubDefArray","value","sub","Array","isArray","getSubDef","getSubType","type","getTypeClassMap","result","reduce","name","getTypeClassArray","map","createInt","displayName","length","Clazz","constructor","with","createHashMap","keyType","valueType","infoMapping","registry","subs","every","out","index","count","Linkage","previous","next","prototype","toRawType","_","Plain","getOrUnknown","includes","Ok","Err","Set","Si","getTypeClass","lookup","alias","subType","typeDef","Type","get","info","__fallbackType","fallbackType","error","Error","message","createClass","isLookupType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { assert, isNumber, isUndefined, stringify } from '@polkadot/util';\nimport { BTreeMap, BTreeSet, CodecSet, Compact, DoNotConstruct, Enum, HashMap, Int, Option, Range, RangeInclusive, Result, Struct, Tuple, U8aFixed, UInt, Vec, VecFixed } from \"../codec/index.js\";\nimport { Bytes, Null } from \"../primitive/index.js\";\nimport { getTypeDef } from \"./getTypeDef.js\";\nimport { TypeDefInfo } from \"./types.js\";\n\nfunction getSubDefArray(value) {\n  assert(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubDef(value) {\n  assert(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${stringify(value)}`);\n  return value.sub;\n}\n\nfunction getSubType(value) {\n  return getSubDef(value).type;\n} // create a maps of type string constructors from the input\n\n\nfunction getTypeClassMap(value) {\n  const result = {};\n  return getSubDefArray(value).reduce((result, sub) => {\n    result[sub.name] = sub.type;\n    return result;\n  }, result);\n} // create an array of type string constructors from the input\n\n\nfunction getTypeClassArray(value) {\n  return getSubDefArray(value).map(({\n    type\n  }) => type);\n}\n\nfunction createInt({\n  displayName,\n  length\n}, Clazz) {\n  assert(isNumber(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);\n  return Clazz.with(length, displayName);\n}\n\nfunction createHashMap(value, Clazz) {\n  const [keyType, valueType] = getTypeClassArray(value);\n  return Clazz.with(keyType, valueType);\n}\n\nconst infoMapping = {\n  [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(value, BTreeMap),\n  [TypeDefInfo.BTreeSet]: (registry, value) => BTreeSet.with(getSubType(value)),\n  [TypeDefInfo.Compact]: (registry, value) => Compact.with(getSubType(value)),\n  [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),\n  [TypeDefInfo.Enum]: (registry, value) => {\n    const subs = getSubDefArray(value);\n    return Enum.with(subs.every(({\n      type\n    }) => type === 'Null') ? subs.reduce((out, {\n      index,\n      name\n    }, count) => {\n      out[name] = index || count;\n      return out;\n    }, {}) : getTypeClassMap(value));\n  },\n  [TypeDefInfo.HashMap]: (registry, value) => createHashMap(value, HashMap),\n  [TypeDefInfo.Int]: (registry, value) => createInt(value, Int),\n  // We have circular deps between Linkage & Struct\n  [TypeDefInfo.Linkage]: (registry, value) => {\n    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys\n\n    const Clazz = Struct.with({\n      previous: type,\n      next: type\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n    Clazz.prototype.toRawType = function () {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call\n      return `Linkage<${this.next.toRawType(true)}>`;\n    };\n\n    return Clazz;\n  },\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [TypeDefInfo.Null]: (registry, _) => Null,\n  [TypeDefInfo.Option]: (registry, value) => Option.with(getSubType(value)),\n  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),\n  [TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? RangeInclusive : Range).with(getSubType(value)),\n  [TypeDefInfo.Result]: (registry, value) => {\n    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    return Result.with({\n      Err,\n      Ok\n    });\n  },\n  [TypeDefInfo.Set]: (registry, value) => {\n    const result = {};\n    return CodecSet.with(getSubDefArray(value).reduce((result, {\n      index,\n      name\n    }) => {\n      result[name] = index;\n      return result;\n    }, result), value.length);\n  },\n  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),\n  [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),\n  [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),\n  [TypeDefInfo.UInt]: (registry, value) => createInt(value, UInt),\n  [TypeDefInfo.Vec]: (registry, value) => {\n    const subType = getSubType(value);\n    return subType === 'u8' ? Bytes : Vec.with(subType);\n  },\n  [TypeDefInfo.VecFixed]: (registry, {\n    displayName,\n    length,\n    sub\n  }) => {\n    assert(isNumber(length) && !isUndefined(sub), 'Expected length & type information for fixed vector');\n    const subType = sub.type;\n    return subType === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(subType, length);\n  }\n}; // Returns the type Class for construction\n\nexport function getTypeClass(registry, typeDef) {\n  let Type = registry.get(typeDef.type);\n\n  if (Type) {\n    return Type;\n  }\n\n  try {\n    Type = infoMapping[typeDef.info](registry, typeDef);\n    assert(Type, 'No class created'); // don't clobber any existing\n\n    if (!Type.__fallbackType && typeDef.fallbackType) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore ...this is the only place we we actually assign this...\n      Type.__fallbackType = typeDef.fallbackType;\n    }\n\n    return Type;\n  } catch (error) {\n    throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);\n  }\n}\nexport function createClass(registry, type) {\n  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));\n}"]},"metadata":{},"sourceType":"module"}