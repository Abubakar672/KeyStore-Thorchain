{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseXChainClient = void 0;\n\nvar xchain_crypto_1 = require(\"@xchainjs/xchain-crypto\");\n\nvar axios_1 = require(\"axios\");\n\nvar types_1 = require(\"./types\");\n\nvar MAINNET_THORNODE_API_BASE = 'https://thornode.thorchain.info/thorchain';\nvar TESTNET_THORNODE_API_BASE = 'https://testnet.thornode.thorchain.info/thorchain';\n\nvar BaseXChainClient =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   *\n   * Client has to be initialised with network type and phrase.\n   * It will throw an error if an invalid phrase has been passed.\n   *\n   * @param {XChainClientParams} params\n   *\n   * @throws {\"Invalid phrase\"} Thrown if the given phase is invalid.\n   */\n  function BaseXChainClient(chain, params) {\n    this.phrase = '';\n    this.chain = chain;\n    this.network = params.network || types_1.Network.Testnet;\n    if (params.rootDerivationPaths) this.rootDerivationPaths = params.rootDerivationPaths; //NOTE: we don't call this.setPhrase() to vaoid generating an address and paying the perf penalty\n\n    if (params.phrase) {\n      if (!xchain_crypto_1.validatePhrase(params.phrase)) {\n        throw new Error('Invalid phrase');\n      }\n\n      this.phrase = params.phrase;\n    }\n  }\n  /**\n   * Set/update the current network.\n   *\n   * @param {Network} network\n   * @returns {void}\n   *\n   * @throws {\"Network must be provided\"}\n   * Thrown if network has not been set before.\n   */\n\n\n  BaseXChainClient.prototype.setNetwork = function (network) {\n    if (!network) {\n      throw new Error('Network must be provided');\n    }\n\n    this.network = network;\n  };\n  /**\n   * Get the current network.\n   *\n   * @returns {Network}\n   */\n\n\n  BaseXChainClient.prototype.getNetwork = function () {\n    return this.network;\n  };\n\n  BaseXChainClient.prototype.getFeeRateFromThorchain = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var respData, chainData;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.thornodeAPIGet('/inbound_addresses')];\n\n          case 1:\n            respData = _a.sent();\n            if (!Array.isArray(respData)) throw new Error('bad response from Thornode API');\n            chainData = respData.find(function (elem) {\n              return elem.chain === _this.chain && typeof elem.gas_rate === 'string';\n            });\n            if (!chainData) throw new Error(\"Thornode API /inbound_addresses does not contain fees for \" + this.chain);\n            return [2\n            /*return*/\n            , Number(chainData.gas_rate)];\n        }\n      });\n    });\n  };\n\n  BaseXChainClient.prototype.thornodeAPIGet = function (endpoint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = function () {\n              switch (_this.network) {\n                case types_1.Network.Mainnet:\n                  return MAINNET_THORNODE_API_BASE;\n\n                case types_1.Network.Testnet:\n                  return TESTNET_THORNODE_API_BASE;\n              }\n            }();\n\n            return [4\n            /*yield*/\n            , axios_1.default.get(url + endpoint)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent().data];\n        }\n      });\n    });\n  };\n  /**\n   * Set/update a new phrase\n   *\n   * @param {string} phrase A new phrase.\n   * @param {number} walletIndex (optional) HD wallet index\n   * @returns {Address} The address from the given phrase\n   *\n   * @throws {\"Invalid phrase\"}\n   * Thrown if the given phase is invalid.\n   */\n\n\n  BaseXChainClient.prototype.setPhrase = function (phrase, walletIndex) {\n    if (walletIndex === void 0) {\n      walletIndex = 0;\n    }\n\n    if (this.phrase !== phrase) {\n      if (!xchain_crypto_1.validatePhrase(phrase)) {\n        throw new Error('Invalid phrase');\n      }\n\n      this.phrase = phrase;\n    }\n\n    return this.getAddress(walletIndex);\n  };\n  /**\n   * Get getFullDerivationPath\n   *\n   * @param {number} walletIndex HD wallet index\n   * @returns {string} The bitcoin derivation path based on the network.\n   */\n\n\n  BaseXChainClient.prototype.getFullDerivationPath = function (walletIndex) {\n    return this.rootDerivationPaths ? \"\" + this.rootDerivationPaths[this.network] + walletIndex : '';\n  };\n  /**\n   * Purge client.\n   *\n   * @returns {void}\n   */\n\n\n  BaseXChainClient.prototype.purgeClient = function () {\n    this.phrase = '';\n  };\n\n  return BaseXChainClient;\n}();\n\nexports.BaseXChainClient = BaseXChainClient;","map":{"version":3,"sources":["../src/BaseXChainClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseXChainClient = void 0;\nvar xchain_crypto_1 = require(\"@xchainjs/xchain-crypto\");\nvar axios_1 = require(\"axios\");\nvar types_1 = require(\"./types\");\nvar MAINNET_THORNODE_API_BASE = 'https://thornode.thorchain.info/thorchain';\nvar TESTNET_THORNODE_API_BASE = 'https://testnet.thornode.thorchain.info/thorchain';\nvar BaseXChainClient = /** @class */ (function () {\n    /**\n     * Constructor\n     *\n     * Client has to be initialised with network type and phrase.\n     * It will throw an error if an invalid phrase has been passed.\n     *\n     * @param {XChainClientParams} params\n     *\n     * @throws {\"Invalid phrase\"} Thrown if the given phase is invalid.\n     */\n    function BaseXChainClient(chain, params) {\n        this.phrase = '';\n        this.chain = chain;\n        this.network = params.network || types_1.Network.Testnet;\n        if (params.rootDerivationPaths)\n            this.rootDerivationPaths = params.rootDerivationPaths;\n        //NOTE: we don't call this.setPhrase() to vaoid generating an address and paying the perf penalty\n        if (params.phrase) {\n            if (!xchain_crypto_1.validatePhrase(params.phrase)) {\n                throw new Error('Invalid phrase');\n            }\n            this.phrase = params.phrase;\n        }\n    }\n    /**\n     * Set/update the current network.\n     *\n     * @param {Network} network\n     * @returns {void}\n     *\n     * @throws {\"Network must be provided\"}\n     * Thrown if network has not been set before.\n     */\n    BaseXChainClient.prototype.setNetwork = function (network) {\n        if (!network) {\n            throw new Error('Network must be provided');\n        }\n        this.network = network;\n    };\n    /**\n     * Get the current network.\n     *\n     * @returns {Network}\n     */\n    BaseXChainClient.prototype.getNetwork = function () {\n        return this.network;\n    };\n    BaseXChainClient.prototype.getFeeRateFromThorchain = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var respData, chainData;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.thornodeAPIGet('/inbound_addresses')];\n                    case 1:\n                        respData = _a.sent();\n                        if (!Array.isArray(respData))\n                            throw new Error('bad response from Thornode API');\n                        chainData = respData.find(function (elem) { return elem.chain === _this.chain && typeof elem.gas_rate === 'string'; });\n                        if (!chainData)\n                            throw new Error(\"Thornode API /inbound_addresses does not contain fees for \" + this.chain);\n                        return [2 /*return*/, Number(chainData.gas_rate)];\n                }\n            });\n        });\n    };\n    BaseXChainClient.prototype.thornodeAPIGet = function (endpoint) {\n        return __awaiter(this, void 0, void 0, function () {\n            var url;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = (function () {\n                            switch (_this.network) {\n                                case types_1.Network.Mainnet:\n                                    return MAINNET_THORNODE_API_BASE;\n                                case types_1.Network.Testnet:\n                                    return TESTNET_THORNODE_API_BASE;\n                            }\n                        })();\n                        return [4 /*yield*/, axios_1.default.get(url + endpoint)];\n                    case 1: return [2 /*return*/, (_a.sent()).data];\n                }\n            });\n        });\n    };\n    /**\n     * Set/update a new phrase\n     *\n     * @param {string} phrase A new phrase.\n     * @param {number} walletIndex (optional) HD wallet index\n     * @returns {Address} The address from the given phrase\n     *\n     * @throws {\"Invalid phrase\"}\n     * Thrown if the given phase is invalid.\n     */\n    BaseXChainClient.prototype.setPhrase = function (phrase, walletIndex) {\n        if (walletIndex === void 0) { walletIndex = 0; }\n        if (this.phrase !== phrase) {\n            if (!xchain_crypto_1.validatePhrase(phrase)) {\n                throw new Error('Invalid phrase');\n            }\n            this.phrase = phrase;\n        }\n        return this.getAddress(walletIndex);\n    };\n    /**\n     * Get getFullDerivationPath\n     *\n     * @param {number} walletIndex HD wallet index\n     * @returns {string} The bitcoin derivation path based on the network.\n     */\n    BaseXChainClient.prototype.getFullDerivationPath = function (walletIndex) {\n        return this.rootDerivationPaths ? \"\" + this.rootDerivationPaths[this.network] + walletIndex : '';\n    };\n    /**\n     * Purge client.\n     *\n     * @returns {void}\n     */\n    BaseXChainClient.prototype.purgeClient = function () {\n        this.phrase = '';\n    };\n    return BaseXChainClient;\n}());\nexports.BaseXChainClient = BaseXChainClient;\n//# sourceMappingURL=BaseXChainClient.js.map"]},"metadata":{},"sourceType":"script"}