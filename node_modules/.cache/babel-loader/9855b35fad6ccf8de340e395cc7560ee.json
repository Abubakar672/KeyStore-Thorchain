{"ast":null,"code":"// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { u32 } from \"../primitive/U32.js\";\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\nconst MAX_2BYTE = new BN(1).shln(16);\nconst MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nexport class GenericAccountIndex extends u32 {\n  constructor(registry, value = new BN(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n\n  static calcLength(_value) {\n    const value = bnToBn(_value);\n\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n\n    return 8;\n  }\n\n  static readLength(input) {\n    const first = input[0];\n\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n\n    return [0, 1];\n  }\n\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if (isBn(other) || isNumber(other)) {\n      return super.eq(other);\n    } // convert and compare\n\n\n    return super.eq(this.registry.createType('AccountIndex', other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    const length = GenericAccountIndex.calcLength(this);\n    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountIndex';\n  }\n\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/types/generic/AccountIndex.js"],"names":["BN","bnToBn","isBigInt","isBn","isHex","isNumber","isU8a","decodeAddress","encodeAddress","u32","PREFIX_1BYTE","PREFIX_2BYTE","PREFIX_4BYTE","PREFIX_8BYTE","MAX_1BYTE","MAX_2BYTE","shln","MAX_4BYTE","decodeAccountIndex","value","GenericAccountIndex","toBn","constructor","registry","calcLength","_value","lte","lt","readLength","input","first","writeLength","length","Uint8Array","eq","other","createType","toHuman","toJSON","toString","toU8a","subarray","chainSS58","toRawType"],"mappings":"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","sourcesContent":["// Copyright 2017-2021 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { BN, bnToBn, isBigInt, isBn, isHex, isNumber, isU8a } from '@polkadot/util';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { u32 } from \"../primitive/U32.js\";\nconst PREFIX_1BYTE = 0xef;\nconst PREFIX_2BYTE = 0xfc;\nconst PREFIX_4BYTE = 0xfd;\nconst PREFIX_8BYTE = 0xfe;\nconst MAX_1BYTE = new BN(PREFIX_1BYTE);\nconst MAX_2BYTE = new BN(1).shln(16);\nconst MAX_4BYTE = new BN(1).shln(32);\n/** @internal */\n\nfunction decodeAccountIndex(value) {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  if (value instanceof GenericAccountIndex) {\n    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an\n    // AccountIndex), which has the initial `toString()` implementation.\n    return value.toBn();\n  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {\n    return value;\n  }\n\n  return decodeAccountIndex(decodeAddress(value));\n}\n/**\n * @name GenericAccountIndex\n * @description\n * A wrapper around an AccountIndex, which is a shortened, variable-length encoding\n * for an Account. We extends from [[U32]] to provide the number-like properties.\n */\n\n\nexport class GenericAccountIndex extends u32 {\n  constructor(registry, value = new BN(0)) {\n    super(registry, decodeAccountIndex(value));\n  }\n\n  static calcLength(_value) {\n    const value = bnToBn(_value);\n\n    if (value.lte(MAX_1BYTE)) {\n      return 1;\n    } else if (value.lt(MAX_2BYTE)) {\n      return 2;\n    } else if (value.lt(MAX_4BYTE)) {\n      return 4;\n    }\n\n    return 8;\n  }\n\n  static readLength(input) {\n    const first = input[0];\n\n    if (first === PREFIX_2BYTE) {\n      return [1, 2];\n    } else if (first === PREFIX_4BYTE) {\n      return [1, 4];\n    } else if (first === PREFIX_8BYTE) {\n      return [1, 8];\n    }\n\n    return [0, 1];\n  }\n\n  static writeLength(input) {\n    switch (input.length) {\n      case 2:\n        return new Uint8Array([PREFIX_2BYTE]);\n\n      case 4:\n        return new Uint8Array([PREFIX_4BYTE]);\n\n      case 8:\n        return new Uint8Array([PREFIX_8BYTE]);\n\n      default:\n        return new Uint8Array([]);\n    }\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // shortcut for BN or Number, don't create an object\n    if (isBn(other) || isNumber(other)) {\n      return super.eq(other);\n    } // convert and compare\n\n\n    return super.eq(this.registry.createType('AccountIndex', other));\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    const length = GenericAccountIndex.calcLength(this);\n    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'AccountIndex';\n  }\n\n}"]},"metadata":{},"sourceType":"module"}