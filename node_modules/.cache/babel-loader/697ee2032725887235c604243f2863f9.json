{"ast":null,"code":"var _jsxFileName = \"/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { generatePhrase, encryptToKeyStore } from '@xchainjs/xchain-crypto';\nimport logo from \"./logo.svg\";\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css'; // Crypto Constants for xchain\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst cipher = 'aes-128-ctr';\nconst kdf = 'pbkdf2';\nconst prf = 'hmac-sha256';\nconst dklen = 32;\nconst c = 262144;\nconst hashFunction = 'sha256';\nconst meta = 'xchain-keystore';\n\nfunction App() {\n  _s();\n\n  const [response, setResponse] = React.useState(\"\");\n  const [input, setInput] = React.useState(\"\");\n  let key;\n  useEffect(async () => {\n    const phrase = generatePhrase();\n    console.log(phrase); // const isCorrect = validatePhrase(phrase)\n\n    /*KeyStore Encryption is been done here*/\n\n    const keystore = async () => {\n      try {\n        key = await encryptToKeyStore(phrase, input); // console.log('key========>', key)\n\n        return key;\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    const res = await keystore();\n    setResponse(res);\n    console.log('========>', res);\n  }, [input]); // console.log(\"Response ================ \", response)\n\n  /*File creation and saving here*/\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(response)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    }); // console.log(\"file==========\", file)\n\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }; // state = {\n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n\n\n  const onFileChange = event => {\n    // Update the state\n    this.setState({\n      selectedFile: event.target.files[0]\n    });\n  };\n\n  const onFileUpload = () => {\n    // Create an object of formData\n    const formData = new FormData(); // Update the formData object\n\n    formData.append(\"myFile\", this.state.selectedFile, this.state.selectedFile.name);\n  }; // Decryption Going on\n  // const phraseDecrypted = async()=>{\n  // await decryptFromKeystore(keystore, password)\n  // }\n  // console.log(decryptFromKeystore)\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Thorchain Custom Keystore Maker\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Enter your Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"input\",\n            value: input,\n            onChange: e => setInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: downloadTextFile,\n            children: \"Create KeyStore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \" Thorchain KeyStore Decryption \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.onFileUpload,\n            children: \"Upload!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"45SlTEi8xyjpryUWUHOXHwPH8iU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/src/App.js"],"names":["generatePhrase","encryptToKeyStore","React","Component","useEffect","Button","Container","Header","Segment","Grid","cipher","kdf","prf","dklen","c","hashFunction","meta","App","response","setResponse","useState","input","setInput","key","phrase","console","log","keystore","error","res","downloadTextFile","element","document","createElement","file","Blob","JSON","stringify","type","href","URL","createObjectURL","download","body","appendChild","click","onFileChange","event","setState","selectedFile","target","files","onFileUpload","formData","FormData","append","state","name","e","value"],"mappings":"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","sourcesContent":["import { generatePhrase, encryptToKeyStore } from '@xchainjs/xchain-crypto'\nimport logo from './logo.svg';\nimport React, { Component, useEffect } from \"react\";\nimport { Button, Container, Header, Segment, Grid } from 'semantic-ui-react';\nimport './App.css';\n\n// Crypto Constants for xchain\nconst cipher = 'aes-128-ctr'\nconst kdf = 'pbkdf2'\nconst prf = 'hmac-sha256'\nconst dklen = 32\nconst c = 262144\nconst hashFunction = 'sha256'\nconst meta = 'xchain-keystore'\n\nfunction App() {\n  const [response, setResponse] = React.useState(\"\")\n  const [input, setInput] = React.useState(\"\")\n  let key\n  useEffect(async () => {\n    const phrase = generatePhrase()\n    console.log(phrase);\n    // const isCorrect = validatePhrase(phrase)\n\n    /*KeyStore Encryption is been done here*/\n    const keystore = async () => {\n      try {\n        key = await encryptToKeyStore(phrase, input);\n        // console.log('key========>', key)\n        return key;\n\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    const res = await keystore();\n    setResponse(res)\n    console.log('========>', res)\n  }\n    , [input]\n  );\n  // console.log(\"Response ================ \", response)\n\n\n\n  /*File creation and saving here*/\n\n  const downloadTextFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(response)], {\n      // const file = new Blob([document.getElementById('input').value],{\n      type: \"text/plain;charset=utf-8\"\n    });\n\n    // console.log(\"file==========\", file)\n\n    element.href = URL.createObjectURL(file);\n    element.download = \"Thro_Custom_Keystore\";\n    document.body.appendChild(element);\n    element.click();\n  }\n\n  // state = {\n \n  //   // Initially, no file is selected\n  //   selectedFile: null\n  // };\n\nconst  onFileChange = event => {\n    \n    // Update the state\n    this.setState({ selectedFile: event.target.files[0] });\n  \n  };\n\n const  onFileUpload = () => {\n    \n    // Create an object of formData\n    const formData = new FormData();\n  \n    // Update the formData object\n    formData.append(\n      \"myFile\",\n      this.state.selectedFile,\n      this.state.selectedFile.name\n    );}\n\n    // Decryption Going on\n\n  // const phraseDecrypted = async()=>{\n  // await decryptFromKeystore(keystore, password)\n  // }\n  // console.log(decryptFromKeystore)\n\n  \n  return <>\n    <Container>\n      <Segment>\n        <div>\n          <h1>Thorchain Custom Keystore Maker</h1>\n          <h4>Enter your Password</h4>\n          <input id=\"input\" value={input} onChange={e => setInput(e.target.value)} />\n          <Button primary onClick={downloadTextFile}>Create KeyStore</Button>\n        </div>\n\n        <div>\n\n          <h1> Thorchain KeyStore Decryption </h1>\n        <input type=\"file\"/>\n                <button onClick={this.onFileUpload}>\n                  Upload!\n                </button>\n        </div>\n      </Segment>\n    </Container>\n  </>;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}