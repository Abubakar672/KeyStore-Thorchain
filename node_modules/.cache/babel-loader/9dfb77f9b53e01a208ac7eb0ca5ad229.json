{"ast":null,"code":"// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _members(instanceId, api) {\n  return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n    accountId,\n    isDefenderVoter: defenderVotes[index].isSome,\n    isSuspended: suspended[index].isTrue,\n    payouts: payouts[index],\n    strikes: strikes[index],\n    vote: defenderVotes[index].unwrapOr(undefined),\n    vouching: vouching[index].unwrapOr(undefined)\n  })))));\n}\n/**\n * @description Get the member info for a society\n */\n\nexport function members(instanceId, api) {\n  return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));\n}","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@polkadot/api-derive/society/members.js"],"names":["combineLatest","map","of","switchMap","memo","_members","instanceId","api","accountIds","query","society","payouts","multi","strikes","defenderVotes","suspendedMembers","vouching","pipe","suspended","accountId","index","isDefenderVoter","isSome","isSuspended","isTrue","vote","unwrapOr","undefined","members","derive"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,EAAwBC,GAAxB,EAA6BC,EAA7B,EAAiCC,SAAjC,QAAkD,MAAlD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,GAA9B,EAAmC;AACxC,SAAOH,IAAI,CAACE,UAAD,EAAaE,UAAU,IAAIR,aAAa,CAAC,CAACE,EAAE,CAACM,UAAD,CAAH,EAAiBD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBC,OAAlB,CAA0BC,KAA1B,CAAgCJ,UAAhC,CAAjB,EAA8DD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBG,OAAlB,CAA0BD,KAA1B,CAAgCJ,UAAhC,CAA9D,EAA2GD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBI,aAAlB,CAAgCF,KAAhC,CAAsCJ,UAAtC,CAA3G,EAA8JD,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBK,gBAAlB,CAAmCH,KAAnC,CAAyCJ,UAAzC,CAA9J,EAAoND,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBM,QAAlB,CAA2BJ,KAA3B,CAAiCJ,UAAjC,CAApN,CAAD,CAAb,CAAiRS,IAAjR,CAAsRhB,GAAG,CAAC,CAAC,CAACO,UAAD,EAAaG,OAAb,EAAsBE,OAAtB,EAA+BC,aAA/B,EAA8CI,SAA9C,EAAyDF,QAAzD,CAAD,KAAwER,UAAU,CAACP,GAAX,CAAe,CAACkB,SAAD,EAAYC,KAAZ,MAAuB;AAC5aD,IAAAA,SAD4a;AAE5aE,IAAAA,eAAe,EAAEP,aAAa,CAACM,KAAD,CAAb,CAAqBE,MAFsY;AAG5aC,IAAAA,WAAW,EAAEL,SAAS,CAACE,KAAD,CAAT,CAAiBI,MAH8Y;AAI5ab,IAAAA,OAAO,EAAEA,OAAO,CAACS,KAAD,CAJ4Z;AAK5aP,IAAAA,OAAO,EAAEA,OAAO,CAACO,KAAD,CAL4Z;AAM5aK,IAAAA,IAAI,EAAEX,aAAa,CAACM,KAAD,CAAb,CAAqBM,QAArB,CAA8BC,SAA9B,CANsa;AAO5aX,IAAAA,QAAQ,EAAEA,QAAQ,CAACI,KAAD,CAAR,CAAgBM,QAAhB,CAAyBC,SAAzB;AAPka,GAAvB,CAAf,CAAzE,CAAzR,CAA3B,CAAX;AASD;AACD;AACA;AACA;;AAEA,OAAO,SAASC,OAAT,CAAiBtB,UAAjB,EAA6BC,GAA7B,EAAkC;AACvC,SAAOH,IAAI,CAACE,UAAD,EAAa,MAAMC,GAAG,CAACE,KAAJ,CAAUC,OAAV,CAAkBkB,OAAlB,GAA4BX,IAA5B,CAAiCd,SAAS,CAACyB,OAAO,IAAIrB,GAAG,CAACsB,MAAJ,CAAWnB,OAAX,CAAmBL,QAAnB,CAA4BuB,OAA5B,CAAZ,CAA1C,CAAnB,CAAX;AACD","sourcesContent":["// Copyright 2017-2021 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nimport { combineLatest, map, of, switchMap } from 'rxjs';\nimport { memo } from \"../util/index.js\";\nexport function _members(instanceId, api) {\n  return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({\n    accountId,\n    isDefenderVoter: defenderVotes[index].isSome,\n    isSuspended: suspended[index].isTrue,\n    payouts: payouts[index],\n    strikes: strikes[index],\n    vote: defenderVotes[index].unwrapOr(undefined),\n    vouching: vouching[index].unwrapOr(undefined)\n  })))));\n}\n/**\n * @description Get the member info for a society\n */\n\nexport function members(instanceId, api) {\n  return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));\n}"]},"metadata":{},"sourceType":"module"}