{"ast":null,"code":"var pushdata = require('@psf/pushdata-bitcoin');\n\nvar varuint = require('varuint-bitcoin'); // https://github.com/feross/buffer/blob/master/index.js#L1127\n\n\nfunction verifuint(value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number');\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value');\n  if (value > max) throw new Error('RangeError: value out of range');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n}\n\nfunction readUInt64LE(buffer, offset) {\n  var a = buffer.readUInt32LE(offset);\n  var b = buffer.readUInt32LE(offset + 4);\n  b *= 0x100000000;\n  verifuint(b + a, 0x001fffffffffffff);\n  return b + a;\n}\n\nfunction writeUInt64LE(buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff);\n  buffer.writeInt32LE(value & -1, offset);\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4);\n  return offset + 8;\n} // TODO: remove in 4.0.0?\n\n\nfunction readVarInt(buffer, offset) {\n  var result = varuint.decode(buffer, offset);\n  return {\n    number: result,\n    size: varuint.decode.bytes\n  };\n} // TODO: remove in 4.0.0?\n\n\nfunction writeVarInt(buffer, number, offset) {\n  varuint.encode(number, buffer, offset);\n  return varuint.encode.bytes;\n}\n\nmodule.exports = {\n  pushDataSize: pushdata.encodingLength,\n  readPushDataInt: pushdata.decode,\n  readUInt64LE: readUInt64LE,\n  readVarInt: readVarInt,\n  varIntBuffer: varuint.encode,\n  varIntSize: varuint.encodingLength,\n  writePushDataInt: pushdata.encode,\n  writeUInt64LE: writeUInt64LE,\n  writeVarInt: writeVarInt\n};","map":{"version":3,"sources":["/home/abubakar/Desktop/KeyStore-Thorchain/node_modules/@psf/bitcoincashjs-lib/src/bufferutils.js"],"names":["pushdata","require","varuint","verifuint","value","max","Error","Math","floor","readUInt64LE","buffer","offset","a","readUInt32LE","b","writeUInt64LE","writeInt32LE","writeUInt32LE","readVarInt","result","decode","number","size","bytes","writeVarInt","encode","module","exports","pushDataSize","encodingLength","readPushDataInt","varIntBuffer","varIntSize","writePushDataInt"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAArB,C,CAEA;;;AACA,SAASE,SAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B,MAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AAC/B,MAAIF,KAAK,GAAG,CAAZ,EAAe,MAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AACf,MAAIF,KAAK,GAAGC,GAAZ,EAAiB,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACjB,MAAIC,IAAI,CAACC,KAAL,CAAWJ,KAAX,MAAsBA,KAA1B,EAAiC,MAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AAClC;;AAED,SAASG,YAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,CAAC,GAAGF,MAAM,CAACG,YAAP,CAAoBF,MAApB,CAAR;AACA,MAAIG,CAAC,GAAGJ,MAAM,CAACG,YAAP,CAAoBF,MAAM,GAAG,CAA7B,CAAR;AACAG,EAAAA,CAAC,IAAI,WAAL;AAEAX,EAAAA,SAAS,CAACW,CAAC,GAAGF,CAAL,EAAQ,kBAAR,CAAT;AAEA,SAAOE,CAAC,GAAGF,CAAX;AACD;;AAED,SAASG,aAAT,CAAwBL,MAAxB,EAAgCN,KAAhC,EAAuCO,MAAvC,EAA+C;AAC7CR,EAAAA,SAAS,CAACC,KAAD,EAAQ,kBAAR,CAAT;AAEAM,EAAAA,MAAM,CAACM,YAAP,CAAoBZ,KAAK,GAAG,CAAC,CAA7B,EAAgCO,MAAhC;AACAD,EAAAA,MAAM,CAACO,aAAP,CAAqBV,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAG,WAAnB,CAArB,EAAsDO,MAAM,GAAG,CAA/D;AACA,SAAOA,MAAM,GAAG,CAAhB;AACD,C,CAED;;;AACA,SAASO,UAAT,CAAqBR,MAArB,EAA6BC,MAA7B,EAAqC;AACnC,MAAIQ,MAAM,GAAGjB,OAAO,CAACkB,MAAR,CAAeV,MAAf,EAAuBC,MAAvB,CAAb;AAEA,SAAO;AACLU,IAAAA,MAAM,EAAEF,MADH;AAELG,IAAAA,IAAI,EAAEpB,OAAO,CAACkB,MAAR,CAAeG;AAFhB,GAAP;AAID,C,CAED;;;AACA,SAASC,WAAT,CAAsBd,MAAtB,EAA8BW,MAA9B,EAAsCV,MAAtC,EAA8C;AAC5CT,EAAAA,OAAO,CAACuB,MAAR,CAAeJ,MAAf,EAAuBX,MAAvB,EAA+BC,MAA/B;AACA,SAAOT,OAAO,CAACuB,MAAR,CAAeF,KAAtB;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,YAAY,EAAE5B,QAAQ,CAAC6B,cADR;AAEfC,EAAAA,eAAe,EAAE9B,QAAQ,CAACoB,MAFX;AAGfX,EAAAA,YAAY,EAAEA,YAHC;AAIfS,EAAAA,UAAU,EAAEA,UAJG;AAKfa,EAAAA,YAAY,EAAE7B,OAAO,CAACuB,MALP;AAMfO,EAAAA,UAAU,EAAE9B,OAAO,CAAC2B,cANL;AAOfI,EAAAA,gBAAgB,EAAEjC,QAAQ,CAACyB,MAPZ;AAQfV,EAAAA,aAAa,EAAEA,aARA;AASfS,EAAAA,WAAW,EAAEA;AATE,CAAjB","sourcesContent":["var pushdata = require('@psf/pushdata-bitcoin')\nvar varuint = require('varuint-bitcoin')\n\n// https://github.com/feross/buffer/blob/master/index.js#L1127\nfunction verifuint (value, max) {\n  if (typeof value !== 'number') throw new Error('cannot write a non-number as a number')\n  if (value < 0) throw new Error('specified a negative value for writing an unsigned value')\n  if (value > max) throw new Error('RangeError: value out of range')\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component')\n}\n\nfunction readUInt64LE (buffer, offset) {\n  var a = buffer.readUInt32LE(offset)\n  var b = buffer.readUInt32LE(offset + 4)\n  b *= 0x100000000\n\n  verifuint(b + a, 0x001fffffffffffff)\n\n  return b + a\n}\n\nfunction writeUInt64LE (buffer, value, offset) {\n  verifuint(value, 0x001fffffffffffff)\n\n  buffer.writeInt32LE(value & -1, offset)\n  buffer.writeUInt32LE(Math.floor(value / 0x100000000), offset + 4)\n  return offset + 8\n}\n\n// TODO: remove in 4.0.0?\nfunction readVarInt (buffer, offset) {\n  var result = varuint.decode(buffer, offset)\n\n  return {\n    number: result,\n    size: varuint.decode.bytes\n  }\n}\n\n// TODO: remove in 4.0.0?\nfunction writeVarInt (buffer, number, offset) {\n  varuint.encode(number, buffer, offset)\n  return varuint.encode.bytes\n}\n\nmodule.exports = {\n  pushDataSize: pushdata.encodingLength,\n  readPushDataInt: pushdata.decode,\n  readUInt64LE: readUInt64LE,\n  readVarInt: readVarInt,\n  varIntBuffer: varuint.encode,\n  varIntSize: varuint.encodingLength,\n  writePushDataInt: pushdata.encode,\n  writeUInt64LE: writeUInt64LE,\n  writeVarInt: writeVarInt\n}\n"]},"metadata":{},"sourceType":"script"}